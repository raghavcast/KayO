
ili9341 stm32f407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088c0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e94  08008a50  08008a50  00018a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080098e4  080098e4  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  080098e4  080098e4  000198e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080098ec  080098ec  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080098ec  080098ec  000198ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080098f0  080098f0  000198f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080098f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          0000149c  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000152c  2000152c  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001323c  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002db7  00000000  00000000  000332fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001228  00000000  00000000  000360b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001098  00000000  00000000  000372e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000236e3  00000000  00000000  00038378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000176a2  00000000  00000000  0005ba5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0f38  00000000  00000000  000730fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00144035  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004f1c  00000000  00000000  00144088  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008a38 	.word	0x08008a38

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08008a38 	.word	0x08008a38

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <SELECT>:
#define FALSE 0
#define bool BYTE

/* SPI Chip Select */
static void SELECT(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000578:	2200      	movs	r2, #0
 800057a:	2102      	movs	r1, #2
 800057c:	4802      	ldr	r0, [pc, #8]	; (8000588 <SELECT+0x14>)
 800057e:	f002 fb87 	bl	8002c90 <HAL_GPIO_WritePin>
}
 8000582:	bf00      	nop
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	40020800 	.word	0x40020800

0800058c <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000590:	2201      	movs	r2, #1
 8000592:	2102      	movs	r1, #2
 8000594:	4802      	ldr	r0, [pc, #8]	; (80005a0 <DESELECT+0x14>)
 8000596:	f002 fb7b 	bl	8002c90 <HAL_GPIO_WritePin>
}
 800059a:	bf00      	nop
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	40020800 	.word	0x40020800

080005a4 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	4603      	mov	r3, r0
 80005ac:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 80005ae:	bf00      	nop
 80005b0:	4808      	ldr	r0, [pc, #32]	; (80005d4 <SPI_TxByte+0x30>)
 80005b2:	f003 fb52 	bl	8003c5a <HAL_SPI_GetState>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d1f9      	bne.n	80005b0 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi2, &data, 1, SPI_TIMEOUT);
 80005bc:	1df9      	adds	r1, r7, #7
 80005be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005c2:	2201      	movs	r2, #1
 80005c4:	4803      	ldr	r0, [pc, #12]	; (80005d4 <SPI_TxByte+0x30>)
 80005c6:	f003 f86a 	bl	800369e <HAL_SPI_Transmit>
}
 80005ca:	bf00      	nop
 80005cc:	3708      	adds	r7, #8
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	20000148 	.word	0x20000148

080005d8 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 80005de:	23ff      	movs	r3, #255	; 0xff
 80005e0:	71fb      	strb	r3, [r7, #7]
  data = 0;
 80005e2:	2300      	movs	r3, #0
 80005e4:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY));
 80005e6:	bf00      	nop
 80005e8:	4809      	ldr	r0, [pc, #36]	; (8000610 <SPI_RxByte+0x38>)
 80005ea:	f003 fb36 	bl	8003c5a <HAL_SPI_GetState>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b01      	cmp	r3, #1
 80005f2:	d1f9      	bne.n	80005e8 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi2, &dummy, &data, 1, SPI_TIMEOUT);
 80005f4:	1dba      	adds	r2, r7, #6
 80005f6:	1df9      	adds	r1, r7, #7
 80005f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005fc:	9300      	str	r3, [sp, #0]
 80005fe:	2301      	movs	r3, #1
 8000600:	4803      	ldr	r0, [pc, #12]	; (8000610 <SPI_RxByte+0x38>)
 8000602:	f003 f988 	bl	8003916 <HAL_SPI_TransmitReceive>

  return data;
 8000606:	79bb      	ldrb	r3, [r7, #6]
}
 8000608:	4618      	mov	r0, r3
 800060a:	3708      	adds	r7, #8
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	20000148 	.word	0x20000148

08000614 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 800061c:	f7ff ffdc 	bl	80005d8 <SPI_RxByte>
 8000620:	4603      	mov	r3, r0
 8000622:	461a      	mov	r2, r3
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	701a      	strb	r2, [r3, #0]
}
 8000628:	bf00      	nop
 800062a:	3708      	adds	r7, #8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}

08000630 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 8000636:	4b0b      	ldr	r3, [pc, #44]	; (8000664 <SD_ReadyWait+0x34>)
 8000638:	2232      	movs	r2, #50	; 0x32
 800063a:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 800063c:	f7ff ffcc 	bl	80005d8 <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8000640:	f7ff ffca 	bl	80005d8 <SPI_RxByte>
 8000644:	4603      	mov	r3, r0
 8000646:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8000648:	79fb      	ldrb	r3, [r7, #7]
 800064a:	2bff      	cmp	r3, #255	; 0xff
 800064c:	d004      	beq.n	8000658 <SD_ReadyWait+0x28>
 800064e:	4b05      	ldr	r3, [pc, #20]	; (8000664 <SD_ReadyWait+0x34>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	b2db      	uxtb	r3, r3
 8000654:	2b00      	cmp	r3, #0
 8000656:	d1f3      	bne.n	8000640 <SD_ReadyWait+0x10>

  return res;
 8000658:	79fb      	ldrb	r3, [r7, #7]
}
 800065a:	4618      	mov	r0, r3
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	20001276 	.word	0x20001276

08000668 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b086      	sub	sp, #24
 800066c:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 800066e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000672:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 8000674:	f7ff ff8a 	bl	800058c <DESELECT>

  for(int i = 0; i < 10; i++)
 8000678:	2300      	movs	r3, #0
 800067a:	613b      	str	r3, [r7, #16]
 800067c:	e005      	b.n	800068a <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 800067e:	20ff      	movs	r0, #255	; 0xff
 8000680:	f7ff ff90 	bl	80005a4 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8000684:	693b      	ldr	r3, [r7, #16]
 8000686:	3301      	adds	r3, #1
 8000688:	613b      	str	r3, [r7, #16]
 800068a:	693b      	ldr	r3, [r7, #16]
 800068c:	2b09      	cmp	r3, #9
 800068e:	ddf6      	ble.n	800067e <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 8000690:	f7ff ff70 	bl	8000574 <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8000694:	2340      	movs	r3, #64	; 0x40
 8000696:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8000698:	2300      	movs	r3, #0
 800069a:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 80006a0:	2300      	movs	r3, #0
 80006a2:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 80006a4:	2300      	movs	r3, #0
 80006a6:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 80006a8:	2395      	movs	r3, #149	; 0x95
 80006aa:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 80006ac:	2300      	movs	r3, #0
 80006ae:	60fb      	str	r3, [r7, #12]
 80006b0:	e009      	b.n	80006c6 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 80006b2:	1d3a      	adds	r2, r7, #4
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	4413      	add	r3, r2
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff ff72 	bl	80005a4 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	3301      	adds	r3, #1
 80006c4:	60fb      	str	r3, [r7, #12]
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	2b05      	cmp	r3, #5
 80006ca:	ddf2      	ble.n	80006b2 <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 80006cc:	e002      	b.n	80006d4 <SD_PowerOn+0x6c>
  {
    Count--;
 80006ce:	697b      	ldr	r3, [r7, #20]
 80006d0:	3b01      	subs	r3, #1
 80006d2:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 80006d4:	f7ff ff80 	bl	80005d8 <SPI_RxByte>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b01      	cmp	r3, #1
 80006dc:	d002      	beq.n	80006e4 <SD_PowerOn+0x7c>
 80006de:	697b      	ldr	r3, [r7, #20]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d1f4      	bne.n	80006ce <SD_PowerOn+0x66>
  }

  DESELECT();
 80006e4:	f7ff ff52 	bl	800058c <DESELECT>
  SPI_TxByte(0XFF);
 80006e8:	20ff      	movs	r0, #255	; 0xff
 80006ea:	f7ff ff5b 	bl	80005a4 <SPI_TxByte>

  PowerFlag = 1;
 80006ee:	4b03      	ldr	r3, [pc, #12]	; (80006fc <SD_PowerOn+0x94>)
 80006f0:	2201      	movs	r2, #1
 80006f2:	701a      	strb	r2, [r3, #0]
}
 80006f4:	bf00      	nop
 80006f6:	3718      	adds	r7, #24
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	200000ad 	.word	0x200000ad

08000700 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8000704:	4b03      	ldr	r3, [pc, #12]	; (8000714 <SD_PowerOff+0x14>)
 8000706:	2200      	movs	r2, #0
 8000708:	701a      	strb	r2, [r3, #0]
}
 800070a:	bf00      	nop
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr
 8000714:	200000ad 	.word	0x200000ad

08000718 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 800071c:	4b03      	ldr	r3, [pc, #12]	; (800072c <SD_CheckPower+0x14>)
 800071e:	781b      	ldrb	r3, [r3, #0]
}
 8000720:	4618      	mov	r0, r3
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	200000ad 	.word	0x200000ad

08000730 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
 8000738:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <SD_RxDataBlock+0x68>)
 800073c:	220a      	movs	r2, #10
 800073e:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 8000740:	f7ff ff4a 	bl	80005d8 <SPI_RxByte>
 8000744:	4603      	mov	r3, r0
 8000746:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8000748:	7bfb      	ldrb	r3, [r7, #15]
 800074a:	2bff      	cmp	r3, #255	; 0xff
 800074c:	d104      	bne.n	8000758 <SD_RxDataBlock+0x28>
 800074e:	4b12      	ldr	r3, [pc, #72]	; (8000798 <SD_RxDataBlock+0x68>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	b2db      	uxtb	r3, r3
 8000754:	2b00      	cmp	r3, #0
 8000756:	d1f3      	bne.n	8000740 <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8000758:	7bfb      	ldrb	r3, [r7, #15]
 800075a:	2bfe      	cmp	r3, #254	; 0xfe
 800075c:	d001      	beq.n	8000762 <SD_RxDataBlock+0x32>
    return FALSE;
 800075e:	2300      	movs	r3, #0
 8000760:	e016      	b.n	8000790 <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	1c5a      	adds	r2, r3, #1
 8000766:	607a      	str	r2, [r7, #4]
 8000768:	4618      	mov	r0, r3
 800076a:	f7ff ff53 	bl	8000614 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	1c5a      	adds	r2, r3, #1
 8000772:	607a      	str	r2, [r7, #4]
 8000774:	4618      	mov	r0, r3
 8000776:	f7ff ff4d 	bl	8000614 <SPI_RxBytePtr>
  } while(btr -= 2);
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	3b02      	subs	r3, #2
 800077e:	603b      	str	r3, [r7, #0]
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d1ed      	bne.n	8000762 <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 8000786:	f7ff ff27 	bl	80005d8 <SPI_RxByte>
  SPI_RxByte();
 800078a:	f7ff ff25 	bl	80005d8 <SPI_RxByte>

  return TRUE;
 800078e:	2301      	movs	r3, #1
}
 8000790:	4618      	mov	r0, r3
 8000792:	3710      	adds	r7, #16
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20001275 	.word	0x20001275

0800079c <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b084      	sub	sp, #16
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
 80007a4:	460b      	mov	r3, r1
 80007a6:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 80007a8:	2300      	movs	r3, #0
 80007aa:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 80007ac:	f7ff ff40 	bl	8000630 <SD_ReadyWait>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2bff      	cmp	r3, #255	; 0xff
 80007b4:	d001      	beq.n	80007ba <SD_TxDataBlock+0x1e>
    return FALSE;
 80007b6:	2300      	movs	r3, #0
 80007b8:	e040      	b.n	800083c <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 80007ba:	78fb      	ldrb	r3, [r7, #3]
 80007bc:	4618      	mov	r0, r3
 80007be:	f7ff fef1 	bl	80005a4 <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 80007c2:	78fb      	ldrb	r3, [r7, #3]
 80007c4:	2bfd      	cmp	r3, #253	; 0xfd
 80007c6:	d031      	beq.n	800082c <SD_TxDataBlock+0x90>
  {
    wc = 0;
 80007c8:	2300      	movs	r3, #0
 80007ca:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	1c5a      	adds	r2, r3, #1
 80007d0:	607a      	str	r2, [r7, #4]
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	4618      	mov	r0, r3
 80007d6:	f7ff fee5 	bl	80005a4 <SPI_TxByte>
      SPI_TxByte(*buff++);
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	1c5a      	adds	r2, r3, #1
 80007de:	607a      	str	r2, [r7, #4]
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	4618      	mov	r0, r3
 80007e4:	f7ff fede 	bl	80005a4 <SPI_TxByte>
    } while (--wc);
 80007e8:	7bbb      	ldrb	r3, [r7, #14]
 80007ea:	3b01      	subs	r3, #1
 80007ec:	73bb      	strb	r3, [r7, #14]
 80007ee:	7bbb      	ldrb	r3, [r7, #14]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d1eb      	bne.n	80007cc <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 80007f4:	f7ff fef0 	bl	80005d8 <SPI_RxByte>
    SPI_RxByte();
 80007f8:	f7ff feee 	bl	80005d8 <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 80007fc:	e00b      	b.n	8000816 <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 80007fe:	f7ff feeb 	bl	80005d8 <SPI_RxByte>
 8000802:	4603      	mov	r3, r0
 8000804:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 8000806:	7bfb      	ldrb	r3, [r7, #15]
 8000808:	f003 031f 	and.w	r3, r3, #31
 800080c:	2b05      	cmp	r3, #5
 800080e:	d006      	beq.n	800081e <SD_TxDataBlock+0x82>
        break;

      i++;
 8000810:	7b7b      	ldrb	r3, [r7, #13]
 8000812:	3301      	adds	r3, #1
 8000814:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 8000816:	7b7b      	ldrb	r3, [r7, #13]
 8000818:	2b40      	cmp	r3, #64	; 0x40
 800081a:	d9f0      	bls.n	80007fe <SD_TxDataBlock+0x62>
 800081c:	e000      	b.n	8000820 <SD_TxDataBlock+0x84>
        break;
 800081e:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8000820:	bf00      	nop
 8000822:	f7ff fed9 	bl	80005d8 <SPI_RxByte>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d0fa      	beq.n	8000822 <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 800082c:	7bfb      	ldrb	r3, [r7, #15]
 800082e:	f003 031f 	and.w	r3, r3, #31
 8000832:	2b05      	cmp	r3, #5
 8000834:	d101      	bne.n	800083a <SD_TxDataBlock+0x9e>
    return TRUE;
 8000836:	2301      	movs	r3, #1
 8000838:	e000      	b.n	800083c <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 800083a:	2300      	movs	r3, #0
}
 800083c:	4618      	mov	r0, r3
 800083e:	3710      	adds	r7, #16
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}

08000844 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	6039      	str	r1, [r7, #0]
 800084e:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000850:	f7ff feee 	bl	8000630 <SD_ReadyWait>
 8000854:	4603      	mov	r3, r0
 8000856:	2bff      	cmp	r3, #255	; 0xff
 8000858:	d001      	beq.n	800085e <SD_SendCmd+0x1a>
    return 0xFF;
 800085a:	23ff      	movs	r3, #255	; 0xff
 800085c:	e040      	b.n	80008e0 <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 800085e:	79fb      	ldrb	r3, [r7, #7]
 8000860:	4618      	mov	r0, r3
 8000862:	f7ff fe9f 	bl	80005a4 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	0e1b      	lsrs	r3, r3, #24
 800086a:	b2db      	uxtb	r3, r3
 800086c:	4618      	mov	r0, r3
 800086e:	f7ff fe99 	bl	80005a4 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	0c1b      	lsrs	r3, r3, #16
 8000876:	b2db      	uxtb	r3, r3
 8000878:	4618      	mov	r0, r3
 800087a:	f7ff fe93 	bl	80005a4 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	0a1b      	lsrs	r3, r3, #8
 8000882:	b2db      	uxtb	r3, r3
 8000884:	4618      	mov	r0, r3
 8000886:	f7ff fe8d 	bl	80005a4 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	b2db      	uxtb	r3, r3
 800088e:	4618      	mov	r0, r3
 8000890:	f7ff fe88 	bl	80005a4 <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 8000894:	2300      	movs	r3, #0
 8000896:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8000898:	79fb      	ldrb	r3, [r7, #7]
 800089a:	2b40      	cmp	r3, #64	; 0x40
 800089c:	d101      	bne.n	80008a2 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 800089e:	2395      	movs	r3, #149	; 0x95
 80008a0:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 80008a2:	79fb      	ldrb	r3, [r7, #7]
 80008a4:	2b48      	cmp	r3, #72	; 0x48
 80008a6:	d101      	bne.n	80008ac <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 80008a8:	2387      	movs	r3, #135	; 0x87
 80008aa:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 80008ac:	7bfb      	ldrb	r3, [r7, #15]
 80008ae:	4618      	mov	r0, r3
 80008b0:	f7ff fe78 	bl	80005a4 <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 80008b4:	79fb      	ldrb	r3, [r7, #7]
 80008b6:	2b4c      	cmp	r3, #76	; 0x4c
 80008b8:	d101      	bne.n	80008be <SD_SendCmd+0x7a>
    SPI_RxByte();
 80008ba:	f7ff fe8d 	bl	80005d8 <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 80008be:	230a      	movs	r3, #10
 80008c0:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 80008c2:	f7ff fe89 	bl	80005d8 <SPI_RxByte>
 80008c6:	4603      	mov	r3, r0
 80008c8:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 80008ca:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	da05      	bge.n	80008de <SD_SendCmd+0x9a>
 80008d2:	7bbb      	ldrb	r3, [r7, #14]
 80008d4:	3b01      	subs	r3, #1
 80008d6:	73bb      	strb	r3, [r7, #14]
 80008d8:	7bbb      	ldrb	r3, [r7, #14]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d1f1      	bne.n	80008c2 <SD_SendCmd+0x7e>

  return res;
 80008de:	7b7b      	ldrb	r3, [r7, #13]
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	3710      	adds	r7, #16
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 80008e8:	b590      	push	{r4, r7, lr}
 80008ea:	b085      	sub	sp, #20
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 80008f2:	79fb      	ldrb	r3, [r7, #7]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <SD_disk_initialize+0x14>
    return STA_NOINIT;
 80008f8:	2301      	movs	r3, #1
 80008fa:	e0d5      	b.n	8000aa8 <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 80008fc:	4b6c      	ldr	r3, [pc, #432]	; (8000ab0 <SD_disk_initialize+0x1c8>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	b2db      	uxtb	r3, r3
 8000902:	f003 0302 	and.w	r3, r3, #2
 8000906:	2b00      	cmp	r3, #0
 8000908:	d003      	beq.n	8000912 <SD_disk_initialize+0x2a>
    return Stat;
 800090a:	4b69      	ldr	r3, [pc, #420]	; (8000ab0 <SD_disk_initialize+0x1c8>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	b2db      	uxtb	r3, r3
 8000910:	e0ca      	b.n	8000aa8 <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 8000912:	f7ff fea9 	bl	8000668 <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 8000916:	f7ff fe2d 	bl	8000574 <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 800091a:	2300      	movs	r3, #0
 800091c:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 800091e:	2100      	movs	r1, #0
 8000920:	2040      	movs	r0, #64	; 0x40
 8000922:	f7ff ff8f 	bl	8000844 <SD_SendCmd>
 8000926:	4603      	mov	r3, r0
 8000928:	2b01      	cmp	r3, #1
 800092a:	f040 80a5 	bne.w	8000a78 <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 800092e:	4b61      	ldr	r3, [pc, #388]	; (8000ab4 <SD_disk_initialize+0x1cc>)
 8000930:	2264      	movs	r2, #100	; 0x64
 8000932:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000934:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000938:	2048      	movs	r0, #72	; 0x48
 800093a:	f7ff ff83 	bl	8000844 <SD_SendCmd>
 800093e:	4603      	mov	r3, r0
 8000940:	2b01      	cmp	r3, #1
 8000942:	d158      	bne.n	80009f6 <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8000944:	2300      	movs	r3, #0
 8000946:	73fb      	strb	r3, [r7, #15]
 8000948:	e00c      	b.n	8000964 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 800094a:	7bfc      	ldrb	r4, [r7, #15]
 800094c:	f7ff fe44 	bl	80005d8 <SPI_RxByte>
 8000950:	4603      	mov	r3, r0
 8000952:	461a      	mov	r2, r3
 8000954:	f104 0310 	add.w	r3, r4, #16
 8000958:	443b      	add	r3, r7
 800095a:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 800095e:	7bfb      	ldrb	r3, [r7, #15]
 8000960:	3301      	adds	r3, #1
 8000962:	73fb      	strb	r3, [r7, #15]
 8000964:	7bfb      	ldrb	r3, [r7, #15]
 8000966:	2b03      	cmp	r3, #3
 8000968:	d9ef      	bls.n	800094a <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800096a:	7abb      	ldrb	r3, [r7, #10]
 800096c:	2b01      	cmp	r3, #1
 800096e:	f040 8083 	bne.w	8000a78 <SD_disk_initialize+0x190>
 8000972:	7afb      	ldrb	r3, [r7, #11]
 8000974:	2baa      	cmp	r3, #170	; 0xaa
 8000976:	d17f      	bne.n	8000a78 <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8000978:	2100      	movs	r1, #0
 800097a:	2077      	movs	r0, #119	; 0x77
 800097c:	f7ff ff62 	bl	8000844 <SD_SendCmd>
 8000980:	4603      	mov	r3, r0
 8000982:	2b01      	cmp	r3, #1
 8000984:	d807      	bhi.n	8000996 <SD_disk_initialize+0xae>
 8000986:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800098a:	2069      	movs	r0, #105	; 0x69
 800098c:	f7ff ff5a 	bl	8000844 <SD_SendCmd>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d005      	beq.n	80009a2 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8000996:	4b47      	ldr	r3, [pc, #284]	; (8000ab4 <SD_disk_initialize+0x1cc>)
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	b2db      	uxtb	r3, r3
 800099c:	2b00      	cmp	r3, #0
 800099e:	d1eb      	bne.n	8000978 <SD_disk_initialize+0x90>
 80009a0:	e000      	b.n	80009a4 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 80009a2:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80009a4:	4b43      	ldr	r3, [pc, #268]	; (8000ab4 <SD_disk_initialize+0x1cc>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d064      	beq.n	8000a78 <SD_disk_initialize+0x190>
 80009ae:	2100      	movs	r1, #0
 80009b0:	207a      	movs	r0, #122	; 0x7a
 80009b2:	f7ff ff47 	bl	8000844 <SD_SendCmd>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d15d      	bne.n	8000a78 <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 80009bc:	2300      	movs	r3, #0
 80009be:	73fb      	strb	r3, [r7, #15]
 80009c0:	e00c      	b.n	80009dc <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 80009c2:	7bfc      	ldrb	r4, [r7, #15]
 80009c4:	f7ff fe08 	bl	80005d8 <SPI_RxByte>
 80009c8:	4603      	mov	r3, r0
 80009ca:	461a      	mov	r2, r3
 80009cc:	f104 0310 	add.w	r3, r4, #16
 80009d0:	443b      	add	r3, r7
 80009d2:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 80009d6:	7bfb      	ldrb	r3, [r7, #15]
 80009d8:	3301      	adds	r3, #1
 80009da:	73fb      	strb	r3, [r7, #15]
 80009dc:	7bfb      	ldrb	r3, [r7, #15]
 80009de:	2b03      	cmp	r3, #3
 80009e0:	d9ef      	bls.n	80009c2 <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 80009e2:	7a3b      	ldrb	r3, [r7, #8]
 80009e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <SD_disk_initialize+0x108>
 80009ec:	2306      	movs	r3, #6
 80009ee:	e000      	b.n	80009f2 <SD_disk_initialize+0x10a>
 80009f0:	2302      	movs	r3, #2
 80009f2:	73bb      	strb	r3, [r7, #14]
 80009f4:	e040      	b.n	8000a78 <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 80009f6:	2100      	movs	r1, #0
 80009f8:	2077      	movs	r0, #119	; 0x77
 80009fa:	f7ff ff23 	bl	8000844 <SD_SendCmd>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b01      	cmp	r3, #1
 8000a02:	d808      	bhi.n	8000a16 <SD_disk_initialize+0x12e>
 8000a04:	2100      	movs	r1, #0
 8000a06:	2069      	movs	r0, #105	; 0x69
 8000a08:	f7ff ff1c 	bl	8000844 <SD_SendCmd>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b01      	cmp	r3, #1
 8000a10:	d801      	bhi.n	8000a16 <SD_disk_initialize+0x12e>
 8000a12:	2302      	movs	r3, #2
 8000a14:	e000      	b.n	8000a18 <SD_disk_initialize+0x130>
 8000a16:	2301      	movs	r3, #1
 8000a18:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 8000a1a:	7bbb      	ldrb	r3, [r7, #14]
 8000a1c:	2b02      	cmp	r3, #2
 8000a1e:	d10e      	bne.n	8000a3e <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8000a20:	2100      	movs	r1, #0
 8000a22:	2077      	movs	r0, #119	; 0x77
 8000a24:	f7ff ff0e 	bl	8000844 <SD_SendCmd>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b01      	cmp	r3, #1
 8000a2c:	d80e      	bhi.n	8000a4c <SD_disk_initialize+0x164>
 8000a2e:	2100      	movs	r1, #0
 8000a30:	2069      	movs	r0, #105	; 0x69
 8000a32:	f7ff ff07 	bl	8000844 <SD_SendCmd>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d107      	bne.n	8000a4c <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8000a3c:	e00d      	b.n	8000a5a <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8000a3e:	2100      	movs	r1, #0
 8000a40:	2041      	movs	r0, #65	; 0x41
 8000a42:	f7ff feff 	bl	8000844 <SD_SendCmd>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d005      	beq.n	8000a58 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8000a4c:	4b19      	ldr	r3, [pc, #100]	; (8000ab4 <SD_disk_initialize+0x1cc>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d1e1      	bne.n	8000a1a <SD_disk_initialize+0x132>
 8000a56:	e000      	b.n	8000a5a <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8000a58:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 8000a5a:	4b16      	ldr	r3, [pc, #88]	; (8000ab4 <SD_disk_initialize+0x1cc>)
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d007      	beq.n	8000a74 <SD_disk_initialize+0x18c>
 8000a64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a68:	2050      	movs	r0, #80	; 0x50
 8000a6a:	f7ff feeb 	bl	8000844 <SD_SendCmd>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8000a74:	2300      	movs	r3, #0
 8000a76:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 8000a78:	4a0f      	ldr	r2, [pc, #60]	; (8000ab8 <SD_disk_initialize+0x1d0>)
 8000a7a:	7bbb      	ldrb	r3, [r7, #14]
 8000a7c:	7013      	strb	r3, [r2, #0]

  DESELECT();
 8000a7e:	f7ff fd85 	bl	800058c <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8000a82:	f7ff fda9 	bl	80005d8 <SPI_RxByte>

  if (type)
 8000a86:	7bbb      	ldrb	r3, [r7, #14]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d008      	beq.n	8000a9e <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 8000a8c:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <SD_disk_initialize+0x1c8>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	f023 0301 	bic.w	r3, r3, #1
 8000a96:	b2da      	uxtb	r2, r3
 8000a98:	4b05      	ldr	r3, [pc, #20]	; (8000ab0 <SD_disk_initialize+0x1c8>)
 8000a9a:	701a      	strb	r2, [r3, #0]
 8000a9c:	e001      	b.n	8000aa2 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8000a9e:	f7ff fe2f 	bl	8000700 <SD_PowerOff>
  }

  return Stat;
 8000aa2:	4b03      	ldr	r3, [pc, #12]	; (8000ab0 <SD_disk_initialize+0x1c8>)
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	b2db      	uxtb	r3, r3
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	3714      	adds	r7, #20
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd90      	pop	{r4, r7, pc}
 8000ab0:	20000000 	.word	0x20000000
 8000ab4:	20001275 	.word	0x20001275
 8000ab8:	200000ac 	.word	0x200000ac

08000abc <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <SD_disk_status+0x14>
    return STA_NOINIT;
 8000acc:	2301      	movs	r3, #1
 8000ace:	e002      	b.n	8000ad6 <SD_disk_status+0x1a>

  return Stat;
 8000ad0:	4b04      	ldr	r3, [pc, #16]	; (8000ae4 <SD_disk_status+0x28>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	b2db      	uxtb	r3, r3
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	370c      	adds	r7, #12
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	20000000 	.word	0x20000000

08000ae8 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60b9      	str	r1, [r7, #8]
 8000af0:	607a      	str	r2, [r7, #4]
 8000af2:	603b      	str	r3, [r7, #0]
 8000af4:	4603      	mov	r3, r0
 8000af6:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8000af8:	7bfb      	ldrb	r3, [r7, #15]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d102      	bne.n	8000b04 <SD_disk_read+0x1c>
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d101      	bne.n	8000b08 <SD_disk_read+0x20>
    return RES_PARERR;
 8000b04:	2304      	movs	r3, #4
 8000b06:	e051      	b.n	8000bac <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8000b08:	4b2a      	ldr	r3, [pc, #168]	; (8000bb4 <SD_disk_read+0xcc>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	f003 0301 	and.w	r3, r3, #1
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <SD_disk_read+0x32>
    return RES_NOTRDY;
 8000b16:	2303      	movs	r3, #3
 8000b18:	e048      	b.n	8000bac <SD_disk_read+0xc4>

  if (!(CardType & 4))
 8000b1a:	4b27      	ldr	r3, [pc, #156]	; (8000bb8 <SD_disk_read+0xd0>)
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	f003 0304 	and.w	r3, r3, #4
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d102      	bne.n	8000b2c <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	025b      	lsls	r3, r3, #9
 8000b2a:	607b      	str	r3, [r7, #4]

  SELECT();
 8000b2c:	f7ff fd22 	bl	8000574 <SELECT>

  if (count == 1)
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	2b01      	cmp	r3, #1
 8000b34:	d111      	bne.n	8000b5a <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8000b36:	6879      	ldr	r1, [r7, #4]
 8000b38:	2051      	movs	r0, #81	; 0x51
 8000b3a:	f7ff fe83 	bl	8000844 <SD_SendCmd>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d129      	bne.n	8000b98 <SD_disk_read+0xb0>
 8000b44:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b48:	68b8      	ldr	r0, [r7, #8]
 8000b4a:	f7ff fdf1 	bl	8000730 <SD_RxDataBlock>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d021      	beq.n	8000b98 <SD_disk_read+0xb0>
      count = 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	603b      	str	r3, [r7, #0]
 8000b58:	e01e      	b.n	8000b98 <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 8000b5a:	6879      	ldr	r1, [r7, #4]
 8000b5c:	2052      	movs	r0, #82	; 0x52
 8000b5e:	f7ff fe71 	bl	8000844 <SD_SendCmd>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d117      	bne.n	8000b98 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8000b68:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b6c:	68b8      	ldr	r0, [r7, #8]
 8000b6e:	f7ff fddf 	bl	8000730 <SD_RxDataBlock>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d00a      	beq.n	8000b8e <SD_disk_read+0xa6>
          break;

        buff += 512;
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000b7e:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	3b01      	subs	r3, #1
 8000b84:	603b      	str	r3, [r7, #0]
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d1ed      	bne.n	8000b68 <SD_disk_read+0x80>
 8000b8c:	e000      	b.n	8000b90 <SD_disk_read+0xa8>
          break;
 8000b8e:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 8000b90:	2100      	movs	r1, #0
 8000b92:	204c      	movs	r0, #76	; 0x4c
 8000b94:	f7ff fe56 	bl	8000844 <SD_SendCmd>
    }
  }

  DESELECT();
 8000b98:	f7ff fcf8 	bl	800058c <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8000b9c:	f7ff fd1c 	bl	80005d8 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	bf14      	ite	ne
 8000ba6:	2301      	movne	r3, #1
 8000ba8:	2300      	moveq	r3, #0
 8000baa:	b2db      	uxtb	r3, r3
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	3710      	adds	r7, #16
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	20000000 	.word	0x20000000
 8000bb8:	200000ac 	.word	0x200000ac

08000bbc <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	60b9      	str	r1, [r7, #8]
 8000bc4:	607a      	str	r2, [r7, #4]
 8000bc6:	603b      	str	r3, [r7, #0]
 8000bc8:	4603      	mov	r3, r0
 8000bca:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8000bcc:	7bfb      	ldrb	r3, [r7, #15]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d102      	bne.n	8000bd8 <SD_disk_write+0x1c>
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d101      	bne.n	8000bdc <SD_disk_write+0x20>
    return RES_PARERR;
 8000bd8:	2304      	movs	r3, #4
 8000bda:	e06b      	b.n	8000cb4 <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 8000bdc:	4b37      	ldr	r3, [pc, #220]	; (8000cbc <SD_disk_write+0x100>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <SD_disk_write+0x32>
    return RES_NOTRDY;
 8000bea:	2303      	movs	r3, #3
 8000bec:	e062      	b.n	8000cb4 <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 8000bee:	4b33      	ldr	r3, [pc, #204]	; (8000cbc <SD_disk_write+0x100>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	f003 0304 	and.w	r3, r3, #4
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <SD_disk_write+0x44>
    return RES_WRPRT;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	e059      	b.n	8000cb4 <SD_disk_write+0xf8>

  if (!(CardType & 4))
 8000c00:	4b2f      	ldr	r3, [pc, #188]	; (8000cc0 <SD_disk_write+0x104>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	f003 0304 	and.w	r3, r3, #4
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d102      	bne.n	8000c12 <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	025b      	lsls	r3, r3, #9
 8000c10:	607b      	str	r3, [r7, #4]

  SELECT();
 8000c12:	f7ff fcaf 	bl	8000574 <SELECT>

  if (count == 1)
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d110      	bne.n	8000c3e <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000c1c:	6879      	ldr	r1, [r7, #4]
 8000c1e:	2058      	movs	r0, #88	; 0x58
 8000c20:	f7ff fe10 	bl	8000844 <SD_SendCmd>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d13a      	bne.n	8000ca0 <SD_disk_write+0xe4>
 8000c2a:	21fe      	movs	r1, #254	; 0xfe
 8000c2c:	68b8      	ldr	r0, [r7, #8]
 8000c2e:	f7ff fdb5 	bl	800079c <SD_TxDataBlock>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d033      	beq.n	8000ca0 <SD_disk_write+0xe4>
      count = 0;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	603b      	str	r3, [r7, #0]
 8000c3c:	e030      	b.n	8000ca0 <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 8000c3e:	4b20      	ldr	r3, [pc, #128]	; (8000cc0 <SD_disk_write+0x104>)
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	f003 0302 	and.w	r3, r3, #2
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d007      	beq.n	8000c5a <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	2077      	movs	r0, #119	; 0x77
 8000c4e:	f7ff fdf9 	bl	8000844 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8000c52:	6839      	ldr	r1, [r7, #0]
 8000c54:	2057      	movs	r0, #87	; 0x57
 8000c56:	f7ff fdf5 	bl	8000844 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8000c5a:	6879      	ldr	r1, [r7, #4]
 8000c5c:	2059      	movs	r0, #89	; 0x59
 8000c5e:	f7ff fdf1 	bl	8000844 <SD_SendCmd>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d11b      	bne.n	8000ca0 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8000c68:	21fc      	movs	r1, #252	; 0xfc
 8000c6a:	68b8      	ldr	r0, [r7, #8]
 8000c6c:	f7ff fd96 	bl	800079c <SD_TxDataBlock>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d00a      	beq.n	8000c8c <SD_disk_write+0xd0>
          break;

        buff += 512;
 8000c76:	68bb      	ldr	r3, [r7, #8]
 8000c78:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000c7c:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	3b01      	subs	r3, #1
 8000c82:	603b      	str	r3, [r7, #0]
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d1ee      	bne.n	8000c68 <SD_disk_write+0xac>
 8000c8a:	e000      	b.n	8000c8e <SD_disk_write+0xd2>
          break;
 8000c8c:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 8000c8e:	21fd      	movs	r1, #253	; 0xfd
 8000c90:	2000      	movs	r0, #0
 8000c92:	f7ff fd83 	bl	800079c <SD_TxDataBlock>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d101      	bne.n	8000ca0 <SD_disk_write+0xe4>
      {
        count = 1;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 8000ca0:	f7ff fc74 	bl	800058c <DESELECT>
  SPI_RxByte();
 8000ca4:	f7ff fc98 	bl	80005d8 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	bf14      	ite	ne
 8000cae:	2301      	movne	r3, #1
 8000cb0:	2300      	moveq	r3, #0
 8000cb2:	b2db      	uxtb	r3, r3
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3710      	adds	r7, #16
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	20000000 	.word	0x20000000
 8000cc0:	200000ac 	.word	0x200000ac

08000cc4 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8000cc4:	b590      	push	{r4, r7, lr}
 8000cc6:	b08b      	sub	sp, #44	; 0x2c
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	603a      	str	r2, [r7, #0]
 8000cce:	71fb      	strb	r3, [r7, #7]
 8000cd0:	460b      	mov	r3, r1
 8000cd2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8000cde:	2304      	movs	r3, #4
 8000ce0:	e11b      	b.n	8000f1a <SD_disk_ioctl+0x256>

  res = RES_ERROR;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 8000ce8:	79bb      	ldrb	r3, [r7, #6]
 8000cea:	2b05      	cmp	r3, #5
 8000cec:	d129      	bne.n	8000d42 <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 8000cee:	6a3b      	ldr	r3, [r7, #32]
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	2b02      	cmp	r3, #2
 8000cf4:	d017      	beq.n	8000d26 <SD_disk_ioctl+0x62>
 8000cf6:	2b02      	cmp	r3, #2
 8000cf8:	dc1f      	bgt.n	8000d3a <SD_disk_ioctl+0x76>
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d002      	beq.n	8000d04 <SD_disk_ioctl+0x40>
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d00b      	beq.n	8000d1a <SD_disk_ioctl+0x56>
 8000d02:	e01a      	b.n	8000d3a <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8000d04:	f7ff fd08 	bl	8000718 <SD_CheckPower>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8000d0e:	f7ff fcf7 	bl	8000700 <SD_PowerOff>
      res = RES_OK;
 8000d12:	2300      	movs	r3, #0
 8000d14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000d18:	e0fd      	b.n	8000f16 <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 8000d1a:	f7ff fca5 	bl	8000668 <SD_PowerOn>
      res = RES_OK;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000d24:	e0f7      	b.n	8000f16 <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8000d26:	6a3b      	ldr	r3, [r7, #32]
 8000d28:	1c5c      	adds	r4, r3, #1
 8000d2a:	f7ff fcf5 	bl	8000718 <SD_CheckPower>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8000d32:	2300      	movs	r3, #0
 8000d34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000d38:	e0ed      	b.n	8000f16 <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 8000d3a:	2304      	movs	r3, #4
 8000d3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000d40:	e0e9      	b.n	8000f16 <SD_disk_ioctl+0x252>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 8000d42:	4b78      	ldr	r3, [pc, #480]	; (8000f24 <SD_disk_ioctl+0x260>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	f003 0301 	and.w	r3, r3, #1
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8000d50:	2303      	movs	r3, #3
 8000d52:	e0e2      	b.n	8000f1a <SD_disk_ioctl+0x256>

    SELECT();
 8000d54:	f7ff fc0e 	bl	8000574 <SELECT>

    switch (ctrl)
 8000d58:	79bb      	ldrb	r3, [r7, #6]
 8000d5a:	2b0d      	cmp	r3, #13
 8000d5c:	f200 80cc 	bhi.w	8000ef8 <SD_disk_ioctl+0x234>
 8000d60:	a201      	add	r2, pc, #4	; (adr r2, 8000d68 <SD_disk_ioctl+0xa4>)
 8000d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d66:	bf00      	nop
 8000d68:	08000e63 	.word	0x08000e63
 8000d6c:	08000da1 	.word	0x08000da1
 8000d70:	08000e53 	.word	0x08000e53
 8000d74:	08000ef9 	.word	0x08000ef9
 8000d78:	08000ef9 	.word	0x08000ef9
 8000d7c:	08000ef9 	.word	0x08000ef9
 8000d80:	08000ef9 	.word	0x08000ef9
 8000d84:	08000ef9 	.word	0x08000ef9
 8000d88:	08000ef9 	.word	0x08000ef9
 8000d8c:	08000ef9 	.word	0x08000ef9
 8000d90:	08000ef9 	.word	0x08000ef9
 8000d94:	08000e75 	.word	0x08000e75
 8000d98:	08000e99 	.word	0x08000e99
 8000d9c:	08000ebd 	.word	0x08000ebd
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000da0:	2100      	movs	r1, #0
 8000da2:	2049      	movs	r0, #73	; 0x49
 8000da4:	f7ff fd4e 	bl	8000844 <SD_SendCmd>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	f040 80a8 	bne.w	8000f00 <SD_disk_ioctl+0x23c>
 8000db0:	f107 030c 	add.w	r3, r7, #12
 8000db4:	2110      	movs	r1, #16
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff fcba 	bl	8000730 <SD_RxDataBlock>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	f000 809e 	beq.w	8000f00 <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1)
 8000dc4:	7b3b      	ldrb	r3, [r7, #12]
 8000dc6:	099b      	lsrs	r3, r3, #6
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d10e      	bne.n	8000dec <SD_disk_ioctl+0x128>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000dce:	7d7b      	ldrb	r3, [r7, #21]
 8000dd0:	b29a      	uxth	r2, r3
 8000dd2:	7d3b      	ldrb	r3, [r7, #20]
 8000dd4:	b29b      	uxth	r3, r3
 8000dd6:	021b      	lsls	r3, r3, #8
 8000dd8:	b29b      	uxth	r3, r3
 8000dda:	4413      	add	r3, r2
 8000ddc:	b29b      	uxth	r3, r3
 8000dde:	3301      	adds	r3, #1
 8000de0:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8000de2:	8bfb      	ldrh	r3, [r7, #30]
 8000de4:	029a      	lsls	r2, r3, #10
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	e02e      	b.n	8000e4a <SD_disk_ioctl+0x186>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000dec:	7c7b      	ldrb	r3, [r7, #17]
 8000dee:	f003 030f 	and.w	r3, r3, #15
 8000df2:	b2da      	uxtb	r2, r3
 8000df4:	7dbb      	ldrb	r3, [r7, #22]
 8000df6:	09db      	lsrs	r3, r3, #7
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	4413      	add	r3, r2
 8000dfc:	b2da      	uxtb	r2, r3
 8000dfe:	7d7b      	ldrb	r3, [r7, #21]
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	f003 0306 	and.w	r3, r3, #6
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	4413      	add	r3, r2
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	3302      	adds	r3, #2
 8000e10:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000e14:	7d3b      	ldrb	r3, [r7, #20]
 8000e16:	099b      	lsrs	r3, r3, #6
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	b29a      	uxth	r2, r3
 8000e1c:	7cfb      	ldrb	r3, [r7, #19]
 8000e1e:	b29b      	uxth	r3, r3
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	b29b      	uxth	r3, r3
 8000e24:	4413      	add	r3, r2
 8000e26:	b29a      	uxth	r2, r3
 8000e28:	7cbb      	ldrb	r3, [r7, #18]
 8000e2a:	029b      	lsls	r3, r3, #10
 8000e2c:	b29b      	uxth	r3, r3
 8000e2e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	4413      	add	r3, r2
 8000e36:	b29b      	uxth	r3, r3
 8000e38:	3301      	adds	r3, #1
 8000e3a:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8000e3c:	8bfa      	ldrh	r2, [r7, #30]
 8000e3e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e42:	3b09      	subs	r3, #9
 8000e44:	409a      	lsls	r2, r3
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8000e50:	e056      	b.n	8000f00 <SD_disk_ioctl+0x23c>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e58:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000e60:	e055      	b.n	8000f0e <SD_disk_ioctl+0x24a>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8000e62:	f7ff fbe5 	bl	8000630 <SD_ReadyWait>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2bff      	cmp	r3, #255	; 0xff
 8000e6a:	d14b      	bne.n	8000f04 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000e72:	e047      	b.n	8000f04 <SD_disk_ioctl+0x240>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8000e74:	2100      	movs	r1, #0
 8000e76:	2049      	movs	r0, #73	; 0x49
 8000e78:	f7ff fce4 	bl	8000844 <SD_SendCmd>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d142      	bne.n	8000f08 <SD_disk_ioctl+0x244>
 8000e82:	2110      	movs	r1, #16
 8000e84:	6a38      	ldr	r0, [r7, #32]
 8000e86:	f7ff fc53 	bl	8000730 <SD_RxDataBlock>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d03b      	beq.n	8000f08 <SD_disk_ioctl+0x244>
        res = RES_OK;
 8000e90:	2300      	movs	r3, #0
 8000e92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000e96:	e037      	b.n	8000f08 <SD_disk_ioctl+0x244>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8000e98:	2100      	movs	r1, #0
 8000e9a:	204a      	movs	r0, #74	; 0x4a
 8000e9c:	f7ff fcd2 	bl	8000844 <SD_SendCmd>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d132      	bne.n	8000f0c <SD_disk_ioctl+0x248>
 8000ea6:	2110      	movs	r1, #16
 8000ea8:	6a38      	ldr	r0, [r7, #32]
 8000eaa:	f7ff fc41 	bl	8000730 <SD_RxDataBlock>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d02b      	beq.n	8000f0c <SD_disk_ioctl+0x248>
        res = RES_OK;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000eba:	e027      	b.n	8000f0c <SD_disk_ioctl+0x248>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	207a      	movs	r0, #122	; 0x7a
 8000ec0:	f7ff fcc0 	bl	8000844 <SD_SendCmd>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d116      	bne.n	8000ef8 <SD_disk_ioctl+0x234>
      {
        for (n = 0; n < 4; n++)
 8000eca:	2300      	movs	r3, #0
 8000ecc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000ed0:	e00b      	b.n	8000eea <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 8000ed2:	6a3c      	ldr	r4, [r7, #32]
 8000ed4:	1c63      	adds	r3, r4, #1
 8000ed6:	623b      	str	r3, [r7, #32]
 8000ed8:	f7ff fb7e 	bl	80005d8 <SPI_RxByte>
 8000edc:	4603      	mov	r3, r0
 8000ede:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8000ee0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000eea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000eee:	2b03      	cmp	r3, #3
 8000ef0:	d9ef      	bls.n	8000ed2 <SD_disk_ioctl+0x20e>
        }

        res = RES_OK;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 8000ef8:	2304      	movs	r3, #4
 8000efa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000efe:	e006      	b.n	8000f0e <SD_disk_ioctl+0x24a>
      break;
 8000f00:	bf00      	nop
 8000f02:	e004      	b.n	8000f0e <SD_disk_ioctl+0x24a>
      break;
 8000f04:	bf00      	nop
 8000f06:	e002      	b.n	8000f0e <SD_disk_ioctl+0x24a>
      break;
 8000f08:	bf00      	nop
 8000f0a:	e000      	b.n	8000f0e <SD_disk_ioctl+0x24a>
      break;
 8000f0c:	bf00      	nop
    }

    DESELECT();
 8000f0e:	f7ff fb3d 	bl	800058c <DESELECT>
    SPI_RxByte();
 8000f12:	f7ff fb61 	bl	80005d8 <SPI_RxByte>
  }

  return res;
 8000f16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	372c      	adds	r7, #44	; 0x2c
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd90      	pop	{r4, r7, pc}
 8000f22:	bf00      	nop
 8000f24:	20000000 	.word	0x20000000

08000f28 <ILI9341_Reset>:
#include "string.h"
#include "stdio.h"


/* Static functions for fundamental instructions */
static void ILI9341_Reset() {
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_RESET);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	2120      	movs	r1, #32
 8000f30:	4807      	ldr	r0, [pc, #28]	; (8000f50 <ILI9341_Reset+0x28>)
 8000f32:	f001 fead 	bl	8002c90 <HAL_GPIO_WritePin>
    HAL_Delay(15);
 8000f36:	200f      	movs	r0, #15
 8000f38:	f001 fc04 	bl	8002744 <HAL_Delay>
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_SET);
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	2120      	movs	r1, #32
 8000f40:	4803      	ldr	r0, [pc, #12]	; (8000f50 <ILI9341_Reset+0x28>)
 8000f42:	f001 fea5 	bl	8002c90 <HAL_GPIO_WritePin>
    HAL_Delay(15);
 8000f46:	200f      	movs	r0, #15
 8000f48:	f001 fbfc 	bl	8002744 <HAL_Delay>
}
 8000f4c:	bf00      	nop
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	40020400 	.word	0x40020400

08000f54 <ILI9341_WriteCommand>:

static void ILI9341_WriteCommand(uint16_t cmd) {
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	80fb      	strh	r3, [r7, #6]
    ILI9341_WRITE_REG = cmd;
 8000f5e:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000f62:	88fb      	ldrh	r3, [r7, #6]
 8000f64:	8013      	strh	r3, [r2, #0]
}
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
	...

08000f74 <ILI9341_WriteData>:

static void ILI9341_WriteData(uint16_t data) {
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	80fb      	strh	r3, [r7, #6]
    ILI9341_WRITE_DATA = data;
 8000f7e:	4a04      	ldr	r2, [pc, #16]	; (8000f90 <ILI9341_WriteData+0x1c>)
 8000f80:	88fb      	ldrh	r3, [r7, #6]
 8000f82:	8013      	strh	r3, [r2, #0]
}
 8000f84:	bf00      	nop
 8000f86:	370c      	adds	r7, #12
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr
 8000f90:	60100000 	.word	0x60100000

08000f94 <ILI9341_WriteDataMultiple>:

static void ILI9341_WriteDataMultiple(uint16_t * datas, uint32_t dataNums) {
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	6039      	str	r1, [r7, #0]
    while (dataNums--)
 8000f9e:	e005      	b.n	8000fac <ILI9341_WriteDataMultiple+0x18>
    {
        ILI9341_WRITE_DATA = *datas++;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	1c9a      	adds	r2, r3, #2
 8000fa4:	607a      	str	r2, [r7, #4]
 8000fa6:	4a07      	ldr	r2, [pc, #28]	; (8000fc4 <ILI9341_WriteDataMultiple+0x30>)
 8000fa8:	881b      	ldrh	r3, [r3, #0]
 8000faa:	8013      	strh	r3, [r2, #0]
    while (dataNums--)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	1e5a      	subs	r2, r3, #1
 8000fb0:	603a      	str	r2, [r7, #0]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d1f4      	bne.n	8000fa0 <ILI9341_WriteDataMultiple+0xc>
    }
}
 8000fb6:	bf00      	nop
 8000fb8:	bf00      	nop
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	60100000 	.word	0x60100000

08000fc8 <ILI9341_SetAddressWindow>:

void ILI9341_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 8000fc8:	b590      	push	{r4, r7, lr}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4604      	mov	r4, r0
 8000fd0:	4608      	mov	r0, r1
 8000fd2:	4611      	mov	r1, r2
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	4623      	mov	r3, r4
 8000fd8:	80fb      	strh	r3, [r7, #6]
 8000fda:	4603      	mov	r3, r0
 8000fdc:	80bb      	strh	r3, [r7, #4]
 8000fde:	460b      	mov	r3, r1
 8000fe0:	807b      	strh	r3, [r7, #2]
 8000fe2:	4613      	mov	r3, r2
 8000fe4:	803b      	strh	r3, [r7, #0]
    // column address set
    ILI9341_WriteCommand(0x2A); // CASET
 8000fe6:	202a      	movs	r0, #42	; 0x2a
 8000fe8:	f7ff ffb4 	bl	8000f54 <ILI9341_WriteCommand>
    {
        ILI9341_WriteData(x0 >> 8);
 8000fec:	88fb      	ldrh	r3, [r7, #6]
 8000fee:	0a1b      	lsrs	r3, r3, #8
 8000ff0:	b29b      	uxth	r3, r3
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f7ff ffbe 	bl	8000f74 <ILI9341_WriteData>
        ILI9341_WriteData(x0 & 0x00FF);
 8000ff8:	88fb      	ldrh	r3, [r7, #6]
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	b29b      	uxth	r3, r3
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff ffb8 	bl	8000f74 <ILI9341_WriteData>
        ILI9341_WriteData(x1 >> 8);
 8001004:	887b      	ldrh	r3, [r7, #2]
 8001006:	0a1b      	lsrs	r3, r3, #8
 8001008:	b29b      	uxth	r3, r3
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff ffb2 	bl	8000f74 <ILI9341_WriteData>
        ILI9341_WriteData(x1 & 0x00FF);
 8001010:	887b      	ldrh	r3, [r7, #2]
 8001012:	b2db      	uxtb	r3, r3
 8001014:	b29b      	uxth	r3, r3
 8001016:	4618      	mov	r0, r3
 8001018:	f7ff ffac 	bl	8000f74 <ILI9341_WriteData>
    }
    // row address set
    ILI9341_WriteCommand(0x2B); // RASET
 800101c:	202b      	movs	r0, #43	; 0x2b
 800101e:	f7ff ff99 	bl	8000f54 <ILI9341_WriteCommand>
    {
        ILI9341_WriteData(y0 >> 8);
 8001022:	88bb      	ldrh	r3, [r7, #4]
 8001024:	0a1b      	lsrs	r3, r3, #8
 8001026:	b29b      	uxth	r3, r3
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff ffa3 	bl	8000f74 <ILI9341_WriteData>
        ILI9341_WriteData(y0 & 0x00FF);
 800102e:	88bb      	ldrh	r3, [r7, #4]
 8001030:	b2db      	uxtb	r3, r3
 8001032:	b29b      	uxth	r3, r3
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff ff9d 	bl	8000f74 <ILI9341_WriteData>
        ILI9341_WriteData(y1 >> 8);
 800103a:	883b      	ldrh	r3, [r7, #0]
 800103c:	0a1b      	lsrs	r3, r3, #8
 800103e:	b29b      	uxth	r3, r3
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff ff97 	bl	8000f74 <ILI9341_WriteData>
        ILI9341_WriteData(y1 & 0x00FF);
 8001046:	883b      	ldrh	r3, [r7, #0]
 8001048:	b2db      	uxtb	r3, r3
 800104a:	b29b      	uxth	r3, r3
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff ff91 	bl	8000f74 <ILI9341_WriteData>
    }
    // write to RAM
    ILI9341_WriteCommand(0x2C); // RAMWR
 8001052:	202c      	movs	r0, #44	; 0x2c
 8001054:	f7ff ff7e 	bl	8000f54 <ILI9341_WriteCommand>
}
 8001058:	bf00      	nop
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	bd90      	pop	{r4, r7, pc}

08001060 <ILI9341_Init>:

void ILI9341_Init() {
 8001060:	b5b0      	push	{r4, r5, r7, lr}
 8001062:	b0a8      	sub	sp, #160	; 0xa0
 8001064:	af00      	add	r7, sp, #0
    ILI9341_Reset();
 8001066:	f7ff ff5f 	bl	8000f28 <ILI9341_Reset>
    // command list is based on https://github.com/martnak/STM32-ILI9341
    // SOFTWARE RESET
    ILI9341_WriteCommand(0x01);
 800106a:	2001      	movs	r0, #1
 800106c:	f7ff ff72 	bl	8000f54 <ILI9341_WriteCommand>
    HAL_Delay(500);
 8001070:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001074:	f001 fb66 	bl	8002744 <HAL_Delay>
        
    // POWER CONTROL A
    ILI9341_WriteCommand(0xCB);
 8001078:	20cb      	movs	r0, #203	; 0xcb
 800107a:	f7ff ff6b 	bl	8000f54 <ILI9341_WriteCommand>
    {
        uint16_t data[] = { 0x39, 0x2C, 0x00, 0x34, 0x02 };
 800107e:	4a8b      	ldr	r2, [pc, #556]	; (80012ac <ILI9341_Init+0x24c>)
 8001080:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001084:	ca07      	ldmia	r2, {r0, r1, r2}
 8001086:	c303      	stmia	r3!, {r0, r1}
 8001088:	801a      	strh	r2, [r3, #0]
        ILI9341_WriteDataMultiple(data, 5);
 800108a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800108e:	2105      	movs	r1, #5
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff ff7f 	bl	8000f94 <ILI9341_WriteDataMultiple>
    }

    // POWER CONTROL B
    ILI9341_WriteCommand(0xCF);
 8001096:	20cf      	movs	r0, #207	; 0xcf
 8001098:	f7ff ff5c 	bl	8000f54 <ILI9341_WriteCommand>
    {
        uint16_t data[] = { 0x00, 0xC1, 0x30 };
 800109c:	4a84      	ldr	r2, [pc, #528]	; (80012b0 <ILI9341_Init+0x250>)
 800109e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80010a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010a6:	6018      	str	r0, [r3, #0]
 80010a8:	3304      	adds	r3, #4
 80010aa:	8019      	strh	r1, [r3, #0]
        ILI9341_WriteDataMultiple(data, 3);
 80010ac:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80010b0:	2103      	movs	r1, #3
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff ff6e 	bl	8000f94 <ILI9341_WriteDataMultiple>
    }

    // DRIVER TIMING CONTROL A
    ILI9341_WriteCommand(0xE8);
 80010b8:	20e8      	movs	r0, #232	; 0xe8
 80010ba:	f7ff ff4b 	bl	8000f54 <ILI9341_WriteCommand>
    {
        uint16_t data[] = { 0x85, 0x00, 0x78 };
 80010be:	4a7d      	ldr	r2, [pc, #500]	; (80012b4 <ILI9341_Init+0x254>)
 80010c0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80010c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010c8:	6018      	str	r0, [r3, #0]
 80010ca:	3304      	adds	r3, #4
 80010cc:	8019      	strh	r1, [r3, #0]
        ILI9341_WriteDataMultiple(data, 3);
 80010ce:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80010d2:	2103      	movs	r1, #3
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff ff5d 	bl	8000f94 <ILI9341_WriteDataMultiple>
    }

    // DRIVER TIMING CONTROL B
    ILI9341_WriteCommand(0x00EA);
 80010da:	20ea      	movs	r0, #234	; 0xea
 80010dc:	f7ff ff3a 	bl	8000f54 <ILI9341_WriteCommand>
    {
        uint16_t data[] = { 0x00, 0x00 };
 80010e0:	2300      	movs	r3, #0
 80010e2:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
 80010e6:	2300      	movs	r3, #0
 80010e8:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
        ILI9341_WriteDataMultiple(data, 2);
 80010ec:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80010f0:	2102      	movs	r1, #2
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff ff4e 	bl	8000f94 <ILI9341_WriteDataMultiple>
    }

    // POWER ON SEQUENCE CONTROL
    ILI9341_WriteCommand(0xED);
 80010f8:	20ed      	movs	r0, #237	; 0xed
 80010fa:	f7ff ff2b 	bl	8000f54 <ILI9341_WriteCommand>
    {
        uint16_t data[] = { 0x04, 0x03, 0x12, 0x81 };
 80010fe:	4a6e      	ldr	r2, [pc, #440]	; (80012b8 <ILI9341_Init+0x258>)
 8001100:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001104:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001108:	e883 0003 	stmia.w	r3, {r0, r1}
        ILI9341_WriteDataMultiple(data, 4);
 800110c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001110:	2104      	movs	r1, #4
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff ff3e 	bl	8000f94 <ILI9341_WriteDataMultiple>
    }

    // PUMP RATIO CONTROL
    ILI9341_WriteCommand(0xF7);
 8001118:	20f7      	movs	r0, #247	; 0xf7
 800111a:	f7ff ff1b 	bl	8000f54 <ILI9341_WriteCommand>
    {
        uint16_t data[] = { 0x20 };
 800111e:	2320      	movs	r3, #32
 8001120:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
        ILI9341_WriteDataMultiple(data, 1);
 8001124:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001128:	2101      	movs	r1, #1
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff ff32 	bl	8000f94 <ILI9341_WriteDataMultiple>
    }

    // POWER CONTROL,VRH[5:0]
    ILI9341_WriteCommand(0xC0);
 8001130:	20c0      	movs	r0, #192	; 0xc0
 8001132:	f7ff ff0f 	bl	8000f54 <ILI9341_WriteCommand>
    {
        uint16_t data[] = { 0x23 };
 8001136:	2323      	movs	r3, #35	; 0x23
 8001138:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
        ILI9341_WriteDataMultiple(data, 1);
 800113c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001140:	2101      	movs	r1, #1
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff ff26 	bl	8000f94 <ILI9341_WriteDataMultiple>
    }

    // POWER CONTROL,SAP[2:0];BT[3:0]
    ILI9341_WriteCommand(0xC1);
 8001148:	20c1      	movs	r0, #193	; 0xc1
 800114a:	f7ff ff03 	bl	8000f54 <ILI9341_WriteCommand>
    {
        uint16_t data[] = { 0x10 };
 800114e:	2310      	movs	r3, #16
 8001150:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
        ILI9341_WriteDataMultiple(data, 1);
 8001154:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001158:	2101      	movs	r1, #1
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff ff1a 	bl	8000f94 <ILI9341_WriteDataMultiple>
    }

    // VCM CONTROL
    ILI9341_WriteCommand(0xC5);
 8001160:	20c5      	movs	r0, #197	; 0xc5
 8001162:	f7ff fef7 	bl	8000f54 <ILI9341_WriteCommand>
    {
        uint16_t data[] = { 0x3E, 0x28 };
 8001166:	4b55      	ldr	r3, [pc, #340]	; (80012bc <ILI9341_Init+0x25c>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	66bb      	str	r3, [r7, #104]	; 0x68
        ILI9341_WriteDataMultiple(data, 2);
 800116c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001170:	2102      	movs	r1, #2
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff ff0e 	bl	8000f94 <ILI9341_WriteDataMultiple>
    }

    // VCM CONTROL 2
    ILI9341_WriteCommand(0xC7);
 8001178:	20c7      	movs	r0, #199	; 0xc7
 800117a:	f7ff feeb 	bl	8000f54 <ILI9341_WriteCommand>
    {
        uint16_t data[] = { 0x86 };
 800117e:	2386      	movs	r3, #134	; 0x86
 8001180:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
        ILI9341_WriteDataMultiple(data, 1);
 8001184:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001188:	2101      	movs	r1, #1
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff ff02 	bl	8000f94 <ILI9341_WriteDataMultiple>
    }

    // MEMORY ACCESS CONTROL
    ILI9341_WriteCommand(0x36);
 8001190:	2036      	movs	r0, #54	; 0x36
 8001192:	f7ff fedf 	bl	8000f54 <ILI9341_WriteCommand>
    {
        uint16_t data[] = { 0x48 };
 8001196:	2348      	movs	r3, #72	; 0x48
 8001198:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
        ILI9341_WriteDataMultiple(data, 1);
 800119c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80011a0:	2101      	movs	r1, #1
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff fef6 	bl	8000f94 <ILI9341_WriteDataMultiple>
    }

    // PIXEL FORMAT
    ILI9341_WriteCommand(0x3A);
 80011a8:	203a      	movs	r0, #58	; 0x3a
 80011aa:	f7ff fed3 	bl	8000f54 <ILI9341_WriteCommand>
    {
        uint16_t data[] = { 0x55 };
 80011ae:	2355      	movs	r3, #85	; 0x55
 80011b0:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
        ILI9341_WriteDataMultiple(data, 1);
 80011b4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80011b8:	2101      	movs	r1, #1
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff feea 	bl	8000f94 <ILI9341_WriteDataMultiple>
    }

    // FRAME RATIO CONTROL, STANDARD RGB COLOR
    ILI9341_WriteCommand(0xB1);
 80011c0:	20b1      	movs	r0, #177	; 0xb1
 80011c2:	f7ff fec7 	bl	8000f54 <ILI9341_WriteCommand>
    {
        uint16_t data[] = { 0x00, 0x18 };
 80011c6:	2300      	movs	r3, #0
 80011c8:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 80011cc:	2318      	movs	r3, #24
 80011ce:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
        ILI9341_WriteDataMultiple(data, 1);
 80011d2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80011d6:	2101      	movs	r1, #1
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff fedb 	bl	8000f94 <ILI9341_WriteDataMultiple>
    }

    // DISPLAY FUNCTION CONTROL
    ILI9341_WriteCommand(0xB6);
 80011de:	20b6      	movs	r0, #182	; 0xb6
 80011e0:	f7ff feb8 	bl	8000f54 <ILI9341_WriteCommand>
    {
        uint16_t data[] = { 0x08, 0x82, 0x27 };
 80011e4:	4a36      	ldr	r2, [pc, #216]	; (80012c0 <ILI9341_Init+0x260>)
 80011e6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80011ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011ee:	6018      	str	r0, [r3, #0]
 80011f0:	3304      	adds	r3, #4
 80011f2:	8019      	strh	r1, [r3, #0]
        ILI9341_WriteDataMultiple(data, 3);
 80011f4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80011f8:	2103      	movs	r1, #3
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff feca 	bl	8000f94 <ILI9341_WriteDataMultiple>
    }

    // 3GAMMA FUNCTION DISABLE
    ILI9341_WriteCommand(0xF2);
 8001200:	20f2      	movs	r0, #242	; 0xf2
 8001202:	f7ff fea7 	bl	8000f54 <ILI9341_WriteCommand>
    {
        uint16_t data[] = { 0x00 };
 8001206:	2300      	movs	r3, #0
 8001208:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
        ILI9341_WriteDataMultiple(data, 1);
 800120c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001210:	2101      	movs	r1, #1
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff febe 	bl	8000f94 <ILI9341_WriteDataMultiple>
    }

    // GAMMA CURVE SELECTED
    ILI9341_WriteCommand(0x26);
 8001218:	2026      	movs	r0, #38	; 0x26
 800121a:	f7ff fe9b 	bl	8000f54 <ILI9341_WriteCommand>
    {
        uint16_t data[] = { 0x01 };
 800121e:	2301      	movs	r3, #1
 8001220:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
        ILI9341_WriteDataMultiple(data, 1);
 8001224:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001228:	2101      	movs	r1, #1
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff feb2 	bl	8000f94 <ILI9341_WriteDataMultiple>
    }

    // POSITIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE0);
 8001230:	20e0      	movs	r0, #224	; 0xe0
 8001232:	f7ff fe8f 	bl	8000f54 <ILI9341_WriteCommand>
    {
        uint16_t data[] = { 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,
 8001236:	4b23      	ldr	r3, [pc, #140]	; (80012c4 <ILI9341_Init+0x264>)
 8001238:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800123c:	461d      	mov	r5, r3
 800123e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001240:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001242:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001246:	c407      	stmia	r4!, {r0, r1, r2}
 8001248:	8023      	strh	r3, [r4, #0]
                           0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00 };
        ILI9341_WriteDataMultiple(data, 15);
 800124a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800124e:	210f      	movs	r1, #15
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff fe9f 	bl	8000f94 <ILI9341_WriteDataMultiple>
    }

    // NEGATIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE1);
 8001256:	20e1      	movs	r0, #225	; 0xe1
 8001258:	f7ff fe7c 	bl	8000f54 <ILI9341_WriteCommand>
    {
        uint16_t data[] = { 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,
 800125c:	4b1a      	ldr	r3, [pc, #104]	; (80012c8 <ILI9341_Init+0x268>)
 800125e:	f107 0408 	add.w	r4, r7, #8
 8001262:	461d      	mov	r5, r3
 8001264:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001266:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001268:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800126c:	c407      	stmia	r4!, {r0, r1, r2}
 800126e:	8023      	strh	r3, [r4, #0]
                           0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F };
        ILI9341_WriteDataMultiple(data, 15);
 8001270:	f107 0308 	add.w	r3, r7, #8
 8001274:	210f      	movs	r1, #15
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff fe8c 	bl	8000f94 <ILI9341_WriteDataMultiple>
    }

    // EXIT SLEEP
    ILI9341_WriteCommand(0x11);
 800127c:	2011      	movs	r0, #17
 800127e:	f7ff fe69 	bl	8000f54 <ILI9341_WriteCommand>
    HAL_Delay(120);
 8001282:	2078      	movs	r0, #120	; 0x78
 8001284:	f001 fa5e 	bl	8002744 <HAL_Delay>

    // TURN ON DISPLAY
    ILI9341_WriteCommand(0x29);
 8001288:	2029      	movs	r0, #41	; 0x29
 800128a:	f7ff fe63 	bl	8000f54 <ILI9341_WriteCommand>

    // MADCTL
    ILI9341_WriteCommand(0x36);
 800128e:	2036      	movs	r0, #54	; 0x36
 8001290:	f7ff fe60 	bl	8000f54 <ILI9341_WriteCommand>
    {
        uint16_t data[] = { ILI9341_ROTATION };
 8001294:	2348      	movs	r3, #72	; 0x48
 8001296:	80bb      	strh	r3, [r7, #4]
        ILI9341_WriteDataMultiple(data, 1);
 8001298:	1d3b      	adds	r3, r7, #4
 800129a:	2101      	movs	r1, #1
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff fe79 	bl	8000f94 <ILI9341_WriteDataMultiple>
    }
}
 80012a2:	bf00      	nop
 80012a4:	37a0      	adds	r7, #160	; 0xa0
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bdb0      	pop	{r4, r5, r7, pc}
 80012aa:	bf00      	nop
 80012ac:	08008a50 	.word	0x08008a50
 80012b0:	08008a5c 	.word	0x08008a5c
 80012b4:	08008a64 	.word	0x08008a64
 80012b8:	08008a6c 	.word	0x08008a6c
 80012bc:	08008a74 	.word	0x08008a74
 80012c0:	08008a78 	.word	0x08008a78
 80012c4:	08008a80 	.word	0x08008a80
 80012c8:	08008aa0 	.word	0x08008aa0

080012cc <ILI9341_DrawPixel>:


void ILI9341_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	80fb      	strh	r3, [r7, #6]
 80012d6:	460b      	mov	r3, r1
 80012d8:	80bb      	strh	r3, [r7, #4]
 80012da:	4613      	mov	r3, r2
 80012dc:	807b      	strh	r3, [r7, #2]
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT))
 80012de:	88fb      	ldrh	r3, [r7, #6]
 80012e0:	2bef      	cmp	r3, #239	; 0xef
 80012e2:	d812      	bhi.n	800130a <ILI9341_DrawPixel+0x3e>
 80012e4:	88bb      	ldrh	r3, [r7, #4]
 80012e6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80012ea:	d20e      	bcs.n	800130a <ILI9341_DrawPixel+0x3e>
        return;
    ILI9341_SetAddressWindow(x, y, x+1, y+1);
 80012ec:	88fb      	ldrh	r3, [r7, #6]
 80012ee:	3301      	adds	r3, #1
 80012f0:	b29a      	uxth	r2, r3
 80012f2:	88bb      	ldrh	r3, [r7, #4]
 80012f4:	3301      	adds	r3, #1
 80012f6:	b29b      	uxth	r3, r3
 80012f8:	88b9      	ldrh	r1, [r7, #4]
 80012fa:	88f8      	ldrh	r0, [r7, #6]
 80012fc:	f7ff fe64 	bl	8000fc8 <ILI9341_SetAddressWindow>
    ILI9341_WriteData(color);
 8001300:	887b      	ldrh	r3, [r7, #2]
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff fe36 	bl	8000f74 <ILI9341_WriteData>
 8001308:	e000      	b.n	800130c <ILI9341_DrawPixel+0x40>
        return;
 800130a:	bf00      	nop
}
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <ILI9341_WriteChar>:
    }
}
 */

static void ILI9341_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8001312:	b082      	sub	sp, #8
 8001314:	b590      	push	{r4, r7, lr}
 8001316:	b087      	sub	sp, #28
 8001318:	af00      	add	r7, sp, #0
 800131a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800131c:	4603      	mov	r3, r0
 800131e:	80fb      	strh	r3, [r7, #6]
 8001320:	460b      	mov	r3, r1
 8001322:	80bb      	strh	r3, [r7, #4]
 8001324:	4613      	mov	r3, r2
 8001326:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;
    ILI9341_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8001328:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800132c:	b29a      	uxth	r2, r3
 800132e:	88fb      	ldrh	r3, [r7, #6]
 8001330:	4413      	add	r3, r2
 8001332:	b29b      	uxth	r3, r3
 8001334:	3b01      	subs	r3, #1
 8001336:	b29c      	uxth	r4, r3
 8001338:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800133c:	b29a      	uxth	r2, r3
 800133e:	88bb      	ldrh	r3, [r7, #4]
 8001340:	4413      	add	r3, r2
 8001342:	b29b      	uxth	r3, r3
 8001344:	3b01      	subs	r3, #1
 8001346:	b29b      	uxth	r3, r3
 8001348:	88b9      	ldrh	r1, [r7, #4]
 800134a:	88f8      	ldrh	r0, [r7, #6]
 800134c:	4622      	mov	r2, r4
 800134e:	f7ff fe3b 	bl	8000fc8 <ILI9341_SetAddressWindow>
    for (i = 0; i < font.height; i++)
 8001352:	2300      	movs	r3, #0
 8001354:	617b      	str	r3, [r7, #20]
 8001356:	e041      	b.n	80013dc <ILI9341_WriteChar+0xca>
    {
        b = font.data[(ch-32) * font.height + i];
 8001358:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800135a:	78fb      	ldrb	r3, [r7, #3]
 800135c:	3b20      	subs	r3, #32
 800135e:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8001362:	fb01 f303 	mul.w	r3, r1, r3
 8001366:	4619      	mov	r1, r3
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	440b      	add	r3, r1
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	4413      	add	r3, r2
 8001370:	881b      	ldrh	r3, [r3, #0]
 8001372:	60fb      	str	r3, [r7, #12]
        for (j = 0; j < font.width; j++)
 8001374:	2300      	movs	r3, #0
 8001376:	613b      	str	r3, [r7, #16]
 8001378:	e027      	b.n	80013ca <ILI9341_WriteChar+0xb8>
        {
            if ((b << j) & 0x8000)
 800137a:	68fa      	ldr	r2, [r7, #12]
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d00e      	beq.n	80013a8 <ILI9341_WriteChar+0x96>
                ILI9341_DrawPixel(x+j, y+i, color);
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	b29a      	uxth	r2, r3
 800138e:	88fb      	ldrh	r3, [r7, #6]
 8001390:	4413      	add	r3, r2
 8001392:	b298      	uxth	r0, r3
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	b29a      	uxth	r2, r3
 8001398:	88bb      	ldrh	r3, [r7, #4]
 800139a:	4413      	add	r3, r2
 800139c:	b29b      	uxth	r3, r3
 800139e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80013a0:	4619      	mov	r1, r3
 80013a2:	f7ff ff93 	bl	80012cc <ILI9341_DrawPixel>
 80013a6:	e00d      	b.n	80013c4 <ILI9341_WriteChar+0xb2>

            else
                ILI9341_DrawPixel(x+j, y+i, bgcolor);
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	b29a      	uxth	r2, r3
 80013ac:	88fb      	ldrh	r3, [r7, #6]
 80013ae:	4413      	add	r3, r2
 80013b0:	b298      	uxth	r0, r3
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	b29a      	uxth	r2, r3
 80013b6:	88bb      	ldrh	r3, [r7, #4]
 80013b8:	4413      	add	r3, r2
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80013be:	4619      	mov	r1, r3
 80013c0:	f7ff ff84 	bl	80012cc <ILI9341_DrawPixel>
        for (j = 0; j < font.width; j++)
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	3301      	adds	r3, #1
 80013c8:	613b      	str	r3, [r7, #16]
 80013ca:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80013ce:	461a      	mov	r2, r3
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d3d1      	bcc.n	800137a <ILI9341_WriteChar+0x68>
    for (i = 0; i < font.height; i++)
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	3301      	adds	r3, #1
 80013da:	617b      	str	r3, [r7, #20]
 80013dc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80013e0:	461a      	mov	r2, r3
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d3b7      	bcc.n	8001358 <ILI9341_WriteChar+0x46>
        }
    }
}
 80013e8:	bf00      	nop
 80013ea:	bf00      	nop
 80013ec:	371c      	adds	r7, #28
 80013ee:	46bd      	mov	sp, r7
 80013f0:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80013f4:	b002      	add	sp, #8
 80013f6:	4770      	bx	lr

080013f8 <ILI9341_WriteString>:


void ILI9341_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 80013f8:	b082      	sub	sp, #8
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b086      	sub	sp, #24
 80013fe:	af04      	add	r7, sp, #16
 8001400:	603a      	str	r2, [r7, #0]
 8001402:	617b      	str	r3, [r7, #20]
 8001404:	4603      	mov	r3, r0
 8001406:	80fb      	strh	r3, [r7, #6]
 8001408:	460b      	mov	r3, r1
 800140a:	80bb      	strh	r3, [r7, #4]
    while(*str) {
 800140c:	e02e      	b.n	800146c <ILI9341_WriteString+0x74>
        if(x + font.width >= ILI9341_WIDTH) {
 800140e:	88fb      	ldrh	r3, [r7, #6]
 8001410:	7d3a      	ldrb	r2, [r7, #20]
 8001412:	4413      	add	r3, r2
 8001414:	2bef      	cmp	r3, #239	; 0xef
 8001416:	dd14      	ble.n	8001442 <ILI9341_WriteString+0x4a>
            x = 0;
 8001418:	2300      	movs	r3, #0
 800141a:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 800141c:	7d7b      	ldrb	r3, [r7, #21]
 800141e:	b29a      	uxth	r2, r3
 8001420:	88bb      	ldrh	r3, [r7, #4]
 8001422:	4413      	add	r3, r2
 8001424:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ILI9341_HEIGHT) {
 8001426:	88bb      	ldrh	r3, [r7, #4]
 8001428:	7d7a      	ldrb	r2, [r7, #21]
 800142a:	4413      	add	r3, r2
 800142c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001430:	da21      	bge.n	8001476 <ILI9341_WriteString+0x7e>
                break;
            }

            if(*str == ' ') {
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	2b20      	cmp	r3, #32
 8001438:	d103      	bne.n	8001442 <ILI9341_WriteString+0x4a>
                // skip spaces in the beginning of the new line
                str++;
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	3301      	adds	r3, #1
 800143e:	603b      	str	r3, [r7, #0]
                continue;
 8001440:	e014      	b.n	800146c <ILI9341_WriteString+0x74>
            }
        }

        ILI9341_WriteChar(x, y, *str, font, color, bgcolor);
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	781a      	ldrb	r2, [r3, #0]
 8001446:	88b9      	ldrh	r1, [r7, #4]
 8001448:	88f8      	ldrh	r0, [r7, #6]
 800144a:	8c3b      	ldrh	r3, [r7, #32]
 800144c:	9302      	str	r3, [sp, #8]
 800144e:	8bbb      	ldrh	r3, [r7, #28]
 8001450:	9301      	str	r3, [sp, #4]
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	9300      	str	r3, [sp, #0]
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	f7ff ff5b 	bl	8001312 <ILI9341_WriteChar>
        x += font.width;
 800145c:	7d3b      	ldrb	r3, [r7, #20]
 800145e:	b29a      	uxth	r2, r3
 8001460:	88fb      	ldrh	r3, [r7, #6]
 8001462:	4413      	add	r3, r2
 8001464:	80fb      	strh	r3, [r7, #6]
        str++;
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	3301      	adds	r3, #1
 800146a:	603b      	str	r3, [r7, #0]
    while(*str) {
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d1cc      	bne.n	800140e <ILI9341_WriteString+0x16>
    }
}
 8001474:	e000      	b.n	8001478 <ILI9341_WriteString+0x80>
                break;
 8001476:	bf00      	nop
}
 8001478:	bf00      	nop
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001482:	b002      	add	sp, #8
 8001484:	4770      	bx	lr
	...

08001488 <displayImage>:
    {
    	buffer[i]= '\0';
    }
}

int displayImage(const char* fname) {
 8001488:	b580      	push	{r7, lr}
 800148a:	f5ad 5d9b 	sub.w	sp, sp, #4960	; 0x1360
 800148e:	b084      	sub	sp, #16
 8001490:	af04      	add	r7, sp, #16
 8001492:	f507 7358 	add.w	r3, r7, #864	; 0x360
 8001496:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 800149a:	6018      	str	r0, [r3, #0]
//    UART_Printf("Openning %s...\r\n", fname);
    FIL file;
    FRESULT res = f_open(&file, fname, FA_READ);
 800149c:	f507 7358 	add.w	r3, r7, #864	; 0x360
 80014a0:	f5a3 7157 	sub.w	r1, r3, #860	; 0x35c
 80014a4:	f507 7348 	add.w	r3, r7, #800	; 0x320
 80014a8:	3b1c      	subs	r3, #28
 80014aa:	2201      	movs	r2, #1
 80014ac:	6809      	ldr	r1, [r1, #0]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f005 fef4 	bl	800729c <f_open>
 80014b4:	4603      	mov	r3, r0
 80014b6:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 80014ba:	f102 0213 	add.w	r2, r2, #19
 80014be:	7013      	strb	r3, [r2, #0]
    if(res != FR_OK) {
 80014c0:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80014c4:	f103 0313 	add.w	r3, r3, #19
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d011      	beq.n	80014f2 <displayImage+0x6a>
        ILI9341_WriteString(0, 10, "f_open() failed, res = %d\r\n", Font_7x10, ILI9341_RED, ILI9341_WHITE);
 80014ce:	4b3a      	ldr	r3, [pc, #232]	; (80015b8 <displayImage+0x130>)
 80014d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014d4:	9202      	str	r2, [sp, #8]
 80014d6:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80014da:	9201      	str	r2, [sp, #4]
 80014dc:	685a      	ldr	r2, [r3, #4]
 80014de:	9200      	str	r2, [sp, #0]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a36      	ldr	r2, [pc, #216]	; (80015bc <displayImage+0x134>)
 80014e4:	210a      	movs	r1, #10
 80014e6:	2000      	movs	r0, #0
 80014e8:	f7ff ff86 	bl	80013f8 <ILI9341_WriteString>
        return -1;
 80014ec:	f04f 33ff 	mov.w	r3, #4294967295
 80014f0:	e354      	b.n	8001b9c <displayImage+0x714>
    }

    ILI9341_WriteString(0, 20, "File opened, reading...\r\n", Font_7x10, ILI9341_RED, ILI9341_WHITE);
 80014f2:	4b31      	ldr	r3, [pc, #196]	; (80015b8 <displayImage+0x130>)
 80014f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014f8:	9202      	str	r2, [sp, #8]
 80014fa:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80014fe:	9201      	str	r2, [sp, #4]
 8001500:	685a      	ldr	r2, [r3, #4]
 8001502:	9200      	str	r2, [sp, #0]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a2e      	ldr	r2, [pc, #184]	; (80015c0 <displayImage+0x138>)
 8001508:	2114      	movs	r1, #20
 800150a:	2000      	movs	r0, #0
 800150c:	f7ff ff74 	bl	80013f8 <ILI9341_WriteString>

    unsigned int bytesRead;
    uint8_t header[34];
    res = f_read(&file, header, sizeof(header), &bytesRead);
 8001510:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8001514:	f507 7138 	add.w	r1, r7, #736	; 0x2e0
 8001518:	3904      	subs	r1, #4
 800151a:	f507 7048 	add.w	r0, r7, #800	; 0x320
 800151e:	381c      	subs	r0, #28
 8001520:	2222      	movs	r2, #34	; 0x22
 8001522:	f006 f887 	bl	8007634 <f_read>
 8001526:	4603      	mov	r3, r0
 8001528:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 800152c:	f102 0213 	add.w	r2, r2, #19
 8001530:	7013      	strb	r3, [r2, #0]
    if(res != FR_OK) {
 8001532:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8001536:	f103 0313 	add.w	r3, r3, #19
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d017      	beq.n	8001570 <displayImage+0xe8>
        ILI9341_WriteString(0, 30, "f_read() failed, res = %d\r\n", Font_7x10, ILI9341_RED, ILI9341_WHITE);
 8001540:	4b1d      	ldr	r3, [pc, #116]	; (80015b8 <displayImage+0x130>)
 8001542:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001546:	9202      	str	r2, [sp, #8]
 8001548:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800154c:	9201      	str	r2, [sp, #4]
 800154e:	685a      	ldr	r2, [r3, #4]
 8001550:	9200      	str	r2, [sp, #0]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a1b      	ldr	r2, [pc, #108]	; (80015c4 <displayImage+0x13c>)
 8001556:	211e      	movs	r1, #30
 8001558:	2000      	movs	r0, #0
 800155a:	f7ff ff4d 	bl	80013f8 <ILI9341_WriteString>
        f_close(&file);
 800155e:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8001562:	3b1c      	subs	r3, #28
 8001564:	4618      	mov	r0, r3
 8001566:	f006 fa42 	bl	80079ee <f_close>
        return -2;
 800156a:	f06f 0301 	mvn.w	r3, #1
 800156e:	e315      	b.n	8001b9c <displayImage+0x714>
    }

    if((header[0] != 0x42) || (header[1] != 0x4D)) {
 8001570:	f507 7358 	add.w	r3, r7, #864	; 0x360
 8001574:	f813 3c84 	ldrb.w	r3, [r3, #-132]
 8001578:	2b42      	cmp	r3, #66	; 0x42
 800157a:	d105      	bne.n	8001588 <displayImage+0x100>
 800157c:	f507 7358 	add.w	r3, r7, #864	; 0x360
 8001580:	f813 3c83 	ldrb.w	r3, [r3, #-131]
 8001584:	2b4d      	cmp	r3, #77	; 0x4d
 8001586:	d021      	beq.n	80015cc <displayImage+0x144>
        ILI9341_WriteString(0, 40, "Wrong BMP signature: 0x%02X 0x%02X\r\n", Font_7x10, ILI9341_RED, ILI9341_WHITE);
 8001588:	4b0b      	ldr	r3, [pc, #44]	; (80015b8 <displayImage+0x130>)
 800158a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800158e:	9202      	str	r2, [sp, #8]
 8001590:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001594:	9201      	str	r2, [sp, #4]
 8001596:	685a      	ldr	r2, [r3, #4]
 8001598:	9200      	str	r2, [sp, #0]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a0a      	ldr	r2, [pc, #40]	; (80015c8 <displayImage+0x140>)
 800159e:	2128      	movs	r1, #40	; 0x28
 80015a0:	2000      	movs	r0, #0
 80015a2:	f7ff ff29 	bl	80013f8 <ILI9341_WriteString>
        f_close(&file);
 80015a6:	f507 7348 	add.w	r3, r7, #800	; 0x320
 80015aa:	3b1c      	subs	r3, #28
 80015ac:	4618      	mov	r0, r3
 80015ae:	f006 fa1e 	bl	80079ee <f_close>
        return -3;
 80015b2:	f06f 0302 	mvn.w	r3, #2
 80015b6:	e2f1      	b.n	8001b9c <displayImage+0x714>
 80015b8:	20000004 	.word	0x20000004
 80015bc:	08008ae4 	.word	0x08008ae4
 80015c0:	08008b00 	.word	0x08008b00
 80015c4:	08008b1c 	.word	0x08008b1c
 80015c8:	08008b38 	.word	0x08008b38
    }

    uint32_t imageOffset = header[10] | (header[11] << 8) | (header[12] << 16) | (header[13] << 24);
 80015cc:	f507 7358 	add.w	r3, r7, #864	; 0x360
 80015d0:	f813 3c7a 	ldrb.w	r3, [r3, #-122]
 80015d4:	461a      	mov	r2, r3
 80015d6:	f507 7358 	add.w	r3, r7, #864	; 0x360
 80015da:	f813 3c79 	ldrb.w	r3, [r3, #-121]
 80015de:	021b      	lsls	r3, r3, #8
 80015e0:	431a      	orrs	r2, r3
 80015e2:	f507 7358 	add.w	r3, r7, #864	; 0x360
 80015e6:	f813 3c78 	ldrb.w	r3, [r3, #-120]
 80015ea:	041b      	lsls	r3, r3, #16
 80015ec:	431a      	orrs	r2, r3
 80015ee:	f507 7358 	add.w	r3, r7, #864	; 0x360
 80015f2:	f813 3c77 	ldrb.w	r3, [r3, #-119]
 80015f6:	061b      	lsls	r3, r3, #24
 80015f8:	4313      	orrs	r3, r2
 80015fa:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 80015fe:	f102 020c 	add.w	r2, r2, #12
 8001602:	6013      	str	r3, [r2, #0]
    uint32_t imageWidth = header[18] | (header[19] << 8) | (header[20] << 16) | (header[21] << 24);
 8001604:	f507 7358 	add.w	r3, r7, #864	; 0x360
 8001608:	f813 3c72 	ldrb.w	r3, [r3, #-114]
 800160c:	461a      	mov	r2, r3
 800160e:	f507 7358 	add.w	r3, r7, #864	; 0x360
 8001612:	f813 3c71 	ldrb.w	r3, [r3, #-113]
 8001616:	021b      	lsls	r3, r3, #8
 8001618:	431a      	orrs	r2, r3
 800161a:	f507 7358 	add.w	r3, r7, #864	; 0x360
 800161e:	f813 3c70 	ldrb.w	r3, [r3, #-112]
 8001622:	041b      	lsls	r3, r3, #16
 8001624:	431a      	orrs	r2, r3
 8001626:	f507 7358 	add.w	r3, r7, #864	; 0x360
 800162a:	f813 3c6f 	ldrb.w	r3, [r3, #-111]
 800162e:	061b      	lsls	r3, r3, #24
 8001630:	4313      	orrs	r3, r2
 8001632:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8001636:	f102 0208 	add.w	r2, r2, #8
 800163a:	6013      	str	r3, [r2, #0]
    uint32_t imageHeight = header[22] | (header[23] << 8) | (header[24] << 16) | (header[25] << 24);
 800163c:	f507 7358 	add.w	r3, r7, #864	; 0x360
 8001640:	f813 3c6e 	ldrb.w	r3, [r3, #-110]
 8001644:	461a      	mov	r2, r3
 8001646:	f507 7358 	add.w	r3, r7, #864	; 0x360
 800164a:	f813 3c6d 	ldrb.w	r3, [r3, #-109]
 800164e:	021b      	lsls	r3, r3, #8
 8001650:	431a      	orrs	r2, r3
 8001652:	f507 7358 	add.w	r3, r7, #864	; 0x360
 8001656:	f813 3c6c 	ldrb.w	r3, [r3, #-108]
 800165a:	041b      	lsls	r3, r3, #16
 800165c:	431a      	orrs	r2, r3
 800165e:	f507 7358 	add.w	r3, r7, #864	; 0x360
 8001662:	f813 3c6b 	ldrb.w	r3, [r3, #-107]
 8001666:	061b      	lsls	r3, r3, #24
 8001668:	4313      	orrs	r3, r2
 800166a:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 800166e:	f102 0204 	add.w	r2, r2, #4
 8001672:	6013      	str	r3, [r2, #0]
    uint16_t imagePlanes = header[26] | (header[27] << 8);
 8001674:	f507 7358 	add.w	r3, r7, #864	; 0x360
 8001678:	f813 3c6a 	ldrb.w	r3, [r3, #-106]
 800167c:	b21a      	sxth	r2, r3
 800167e:	f507 7358 	add.w	r3, r7, #864	; 0x360
 8001682:	f813 3c69 	ldrb.w	r3, [r3, #-105]
 8001686:	021b      	lsls	r3, r3, #8
 8001688:	b21b      	sxth	r3, r3
 800168a:	4313      	orrs	r3, r2
 800168c:	b21b      	sxth	r3, r3
 800168e:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8001692:	f102 0202 	add.w	r2, r2, #2
 8001696:	8013      	strh	r3, [r2, #0]
    uint16_t imageBitsPerPixel = header[28] | (header[29] << 8);
 8001698:	f507 7358 	add.w	r3, r7, #864	; 0x360
 800169c:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 80016a0:	b21a      	sxth	r2, r3
 80016a2:	f507 7358 	add.w	r3, r7, #864	; 0x360
 80016a6:	f813 3c67 	ldrb.w	r3, [r3, #-103]
 80016aa:	021b      	lsls	r3, r3, #8
 80016ac:	b21b      	sxth	r3, r3
 80016ae:	4313      	orrs	r3, r2
 80016b0:	b21b      	sxth	r3, r3
 80016b2:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 80016b6:	8013      	strh	r3, [r2, #0]
    uint32_t imageCompression = header[30] | (header[31] << 8) | (header[32] << 16) | (header[33] << 24);
 80016b8:	f507 7358 	add.w	r3, r7, #864	; 0x360
 80016bc:	f813 3c66 	ldrb.w	r3, [r3, #-102]
 80016c0:	461a      	mov	r2, r3
 80016c2:	f507 7358 	add.w	r3, r7, #864	; 0x360
 80016c6:	f813 3c65 	ldrb.w	r3, [r3, #-101]
 80016ca:	021b      	lsls	r3, r3, #8
 80016cc:	431a      	orrs	r2, r3
 80016ce:	f507 7358 	add.w	r3, r7, #864	; 0x360
 80016d2:	f813 3c64 	ldrb.w	r3, [r3, #-100]
 80016d6:	041b      	lsls	r3, r3, #16
 80016d8:	431a      	orrs	r2, r3
 80016da:	f507 7358 	add.w	r3, r7, #864	; 0x360
 80016de:	f813 3c63 	ldrb.w	r3, [r3, #-99]
 80016e2:	061b      	lsls	r3, r3, #24
 80016e4:	4313      	orrs	r3, r2
 80016e6:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 80016ea:	f102 021c 	add.w	r2, r2, #28
 80016ee:	6013      	str	r3, [r2, #0]

    snprintf(buff, sizeof(buff), "Pixels offset: %lu\r\n ", imageOffset);
 80016f0:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80016f4:	f103 030c 	add.w	r3, r3, #12
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4aab      	ldr	r2, [pc, #684]	; (80019a8 <displayImage+0x520>)
 80016fc:	2140      	movs	r1, #64	; 0x40
 80016fe:	48ab      	ldr	r0, [pc, #684]	; (80019ac <displayImage+0x524>)
 8001700:	f006 fd40 	bl	8008184 <sniprintf>
	ILI9341_WriteString(0, 50, buff, Font_7x10, ILI9341_RED, ILI9341_WHITE);
 8001704:	4baa      	ldr	r3, [pc, #680]	; (80019b0 <displayImage+0x528>)
 8001706:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800170a:	9202      	str	r2, [sp, #8]
 800170c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001710:	9201      	str	r2, [sp, #4]
 8001712:	685a      	ldr	r2, [r3, #4]
 8001714:	9200      	str	r2, [sp, #0]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4aa4      	ldr	r2, [pc, #656]	; (80019ac <displayImage+0x524>)
 800171a:	2132      	movs	r1, #50	; 0x32
 800171c:	2000      	movs	r0, #0
 800171e:	f7ff fe6b 	bl	80013f8 <ILI9341_WriteString>
    snprintf(buff, sizeof(buff), "WxH: %lux%lu\r\n ", imageWidth, imageHeight);
 8001722:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8001726:	f103 0304 	add.w	r3, r3, #4
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	9300      	str	r3, [sp, #0]
 800172e:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8001732:	f103 0308 	add.w	r3, r3, #8
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a9e      	ldr	r2, [pc, #632]	; (80019b4 <displayImage+0x52c>)
 800173a:	2140      	movs	r1, #64	; 0x40
 800173c:	489b      	ldr	r0, [pc, #620]	; (80019ac <displayImage+0x524>)
 800173e:	f006 fd21 	bl	8008184 <sniprintf>
	ILI9341_WriteString(0, 60, buff, Font_7x10, ILI9341_RED, ILI9341_WHITE);
 8001742:	4b9b      	ldr	r3, [pc, #620]	; (80019b0 <displayImage+0x528>)
 8001744:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001748:	9202      	str	r2, [sp, #8]
 800174a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800174e:	9201      	str	r2, [sp, #4]
 8001750:	685a      	ldr	r2, [r3, #4]
 8001752:	9200      	str	r2, [sp, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a95      	ldr	r2, [pc, #596]	; (80019ac <displayImage+0x524>)
 8001758:	213c      	movs	r1, #60	; 0x3c
 800175a:	2000      	movs	r0, #0
 800175c:	f7ff fe4c 	bl	80013f8 <ILI9341_WriteString>
    snprintf(buff, sizeof(buff), "Planes: %d\r\n ", imagePlanes);
 8001760:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8001764:	f103 0302 	add.w	r3, r3, #2
 8001768:	881b      	ldrh	r3, [r3, #0]
 800176a:	4a93      	ldr	r2, [pc, #588]	; (80019b8 <displayImage+0x530>)
 800176c:	2140      	movs	r1, #64	; 0x40
 800176e:	488f      	ldr	r0, [pc, #572]	; (80019ac <displayImage+0x524>)
 8001770:	f006 fd08 	bl	8008184 <sniprintf>
	ILI9341_WriteString(0, 70, buff, Font_7x10, ILI9341_RED, ILI9341_WHITE);
 8001774:	4b8e      	ldr	r3, [pc, #568]	; (80019b0 <displayImage+0x528>)
 8001776:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800177a:	9202      	str	r2, [sp, #8]
 800177c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001780:	9201      	str	r2, [sp, #4]
 8001782:	685a      	ldr	r2, [r3, #4]
 8001784:	9200      	str	r2, [sp, #0]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a88      	ldr	r2, [pc, #544]	; (80019ac <displayImage+0x524>)
 800178a:	2146      	movs	r1, #70	; 0x46
 800178c:	2000      	movs	r0, #0
 800178e:	f7ff fe33 	bl	80013f8 <ILI9341_WriteString>
    snprintf(buff, sizeof(buff), "Bits per pixel: %d\r\n ", imageBitsPerPixel);
 8001792:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8001796:	881b      	ldrh	r3, [r3, #0]
 8001798:	4a88      	ldr	r2, [pc, #544]	; (80019bc <displayImage+0x534>)
 800179a:	2140      	movs	r1, #64	; 0x40
 800179c:	4883      	ldr	r0, [pc, #524]	; (80019ac <displayImage+0x524>)
 800179e:	f006 fcf1 	bl	8008184 <sniprintf>
	ILI9341_WriteString(0, 80, buff, Font_7x10, ILI9341_RED, ILI9341_WHITE);
 80017a2:	4b83      	ldr	r3, [pc, #524]	; (80019b0 <displayImage+0x528>)
 80017a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017a8:	9202      	str	r2, [sp, #8]
 80017aa:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80017ae:	9201      	str	r2, [sp, #4]
 80017b0:	685a      	ldr	r2, [r3, #4]
 80017b2:	9200      	str	r2, [sp, #0]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a7d      	ldr	r2, [pc, #500]	; (80019ac <displayImage+0x524>)
 80017b8:	2150      	movs	r1, #80	; 0x50
 80017ba:	2000      	movs	r0, #0
 80017bc:	f7ff fe1c 	bl	80013f8 <ILI9341_WriteString>
    snprintf(buff, sizeof(buff), "Compression: %d\r\n ", imageCompression);
 80017c0:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 80017c4:	f103 031c 	add.w	r3, r3, #28
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a7d      	ldr	r2, [pc, #500]	; (80019c0 <displayImage+0x538>)
 80017cc:	2140      	movs	r1, #64	; 0x40
 80017ce:	4877      	ldr	r0, [pc, #476]	; (80019ac <displayImage+0x524>)
 80017d0:	f006 fcd8 	bl	8008184 <sniprintf>
	ILI9341_WriteString(0, 90, buff, Font_7x10, ILI9341_RED, ILI9341_WHITE);
 80017d4:	4b76      	ldr	r3, [pc, #472]	; (80019b0 <displayImage+0x528>)
 80017d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017da:	9202      	str	r2, [sp, #8]
 80017dc:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80017e0:	9201      	str	r2, [sp, #4]
 80017e2:	685a      	ldr	r2, [r3, #4]
 80017e4:	9200      	str	r2, [sp, #0]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a70      	ldr	r2, [pc, #448]	; (80019ac <displayImage+0x524>)
 80017ea:	215a      	movs	r1, #90	; 0x5a
 80017ec:	2000      	movs	r0, #0
 80017ee:	f7ff fe03 	bl	80013f8 <ILI9341_WriteString>

    if((imageWidth != ILI9341_WIDTH) || (imageHeight != ILI9341_HEIGHT)) {
 80017f2:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80017f6:	f103 0308 	add.w	r3, r3, #8
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2bf0      	cmp	r3, #240	; 0xf0
 80017fe:	d107      	bne.n	8001810 <displayImage+0x388>
 8001800:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8001804:	f103 0304 	add.w	r3, r3, #4
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800180e:	d017      	beq.n	8001840 <displayImage+0x3b8>
//        UART_Printf("Wrong BMP size, %dx%d expected\r\n", ST7735_WIDTH, ST7735_HEIGHT);
        ILI9341_WriteString(0, 100, "Wrong BMP size, %dx%d expected\r\n", Font_7x10, ILI9341_RED, ILI9341_WHITE);
 8001810:	4b67      	ldr	r3, [pc, #412]	; (80019b0 <displayImage+0x528>)
 8001812:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001816:	9202      	str	r2, [sp, #8]
 8001818:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800181c:	9201      	str	r2, [sp, #4]
 800181e:	685a      	ldr	r2, [r3, #4]
 8001820:	9200      	str	r2, [sp, #0]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a67      	ldr	r2, [pc, #412]	; (80019c4 <displayImage+0x53c>)
 8001826:	2164      	movs	r1, #100	; 0x64
 8001828:	2000      	movs	r0, #0
 800182a:	f7ff fde5 	bl	80013f8 <ILI9341_WriteString>
        f_close(&file);
 800182e:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8001832:	3b1c      	subs	r3, #28
 8001834:	4618      	mov	r0, r3
 8001836:	f006 f8da 	bl	80079ee <f_close>
        return -4;
 800183a:	f06f 0303 	mvn.w	r3, #3
 800183e:	e1ad      	b.n	8001b9c <displayImage+0x714>
    }

    if((imagePlanes != 1) || (imageBitsPerPixel != 24) || (imageCompression != 0)) {
 8001840:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8001844:	f103 0302 	add.w	r3, r3, #2
 8001848:	881b      	ldrh	r3, [r3, #0]
 800184a:	2b01      	cmp	r3, #1
 800184c:	d10b      	bne.n	8001866 <displayImage+0x3de>
 800184e:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8001852:	881b      	ldrh	r3, [r3, #0]
 8001854:	2b18      	cmp	r3, #24
 8001856:	d106      	bne.n	8001866 <displayImage+0x3de>
 8001858:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 800185c:	f103 031c 	add.w	r3, r3, #28
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d017      	beq.n	8001896 <displayImage+0x40e>
        ILI9341_WriteString(0, 110, "Unsupported image format\r\n", Font_7x10, ILI9341_RED, ILI9341_WHITE);
 8001866:	4b52      	ldr	r3, [pc, #328]	; (80019b0 <displayImage+0x528>)
 8001868:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800186c:	9202      	str	r2, [sp, #8]
 800186e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001872:	9201      	str	r2, [sp, #4]
 8001874:	685a      	ldr	r2, [r3, #4]
 8001876:	9200      	str	r2, [sp, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a53      	ldr	r2, [pc, #332]	; (80019c8 <displayImage+0x540>)
 800187c:	216e      	movs	r1, #110	; 0x6e
 800187e:	2000      	movs	r0, #0
 8001880:	f7ff fdba 	bl	80013f8 <ILI9341_WriteString>
        f_close(&file);
 8001884:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8001888:	3b1c      	subs	r3, #28
 800188a:	4618      	mov	r0, r3
 800188c:	f006 f8af 	bl	80079ee <f_close>
        return -5;
 8001890:	f06f 0304 	mvn.w	r3, #4
 8001894:	e182      	b.n	8001b9c <displayImage+0x714>
    }

    res = f_lseek(&file, imageOffset);
 8001896:	f507 7348 	add.w	r3, r7, #800	; 0x320
 800189a:	3b1c      	subs	r3, #28
 800189c:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 80018a0:	f102 020c 	add.w	r2, r2, #12
 80018a4:	6811      	ldr	r1, [r2, #0]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f006 f8cb 	bl	8007a42 <f_lseek>
 80018ac:	4603      	mov	r3, r0
 80018ae:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 80018b2:	f102 0213 	add.w	r2, r2, #19
 80018b6:	7013      	strb	r3, [r2, #0]
    if(res != FR_OK) {
 80018b8:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80018bc:	f103 0313 	add.w	r3, r3, #19
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d021      	beq.n	800190a <displayImage+0x482>

        snprintf(buff, sizeof(buff), "f_lseek() failed, res = %d\r\n ", res);
 80018c6:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80018ca:	f103 0313 	add.w	r3, r3, #19
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	4a3e      	ldr	r2, [pc, #248]	; (80019cc <displayImage+0x544>)
 80018d2:	2140      	movs	r1, #64	; 0x40
 80018d4:	4835      	ldr	r0, [pc, #212]	; (80019ac <displayImage+0x524>)
 80018d6:	f006 fc55 	bl	8008184 <sniprintf>
    	ILI9341_WriteString(0, 120, buff, Font_7x10, ILI9341_RED, ILI9341_WHITE);
 80018da:	4b35      	ldr	r3, [pc, #212]	; (80019b0 <displayImage+0x528>)
 80018dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018e0:	9202      	str	r2, [sp, #8]
 80018e2:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80018e6:	9201      	str	r2, [sp, #4]
 80018e8:	685a      	ldr	r2, [r3, #4]
 80018ea:	9200      	str	r2, [sp, #0]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a2f      	ldr	r2, [pc, #188]	; (80019ac <displayImage+0x524>)
 80018f0:	2178      	movs	r1, #120	; 0x78
 80018f2:	2000      	movs	r0, #0
 80018f4:	f7ff fd80 	bl	80013f8 <ILI9341_WriteString>
        f_close(&file);
 80018f8:	f507 7348 	add.w	r3, r7, #800	; 0x320
 80018fc:	3b1c      	subs	r3, #28
 80018fe:	4618      	mov	r0, r3
 8001900:	f006 f875 	bl	80079ee <f_close>
        return -6;
 8001904:	f06f 0305 	mvn.w	r3, #5
 8001908:	e148      	b.n	8001b9c <displayImage+0x714>
    }

    // row size is aligned to 4 bytes
    uint8_t imageRow[(ILI9341_WIDTH * 3 + 3) & ~3];
    for(uint32_t y = 0; y < imageHeight; y++) {
 800190a:	2300      	movs	r3, #0
 800190c:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8001910:	f102 021c 	add.w	r2, r2, #28
 8001914:	6013      	str	r3, [r2, #0]
 8001916:	e104      	b.n	8001b22 <displayImage+0x69a>
        uint32_t rowIdx = 0;
 8001918:	2300      	movs	r3, #0
 800191a:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 800191e:	f102 0218 	add.w	r2, r2, #24
 8001922:	6013      	str	r3, [r2, #0]
        res = f_read(&file, imageRow, sizeof(imageRow), &bytesRead);
 8001924:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8001928:	f107 0120 	add.w	r1, r7, #32
 800192c:	3914      	subs	r1, #20
 800192e:	f507 7048 	add.w	r0, r7, #800	; 0x320
 8001932:	381c      	subs	r0, #28
 8001934:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8001938:	f005 fe7c 	bl	8007634 <f_read>
 800193c:	4603      	mov	r3, r0
 800193e:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8001942:	f102 0213 	add.w	r2, r2, #19
 8001946:	7013      	strb	r3, [r2, #0]
        if(res != FR_OK) {
 8001948:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800194c:	f103 0313 	add.w	r3, r3, #19
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d021      	beq.n	800199a <displayImage+0x512>
            snprintf(buff, sizeof(buff), "f_read() failed, res = %d\r\n", res);
 8001956:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800195a:	f103 0313 	add.w	r3, r3, #19
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	4a1b      	ldr	r2, [pc, #108]	; (80019d0 <displayImage+0x548>)
 8001962:	2140      	movs	r1, #64	; 0x40
 8001964:	4811      	ldr	r0, [pc, #68]	; (80019ac <displayImage+0x524>)
 8001966:	f006 fc0d 	bl	8008184 <sniprintf>
        	ILI9341_WriteString(0, 130, buff, Font_7x10, ILI9341_RED, ILI9341_WHITE);
 800196a:	4b11      	ldr	r3, [pc, #68]	; (80019b0 <displayImage+0x528>)
 800196c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001970:	9202      	str	r2, [sp, #8]
 8001972:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001976:	9201      	str	r2, [sp, #4]
 8001978:	685a      	ldr	r2, [r3, #4]
 800197a:	9200      	str	r2, [sp, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a0b      	ldr	r2, [pc, #44]	; (80019ac <displayImage+0x524>)
 8001980:	2182      	movs	r1, #130	; 0x82
 8001982:	2000      	movs	r0, #0
 8001984:	f7ff fd38 	bl	80013f8 <ILI9341_WriteString>
            f_close(&file);
 8001988:	f507 7348 	add.w	r3, r7, #800	; 0x320
 800198c:	3b1c      	subs	r3, #28
 800198e:	4618      	mov	r0, r3
 8001990:	f006 f82d 	bl	80079ee <f_close>
            return -7;
 8001994:	f06f 0306 	mvn.w	r3, #6
 8001998:	e100      	b.n	8001b9c <displayImage+0x714>
        }

        for(uint32_t x = 0; x < imageWidth; x++) {
 800199a:	2300      	movs	r3, #0
 800199c:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 80019a0:	f102 0214 	add.w	r2, r2, #20
 80019a4:	6013      	str	r3, [r2, #0]
 80019a6:	e0a4      	b.n	8001af2 <displayImage+0x66a>
 80019a8:	08008b60 	.word	0x08008b60
 80019ac:	200000b0 	.word	0x200000b0
 80019b0:	20000004 	.word	0x20000004
 80019b4:	08008b78 	.word	0x08008b78
 80019b8:	08008b88 	.word	0x08008b88
 80019bc:	08008b98 	.word	0x08008b98
 80019c0:	08008bb0 	.word	0x08008bb0
 80019c4:	08008bc4 	.word	0x08008bc4
 80019c8:	08008be8 	.word	0x08008be8
 80019cc:	08008c04 	.word	0x08008c04
 80019d0:	08008b1c 	.word	0x08008b1c
            uint8_t b = imageRow[rowIdx++];
 80019d4:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80019d8:	f103 0318 	add.w	r3, r3, #24
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	1c5a      	adds	r2, r3, #1
 80019e0:	f507 519a 	add.w	r1, r7, #4928	; 0x1340
 80019e4:	f101 0118 	add.w	r1, r1, #24
 80019e8:	600a      	str	r2, [r1, #0]
 80019ea:	f507 7258 	add.w	r2, r7, #864	; 0x360
 80019ee:	f5a2 7255 	sub.w	r2, r2, #852	; 0x354
 80019f2:	5cd3      	ldrb	r3, [r2, r3]
 80019f4:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 80019f8:	f102 021b 	add.w	r2, r2, #27
 80019fc:	7013      	strb	r3, [r2, #0]
            uint8_t g = imageRow[rowIdx++];
 80019fe:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8001a02:	f103 0318 	add.w	r3, r3, #24
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	1c5a      	adds	r2, r3, #1
 8001a0a:	f507 519a 	add.w	r1, r7, #4928	; 0x1340
 8001a0e:	f101 0118 	add.w	r1, r1, #24
 8001a12:	600a      	str	r2, [r1, #0]
 8001a14:	f507 7258 	add.w	r2, r7, #864	; 0x360
 8001a18:	f5a2 7255 	sub.w	r2, r2, #852	; 0x354
 8001a1c:	5cd3      	ldrb	r3, [r2, r3]
 8001a1e:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 8001a22:	f102 021a 	add.w	r2, r2, #26
 8001a26:	7013      	strb	r3, [r2, #0]
            uint8_t r = imageRow[rowIdx++];
 8001a28:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8001a2c:	f103 0318 	add.w	r3, r3, #24
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	1c5a      	adds	r2, r3, #1
 8001a34:	f507 519a 	add.w	r1, r7, #4928	; 0x1340
 8001a38:	f101 0118 	add.w	r1, r1, #24
 8001a3c:	600a      	str	r2, [r1, #0]
 8001a3e:	f507 7258 	add.w	r2, r7, #864	; 0x360
 8001a42:	f5a2 7255 	sub.w	r2, r2, #852	; 0x354
 8001a46:	5cd3      	ldrb	r3, [r2, r3]
 8001a48:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 8001a4c:	f102 0219 	add.w	r2, r2, #25
 8001a50:	7013      	strb	r3, [r2, #0]
            uint16_t color565 = ILI9341_COLOR565(r, g, b);
 8001a52:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8001a56:	f103 0319 	add.w	r3, r3, #25
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	021b      	lsls	r3, r3, #8
 8001a5e:	b21b      	sxth	r3, r3
 8001a60:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001a64:	f023 0307 	bic.w	r3, r3, #7
 8001a68:	b21a      	sxth	r2, r3
 8001a6a:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8001a6e:	f103 031a 	add.w	r3, r3, #26
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	00db      	lsls	r3, r3, #3
 8001a76:	b21b      	sxth	r3, r3
 8001a78:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8001a7c:	b21b      	sxth	r3, r3
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	b21a      	sxth	r2, r3
 8001a82:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8001a86:	f103 031b 	add.w	r3, r3, #27
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	08db      	lsrs	r3, r3, #3
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	b21b      	sxth	r3, r3
 8001a92:	4313      	orrs	r3, r2
 8001a94:	b21b      	sxth	r3, r3
 8001a96:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 8001a9a:	f102 0216 	add.w	r2, r2, #22
 8001a9e:	8013      	strh	r3, [r2, #0]
            ILI9341_DrawPixel(x, imageHeight - y - 1, color565);
 8001aa0:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8001aa4:	f103 0314 	add.w	r3, r3, #20
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	b298      	uxth	r0, r3
 8001aac:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8001ab0:	f103 0304 	add.w	r3, r3, #4
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	b29a      	uxth	r2, r3
 8001ab8:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8001abc:	f103 031c 	add.w	r3, r3, #28
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	3b01      	subs	r3, #1
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 8001ad0:	f102 0216 	add.w	r2, r2, #22
 8001ad4:	8812      	ldrh	r2, [r2, #0]
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	f7ff fbf8 	bl	80012cc <ILI9341_DrawPixel>
        for(uint32_t x = 0; x < imageWidth; x++) {
 8001adc:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8001ae0:	f103 0314 	add.w	r3, r3, #20
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8001aec:	f102 0214 	add.w	r2, r2, #20
 8001af0:	6013      	str	r3, [r2, #0]
 8001af2:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8001af6:	f103 0314 	add.w	r3, r3, #20
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8001b00:	f103 0308 	add.w	r3, r3, #8
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	f4ff af64 	bcc.w	80019d4 <displayImage+0x54c>
    for(uint32_t y = 0; y < imageHeight; y++) {
 8001b0c:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8001b10:	f103 031c 	add.w	r3, r3, #28
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	3301      	adds	r3, #1
 8001b18:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8001b1c:	f102 021c 	add.w	r2, r2, #28
 8001b20:	6013      	str	r3, [r2, #0]
 8001b22:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8001b26:	f103 031c 	add.w	r3, r3, #28
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8001b30:	f103 0304 	add.w	r3, r3, #4
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	f4ff aeee 	bcc.w	8001918 <displayImage+0x490>
        }
    }

    res = f_close(&file);
 8001b3c:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8001b40:	3b1c      	subs	r3, #28
 8001b42:	4618      	mov	r0, r3
 8001b44:	f005 ff53 	bl	80079ee <f_close>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8001b4e:	f102 0213 	add.w	r2, r2, #19
 8001b52:	7013      	strb	r3, [r2, #0]
    if(res != FR_OK) {
 8001b54:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8001b58:	f103 0313 	add.w	r3, r3, #19
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d01b      	beq.n	8001b9a <displayImage+0x712>
//        UART_Printf("f_close() failed, res = %d\r\n", res);
        snprintf(buff, sizeof(buff), "f_close() failed, res = %d\r\n", res);
 8001b62:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8001b66:	f103 0313 	add.w	r3, r3, #19
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	4a0e      	ldr	r2, [pc, #56]	; (8001ba8 <displayImage+0x720>)
 8001b6e:	2140      	movs	r1, #64	; 0x40
 8001b70:	480e      	ldr	r0, [pc, #56]	; (8001bac <displayImage+0x724>)
 8001b72:	f006 fb07 	bl	8008184 <sniprintf>
    	ILI9341_WriteString(0, 140, buff, Font_7x10, ILI9341_RED, ILI9341_WHITE);
 8001b76:	4b0e      	ldr	r3, [pc, #56]	; (8001bb0 <displayImage+0x728>)
 8001b78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b7c:	9202      	str	r2, [sp, #8]
 8001b7e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001b82:	9201      	str	r2, [sp, #4]
 8001b84:	685a      	ldr	r2, [r3, #4]
 8001b86:	9200      	str	r2, [sp, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a08      	ldr	r2, [pc, #32]	; (8001bac <displayImage+0x724>)
 8001b8c:	218c      	movs	r1, #140	; 0x8c
 8001b8e:	2000      	movs	r0, #0
 8001b90:	f7ff fc32 	bl	80013f8 <ILI9341_WriteString>
        return -8;
 8001b94:	f06f 0307 	mvn.w	r3, #7
 8001b98:	e000      	b.n	8001b9c <displayImage+0x714>
    }

    return 0;
 8001b9a:	2300      	movs	r3, #0
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f507 579b 	add.w	r7, r7, #4960	; 0x1360
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	08008c24 	.word	0x08008c24
 8001bac:	200000b0 	.word	0x200000b0
 8001bb0:	20000004 	.word	0x20000004

08001bb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bba:	f000 fd51 	bl	8002660 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bbe:	f000 f883 	bl	8001cc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bc2:	f000 f9cd 	bl	8001f60 <MX_GPIO_Init>
  MX_FSMC_Init();
 8001bc6:	f000 fa7b 	bl	80020c0 <MX_FSMC_Init>
  MX_SPI1_Init();
 8001bca:	f000 f8e7 	bl	8001d9c <MX_SPI1_Init>
  MX_TIM2_Init();
 8001bce:	f000 f951 	bl	8001e74 <MX_TIM2_Init>
  MX_SPI2_Init();
 8001bd2:	f000 f919 	bl	8001e08 <MX_SPI2_Init>
  MX_FATFS_Init();
 8001bd6:	f003 f8bf 	bl	8004d58 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001bda:	2104      	movs	r1, #4
 8001bdc:	482d      	ldr	r0, [pc, #180]	; (8001c94 <main+0xe0>)
 8001bde:	f002 fa05 	bl	8003fec <HAL_TIM_PWM_Start>
  ILI9341_Init();
 8001be2:	f7ff fa3d 	bl	8001060 <ILI9341_Init>
  TSC2046_Begin(&hspi1, GPIOA, GPIO_PIN_4 );
 8001be6:	2210      	movs	r2, #16
 8001be8:	492b      	ldr	r1, [pc, #172]	; (8001c98 <main+0xe4>)
 8001bea:	482c      	ldr	r0, [pc, #176]	; (8001c9c <main+0xe8>)
 8001bec:	f000 fcec 	bl	80025c8 <TSC2046_Begin>
//  TSC2046_Calibrate();
  /* USER CODE END 2 */
  FRESULT res = f_mount(&fs, "", 0);
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	492b      	ldr	r1, [pc, #172]	; (8001ca0 <main+0xec>)
 8001bf4:	482b      	ldr	r0, [pc, #172]	; (8001ca4 <main+0xf0>)
 8001bf6:	f005 fb0b 	bl	8007210 <f_mount>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	71fb      	strb	r3, [r7, #7]
  if(res != FR_OK) {
 8001bfe:	79fb      	ldrb	r3, [r7, #7]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d017      	beq.n	8001c34 <main+0x80>
//      UART_Printf("f_mount() failed, res = %d\r\n", res);
      snprintf(buff, sizeof(buff), "f_mount() failed, res = %d\r\n", res);
 8001c04:	79fb      	ldrb	r3, [r7, #7]
 8001c06:	4a28      	ldr	r2, [pc, #160]	; (8001ca8 <main+0xf4>)
 8001c08:	2140      	movs	r1, #64	; 0x40
 8001c0a:	4828      	ldr	r0, [pc, #160]	; (8001cac <main+0xf8>)
 8001c0c:	f006 faba 	bl	8008184 <sniprintf>
  	ILI9341_WriteString(0, 150, buff, Font_7x10, ILI9341_RED, ILI9341_WHITE);
 8001c10:	4b27      	ldr	r3, [pc, #156]	; (8001cb0 <main+0xfc>)
 8001c12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c16:	9202      	str	r2, [sp, #8]
 8001c18:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001c1c:	9201      	str	r2, [sp, #4]
 8001c1e:	685a      	ldr	r2, [r3, #4]
 8001c20:	9200      	str	r2, [sp, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a21      	ldr	r2, [pc, #132]	; (8001cac <main+0xf8>)
 8001c26:	2196      	movs	r1, #150	; 0x96
 8001c28:	2000      	movs	r0, #0
 8001c2a:	f7ff fbe5 	bl	80013f8 <ILI9341_WriteString>
      return -2;
 8001c2e:	f06f 0301 	mvn.w	r3, #1
 8001c32:	e02b      	b.n	8001c8c <main+0xd8>
  }
  ILI9341_WriteString(0, 160, "f_mount() done!\r\n", Font_7x10, ILI9341_RED, ILI9341_WHITE);
 8001c34:	4b1e      	ldr	r3, [pc, #120]	; (8001cb0 <main+0xfc>)
 8001c36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c3a:	9202      	str	r2, [sp, #8]
 8001c3c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001c40:	9201      	str	r2, [sp, #4]
 8001c42:	685a      	ldr	r2, [r3, #4]
 8001c44:	9200      	str	r2, [sp, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a1a      	ldr	r2, [pc, #104]	; (8001cb4 <main+0x100>)
 8001c4a:	21a0      	movs	r1, #160	; 0xa0
 8001c4c:	2000      	movs	r0, #0
 8001c4e:	f7ff fbd3 	bl	80013f8 <ILI9341_WriteString>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  displayImage("ismail.bmp");
 8001c52:	4819      	ldr	r0, [pc, #100]	; (8001cb8 <main+0x104>)
 8001c54:	f7ff fc18 	bl	8001488 <displayImage>
	  HAL_Delay(1000);
 8001c58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c5c:	f000 fd72 	bl	8002744 <HAL_Delay>
	  displayImage("tiger.bmp");
 8001c60:	4816      	ldr	r0, [pc, #88]	; (8001cbc <main+0x108>)
 8001c62:	f7ff fc11 	bl	8001488 <displayImage>
	  HAL_Delay(1000);
 8001c66:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c6a:	f000 fd6b 	bl	8002744 <HAL_Delay>
	  displayImage("tiger1.bmp");
 8001c6e:	4814      	ldr	r0, [pc, #80]	; (8001cc0 <main+0x10c>)
 8001c70:	f7ff fc0a 	bl	8001488 <displayImage>
	  HAL_Delay(1000);
 8001c74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c78:	f000 fd64 	bl	8002744 <HAL_Delay>
	  displayImage("tiger2.bmp");
 8001c7c:	4811      	ldr	r0, [pc, #68]	; (8001cc4 <main+0x110>)
 8001c7e:	f7ff fc03 	bl	8001488 <displayImage>
	  HAL_Delay(1000);
 8001c82:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c86:	f000 fd5d 	bl	8002744 <HAL_Delay>
	  displayImage("ismail.bmp");
 8001c8a:	e7e2      	b.n	8001c52 <main+0x9e>
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	200001a0 	.word	0x200001a0
 8001c98:	40020000 	.word	0x40020000
 8001c9c:	200000f0 	.word	0x200000f0
 8001ca0:	08008c44 	.word	0x08008c44
 8001ca4:	20000238 	.word	0x20000238
 8001ca8:	08008c48 	.word	0x08008c48
 8001cac:	200000b0 	.word	0x200000b0
 8001cb0:	20000004 	.word	0x20000004
 8001cb4:	08008c68 	.word	0x08008c68
 8001cb8:	08008c7c 	.word	0x08008c7c
 8001cbc:	08008c88 	.word	0x08008c88
 8001cc0:	08008c94 	.word	0x08008c94
 8001cc4:	08008ca0 	.word	0x08008ca0

08001cc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b094      	sub	sp, #80	; 0x50
 8001ccc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cce:	f107 0320 	add.w	r3, r7, #32
 8001cd2:	2230      	movs	r2, #48	; 0x30
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f006 fa4c 	bl	8008174 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cdc:	f107 030c 	add.w	r3, r7, #12
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	605a      	str	r2, [r3, #4]
 8001ce6:	609a      	str	r2, [r3, #8]
 8001ce8:	60da      	str	r2, [r3, #12]
 8001cea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cec:	2300      	movs	r3, #0
 8001cee:	60bb      	str	r3, [r7, #8]
 8001cf0:	4b28      	ldr	r3, [pc, #160]	; (8001d94 <SystemClock_Config+0xcc>)
 8001cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf4:	4a27      	ldr	r2, [pc, #156]	; (8001d94 <SystemClock_Config+0xcc>)
 8001cf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cfa:	6413      	str	r3, [r2, #64]	; 0x40
 8001cfc:	4b25      	ldr	r3, [pc, #148]	; (8001d94 <SystemClock_Config+0xcc>)
 8001cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d04:	60bb      	str	r3, [r7, #8]
 8001d06:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d08:	2300      	movs	r3, #0
 8001d0a:	607b      	str	r3, [r7, #4]
 8001d0c:	4b22      	ldr	r3, [pc, #136]	; (8001d98 <SystemClock_Config+0xd0>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a21      	ldr	r2, [pc, #132]	; (8001d98 <SystemClock_Config+0xd0>)
 8001d12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d16:	6013      	str	r3, [r2, #0]
 8001d18:	4b1f      	ldr	r3, [pc, #124]	; (8001d98 <SystemClock_Config+0xd0>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d20:	607b      	str	r3, [r7, #4]
 8001d22:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d24:	2301      	movs	r3, #1
 8001d26:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d2c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d2e:	2302      	movs	r3, #2
 8001d30:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d32:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d36:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001d38:	2308      	movs	r3, #8
 8001d3a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001d3c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001d40:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d42:	2302      	movs	r3, #2
 8001d44:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001d46:	2307      	movs	r3, #7
 8001d48:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d4a:	f107 0320 	add.w	r3, r7, #32
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f000 ffb8 	bl	8002cc4 <HAL_RCC_OscConfig>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001d5a:	f000 fa11 	bl	8002180 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d5e:	230f      	movs	r3, #15
 8001d60:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d62:	2302      	movs	r3, #2
 8001d64:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d66:	2300      	movs	r3, #0
 8001d68:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8001d6a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001d6e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001d70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d74:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001d76:	f107 030c 	add.w	r3, r7, #12
 8001d7a:	2105      	movs	r1, #5
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f001 fa19 	bl	80031b4 <HAL_RCC_ClockConfig>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001d88:	f000 f9fa 	bl	8002180 <Error_Handler>
  }
}
 8001d8c:	bf00      	nop
 8001d8e:	3750      	adds	r7, #80	; 0x50
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	40023800 	.word	0x40023800
 8001d98:	40007000 	.word	0x40007000

08001d9c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001da0:	4b17      	ldr	r3, [pc, #92]	; (8001e00 <MX_SPI1_Init+0x64>)
 8001da2:	4a18      	ldr	r2, [pc, #96]	; (8001e04 <MX_SPI1_Init+0x68>)
 8001da4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001da6:	4b16      	ldr	r3, [pc, #88]	; (8001e00 <MX_SPI1_Init+0x64>)
 8001da8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001dac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001dae:	4b14      	ldr	r3, [pc, #80]	; (8001e00 <MX_SPI1_Init+0x64>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001db4:	4b12      	ldr	r3, [pc, #72]	; (8001e00 <MX_SPI1_Init+0x64>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001dba:	4b11      	ldr	r3, [pc, #68]	; (8001e00 <MX_SPI1_Init+0x64>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001dc0:	4b0f      	ldr	r3, [pc, #60]	; (8001e00 <MX_SPI1_Init+0x64>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001dc6:	4b0e      	ldr	r3, [pc, #56]	; (8001e00 <MX_SPI1_Init+0x64>)
 8001dc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dcc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001dce:	4b0c      	ldr	r3, [pc, #48]	; (8001e00 <MX_SPI1_Init+0x64>)
 8001dd0:	2228      	movs	r2, #40	; 0x28
 8001dd2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001dd4:	4b0a      	ldr	r3, [pc, #40]	; (8001e00 <MX_SPI1_Init+0x64>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001dda:	4b09      	ldr	r3, [pc, #36]	; (8001e00 <MX_SPI1_Init+0x64>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001de0:	4b07      	ldr	r3, [pc, #28]	; (8001e00 <MX_SPI1_Init+0x64>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001de6:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <MX_SPI1_Init+0x64>)
 8001de8:	220a      	movs	r2, #10
 8001dea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001dec:	4804      	ldr	r0, [pc, #16]	; (8001e00 <MX_SPI1_Init+0x64>)
 8001dee:	f001 fbcd 	bl	800358c <HAL_SPI_Init>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001df8:	f000 f9c2 	bl	8002180 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001dfc:	bf00      	nop
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	200000f0 	.word	0x200000f0
 8001e04:	40013000 	.word	0x40013000

08001e08 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001e0c:	4b17      	ldr	r3, [pc, #92]	; (8001e6c <MX_SPI2_Init+0x64>)
 8001e0e:	4a18      	ldr	r2, [pc, #96]	; (8001e70 <MX_SPI2_Init+0x68>)
 8001e10:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001e12:	4b16      	ldr	r3, [pc, #88]	; (8001e6c <MX_SPI2_Init+0x64>)
 8001e14:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e18:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001e1a:	4b14      	ldr	r3, [pc, #80]	; (8001e6c <MX_SPI2_Init+0x64>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e20:	4b12      	ldr	r3, [pc, #72]	; (8001e6c <MX_SPI2_Init+0x64>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e26:	4b11      	ldr	r3, [pc, #68]	; (8001e6c <MX_SPI2_Init+0x64>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e2c:	4b0f      	ldr	r3, [pc, #60]	; (8001e6c <MX_SPI2_Init+0x64>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001e32:	4b0e      	ldr	r3, [pc, #56]	; (8001e6c <MX_SPI2_Init+0x64>)
 8001e34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e38:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e3a:	4b0c      	ldr	r3, [pc, #48]	; (8001e6c <MX_SPI2_Init+0x64>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e40:	4b0a      	ldr	r3, [pc, #40]	; (8001e6c <MX_SPI2_Init+0x64>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e46:	4b09      	ldr	r3, [pc, #36]	; (8001e6c <MX_SPI2_Init+0x64>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e4c:	4b07      	ldr	r3, [pc, #28]	; (8001e6c <MX_SPI2_Init+0x64>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001e52:	4b06      	ldr	r3, [pc, #24]	; (8001e6c <MX_SPI2_Init+0x64>)
 8001e54:	220a      	movs	r2, #10
 8001e56:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001e58:	4804      	ldr	r0, [pc, #16]	; (8001e6c <MX_SPI2_Init+0x64>)
 8001e5a:	f001 fb97 	bl	800358c <HAL_SPI_Init>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001e64:	f000 f98c 	bl	8002180 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001e68:	bf00      	nop
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	20000148 	.word	0x20000148
 8001e70:	40003800 	.word	0x40003800

08001e74 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b08e      	sub	sp, #56	; 0x38
 8001e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e7e:	2200      	movs	r2, #0
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	605a      	str	r2, [r3, #4]
 8001e84:	609a      	str	r2, [r3, #8]
 8001e86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e88:	f107 0320 	add.w	r3, r7, #32
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e92:	1d3b      	adds	r3, r7, #4
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	605a      	str	r2, [r3, #4]
 8001e9a:	609a      	str	r2, [r3, #8]
 8001e9c:	60da      	str	r2, [r3, #12]
 8001e9e:	611a      	str	r2, [r3, #16]
 8001ea0:	615a      	str	r2, [r3, #20]
 8001ea2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ea4:	4b2d      	ldr	r3, [pc, #180]	; (8001f5c <MX_TIM2_Init+0xe8>)
 8001ea6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001eaa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8001eac:	4b2b      	ldr	r3, [pc, #172]	; (8001f5c <MX_TIM2_Init+0xe8>)
 8001eae:	f240 3247 	movw	r2, #839	; 0x347
 8001eb2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eb4:	4b29      	ldr	r3, [pc, #164]	; (8001f5c <MX_TIM2_Init+0xe8>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8001eba:	4b28      	ldr	r3, [pc, #160]	; (8001f5c <MX_TIM2_Init+0xe8>)
 8001ebc:	f242 720f 	movw	r2, #9999	; 0x270f
 8001ec0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ec2:	4b26      	ldr	r3, [pc, #152]	; (8001f5c <MX_TIM2_Init+0xe8>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ec8:	4b24      	ldr	r3, [pc, #144]	; (8001f5c <MX_TIM2_Init+0xe8>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ece:	4823      	ldr	r0, [pc, #140]	; (8001f5c <MX_TIM2_Init+0xe8>)
 8001ed0:	f001 ffe4 	bl	8003e9c <HAL_TIM_Base_Init>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001eda:	f000 f951 	bl	8002180 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ede:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ee2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ee4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ee8:	4619      	mov	r1, r3
 8001eea:	481c      	ldr	r0, [pc, #112]	; (8001f5c <MX_TIM2_Init+0xe8>)
 8001eec:	f002 fa08 	bl	8004300 <HAL_TIM_ConfigClockSource>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001ef6:	f000 f943 	bl	8002180 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001efa:	4818      	ldr	r0, [pc, #96]	; (8001f5c <MX_TIM2_Init+0xe8>)
 8001efc:	f002 f81d 	bl	8003f3a <HAL_TIM_PWM_Init>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001f06:	f000 f93b 	bl	8002180 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f12:	f107 0320 	add.w	r3, r7, #32
 8001f16:	4619      	mov	r1, r3
 8001f18:	4810      	ldr	r0, [pc, #64]	; (8001f5c <MX_TIM2_Init+0xe8>)
 8001f1a:	f002 fdc9 	bl	8004ab0 <HAL_TIMEx_MasterConfigSynchronization>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001f24:	f000 f92c 	bl	8002180 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f28:	2360      	movs	r3, #96	; 0x60
 8001f2a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f30:	2300      	movs	r3, #0
 8001f32:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f34:	2300      	movs	r3, #0
 8001f36:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f38:	1d3b      	adds	r3, r7, #4
 8001f3a:	2204      	movs	r2, #4
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4807      	ldr	r0, [pc, #28]	; (8001f5c <MX_TIM2_Init+0xe8>)
 8001f40:	f002 f91c 	bl	800417c <HAL_TIM_PWM_ConfigChannel>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001f4a:	f000 f919 	bl	8002180 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001f4e:	4803      	ldr	r0, [pc, #12]	; (8001f5c <MX_TIM2_Init+0xe8>)
 8001f50:	f000 fa02 	bl	8002358 <HAL_TIM_MspPostInit>

}
 8001f54:	bf00      	nop
 8001f56:	3738      	adds	r7, #56	; 0x38
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	200001a0 	.word	0x200001a0

08001f60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b08c      	sub	sp, #48	; 0x30
 8001f64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f66:	f107 031c 	add.w	r3, r7, #28
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	601a      	str	r2, [r3, #0]
 8001f6e:	605a      	str	r2, [r3, #4]
 8001f70:	609a      	str	r2, [r3, #8]
 8001f72:	60da      	str	r2, [r3, #12]
 8001f74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	61bb      	str	r3, [r7, #24]
 8001f7a:	4b4d      	ldr	r3, [pc, #308]	; (80020b0 <MX_GPIO_Init+0x150>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	4a4c      	ldr	r2, [pc, #304]	; (80020b0 <MX_GPIO_Init+0x150>)
 8001f80:	f043 0310 	orr.w	r3, r3, #16
 8001f84:	6313      	str	r3, [r2, #48]	; 0x30
 8001f86:	4b4a      	ldr	r3, [pc, #296]	; (80020b0 <MX_GPIO_Init+0x150>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8a:	f003 0310 	and.w	r3, r3, #16
 8001f8e:	61bb      	str	r3, [r7, #24]
 8001f90:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	617b      	str	r3, [r7, #20]
 8001f96:	4b46      	ldr	r3, [pc, #280]	; (80020b0 <MX_GPIO_Init+0x150>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9a:	4a45      	ldr	r2, [pc, #276]	; (80020b0 <MX_GPIO_Init+0x150>)
 8001f9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fa2:	4b43      	ldr	r3, [pc, #268]	; (80020b0 <MX_GPIO_Init+0x150>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001faa:	617b      	str	r3, [r7, #20]
 8001fac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fae:	2300      	movs	r3, #0
 8001fb0:	613b      	str	r3, [r7, #16]
 8001fb2:	4b3f      	ldr	r3, [pc, #252]	; (80020b0 <MX_GPIO_Init+0x150>)
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb6:	4a3e      	ldr	r2, [pc, #248]	; (80020b0 <MX_GPIO_Init+0x150>)
 8001fb8:	f043 0304 	orr.w	r3, r3, #4
 8001fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001fbe:	4b3c      	ldr	r3, [pc, #240]	; (80020b0 <MX_GPIO_Init+0x150>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc2:	f003 0304 	and.w	r3, r3, #4
 8001fc6:	613b      	str	r3, [r7, #16]
 8001fc8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fca:	2300      	movs	r3, #0
 8001fcc:	60fb      	str	r3, [r7, #12]
 8001fce:	4b38      	ldr	r3, [pc, #224]	; (80020b0 <MX_GPIO_Init+0x150>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd2:	4a37      	ldr	r2, [pc, #220]	; (80020b0 <MX_GPIO_Init+0x150>)
 8001fd4:	f043 0301 	orr.w	r3, r3, #1
 8001fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fda:	4b35      	ldr	r3, [pc, #212]	; (80020b0 <MX_GPIO_Init+0x150>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	60fb      	str	r3, [r7, #12]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	60bb      	str	r3, [r7, #8]
 8001fea:	4b31      	ldr	r3, [pc, #196]	; (80020b0 <MX_GPIO_Init+0x150>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fee:	4a30      	ldr	r2, [pc, #192]	; (80020b0 <MX_GPIO_Init+0x150>)
 8001ff0:	f043 0302 	orr.w	r3, r3, #2
 8001ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ff6:	4b2e      	ldr	r3, [pc, #184]	; (80020b0 <MX_GPIO_Init+0x150>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	60bb      	str	r3, [r7, #8]
 8002000:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002002:	2300      	movs	r3, #0
 8002004:	607b      	str	r3, [r7, #4]
 8002006:	4b2a      	ldr	r3, [pc, #168]	; (80020b0 <MX_GPIO_Init+0x150>)
 8002008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200a:	4a29      	ldr	r2, [pc, #164]	; (80020b0 <MX_GPIO_Init+0x150>)
 800200c:	f043 0308 	orr.w	r3, r3, #8
 8002010:	6313      	str	r3, [r2, #48]	; 0x30
 8002012:	4b27      	ldr	r3, [pc, #156]	; (80020b0 <MX_GPIO_Init+0x150>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002016:	f003 0308 	and.w	r3, r3, #8
 800201a:	607b      	str	r3, [r7, #4]
 800201c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 800201e:	2200      	movs	r2, #0
 8002020:	2102      	movs	r1, #2
 8002022:	4824      	ldr	r0, [pc, #144]	; (80020b4 <MX_GPIO_Init+0x154>)
 8002024:	f000 fe34 	bl	8002c90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8002028:	2200      	movs	r2, #0
 800202a:	2110      	movs	r1, #16
 800202c:	4822      	ldr	r0, [pc, #136]	; (80020b8 <MX_GPIO_Init+0x158>)
 800202e:	f000 fe2f 	bl	8002c90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8002032:	2200      	movs	r2, #0
 8002034:	2120      	movs	r1, #32
 8002036:	4821      	ldr	r0, [pc, #132]	; (80020bc <MX_GPIO_Init+0x15c>)
 8002038:	f000 fe2a 	bl	8002c90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800203c:	2302      	movs	r3, #2
 800203e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002040:	2301      	movs	r3, #1
 8002042:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002044:	2300      	movs	r3, #0
 8002046:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002048:	2300      	movs	r3, #0
 800204a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800204c:	f107 031c 	add.w	r3, r7, #28
 8002050:	4619      	mov	r1, r3
 8002052:	4818      	ldr	r0, [pc, #96]	; (80020b4 <MX_GPIO_Init+0x154>)
 8002054:	f000 fc80 	bl	8002958 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002058:	2308      	movs	r3, #8
 800205a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800205c:	2300      	movs	r3, #0
 800205e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002060:	2301      	movs	r3, #1
 8002062:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002064:	f107 031c 	add.w	r3, r7, #28
 8002068:	4619      	mov	r1, r3
 800206a:	4813      	ldr	r0, [pc, #76]	; (80020b8 <MX_GPIO_Init+0x158>)
 800206c:	f000 fc74 	bl	8002958 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002070:	2310      	movs	r3, #16
 8002072:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002074:	2301      	movs	r3, #1
 8002076:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002078:	2300      	movs	r3, #0
 800207a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207c:	2300      	movs	r3, #0
 800207e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002080:	f107 031c 	add.w	r3, r7, #28
 8002084:	4619      	mov	r1, r3
 8002086:	480c      	ldr	r0, [pc, #48]	; (80020b8 <MX_GPIO_Init+0x158>)
 8002088:	f000 fc66 	bl	8002958 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800208c:	2320      	movs	r3, #32
 800208e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002090:	2301      	movs	r3, #1
 8002092:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002094:	2300      	movs	r3, #0
 8002096:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002098:	2300      	movs	r3, #0
 800209a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800209c:	f107 031c 	add.w	r3, r7, #28
 80020a0:	4619      	mov	r1, r3
 80020a2:	4806      	ldr	r0, [pc, #24]	; (80020bc <MX_GPIO_Init+0x15c>)
 80020a4:	f000 fc58 	bl	8002958 <HAL_GPIO_Init>

}
 80020a8:	bf00      	nop
 80020aa:	3730      	adds	r7, #48	; 0x30
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	40023800 	.word	0x40023800
 80020b4:	40020800 	.word	0x40020800
 80020b8:	40020000 	.word	0x40020000
 80020bc:	40020400 	.word	0x40020400

080020c0 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b088      	sub	sp, #32
 80020c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80020c6:	1d3b      	adds	r3, r7, #4
 80020c8:	2200      	movs	r2, #0
 80020ca:	601a      	str	r2, [r3, #0]
 80020cc:	605a      	str	r2, [r3, #4]
 80020ce:	609a      	str	r2, [r3, #8]
 80020d0:	60da      	str	r2, [r3, #12]
 80020d2:	611a      	str	r2, [r3, #16]
 80020d4:	615a      	str	r2, [r3, #20]
 80020d6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80020d8:	4b27      	ldr	r3, [pc, #156]	; (8002178 <MX_FSMC_Init+0xb8>)
 80020da:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80020de:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80020e0:	4b25      	ldr	r3, [pc, #148]	; (8002178 <MX_FSMC_Init+0xb8>)
 80020e2:	4a26      	ldr	r2, [pc, #152]	; (800217c <MX_FSMC_Init+0xbc>)
 80020e4:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80020e6:	4b24      	ldr	r3, [pc, #144]	; (8002178 <MX_FSMC_Init+0xb8>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80020ec:	4b22      	ldr	r3, [pc, #136]	; (8002178 <MX_FSMC_Init+0xb8>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80020f2:	4b21      	ldr	r3, [pc, #132]	; (8002178 <MX_FSMC_Init+0xb8>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80020f8:	4b1f      	ldr	r3, [pc, #124]	; (8002178 <MX_FSMC_Init+0xb8>)
 80020fa:	2210      	movs	r2, #16
 80020fc:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80020fe:	4b1e      	ldr	r3, [pc, #120]	; (8002178 <MX_FSMC_Init+0xb8>)
 8002100:	2200      	movs	r2, #0
 8002102:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8002104:	4b1c      	ldr	r3, [pc, #112]	; (8002178 <MX_FSMC_Init+0xb8>)
 8002106:	2200      	movs	r2, #0
 8002108:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800210a:	4b1b      	ldr	r3, [pc, #108]	; (8002178 <MX_FSMC_Init+0xb8>)
 800210c:	2200      	movs	r2, #0
 800210e:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8002110:	4b19      	ldr	r3, [pc, #100]	; (8002178 <MX_FSMC_Init+0xb8>)
 8002112:	2200      	movs	r2, #0
 8002114:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8002116:	4b18      	ldr	r3, [pc, #96]	; (8002178 <MX_FSMC_Init+0xb8>)
 8002118:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800211c:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800211e:	4b16      	ldr	r3, [pc, #88]	; (8002178 <MX_FSMC_Init+0xb8>)
 8002120:	2200      	movs	r2, #0
 8002122:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8002124:	4b14      	ldr	r3, [pc, #80]	; (8002178 <MX_FSMC_Init+0xb8>)
 8002126:	2200      	movs	r2, #0
 8002128:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800212a:	4b13      	ldr	r3, [pc, #76]	; (8002178 <MX_FSMC_Init+0xb8>)
 800212c:	2200      	movs	r2, #0
 800212e:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8002130:	4b11      	ldr	r3, [pc, #68]	; (8002178 <MX_FSMC_Init+0xb8>)
 8002132:	2200      	movs	r2, #0
 8002134:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8002136:	4b10      	ldr	r3, [pc, #64]	; (8002178 <MX_FSMC_Init+0xb8>)
 8002138:	2200      	movs	r2, #0
 800213a:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 9;
 800213c:	2309      	movs	r3, #9
 800213e:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8002140:	230f      	movs	r3, #15
 8002142:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 36;
 8002144:	2324      	movs	r3, #36	; 0x24
 8002146:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8002148:	230f      	movs	r3, #15
 800214a:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 800214c:	2310      	movs	r3, #16
 800214e:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8002150:	2311      	movs	r3, #17
 8002152:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8002154:	2300      	movs	r3, #0
 8002156:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8002158:	1d3b      	adds	r3, r7, #4
 800215a:	2200      	movs	r2, #0
 800215c:	4619      	mov	r1, r3
 800215e:	4806      	ldr	r0, [pc, #24]	; (8002178 <MX_FSMC_Init+0xb8>)
 8002160:	f001 fe54 	bl	8003e0c <HAL_SRAM_Init>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 800216a:	f000 f809 	bl	8002180 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800216e:	bf00      	nop
 8002170:	3720      	adds	r7, #32
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	200001e8 	.word	0x200001e8
 800217c:	a0000104 	.word	0xa0000104

08002180 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002184:	b672      	cpsid	i
}
 8002186:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002188:	e7fe      	b.n	8002188 <Error_Handler+0x8>
	...

0800218c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002192:	2300      	movs	r3, #0
 8002194:	607b      	str	r3, [r7, #4]
 8002196:	4b10      	ldr	r3, [pc, #64]	; (80021d8 <HAL_MspInit+0x4c>)
 8002198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219a:	4a0f      	ldr	r2, [pc, #60]	; (80021d8 <HAL_MspInit+0x4c>)
 800219c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021a0:	6453      	str	r3, [r2, #68]	; 0x44
 80021a2:	4b0d      	ldr	r3, [pc, #52]	; (80021d8 <HAL_MspInit+0x4c>)
 80021a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021aa:	607b      	str	r3, [r7, #4]
 80021ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021ae:	2300      	movs	r3, #0
 80021b0:	603b      	str	r3, [r7, #0]
 80021b2:	4b09      	ldr	r3, [pc, #36]	; (80021d8 <HAL_MspInit+0x4c>)
 80021b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b6:	4a08      	ldr	r2, [pc, #32]	; (80021d8 <HAL_MspInit+0x4c>)
 80021b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021bc:	6413      	str	r3, [r2, #64]	; 0x40
 80021be:	4b06      	ldr	r3, [pc, #24]	; (80021d8 <HAL_MspInit+0x4c>)
 80021c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c6:	603b      	str	r3, [r7, #0]
 80021c8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80021ca:	2007      	movs	r0, #7
 80021cc:	f000 fb90 	bl	80028f0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021d0:	bf00      	nop
 80021d2:	3708      	adds	r7, #8
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	40023800 	.word	0x40023800

080021dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b08c      	sub	sp, #48	; 0x30
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e4:	f107 031c 	add.w	r3, r7, #28
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	605a      	str	r2, [r3, #4]
 80021ee:	609a      	str	r2, [r3, #8]
 80021f0:	60da      	str	r2, [r3, #12]
 80021f2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a41      	ldr	r2, [pc, #260]	; (8002300 <HAL_SPI_MspInit+0x124>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d12c      	bne.n	8002258 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80021fe:	2300      	movs	r3, #0
 8002200:	61bb      	str	r3, [r7, #24]
 8002202:	4b40      	ldr	r3, [pc, #256]	; (8002304 <HAL_SPI_MspInit+0x128>)
 8002204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002206:	4a3f      	ldr	r2, [pc, #252]	; (8002304 <HAL_SPI_MspInit+0x128>)
 8002208:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800220c:	6453      	str	r3, [r2, #68]	; 0x44
 800220e:	4b3d      	ldr	r3, [pc, #244]	; (8002304 <HAL_SPI_MspInit+0x128>)
 8002210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002212:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002216:	61bb      	str	r3, [r7, #24]
 8002218:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800221a:	2300      	movs	r3, #0
 800221c:	617b      	str	r3, [r7, #20]
 800221e:	4b39      	ldr	r3, [pc, #228]	; (8002304 <HAL_SPI_MspInit+0x128>)
 8002220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002222:	4a38      	ldr	r2, [pc, #224]	; (8002304 <HAL_SPI_MspInit+0x128>)
 8002224:	f043 0301 	orr.w	r3, r3, #1
 8002228:	6313      	str	r3, [r2, #48]	; 0x30
 800222a:	4b36      	ldr	r3, [pc, #216]	; (8002304 <HAL_SPI_MspInit+0x128>)
 800222c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	617b      	str	r3, [r7, #20]
 8002234:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002236:	23e0      	movs	r3, #224	; 0xe0
 8002238:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800223a:	2302      	movs	r3, #2
 800223c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223e:	2300      	movs	r3, #0
 8002240:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002242:	2303      	movs	r3, #3
 8002244:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002246:	2305      	movs	r3, #5
 8002248:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800224a:	f107 031c 	add.w	r3, r7, #28
 800224e:	4619      	mov	r1, r3
 8002250:	482d      	ldr	r0, [pc, #180]	; (8002308 <HAL_SPI_MspInit+0x12c>)
 8002252:	f000 fb81 	bl	8002958 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002256:	e04f      	b.n	80022f8 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a2b      	ldr	r2, [pc, #172]	; (800230c <HAL_SPI_MspInit+0x130>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d14a      	bne.n	80022f8 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002262:	2300      	movs	r3, #0
 8002264:	613b      	str	r3, [r7, #16]
 8002266:	4b27      	ldr	r3, [pc, #156]	; (8002304 <HAL_SPI_MspInit+0x128>)
 8002268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226a:	4a26      	ldr	r2, [pc, #152]	; (8002304 <HAL_SPI_MspInit+0x128>)
 800226c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002270:	6413      	str	r3, [r2, #64]	; 0x40
 8002272:	4b24      	ldr	r3, [pc, #144]	; (8002304 <HAL_SPI_MspInit+0x128>)
 8002274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002276:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800227a:	613b      	str	r3, [r7, #16]
 800227c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800227e:	2300      	movs	r3, #0
 8002280:	60fb      	str	r3, [r7, #12]
 8002282:	4b20      	ldr	r3, [pc, #128]	; (8002304 <HAL_SPI_MspInit+0x128>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002286:	4a1f      	ldr	r2, [pc, #124]	; (8002304 <HAL_SPI_MspInit+0x128>)
 8002288:	f043 0304 	orr.w	r3, r3, #4
 800228c:	6313      	str	r3, [r2, #48]	; 0x30
 800228e:	4b1d      	ldr	r3, [pc, #116]	; (8002304 <HAL_SPI_MspInit+0x128>)
 8002290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002292:	f003 0304 	and.w	r3, r3, #4
 8002296:	60fb      	str	r3, [r7, #12]
 8002298:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800229a:	2300      	movs	r3, #0
 800229c:	60bb      	str	r3, [r7, #8]
 800229e:	4b19      	ldr	r3, [pc, #100]	; (8002304 <HAL_SPI_MspInit+0x128>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a2:	4a18      	ldr	r2, [pc, #96]	; (8002304 <HAL_SPI_MspInit+0x128>)
 80022a4:	f043 0302 	orr.w	r3, r3, #2
 80022a8:	6313      	str	r3, [r2, #48]	; 0x30
 80022aa:	4b16      	ldr	r3, [pc, #88]	; (8002304 <HAL_SPI_MspInit+0x128>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ae:	f003 0302 	and.w	r3, r3, #2
 80022b2:	60bb      	str	r3, [r7, #8]
 80022b4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80022b6:	230c      	movs	r3, #12
 80022b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ba:	2302      	movs	r3, #2
 80022bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022be:	2300      	movs	r3, #0
 80022c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022c2:	2303      	movs	r3, #3
 80022c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80022c6:	2305      	movs	r3, #5
 80022c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022ca:	f107 031c 	add.w	r3, r7, #28
 80022ce:	4619      	mov	r1, r3
 80022d0:	480f      	ldr	r0, [pc, #60]	; (8002310 <HAL_SPI_MspInit+0x134>)
 80022d2:	f000 fb41 	bl	8002958 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80022d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022dc:	2302      	movs	r3, #2
 80022de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e0:	2300      	movs	r3, #0
 80022e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022e4:	2303      	movs	r3, #3
 80022e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80022e8:	2305      	movs	r3, #5
 80022ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ec:	f107 031c 	add.w	r3, r7, #28
 80022f0:	4619      	mov	r1, r3
 80022f2:	4808      	ldr	r0, [pc, #32]	; (8002314 <HAL_SPI_MspInit+0x138>)
 80022f4:	f000 fb30 	bl	8002958 <HAL_GPIO_Init>
}
 80022f8:	bf00      	nop
 80022fa:	3730      	adds	r7, #48	; 0x30
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	40013000 	.word	0x40013000
 8002304:	40023800 	.word	0x40023800
 8002308:	40020000 	.word	0x40020000
 800230c:	40003800 	.word	0x40003800
 8002310:	40020800 	.word	0x40020800
 8002314:	40020400 	.word	0x40020400

08002318 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002318:	b480      	push	{r7}
 800231a:	b085      	sub	sp, #20
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002328:	d10d      	bne.n	8002346 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800232a:	2300      	movs	r3, #0
 800232c:	60fb      	str	r3, [r7, #12]
 800232e:	4b09      	ldr	r3, [pc, #36]	; (8002354 <HAL_TIM_Base_MspInit+0x3c>)
 8002330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002332:	4a08      	ldr	r2, [pc, #32]	; (8002354 <HAL_TIM_Base_MspInit+0x3c>)
 8002334:	f043 0301 	orr.w	r3, r3, #1
 8002338:	6413      	str	r3, [r2, #64]	; 0x40
 800233a:	4b06      	ldr	r3, [pc, #24]	; (8002354 <HAL_TIM_Base_MspInit+0x3c>)
 800233c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	60fb      	str	r3, [r7, #12]
 8002344:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002346:	bf00      	nop
 8002348:	3714      	adds	r7, #20
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	40023800 	.word	0x40023800

08002358 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b088      	sub	sp, #32
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002360:	f107 030c 	add.w	r3, r7, #12
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]
 8002368:	605a      	str	r2, [r3, #4]
 800236a:	609a      	str	r2, [r3, #8]
 800236c:	60da      	str	r2, [r3, #12]
 800236e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002378:	d11d      	bne.n	80023b6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800237a:	2300      	movs	r3, #0
 800237c:	60bb      	str	r3, [r7, #8]
 800237e:	4b10      	ldr	r3, [pc, #64]	; (80023c0 <HAL_TIM_MspPostInit+0x68>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002382:	4a0f      	ldr	r2, [pc, #60]	; (80023c0 <HAL_TIM_MspPostInit+0x68>)
 8002384:	f043 0301 	orr.w	r3, r3, #1
 8002388:	6313      	str	r3, [r2, #48]	; 0x30
 800238a:	4b0d      	ldr	r3, [pc, #52]	; (80023c0 <HAL_TIM_MspPostInit+0x68>)
 800238c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	60bb      	str	r3, [r7, #8]
 8002394:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002396:	2302      	movs	r3, #2
 8002398:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800239a:	2302      	movs	r3, #2
 800239c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239e:	2300      	movs	r3, #0
 80023a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023a2:	2300      	movs	r3, #0
 80023a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80023a6:	2301      	movs	r3, #1
 80023a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023aa:	f107 030c 	add.w	r3, r7, #12
 80023ae:	4619      	mov	r1, r3
 80023b0:	4804      	ldr	r0, [pc, #16]	; (80023c4 <HAL_TIM_MspPostInit+0x6c>)
 80023b2:	f000 fad1 	bl	8002958 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80023b6:	bf00      	nop
 80023b8:	3720      	adds	r7, #32
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	40023800 	.word	0x40023800
 80023c4:	40020000 	.word	0x40020000

080023c8 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b086      	sub	sp, #24
 80023cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80023ce:	1d3b      	adds	r3, r7, #4
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]
 80023d4:	605a      	str	r2, [r3, #4]
 80023d6:	609a      	str	r2, [r3, #8]
 80023d8:	60da      	str	r2, [r3, #12]
 80023da:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80023dc:	4b1c      	ldr	r3, [pc, #112]	; (8002450 <HAL_FSMC_MspInit+0x88>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d131      	bne.n	8002448 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80023e4:	4b1a      	ldr	r3, [pc, #104]	; (8002450 <HAL_FSMC_MspInit+0x88>)
 80023e6:	2201      	movs	r2, #1
 80023e8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80023ea:	2300      	movs	r3, #0
 80023ec:	603b      	str	r3, [r7, #0]
 80023ee:	4b19      	ldr	r3, [pc, #100]	; (8002454 <HAL_FSMC_MspInit+0x8c>)
 80023f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023f2:	4a18      	ldr	r2, [pc, #96]	; (8002454 <HAL_FSMC_MspInit+0x8c>)
 80023f4:	f043 0301 	orr.w	r3, r3, #1
 80023f8:	6393      	str	r3, [r2, #56]	; 0x38
 80023fa:	4b16      	ldr	r3, [pc, #88]	; (8002454 <HAL_FSMC_MspInit+0x8c>)
 80023fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	603b      	str	r3, [r7, #0]
 8002404:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8002406:	f64f 7388 	movw	r3, #65416	; 0xff88
 800240a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800240c:	2302      	movs	r3, #2
 800240e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002410:	2300      	movs	r3, #0
 8002412:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002414:	2303      	movs	r3, #3
 8002416:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002418:	230c      	movs	r3, #12
 800241a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800241c:	1d3b      	adds	r3, r7, #4
 800241e:	4619      	mov	r1, r3
 8002420:	480d      	ldr	r0, [pc, #52]	; (8002458 <HAL_FSMC_MspInit+0x90>)
 8002422:	f000 fa99 	bl	8002958 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8002426:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 800242a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800242c:	2302      	movs	r3, #2
 800242e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002430:	2300      	movs	r3, #0
 8002432:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002434:	2303      	movs	r3, #3
 8002436:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002438:	230c      	movs	r3, #12
 800243a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800243c:	1d3b      	adds	r3, r7, #4
 800243e:	4619      	mov	r1, r3
 8002440:	4806      	ldr	r0, [pc, #24]	; (800245c <HAL_FSMC_MspInit+0x94>)
 8002442:	f000 fa89 	bl	8002958 <HAL_GPIO_Init>
 8002446:	e000      	b.n	800244a <HAL_FSMC_MspInit+0x82>
    return;
 8002448:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800244a:	3718      	adds	r7, #24
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	20001270 	.word	0x20001270
 8002454:	40023800 	.word	0x40023800
 8002458:	40021000 	.word	0x40021000
 800245c:	40020c00 	.word	0x40020c00

08002460 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8002468:	f7ff ffae 	bl	80023c8 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800246c:	bf00      	nop
 800246e:	3708      	adds	r7, #8
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}

08002474 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8002478:	4b0e      	ldr	r3, [pc, #56]	; (80024b4 <SDTimer_Handler+0x40>)
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b00      	cmp	r3, #0
 8002480:	d006      	beq.n	8002490 <SDTimer_Handler+0x1c>
    Timer1--;
 8002482:	4b0c      	ldr	r3, [pc, #48]	; (80024b4 <SDTimer_Handler+0x40>)
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	b2db      	uxtb	r3, r3
 8002488:	3b01      	subs	r3, #1
 800248a:	b2da      	uxtb	r2, r3
 800248c:	4b09      	ldr	r3, [pc, #36]	; (80024b4 <SDTimer_Handler+0x40>)
 800248e:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8002490:	4b09      	ldr	r3, [pc, #36]	; (80024b8 <SDTimer_Handler+0x44>)
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	b2db      	uxtb	r3, r3
 8002496:	2b00      	cmp	r3, #0
 8002498:	d006      	beq.n	80024a8 <SDTimer_Handler+0x34>
    Timer2--;
 800249a:	4b07      	ldr	r3, [pc, #28]	; (80024b8 <SDTimer_Handler+0x44>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	3b01      	subs	r3, #1
 80024a2:	b2da      	uxtb	r2, r3
 80024a4:	4b04      	ldr	r3, [pc, #16]	; (80024b8 <SDTimer_Handler+0x44>)
 80024a6:	701a      	strb	r2, [r3, #0]
}
 80024a8:	bf00      	nop
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	20001275 	.word	0x20001275
 80024b8:	20001276 	.word	0x20001276

080024bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024c0:	e7fe      	b.n	80024c0 <NMI_Handler+0x4>

080024c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024c2:	b480      	push	{r7}
 80024c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024c6:	e7fe      	b.n	80024c6 <HardFault_Handler+0x4>

080024c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024cc:	e7fe      	b.n	80024cc <MemManage_Handler+0x4>

080024ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024ce:	b480      	push	{r7}
 80024d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024d2:	e7fe      	b.n	80024d2 <BusFault_Handler+0x4>

080024d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024d8:	e7fe      	b.n	80024d8 <UsageFault_Handler+0x4>

080024da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024da:	b480      	push	{r7}
 80024dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024de:	bf00      	nop
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024ec:	bf00      	nop
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr

080024f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024f6:	b480      	push	{r7}
 80024f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024fa:	bf00      	nop
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8002508:	4b0a      	ldr	r3, [pc, #40]	; (8002534 <SysTick_Handler+0x30>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	b2db      	uxtb	r3, r3
 800250e:	3301      	adds	r3, #1
 8002510:	b2da      	uxtb	r2, r3
 8002512:	4b08      	ldr	r3, [pc, #32]	; (8002534 <SysTick_Handler+0x30>)
 8002514:	701a      	strb	r2, [r3, #0]
  if(FatFsCnt >= 10)
 8002516:	4b07      	ldr	r3, [pc, #28]	; (8002534 <SysTick_Handler+0x30>)
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	b2db      	uxtb	r3, r3
 800251c:	2b09      	cmp	r3, #9
 800251e:	d904      	bls.n	800252a <SysTick_Handler+0x26>
  {
    FatFsCnt = 0;
 8002520:	4b04      	ldr	r3, [pc, #16]	; (8002534 <SysTick_Handler+0x30>)
 8002522:	2200      	movs	r2, #0
 8002524:	701a      	strb	r2, [r3, #0]
    SDTimer_Handler();
 8002526:	f7ff ffa5 	bl	8002474 <SDTimer_Handler>
  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800252a:	f000 f8eb 	bl	8002704 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800252e:	bf00      	nop
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	20001274 	.word	0x20001274

08002538 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b086      	sub	sp, #24
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002540:	4a14      	ldr	r2, [pc, #80]	; (8002594 <_sbrk+0x5c>)
 8002542:	4b15      	ldr	r3, [pc, #84]	; (8002598 <_sbrk+0x60>)
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800254c:	4b13      	ldr	r3, [pc, #76]	; (800259c <_sbrk+0x64>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d102      	bne.n	800255a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002554:	4b11      	ldr	r3, [pc, #68]	; (800259c <_sbrk+0x64>)
 8002556:	4a12      	ldr	r2, [pc, #72]	; (80025a0 <_sbrk+0x68>)
 8002558:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800255a:	4b10      	ldr	r3, [pc, #64]	; (800259c <_sbrk+0x64>)
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4413      	add	r3, r2
 8002562:	693a      	ldr	r2, [r7, #16]
 8002564:	429a      	cmp	r2, r3
 8002566:	d207      	bcs.n	8002578 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002568:	f005 fdb2 	bl	80080d0 <__errno>
 800256c:	4603      	mov	r3, r0
 800256e:	220c      	movs	r2, #12
 8002570:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002572:	f04f 33ff 	mov.w	r3, #4294967295
 8002576:	e009      	b.n	800258c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002578:	4b08      	ldr	r3, [pc, #32]	; (800259c <_sbrk+0x64>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800257e:	4b07      	ldr	r3, [pc, #28]	; (800259c <_sbrk+0x64>)
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4413      	add	r3, r2
 8002586:	4a05      	ldr	r2, [pc, #20]	; (800259c <_sbrk+0x64>)
 8002588:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800258a:	68fb      	ldr	r3, [r7, #12]
}
 800258c:	4618      	mov	r0, r3
 800258e:	3718      	adds	r7, #24
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	20020000 	.word	0x20020000
 8002598:	00000400 	.word	0x00000400
 800259c:	20001278 	.word	0x20001278
 80025a0:	20001530 	.word	0x20001530

080025a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025a8:	4b06      	ldr	r3, [pc, #24]	; (80025c4 <SystemInit+0x20>)
 80025aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ae:	4a05      	ldr	r2, [pc, #20]	; (80025c4 <SystemInit+0x20>)
 80025b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025b8:	bf00      	nop
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	e000ed00 	.word	0xe000ed00

080025c8 <TSC2046_Begin>:
	return localRawTouch;
}

//4. Begin function
void  TSC2046_Begin(SPI_HandleTypeDef *touchSPI, GPIO_TypeDef *csPort, uint16_t csPin)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	4613      	mov	r3, r2
 80025d4:	80fb      	strh	r3, [r7, #6]
	//Touch Screen SPI
	memcpy(&tsSPIhandle, touchSPI, sizeof(*touchSPI));
 80025d6:	2258      	movs	r2, #88	; 0x58
 80025d8:	68f9      	ldr	r1, [r7, #12]
 80025da:	4808      	ldr	r0, [pc, #32]	; (80025fc <TSC2046_Begin+0x34>)
 80025dc:	f005 fda2 	bl	8008124 <memcpy>
	//Chip-Select Port and Pin
	tsCS_GPIO = csPort;
 80025e0:	4a07      	ldr	r2, [pc, #28]	; (8002600 <TSC2046_Begin+0x38>)
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	6013      	str	r3, [r2, #0]
	tsCS_PIN = csPin;
 80025e6:	4a07      	ldr	r2, [pc, #28]	; (8002604 <TSC2046_Begin+0x3c>)
 80025e8:	88fb      	ldrh	r3, [r7, #6]
 80025ea:	8013      	strh	r3, [r2, #0]
	//Get screen orientation
	ScreenOrientation = ILI9341_SET_ROTATION;
 80025ec:	4b06      	ldr	r3, [pc, #24]	; (8002608 <TSC2046_Begin+0x40>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	701a      	strb	r2, [r3, #0]
}
 80025f2:	bf00      	nop
 80025f4:	3710      	adds	r7, #16
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	2000127c 	.word	0x2000127c
 8002600:	200012d4 	.word	0x200012d4
 8002604:	200012d8 	.word	0x200012d8
 8002608:	200012da 	.word	0x200012da

0800260c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800260c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002644 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002610:	480d      	ldr	r0, [pc, #52]	; (8002648 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002612:	490e      	ldr	r1, [pc, #56]	; (800264c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002614:	4a0e      	ldr	r2, [pc, #56]	; (8002650 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002616:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002618:	e002      	b.n	8002620 <LoopCopyDataInit>

0800261a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800261a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800261c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800261e:	3304      	adds	r3, #4

08002620 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002620:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002622:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002624:	d3f9      	bcc.n	800261a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002626:	4a0b      	ldr	r2, [pc, #44]	; (8002654 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002628:	4c0b      	ldr	r4, [pc, #44]	; (8002658 <LoopFillZerobss+0x26>)
  movs r3, #0
 800262a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800262c:	e001      	b.n	8002632 <LoopFillZerobss>

0800262e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800262e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002630:	3204      	adds	r2, #4

08002632 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002632:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002634:	d3fb      	bcc.n	800262e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002636:	f7ff ffb5 	bl	80025a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800263a:	f005 fd4f 	bl	80080dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800263e:	f7ff fab9 	bl	8001bb4 <main>
  bx  lr    
 8002642:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002644:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002648:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800264c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8002650:	080098f4 	.word	0x080098f4
  ldr r2, =_sbss
 8002654:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8002658:	2000152c 	.word	0x2000152c

0800265c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800265c:	e7fe      	b.n	800265c <ADC_IRQHandler>
	...

08002660 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002664:	4b0e      	ldr	r3, [pc, #56]	; (80026a0 <HAL_Init+0x40>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a0d      	ldr	r2, [pc, #52]	; (80026a0 <HAL_Init+0x40>)
 800266a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800266e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002670:	4b0b      	ldr	r3, [pc, #44]	; (80026a0 <HAL_Init+0x40>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a0a      	ldr	r2, [pc, #40]	; (80026a0 <HAL_Init+0x40>)
 8002676:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800267a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800267c:	4b08      	ldr	r3, [pc, #32]	; (80026a0 <HAL_Init+0x40>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a07      	ldr	r2, [pc, #28]	; (80026a0 <HAL_Init+0x40>)
 8002682:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002686:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002688:	2003      	movs	r0, #3
 800268a:	f000 f931 	bl	80028f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800268e:	2000      	movs	r0, #0
 8002690:	f000 f808 	bl	80026a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002694:	f7ff fd7a 	bl	800218c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	40023c00 	.word	0x40023c00

080026a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026ac:	4b12      	ldr	r3, [pc, #72]	; (80026f8 <HAL_InitTick+0x54>)
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	4b12      	ldr	r3, [pc, #72]	; (80026fc <HAL_InitTick+0x58>)
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	4619      	mov	r1, r3
 80026b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80026be:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c2:	4618      	mov	r0, r3
 80026c4:	f000 f93b 	bl	800293e <HAL_SYSTICK_Config>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e00e      	b.n	80026f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2b0f      	cmp	r3, #15
 80026d6:	d80a      	bhi.n	80026ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026d8:	2200      	movs	r2, #0
 80026da:	6879      	ldr	r1, [r7, #4]
 80026dc:	f04f 30ff 	mov.w	r0, #4294967295
 80026e0:	f000 f911 	bl	8002906 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026e4:	4a06      	ldr	r2, [pc, #24]	; (8002700 <HAL_InitTick+0x5c>)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026ea:	2300      	movs	r3, #0
 80026ec:	e000      	b.n	80026f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3708      	adds	r7, #8
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	2000000c 	.word	0x2000000c
 80026fc:	20000014 	.word	0x20000014
 8002700:	20000010 	.word	0x20000010

08002704 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002708:	4b06      	ldr	r3, [pc, #24]	; (8002724 <HAL_IncTick+0x20>)
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	461a      	mov	r2, r3
 800270e:	4b06      	ldr	r3, [pc, #24]	; (8002728 <HAL_IncTick+0x24>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4413      	add	r3, r2
 8002714:	4a04      	ldr	r2, [pc, #16]	; (8002728 <HAL_IncTick+0x24>)
 8002716:	6013      	str	r3, [r2, #0]
}
 8002718:	bf00      	nop
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	20000014 	.word	0x20000014
 8002728:	200012dc 	.word	0x200012dc

0800272c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  return uwTick;
 8002730:	4b03      	ldr	r3, [pc, #12]	; (8002740 <HAL_GetTick+0x14>)
 8002732:	681b      	ldr	r3, [r3, #0]
}
 8002734:	4618      	mov	r0, r3
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	200012dc 	.word	0x200012dc

08002744 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800274c:	f7ff ffee 	bl	800272c <HAL_GetTick>
 8002750:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800275c:	d005      	beq.n	800276a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800275e:	4b0a      	ldr	r3, [pc, #40]	; (8002788 <HAL_Delay+0x44>)
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	461a      	mov	r2, r3
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	4413      	add	r3, r2
 8002768:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800276a:	bf00      	nop
 800276c:	f7ff ffde 	bl	800272c <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	68fa      	ldr	r2, [r7, #12]
 8002778:	429a      	cmp	r2, r3
 800277a:	d8f7      	bhi.n	800276c <HAL_Delay+0x28>
  {
  }
}
 800277c:	bf00      	nop
 800277e:	bf00      	nop
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	20000014 	.word	0x20000014

0800278c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800278c:	b480      	push	{r7}
 800278e:	b085      	sub	sp, #20
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f003 0307 	and.w	r3, r3, #7
 800279a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800279c:	4b0c      	ldr	r3, [pc, #48]	; (80027d0 <__NVIC_SetPriorityGrouping+0x44>)
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027a2:	68ba      	ldr	r2, [r7, #8]
 80027a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027a8:	4013      	ands	r3, r2
 80027aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027be:	4a04      	ldr	r2, [pc, #16]	; (80027d0 <__NVIC_SetPriorityGrouping+0x44>)
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	60d3      	str	r3, [r2, #12]
}
 80027c4:	bf00      	nop
 80027c6:	3714      	adds	r7, #20
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr
 80027d0:	e000ed00 	.word	0xe000ed00

080027d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027d8:	4b04      	ldr	r3, [pc, #16]	; (80027ec <__NVIC_GetPriorityGrouping+0x18>)
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	0a1b      	lsrs	r3, r3, #8
 80027de:	f003 0307 	and.w	r3, r3, #7
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr
 80027ec:	e000ed00 	.word	0xe000ed00

080027f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	4603      	mov	r3, r0
 80027f8:	6039      	str	r1, [r7, #0]
 80027fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002800:	2b00      	cmp	r3, #0
 8002802:	db0a      	blt.n	800281a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	b2da      	uxtb	r2, r3
 8002808:	490c      	ldr	r1, [pc, #48]	; (800283c <__NVIC_SetPriority+0x4c>)
 800280a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280e:	0112      	lsls	r2, r2, #4
 8002810:	b2d2      	uxtb	r2, r2
 8002812:	440b      	add	r3, r1
 8002814:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002818:	e00a      	b.n	8002830 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	b2da      	uxtb	r2, r3
 800281e:	4908      	ldr	r1, [pc, #32]	; (8002840 <__NVIC_SetPriority+0x50>)
 8002820:	79fb      	ldrb	r3, [r7, #7]
 8002822:	f003 030f 	and.w	r3, r3, #15
 8002826:	3b04      	subs	r3, #4
 8002828:	0112      	lsls	r2, r2, #4
 800282a:	b2d2      	uxtb	r2, r2
 800282c:	440b      	add	r3, r1
 800282e:	761a      	strb	r2, [r3, #24]
}
 8002830:	bf00      	nop
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr
 800283c:	e000e100 	.word	0xe000e100
 8002840:	e000ed00 	.word	0xe000ed00

08002844 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002844:	b480      	push	{r7}
 8002846:	b089      	sub	sp, #36	; 0x24
 8002848:	af00      	add	r7, sp, #0
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	60b9      	str	r1, [r7, #8]
 800284e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f003 0307 	and.w	r3, r3, #7
 8002856:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	f1c3 0307 	rsb	r3, r3, #7
 800285e:	2b04      	cmp	r3, #4
 8002860:	bf28      	it	cs
 8002862:	2304      	movcs	r3, #4
 8002864:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	3304      	adds	r3, #4
 800286a:	2b06      	cmp	r3, #6
 800286c:	d902      	bls.n	8002874 <NVIC_EncodePriority+0x30>
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	3b03      	subs	r3, #3
 8002872:	e000      	b.n	8002876 <NVIC_EncodePriority+0x32>
 8002874:	2300      	movs	r3, #0
 8002876:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002878:	f04f 32ff 	mov.w	r2, #4294967295
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	fa02 f303 	lsl.w	r3, r2, r3
 8002882:	43da      	mvns	r2, r3
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	401a      	ands	r2, r3
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800288c:	f04f 31ff 	mov.w	r1, #4294967295
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	fa01 f303 	lsl.w	r3, r1, r3
 8002896:	43d9      	mvns	r1, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800289c:	4313      	orrs	r3, r2
         );
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3724      	adds	r7, #36	; 0x24
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
	...

080028ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	3b01      	subs	r3, #1
 80028b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028bc:	d301      	bcc.n	80028c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028be:	2301      	movs	r3, #1
 80028c0:	e00f      	b.n	80028e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028c2:	4a0a      	ldr	r2, [pc, #40]	; (80028ec <SysTick_Config+0x40>)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	3b01      	subs	r3, #1
 80028c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028ca:	210f      	movs	r1, #15
 80028cc:	f04f 30ff 	mov.w	r0, #4294967295
 80028d0:	f7ff ff8e 	bl	80027f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028d4:	4b05      	ldr	r3, [pc, #20]	; (80028ec <SysTick_Config+0x40>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028da:	4b04      	ldr	r3, [pc, #16]	; (80028ec <SysTick_Config+0x40>)
 80028dc:	2207      	movs	r2, #7
 80028de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3708      	adds	r7, #8
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	e000e010 	.word	0xe000e010

080028f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f7ff ff47 	bl	800278c <__NVIC_SetPriorityGrouping>
}
 80028fe:	bf00      	nop
 8002900:	3708      	adds	r7, #8
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}

08002906 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002906:	b580      	push	{r7, lr}
 8002908:	b086      	sub	sp, #24
 800290a:	af00      	add	r7, sp, #0
 800290c:	4603      	mov	r3, r0
 800290e:	60b9      	str	r1, [r7, #8]
 8002910:	607a      	str	r2, [r7, #4]
 8002912:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002914:	2300      	movs	r3, #0
 8002916:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002918:	f7ff ff5c 	bl	80027d4 <__NVIC_GetPriorityGrouping>
 800291c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	68b9      	ldr	r1, [r7, #8]
 8002922:	6978      	ldr	r0, [r7, #20]
 8002924:	f7ff ff8e 	bl	8002844 <NVIC_EncodePriority>
 8002928:	4602      	mov	r2, r0
 800292a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800292e:	4611      	mov	r1, r2
 8002930:	4618      	mov	r0, r3
 8002932:	f7ff ff5d 	bl	80027f0 <__NVIC_SetPriority>
}
 8002936:	bf00      	nop
 8002938:	3718      	adds	r7, #24
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800293e:	b580      	push	{r7, lr}
 8002940:	b082      	sub	sp, #8
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f7ff ffb0 	bl	80028ac <SysTick_Config>
 800294c:	4603      	mov	r3, r0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3708      	adds	r7, #8
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
	...

08002958 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002958:	b480      	push	{r7}
 800295a:	b089      	sub	sp, #36	; 0x24
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002962:	2300      	movs	r3, #0
 8002964:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002966:	2300      	movs	r3, #0
 8002968:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800296a:	2300      	movs	r3, #0
 800296c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800296e:	2300      	movs	r3, #0
 8002970:	61fb      	str	r3, [r7, #28]
 8002972:	e16b      	b.n	8002c4c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002974:	2201      	movs	r2, #1
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	697a      	ldr	r2, [r7, #20]
 8002984:	4013      	ands	r3, r2
 8002986:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002988:	693a      	ldr	r2, [r7, #16]
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	429a      	cmp	r2, r3
 800298e:	f040 815a 	bne.w	8002c46 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f003 0303 	and.w	r3, r3, #3
 800299a:	2b01      	cmp	r3, #1
 800299c:	d005      	beq.n	80029aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d130      	bne.n	8002a0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	2203      	movs	r2, #3
 80029b6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ba:	43db      	mvns	r3, r3
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	4013      	ands	r3, r2
 80029c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	68da      	ldr	r2, [r3, #12]
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	005b      	lsls	r3, r3, #1
 80029ca:	fa02 f303 	lsl.w	r3, r2, r3
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	69ba      	ldr	r2, [r7, #24]
 80029d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029e0:	2201      	movs	r2, #1
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	fa02 f303 	lsl.w	r3, r2, r3
 80029e8:	43db      	mvns	r3, r3
 80029ea:	69ba      	ldr	r2, [r7, #24]
 80029ec:	4013      	ands	r3, r2
 80029ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	091b      	lsrs	r3, r3, #4
 80029f6:	f003 0201 	and.w	r2, r3, #1
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002a00:	69ba      	ldr	r2, [r7, #24]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f003 0303 	and.w	r3, r3, #3
 8002a14:	2b03      	cmp	r3, #3
 8002a16:	d017      	beq.n	8002a48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	005b      	lsls	r3, r3, #1
 8002a22:	2203      	movs	r2, #3
 8002a24:	fa02 f303 	lsl.w	r3, r2, r3
 8002a28:	43db      	mvns	r3, r3
 8002a2a:	69ba      	ldr	r2, [r7, #24]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	689a      	ldr	r2, [r3, #8]
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	005b      	lsls	r3, r3, #1
 8002a38:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	69ba      	ldr	r2, [r7, #24]
 8002a46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f003 0303 	and.w	r3, r3, #3
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d123      	bne.n	8002a9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	08da      	lsrs	r2, r3, #3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	3208      	adds	r2, #8
 8002a5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	f003 0307 	and.w	r3, r3, #7
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	220f      	movs	r2, #15
 8002a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a70:	43db      	mvns	r3, r3
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	4013      	ands	r3, r2
 8002a76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	691a      	ldr	r2, [r3, #16]
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	f003 0307 	and.w	r3, r3, #7
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	fa02 f303 	lsl.w	r3, r2, r3
 8002a88:	69ba      	ldr	r2, [r7, #24]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	08da      	lsrs	r2, r3, #3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	3208      	adds	r2, #8
 8002a96:	69b9      	ldr	r1, [r7, #24]
 8002a98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	005b      	lsls	r3, r3, #1
 8002aa6:	2203      	movs	r2, #3
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	43db      	mvns	r3, r3
 8002aae:	69ba      	ldr	r2, [r7, #24]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f003 0203 	and.w	r2, r3, #3
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	005b      	lsls	r3, r3, #1
 8002ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	f000 80b4 	beq.w	8002c46 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ade:	2300      	movs	r3, #0
 8002ae0:	60fb      	str	r3, [r7, #12]
 8002ae2:	4b60      	ldr	r3, [pc, #384]	; (8002c64 <HAL_GPIO_Init+0x30c>)
 8002ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae6:	4a5f      	ldr	r2, [pc, #380]	; (8002c64 <HAL_GPIO_Init+0x30c>)
 8002ae8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002aec:	6453      	str	r3, [r2, #68]	; 0x44
 8002aee:	4b5d      	ldr	r3, [pc, #372]	; (8002c64 <HAL_GPIO_Init+0x30c>)
 8002af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002af6:	60fb      	str	r3, [r7, #12]
 8002af8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002afa:	4a5b      	ldr	r2, [pc, #364]	; (8002c68 <HAL_GPIO_Init+0x310>)
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	089b      	lsrs	r3, r3, #2
 8002b00:	3302      	adds	r3, #2
 8002b02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	f003 0303 	and.w	r3, r3, #3
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	220f      	movs	r2, #15
 8002b12:	fa02 f303 	lsl.w	r3, r2, r3
 8002b16:	43db      	mvns	r3, r3
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a52      	ldr	r2, [pc, #328]	; (8002c6c <HAL_GPIO_Init+0x314>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d02b      	beq.n	8002b7e <HAL_GPIO_Init+0x226>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a51      	ldr	r2, [pc, #324]	; (8002c70 <HAL_GPIO_Init+0x318>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d025      	beq.n	8002b7a <HAL_GPIO_Init+0x222>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a50      	ldr	r2, [pc, #320]	; (8002c74 <HAL_GPIO_Init+0x31c>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d01f      	beq.n	8002b76 <HAL_GPIO_Init+0x21e>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a4f      	ldr	r2, [pc, #316]	; (8002c78 <HAL_GPIO_Init+0x320>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d019      	beq.n	8002b72 <HAL_GPIO_Init+0x21a>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a4e      	ldr	r2, [pc, #312]	; (8002c7c <HAL_GPIO_Init+0x324>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d013      	beq.n	8002b6e <HAL_GPIO_Init+0x216>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a4d      	ldr	r2, [pc, #308]	; (8002c80 <HAL_GPIO_Init+0x328>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d00d      	beq.n	8002b6a <HAL_GPIO_Init+0x212>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a4c      	ldr	r2, [pc, #304]	; (8002c84 <HAL_GPIO_Init+0x32c>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d007      	beq.n	8002b66 <HAL_GPIO_Init+0x20e>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a4b      	ldr	r2, [pc, #300]	; (8002c88 <HAL_GPIO_Init+0x330>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d101      	bne.n	8002b62 <HAL_GPIO_Init+0x20a>
 8002b5e:	2307      	movs	r3, #7
 8002b60:	e00e      	b.n	8002b80 <HAL_GPIO_Init+0x228>
 8002b62:	2308      	movs	r3, #8
 8002b64:	e00c      	b.n	8002b80 <HAL_GPIO_Init+0x228>
 8002b66:	2306      	movs	r3, #6
 8002b68:	e00a      	b.n	8002b80 <HAL_GPIO_Init+0x228>
 8002b6a:	2305      	movs	r3, #5
 8002b6c:	e008      	b.n	8002b80 <HAL_GPIO_Init+0x228>
 8002b6e:	2304      	movs	r3, #4
 8002b70:	e006      	b.n	8002b80 <HAL_GPIO_Init+0x228>
 8002b72:	2303      	movs	r3, #3
 8002b74:	e004      	b.n	8002b80 <HAL_GPIO_Init+0x228>
 8002b76:	2302      	movs	r3, #2
 8002b78:	e002      	b.n	8002b80 <HAL_GPIO_Init+0x228>
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e000      	b.n	8002b80 <HAL_GPIO_Init+0x228>
 8002b7e:	2300      	movs	r3, #0
 8002b80:	69fa      	ldr	r2, [r7, #28]
 8002b82:	f002 0203 	and.w	r2, r2, #3
 8002b86:	0092      	lsls	r2, r2, #2
 8002b88:	4093      	lsls	r3, r2
 8002b8a:	69ba      	ldr	r2, [r7, #24]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b90:	4935      	ldr	r1, [pc, #212]	; (8002c68 <HAL_GPIO_Init+0x310>)
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	089b      	lsrs	r3, r3, #2
 8002b96:	3302      	adds	r3, #2
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b9e:	4b3b      	ldr	r3, [pc, #236]	; (8002c8c <HAL_GPIO_Init+0x334>)
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	43db      	mvns	r3, r3
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	4013      	ands	r3, r2
 8002bac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d003      	beq.n	8002bc2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002bba:	69ba      	ldr	r2, [r7, #24]
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bc2:	4a32      	ldr	r2, [pc, #200]	; (8002c8c <HAL_GPIO_Init+0x334>)
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bc8:	4b30      	ldr	r3, [pc, #192]	; (8002c8c <HAL_GPIO_Init+0x334>)
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	43db      	mvns	r3, r3
 8002bd2:	69ba      	ldr	r2, [r7, #24]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d003      	beq.n	8002bec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bec:	4a27      	ldr	r2, [pc, #156]	; (8002c8c <HAL_GPIO_Init+0x334>)
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002bf2:	4b26      	ldr	r3, [pc, #152]	; (8002c8c <HAL_GPIO_Init+0x334>)
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	43db      	mvns	r3, r3
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	4013      	ands	r3, r2
 8002c00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d003      	beq.n	8002c16 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002c0e:	69ba      	ldr	r2, [r7, #24]
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c16:	4a1d      	ldr	r2, [pc, #116]	; (8002c8c <HAL_GPIO_Init+0x334>)
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c1c:	4b1b      	ldr	r3, [pc, #108]	; (8002c8c <HAL_GPIO_Init+0x334>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	43db      	mvns	r3, r3
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d003      	beq.n	8002c40 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c40:	4a12      	ldr	r2, [pc, #72]	; (8002c8c <HAL_GPIO_Init+0x334>)
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	3301      	adds	r3, #1
 8002c4a:	61fb      	str	r3, [r7, #28]
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	2b0f      	cmp	r3, #15
 8002c50:	f67f ae90 	bls.w	8002974 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c54:	bf00      	nop
 8002c56:	bf00      	nop
 8002c58:	3724      	adds	r7, #36	; 0x24
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	40023800 	.word	0x40023800
 8002c68:	40013800 	.word	0x40013800
 8002c6c:	40020000 	.word	0x40020000
 8002c70:	40020400 	.word	0x40020400
 8002c74:	40020800 	.word	0x40020800
 8002c78:	40020c00 	.word	0x40020c00
 8002c7c:	40021000 	.word	0x40021000
 8002c80:	40021400 	.word	0x40021400
 8002c84:	40021800 	.word	0x40021800
 8002c88:	40021c00 	.word	0x40021c00
 8002c8c:	40013c00 	.word	0x40013c00

08002c90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	460b      	mov	r3, r1
 8002c9a:	807b      	strh	r3, [r7, #2]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ca0:	787b      	ldrb	r3, [r7, #1]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d003      	beq.n	8002cae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ca6:	887a      	ldrh	r2, [r7, #2]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002cac:	e003      	b.n	8002cb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002cae:	887b      	ldrh	r3, [r7, #2]
 8002cb0:	041a      	lsls	r2, r3, #16
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	619a      	str	r2, [r3, #24]
}
 8002cb6:	bf00      	nop
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
	...

08002cc4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b086      	sub	sp, #24
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d101      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e267      	b.n	80031a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d075      	beq.n	8002dce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ce2:	4b88      	ldr	r3, [pc, #544]	; (8002f04 <HAL_RCC_OscConfig+0x240>)
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f003 030c 	and.w	r3, r3, #12
 8002cea:	2b04      	cmp	r3, #4
 8002cec:	d00c      	beq.n	8002d08 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cee:	4b85      	ldr	r3, [pc, #532]	; (8002f04 <HAL_RCC_OscConfig+0x240>)
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cf6:	2b08      	cmp	r3, #8
 8002cf8:	d112      	bne.n	8002d20 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cfa:	4b82      	ldr	r3, [pc, #520]	; (8002f04 <HAL_RCC_OscConfig+0x240>)
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d06:	d10b      	bne.n	8002d20 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d08:	4b7e      	ldr	r3, [pc, #504]	; (8002f04 <HAL_RCC_OscConfig+0x240>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d05b      	beq.n	8002dcc <HAL_RCC_OscConfig+0x108>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d157      	bne.n	8002dcc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e242      	b.n	80031a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d28:	d106      	bne.n	8002d38 <HAL_RCC_OscConfig+0x74>
 8002d2a:	4b76      	ldr	r3, [pc, #472]	; (8002f04 <HAL_RCC_OscConfig+0x240>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a75      	ldr	r2, [pc, #468]	; (8002f04 <HAL_RCC_OscConfig+0x240>)
 8002d30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d34:	6013      	str	r3, [r2, #0]
 8002d36:	e01d      	b.n	8002d74 <HAL_RCC_OscConfig+0xb0>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d40:	d10c      	bne.n	8002d5c <HAL_RCC_OscConfig+0x98>
 8002d42:	4b70      	ldr	r3, [pc, #448]	; (8002f04 <HAL_RCC_OscConfig+0x240>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a6f      	ldr	r2, [pc, #444]	; (8002f04 <HAL_RCC_OscConfig+0x240>)
 8002d48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d4c:	6013      	str	r3, [r2, #0]
 8002d4e:	4b6d      	ldr	r3, [pc, #436]	; (8002f04 <HAL_RCC_OscConfig+0x240>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a6c      	ldr	r2, [pc, #432]	; (8002f04 <HAL_RCC_OscConfig+0x240>)
 8002d54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d58:	6013      	str	r3, [r2, #0]
 8002d5a:	e00b      	b.n	8002d74 <HAL_RCC_OscConfig+0xb0>
 8002d5c:	4b69      	ldr	r3, [pc, #420]	; (8002f04 <HAL_RCC_OscConfig+0x240>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a68      	ldr	r2, [pc, #416]	; (8002f04 <HAL_RCC_OscConfig+0x240>)
 8002d62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d66:	6013      	str	r3, [r2, #0]
 8002d68:	4b66      	ldr	r3, [pc, #408]	; (8002f04 <HAL_RCC_OscConfig+0x240>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a65      	ldr	r2, [pc, #404]	; (8002f04 <HAL_RCC_OscConfig+0x240>)
 8002d6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d013      	beq.n	8002da4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d7c:	f7ff fcd6 	bl	800272c <HAL_GetTick>
 8002d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d82:	e008      	b.n	8002d96 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d84:	f7ff fcd2 	bl	800272c <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b64      	cmp	r3, #100	; 0x64
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e207      	b.n	80031a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d96:	4b5b      	ldr	r3, [pc, #364]	; (8002f04 <HAL_RCC_OscConfig+0x240>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d0f0      	beq.n	8002d84 <HAL_RCC_OscConfig+0xc0>
 8002da2:	e014      	b.n	8002dce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da4:	f7ff fcc2 	bl	800272c <HAL_GetTick>
 8002da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002daa:	e008      	b.n	8002dbe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dac:	f7ff fcbe 	bl	800272c <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b64      	cmp	r3, #100	; 0x64
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e1f3      	b.n	80031a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dbe:	4b51      	ldr	r3, [pc, #324]	; (8002f04 <HAL_RCC_OscConfig+0x240>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d1f0      	bne.n	8002dac <HAL_RCC_OscConfig+0xe8>
 8002dca:	e000      	b.n	8002dce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d063      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002dda:	4b4a      	ldr	r3, [pc, #296]	; (8002f04 <HAL_RCC_OscConfig+0x240>)
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f003 030c 	and.w	r3, r3, #12
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d00b      	beq.n	8002dfe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002de6:	4b47      	ldr	r3, [pc, #284]	; (8002f04 <HAL_RCC_OscConfig+0x240>)
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002dee:	2b08      	cmp	r3, #8
 8002df0:	d11c      	bne.n	8002e2c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002df2:	4b44      	ldr	r3, [pc, #272]	; (8002f04 <HAL_RCC_OscConfig+0x240>)
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d116      	bne.n	8002e2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dfe:	4b41      	ldr	r3, [pc, #260]	; (8002f04 <HAL_RCC_OscConfig+0x240>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d005      	beq.n	8002e16 <HAL_RCC_OscConfig+0x152>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d001      	beq.n	8002e16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e1c7      	b.n	80031a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e16:	4b3b      	ldr	r3, [pc, #236]	; (8002f04 <HAL_RCC_OscConfig+0x240>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	00db      	lsls	r3, r3, #3
 8002e24:	4937      	ldr	r1, [pc, #220]	; (8002f04 <HAL_RCC_OscConfig+0x240>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e2a:	e03a      	b.n	8002ea2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d020      	beq.n	8002e76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e34:	4b34      	ldr	r3, [pc, #208]	; (8002f08 <HAL_RCC_OscConfig+0x244>)
 8002e36:	2201      	movs	r2, #1
 8002e38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e3a:	f7ff fc77 	bl	800272c <HAL_GetTick>
 8002e3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e40:	e008      	b.n	8002e54 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e42:	f7ff fc73 	bl	800272c <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d901      	bls.n	8002e54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e1a8      	b.n	80031a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e54:	4b2b      	ldr	r3, [pc, #172]	; (8002f04 <HAL_RCC_OscConfig+0x240>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0302 	and.w	r3, r3, #2
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d0f0      	beq.n	8002e42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e60:	4b28      	ldr	r3, [pc, #160]	; (8002f04 <HAL_RCC_OscConfig+0x240>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	691b      	ldr	r3, [r3, #16]
 8002e6c:	00db      	lsls	r3, r3, #3
 8002e6e:	4925      	ldr	r1, [pc, #148]	; (8002f04 <HAL_RCC_OscConfig+0x240>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	600b      	str	r3, [r1, #0]
 8002e74:	e015      	b.n	8002ea2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e76:	4b24      	ldr	r3, [pc, #144]	; (8002f08 <HAL_RCC_OscConfig+0x244>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e7c:	f7ff fc56 	bl	800272c <HAL_GetTick>
 8002e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e82:	e008      	b.n	8002e96 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e84:	f7ff fc52 	bl	800272c <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e187      	b.n	80031a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e96:	4b1b      	ldr	r3, [pc, #108]	; (8002f04 <HAL_RCC_OscConfig+0x240>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d1f0      	bne.n	8002e84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0308 	and.w	r3, r3, #8
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d036      	beq.n	8002f1c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	695b      	ldr	r3, [r3, #20]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d016      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002eb6:	4b15      	ldr	r3, [pc, #84]	; (8002f0c <HAL_RCC_OscConfig+0x248>)
 8002eb8:	2201      	movs	r2, #1
 8002eba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ebc:	f7ff fc36 	bl	800272c <HAL_GetTick>
 8002ec0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ec2:	e008      	b.n	8002ed6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ec4:	f7ff fc32 	bl	800272c <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e167      	b.n	80031a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ed6:	4b0b      	ldr	r3, [pc, #44]	; (8002f04 <HAL_RCC_OscConfig+0x240>)
 8002ed8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eda:	f003 0302 	and.w	r3, r3, #2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d0f0      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x200>
 8002ee2:	e01b      	b.n	8002f1c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ee4:	4b09      	ldr	r3, [pc, #36]	; (8002f0c <HAL_RCC_OscConfig+0x248>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eea:	f7ff fc1f 	bl	800272c <HAL_GetTick>
 8002eee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ef0:	e00e      	b.n	8002f10 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ef2:	f7ff fc1b 	bl	800272c <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d907      	bls.n	8002f10 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e150      	b.n	80031a6 <HAL_RCC_OscConfig+0x4e2>
 8002f04:	40023800 	.word	0x40023800
 8002f08:	42470000 	.word	0x42470000
 8002f0c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f10:	4b88      	ldr	r3, [pc, #544]	; (8003134 <HAL_RCC_OscConfig+0x470>)
 8002f12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f14:	f003 0302 	and.w	r3, r3, #2
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d1ea      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0304 	and.w	r3, r3, #4
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	f000 8097 	beq.w	8003058 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f2e:	4b81      	ldr	r3, [pc, #516]	; (8003134 <HAL_RCC_OscConfig+0x470>)
 8002f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d10f      	bne.n	8002f5a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	60bb      	str	r3, [r7, #8]
 8002f3e:	4b7d      	ldr	r3, [pc, #500]	; (8003134 <HAL_RCC_OscConfig+0x470>)
 8002f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f42:	4a7c      	ldr	r2, [pc, #496]	; (8003134 <HAL_RCC_OscConfig+0x470>)
 8002f44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f48:	6413      	str	r3, [r2, #64]	; 0x40
 8002f4a:	4b7a      	ldr	r3, [pc, #488]	; (8003134 <HAL_RCC_OscConfig+0x470>)
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f52:	60bb      	str	r3, [r7, #8]
 8002f54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f56:	2301      	movs	r3, #1
 8002f58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f5a:	4b77      	ldr	r3, [pc, #476]	; (8003138 <HAL_RCC_OscConfig+0x474>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d118      	bne.n	8002f98 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f66:	4b74      	ldr	r3, [pc, #464]	; (8003138 <HAL_RCC_OscConfig+0x474>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a73      	ldr	r2, [pc, #460]	; (8003138 <HAL_RCC_OscConfig+0x474>)
 8002f6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f72:	f7ff fbdb 	bl	800272c <HAL_GetTick>
 8002f76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f78:	e008      	b.n	8002f8c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f7a:	f7ff fbd7 	bl	800272c <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d901      	bls.n	8002f8c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e10c      	b.n	80031a6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f8c:	4b6a      	ldr	r3, [pc, #424]	; (8003138 <HAL_RCC_OscConfig+0x474>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d0f0      	beq.n	8002f7a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d106      	bne.n	8002fae <HAL_RCC_OscConfig+0x2ea>
 8002fa0:	4b64      	ldr	r3, [pc, #400]	; (8003134 <HAL_RCC_OscConfig+0x470>)
 8002fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa4:	4a63      	ldr	r2, [pc, #396]	; (8003134 <HAL_RCC_OscConfig+0x470>)
 8002fa6:	f043 0301 	orr.w	r3, r3, #1
 8002faa:	6713      	str	r3, [r2, #112]	; 0x70
 8002fac:	e01c      	b.n	8002fe8 <HAL_RCC_OscConfig+0x324>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	2b05      	cmp	r3, #5
 8002fb4:	d10c      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x30c>
 8002fb6:	4b5f      	ldr	r3, [pc, #380]	; (8003134 <HAL_RCC_OscConfig+0x470>)
 8002fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fba:	4a5e      	ldr	r2, [pc, #376]	; (8003134 <HAL_RCC_OscConfig+0x470>)
 8002fbc:	f043 0304 	orr.w	r3, r3, #4
 8002fc0:	6713      	str	r3, [r2, #112]	; 0x70
 8002fc2:	4b5c      	ldr	r3, [pc, #368]	; (8003134 <HAL_RCC_OscConfig+0x470>)
 8002fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc6:	4a5b      	ldr	r2, [pc, #364]	; (8003134 <HAL_RCC_OscConfig+0x470>)
 8002fc8:	f043 0301 	orr.w	r3, r3, #1
 8002fcc:	6713      	str	r3, [r2, #112]	; 0x70
 8002fce:	e00b      	b.n	8002fe8 <HAL_RCC_OscConfig+0x324>
 8002fd0:	4b58      	ldr	r3, [pc, #352]	; (8003134 <HAL_RCC_OscConfig+0x470>)
 8002fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd4:	4a57      	ldr	r2, [pc, #348]	; (8003134 <HAL_RCC_OscConfig+0x470>)
 8002fd6:	f023 0301 	bic.w	r3, r3, #1
 8002fda:	6713      	str	r3, [r2, #112]	; 0x70
 8002fdc:	4b55      	ldr	r3, [pc, #340]	; (8003134 <HAL_RCC_OscConfig+0x470>)
 8002fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe0:	4a54      	ldr	r2, [pc, #336]	; (8003134 <HAL_RCC_OscConfig+0x470>)
 8002fe2:	f023 0304 	bic.w	r3, r3, #4
 8002fe6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d015      	beq.n	800301c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ff0:	f7ff fb9c 	bl	800272c <HAL_GetTick>
 8002ff4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ff6:	e00a      	b.n	800300e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ff8:	f7ff fb98 	bl	800272c <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	f241 3288 	movw	r2, #5000	; 0x1388
 8003006:	4293      	cmp	r3, r2
 8003008:	d901      	bls.n	800300e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e0cb      	b.n	80031a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800300e:	4b49      	ldr	r3, [pc, #292]	; (8003134 <HAL_RCC_OscConfig+0x470>)
 8003010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	2b00      	cmp	r3, #0
 8003018:	d0ee      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x334>
 800301a:	e014      	b.n	8003046 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800301c:	f7ff fb86 	bl	800272c <HAL_GetTick>
 8003020:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003022:	e00a      	b.n	800303a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003024:	f7ff fb82 	bl	800272c <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003032:	4293      	cmp	r3, r2
 8003034:	d901      	bls.n	800303a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e0b5      	b.n	80031a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800303a:	4b3e      	ldr	r3, [pc, #248]	; (8003134 <HAL_RCC_OscConfig+0x470>)
 800303c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800303e:	f003 0302 	and.w	r3, r3, #2
 8003042:	2b00      	cmp	r3, #0
 8003044:	d1ee      	bne.n	8003024 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003046:	7dfb      	ldrb	r3, [r7, #23]
 8003048:	2b01      	cmp	r3, #1
 800304a:	d105      	bne.n	8003058 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800304c:	4b39      	ldr	r3, [pc, #228]	; (8003134 <HAL_RCC_OscConfig+0x470>)
 800304e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003050:	4a38      	ldr	r2, [pc, #224]	; (8003134 <HAL_RCC_OscConfig+0x470>)
 8003052:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003056:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	699b      	ldr	r3, [r3, #24]
 800305c:	2b00      	cmp	r3, #0
 800305e:	f000 80a1 	beq.w	80031a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003062:	4b34      	ldr	r3, [pc, #208]	; (8003134 <HAL_RCC_OscConfig+0x470>)
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f003 030c 	and.w	r3, r3, #12
 800306a:	2b08      	cmp	r3, #8
 800306c:	d05c      	beq.n	8003128 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	2b02      	cmp	r3, #2
 8003074:	d141      	bne.n	80030fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003076:	4b31      	ldr	r3, [pc, #196]	; (800313c <HAL_RCC_OscConfig+0x478>)
 8003078:	2200      	movs	r2, #0
 800307a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800307c:	f7ff fb56 	bl	800272c <HAL_GetTick>
 8003080:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003082:	e008      	b.n	8003096 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003084:	f7ff fb52 	bl	800272c <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	2b02      	cmp	r3, #2
 8003090:	d901      	bls.n	8003096 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e087      	b.n	80031a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003096:	4b27      	ldr	r3, [pc, #156]	; (8003134 <HAL_RCC_OscConfig+0x470>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d1f0      	bne.n	8003084 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	69da      	ldr	r2, [r3, #28]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a1b      	ldr	r3, [r3, #32]
 80030aa:	431a      	orrs	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b0:	019b      	lsls	r3, r3, #6
 80030b2:	431a      	orrs	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b8:	085b      	lsrs	r3, r3, #1
 80030ba:	3b01      	subs	r3, #1
 80030bc:	041b      	lsls	r3, r3, #16
 80030be:	431a      	orrs	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c4:	061b      	lsls	r3, r3, #24
 80030c6:	491b      	ldr	r1, [pc, #108]	; (8003134 <HAL_RCC_OscConfig+0x470>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030cc:	4b1b      	ldr	r3, [pc, #108]	; (800313c <HAL_RCC_OscConfig+0x478>)
 80030ce:	2201      	movs	r2, #1
 80030d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d2:	f7ff fb2b 	bl	800272c <HAL_GetTick>
 80030d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030d8:	e008      	b.n	80030ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030da:	f7ff fb27 	bl	800272c <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d901      	bls.n	80030ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	e05c      	b.n	80031a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030ec:	4b11      	ldr	r3, [pc, #68]	; (8003134 <HAL_RCC_OscConfig+0x470>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d0f0      	beq.n	80030da <HAL_RCC_OscConfig+0x416>
 80030f8:	e054      	b.n	80031a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030fa:	4b10      	ldr	r3, [pc, #64]	; (800313c <HAL_RCC_OscConfig+0x478>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003100:	f7ff fb14 	bl	800272c <HAL_GetTick>
 8003104:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003106:	e008      	b.n	800311a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003108:	f7ff fb10 	bl	800272c <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	2b02      	cmp	r3, #2
 8003114:	d901      	bls.n	800311a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e045      	b.n	80031a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800311a:	4b06      	ldr	r3, [pc, #24]	; (8003134 <HAL_RCC_OscConfig+0x470>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d1f0      	bne.n	8003108 <HAL_RCC_OscConfig+0x444>
 8003126:	e03d      	b.n	80031a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	699b      	ldr	r3, [r3, #24]
 800312c:	2b01      	cmp	r3, #1
 800312e:	d107      	bne.n	8003140 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e038      	b.n	80031a6 <HAL_RCC_OscConfig+0x4e2>
 8003134:	40023800 	.word	0x40023800
 8003138:	40007000 	.word	0x40007000
 800313c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003140:	4b1b      	ldr	r3, [pc, #108]	; (80031b0 <HAL_RCC_OscConfig+0x4ec>)
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	2b01      	cmp	r3, #1
 800314c:	d028      	beq.n	80031a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003158:	429a      	cmp	r2, r3
 800315a:	d121      	bne.n	80031a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003166:	429a      	cmp	r2, r3
 8003168:	d11a      	bne.n	80031a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003170:	4013      	ands	r3, r2
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003176:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003178:	4293      	cmp	r3, r2
 800317a:	d111      	bne.n	80031a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003186:	085b      	lsrs	r3, r3, #1
 8003188:	3b01      	subs	r3, #1
 800318a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800318c:	429a      	cmp	r2, r3
 800318e:	d107      	bne.n	80031a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800319a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800319c:	429a      	cmp	r2, r3
 800319e:	d001      	beq.n	80031a4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e000      	b.n	80031a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3718      	adds	r7, #24
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	40023800 	.word	0x40023800

080031b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d101      	bne.n	80031c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e0cc      	b.n	8003362 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031c8:	4b68      	ldr	r3, [pc, #416]	; (800336c <HAL_RCC_ClockConfig+0x1b8>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0307 	and.w	r3, r3, #7
 80031d0:	683a      	ldr	r2, [r7, #0]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d90c      	bls.n	80031f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031d6:	4b65      	ldr	r3, [pc, #404]	; (800336c <HAL_RCC_ClockConfig+0x1b8>)
 80031d8:	683a      	ldr	r2, [r7, #0]
 80031da:	b2d2      	uxtb	r2, r2
 80031dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031de:	4b63      	ldr	r3, [pc, #396]	; (800336c <HAL_RCC_ClockConfig+0x1b8>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0307 	and.w	r3, r3, #7
 80031e6:	683a      	ldr	r2, [r7, #0]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d001      	beq.n	80031f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e0b8      	b.n	8003362 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0302 	and.w	r3, r3, #2
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d020      	beq.n	800323e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0304 	and.w	r3, r3, #4
 8003204:	2b00      	cmp	r3, #0
 8003206:	d005      	beq.n	8003214 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003208:	4b59      	ldr	r3, [pc, #356]	; (8003370 <HAL_RCC_ClockConfig+0x1bc>)
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	4a58      	ldr	r2, [pc, #352]	; (8003370 <HAL_RCC_ClockConfig+0x1bc>)
 800320e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003212:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0308 	and.w	r3, r3, #8
 800321c:	2b00      	cmp	r3, #0
 800321e:	d005      	beq.n	800322c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003220:	4b53      	ldr	r3, [pc, #332]	; (8003370 <HAL_RCC_ClockConfig+0x1bc>)
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	4a52      	ldr	r2, [pc, #328]	; (8003370 <HAL_RCC_ClockConfig+0x1bc>)
 8003226:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800322a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800322c:	4b50      	ldr	r3, [pc, #320]	; (8003370 <HAL_RCC_ClockConfig+0x1bc>)
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	494d      	ldr	r1, [pc, #308]	; (8003370 <HAL_RCC_ClockConfig+0x1bc>)
 800323a:	4313      	orrs	r3, r2
 800323c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	2b00      	cmp	r3, #0
 8003248:	d044      	beq.n	80032d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	2b01      	cmp	r3, #1
 8003250:	d107      	bne.n	8003262 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003252:	4b47      	ldr	r3, [pc, #284]	; (8003370 <HAL_RCC_ClockConfig+0x1bc>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d119      	bne.n	8003292 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e07f      	b.n	8003362 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	2b02      	cmp	r3, #2
 8003268:	d003      	beq.n	8003272 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800326e:	2b03      	cmp	r3, #3
 8003270:	d107      	bne.n	8003282 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003272:	4b3f      	ldr	r3, [pc, #252]	; (8003370 <HAL_RCC_ClockConfig+0x1bc>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d109      	bne.n	8003292 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e06f      	b.n	8003362 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003282:	4b3b      	ldr	r3, [pc, #236]	; (8003370 <HAL_RCC_ClockConfig+0x1bc>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d101      	bne.n	8003292 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e067      	b.n	8003362 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003292:	4b37      	ldr	r3, [pc, #220]	; (8003370 <HAL_RCC_ClockConfig+0x1bc>)
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f023 0203 	bic.w	r2, r3, #3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	4934      	ldr	r1, [pc, #208]	; (8003370 <HAL_RCC_ClockConfig+0x1bc>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032a4:	f7ff fa42 	bl	800272c <HAL_GetTick>
 80032a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032aa:	e00a      	b.n	80032c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032ac:	f7ff fa3e 	bl	800272c <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e04f      	b.n	8003362 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032c2:	4b2b      	ldr	r3, [pc, #172]	; (8003370 <HAL_RCC_ClockConfig+0x1bc>)
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f003 020c 	and.w	r2, r3, #12
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d1eb      	bne.n	80032ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032d4:	4b25      	ldr	r3, [pc, #148]	; (800336c <HAL_RCC_ClockConfig+0x1b8>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0307 	and.w	r3, r3, #7
 80032dc:	683a      	ldr	r2, [r7, #0]
 80032de:	429a      	cmp	r2, r3
 80032e0:	d20c      	bcs.n	80032fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032e2:	4b22      	ldr	r3, [pc, #136]	; (800336c <HAL_RCC_ClockConfig+0x1b8>)
 80032e4:	683a      	ldr	r2, [r7, #0]
 80032e6:	b2d2      	uxtb	r2, r2
 80032e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ea:	4b20      	ldr	r3, [pc, #128]	; (800336c <HAL_RCC_ClockConfig+0x1b8>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0307 	and.w	r3, r3, #7
 80032f2:	683a      	ldr	r2, [r7, #0]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d001      	beq.n	80032fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e032      	b.n	8003362 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0304 	and.w	r3, r3, #4
 8003304:	2b00      	cmp	r3, #0
 8003306:	d008      	beq.n	800331a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003308:	4b19      	ldr	r3, [pc, #100]	; (8003370 <HAL_RCC_ClockConfig+0x1bc>)
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	4916      	ldr	r1, [pc, #88]	; (8003370 <HAL_RCC_ClockConfig+0x1bc>)
 8003316:	4313      	orrs	r3, r2
 8003318:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0308 	and.w	r3, r3, #8
 8003322:	2b00      	cmp	r3, #0
 8003324:	d009      	beq.n	800333a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003326:	4b12      	ldr	r3, [pc, #72]	; (8003370 <HAL_RCC_ClockConfig+0x1bc>)
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	00db      	lsls	r3, r3, #3
 8003334:	490e      	ldr	r1, [pc, #56]	; (8003370 <HAL_RCC_ClockConfig+0x1bc>)
 8003336:	4313      	orrs	r3, r2
 8003338:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800333a:	f000 f821 	bl	8003380 <HAL_RCC_GetSysClockFreq>
 800333e:	4602      	mov	r2, r0
 8003340:	4b0b      	ldr	r3, [pc, #44]	; (8003370 <HAL_RCC_ClockConfig+0x1bc>)
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	091b      	lsrs	r3, r3, #4
 8003346:	f003 030f 	and.w	r3, r3, #15
 800334a:	490a      	ldr	r1, [pc, #40]	; (8003374 <HAL_RCC_ClockConfig+0x1c0>)
 800334c:	5ccb      	ldrb	r3, [r1, r3]
 800334e:	fa22 f303 	lsr.w	r3, r2, r3
 8003352:	4a09      	ldr	r2, [pc, #36]	; (8003378 <HAL_RCC_ClockConfig+0x1c4>)
 8003354:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003356:	4b09      	ldr	r3, [pc, #36]	; (800337c <HAL_RCC_ClockConfig+0x1c8>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4618      	mov	r0, r3
 800335c:	f7ff f9a2 	bl	80026a4 <HAL_InitTick>

  return HAL_OK;
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	3710      	adds	r7, #16
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	40023c00 	.word	0x40023c00
 8003370:	40023800 	.word	0x40023800
 8003374:	08009460 	.word	0x08009460
 8003378:	2000000c 	.word	0x2000000c
 800337c:	20000010 	.word	0x20000010

08003380 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003380:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003384:	b094      	sub	sp, #80	; 0x50
 8003386:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003388:	2300      	movs	r3, #0
 800338a:	647b      	str	r3, [r7, #68]	; 0x44
 800338c:	2300      	movs	r3, #0
 800338e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003390:	2300      	movs	r3, #0
 8003392:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003394:	2300      	movs	r3, #0
 8003396:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003398:	4b79      	ldr	r3, [pc, #484]	; (8003580 <HAL_RCC_GetSysClockFreq+0x200>)
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	f003 030c 	and.w	r3, r3, #12
 80033a0:	2b08      	cmp	r3, #8
 80033a2:	d00d      	beq.n	80033c0 <HAL_RCC_GetSysClockFreq+0x40>
 80033a4:	2b08      	cmp	r3, #8
 80033a6:	f200 80e1 	bhi.w	800356c <HAL_RCC_GetSysClockFreq+0x1ec>
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d002      	beq.n	80033b4 <HAL_RCC_GetSysClockFreq+0x34>
 80033ae:	2b04      	cmp	r3, #4
 80033b0:	d003      	beq.n	80033ba <HAL_RCC_GetSysClockFreq+0x3a>
 80033b2:	e0db      	b.n	800356c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033b4:	4b73      	ldr	r3, [pc, #460]	; (8003584 <HAL_RCC_GetSysClockFreq+0x204>)
 80033b6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80033b8:	e0db      	b.n	8003572 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033ba:	4b73      	ldr	r3, [pc, #460]	; (8003588 <HAL_RCC_GetSysClockFreq+0x208>)
 80033bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80033be:	e0d8      	b.n	8003572 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033c0:	4b6f      	ldr	r3, [pc, #444]	; (8003580 <HAL_RCC_GetSysClockFreq+0x200>)
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033c8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033ca:	4b6d      	ldr	r3, [pc, #436]	; (8003580 <HAL_RCC_GetSysClockFreq+0x200>)
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d063      	beq.n	800349e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033d6:	4b6a      	ldr	r3, [pc, #424]	; (8003580 <HAL_RCC_GetSysClockFreq+0x200>)
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	099b      	lsrs	r3, r3, #6
 80033dc:	2200      	movs	r2, #0
 80033de:	63bb      	str	r3, [r7, #56]	; 0x38
 80033e0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80033e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033e8:	633b      	str	r3, [r7, #48]	; 0x30
 80033ea:	2300      	movs	r3, #0
 80033ec:	637b      	str	r3, [r7, #52]	; 0x34
 80033ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80033f2:	4622      	mov	r2, r4
 80033f4:	462b      	mov	r3, r5
 80033f6:	f04f 0000 	mov.w	r0, #0
 80033fa:	f04f 0100 	mov.w	r1, #0
 80033fe:	0159      	lsls	r1, r3, #5
 8003400:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003404:	0150      	lsls	r0, r2, #5
 8003406:	4602      	mov	r2, r0
 8003408:	460b      	mov	r3, r1
 800340a:	4621      	mov	r1, r4
 800340c:	1a51      	subs	r1, r2, r1
 800340e:	6139      	str	r1, [r7, #16]
 8003410:	4629      	mov	r1, r5
 8003412:	eb63 0301 	sbc.w	r3, r3, r1
 8003416:	617b      	str	r3, [r7, #20]
 8003418:	f04f 0200 	mov.w	r2, #0
 800341c:	f04f 0300 	mov.w	r3, #0
 8003420:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003424:	4659      	mov	r1, fp
 8003426:	018b      	lsls	r3, r1, #6
 8003428:	4651      	mov	r1, sl
 800342a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800342e:	4651      	mov	r1, sl
 8003430:	018a      	lsls	r2, r1, #6
 8003432:	4651      	mov	r1, sl
 8003434:	ebb2 0801 	subs.w	r8, r2, r1
 8003438:	4659      	mov	r1, fp
 800343a:	eb63 0901 	sbc.w	r9, r3, r1
 800343e:	f04f 0200 	mov.w	r2, #0
 8003442:	f04f 0300 	mov.w	r3, #0
 8003446:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800344a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800344e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003452:	4690      	mov	r8, r2
 8003454:	4699      	mov	r9, r3
 8003456:	4623      	mov	r3, r4
 8003458:	eb18 0303 	adds.w	r3, r8, r3
 800345c:	60bb      	str	r3, [r7, #8]
 800345e:	462b      	mov	r3, r5
 8003460:	eb49 0303 	adc.w	r3, r9, r3
 8003464:	60fb      	str	r3, [r7, #12]
 8003466:	f04f 0200 	mov.w	r2, #0
 800346a:	f04f 0300 	mov.w	r3, #0
 800346e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003472:	4629      	mov	r1, r5
 8003474:	024b      	lsls	r3, r1, #9
 8003476:	4621      	mov	r1, r4
 8003478:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800347c:	4621      	mov	r1, r4
 800347e:	024a      	lsls	r2, r1, #9
 8003480:	4610      	mov	r0, r2
 8003482:	4619      	mov	r1, r3
 8003484:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003486:	2200      	movs	r2, #0
 8003488:	62bb      	str	r3, [r7, #40]	; 0x28
 800348a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800348c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003490:	f7fc feee 	bl	8000270 <__aeabi_uldivmod>
 8003494:	4602      	mov	r2, r0
 8003496:	460b      	mov	r3, r1
 8003498:	4613      	mov	r3, r2
 800349a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800349c:	e058      	b.n	8003550 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800349e:	4b38      	ldr	r3, [pc, #224]	; (8003580 <HAL_RCC_GetSysClockFreq+0x200>)
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	099b      	lsrs	r3, r3, #6
 80034a4:	2200      	movs	r2, #0
 80034a6:	4618      	mov	r0, r3
 80034a8:	4611      	mov	r1, r2
 80034aa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80034ae:	623b      	str	r3, [r7, #32]
 80034b0:	2300      	movs	r3, #0
 80034b2:	627b      	str	r3, [r7, #36]	; 0x24
 80034b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80034b8:	4642      	mov	r2, r8
 80034ba:	464b      	mov	r3, r9
 80034bc:	f04f 0000 	mov.w	r0, #0
 80034c0:	f04f 0100 	mov.w	r1, #0
 80034c4:	0159      	lsls	r1, r3, #5
 80034c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034ca:	0150      	lsls	r0, r2, #5
 80034cc:	4602      	mov	r2, r0
 80034ce:	460b      	mov	r3, r1
 80034d0:	4641      	mov	r1, r8
 80034d2:	ebb2 0a01 	subs.w	sl, r2, r1
 80034d6:	4649      	mov	r1, r9
 80034d8:	eb63 0b01 	sbc.w	fp, r3, r1
 80034dc:	f04f 0200 	mov.w	r2, #0
 80034e0:	f04f 0300 	mov.w	r3, #0
 80034e4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80034e8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80034ec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80034f0:	ebb2 040a 	subs.w	r4, r2, sl
 80034f4:	eb63 050b 	sbc.w	r5, r3, fp
 80034f8:	f04f 0200 	mov.w	r2, #0
 80034fc:	f04f 0300 	mov.w	r3, #0
 8003500:	00eb      	lsls	r3, r5, #3
 8003502:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003506:	00e2      	lsls	r2, r4, #3
 8003508:	4614      	mov	r4, r2
 800350a:	461d      	mov	r5, r3
 800350c:	4643      	mov	r3, r8
 800350e:	18e3      	adds	r3, r4, r3
 8003510:	603b      	str	r3, [r7, #0]
 8003512:	464b      	mov	r3, r9
 8003514:	eb45 0303 	adc.w	r3, r5, r3
 8003518:	607b      	str	r3, [r7, #4]
 800351a:	f04f 0200 	mov.w	r2, #0
 800351e:	f04f 0300 	mov.w	r3, #0
 8003522:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003526:	4629      	mov	r1, r5
 8003528:	028b      	lsls	r3, r1, #10
 800352a:	4621      	mov	r1, r4
 800352c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003530:	4621      	mov	r1, r4
 8003532:	028a      	lsls	r2, r1, #10
 8003534:	4610      	mov	r0, r2
 8003536:	4619      	mov	r1, r3
 8003538:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800353a:	2200      	movs	r2, #0
 800353c:	61bb      	str	r3, [r7, #24]
 800353e:	61fa      	str	r2, [r7, #28]
 8003540:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003544:	f7fc fe94 	bl	8000270 <__aeabi_uldivmod>
 8003548:	4602      	mov	r2, r0
 800354a:	460b      	mov	r3, r1
 800354c:	4613      	mov	r3, r2
 800354e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003550:	4b0b      	ldr	r3, [pc, #44]	; (8003580 <HAL_RCC_GetSysClockFreq+0x200>)
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	0c1b      	lsrs	r3, r3, #16
 8003556:	f003 0303 	and.w	r3, r3, #3
 800355a:	3301      	adds	r3, #1
 800355c:	005b      	lsls	r3, r3, #1
 800355e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003560:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003562:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003564:	fbb2 f3f3 	udiv	r3, r2, r3
 8003568:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800356a:	e002      	b.n	8003572 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800356c:	4b05      	ldr	r3, [pc, #20]	; (8003584 <HAL_RCC_GetSysClockFreq+0x204>)
 800356e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003570:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003572:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003574:	4618      	mov	r0, r3
 8003576:	3750      	adds	r7, #80	; 0x50
 8003578:	46bd      	mov	sp, r7
 800357a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800357e:	bf00      	nop
 8003580:	40023800 	.word	0x40023800
 8003584:	00f42400 	.word	0x00f42400
 8003588:	007a1200 	.word	0x007a1200

0800358c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d101      	bne.n	800359e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e07b      	b.n	8003696 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d108      	bne.n	80035b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035ae:	d009      	beq.n	80035c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	61da      	str	r2, [r3, #28]
 80035b6:	e005      	b.n	80035c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d106      	bne.n	80035e4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f7fe fdfc 	bl	80021dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2202      	movs	r2, #2
 80035e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035fa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800360c:	431a      	orrs	r2, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003616:	431a      	orrs	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	691b      	ldr	r3, [r3, #16]
 800361c:	f003 0302 	and.w	r3, r3, #2
 8003620:	431a      	orrs	r2, r3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	695b      	ldr	r3, [r3, #20]
 8003626:	f003 0301 	and.w	r3, r3, #1
 800362a:	431a      	orrs	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	699b      	ldr	r3, [r3, #24]
 8003630:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003634:	431a      	orrs	r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	69db      	ldr	r3, [r3, #28]
 800363a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800363e:	431a      	orrs	r2, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a1b      	ldr	r3, [r3, #32]
 8003644:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003648:	ea42 0103 	orr.w	r1, r2, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003650:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	430a      	orrs	r2, r1
 800365a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	699b      	ldr	r3, [r3, #24]
 8003660:	0c1b      	lsrs	r3, r3, #16
 8003662:	f003 0104 	and.w	r1, r3, #4
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366a:	f003 0210 	and.w	r2, r3, #16
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	430a      	orrs	r2, r1
 8003674:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	69da      	ldr	r2, [r3, #28]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003684:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3708      	adds	r7, #8
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}

0800369e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800369e:	b580      	push	{r7, lr}
 80036a0:	b088      	sub	sp, #32
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	60f8      	str	r0, [r7, #12]
 80036a6:	60b9      	str	r1, [r7, #8]
 80036a8:	603b      	str	r3, [r7, #0]
 80036aa:	4613      	mov	r3, r2
 80036ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80036ae:	2300      	movs	r3, #0
 80036b0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d101      	bne.n	80036c0 <HAL_SPI_Transmit+0x22>
 80036bc:	2302      	movs	r3, #2
 80036be:	e126      	b.n	800390e <HAL_SPI_Transmit+0x270>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80036c8:	f7ff f830 	bl	800272c <HAL_GetTick>
 80036cc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80036ce:	88fb      	ldrh	r3, [r7, #6]
 80036d0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d002      	beq.n	80036e4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80036de:	2302      	movs	r3, #2
 80036e0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80036e2:	e10b      	b.n	80038fc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d002      	beq.n	80036f0 <HAL_SPI_Transmit+0x52>
 80036ea:	88fb      	ldrh	r3, [r7, #6]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d102      	bne.n	80036f6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80036f4:	e102      	b.n	80038fc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2203      	movs	r2, #3
 80036fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2200      	movs	r2, #0
 8003702:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	68ba      	ldr	r2, [r7, #8]
 8003708:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	88fa      	ldrh	r2, [r7, #6]
 800370e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	88fa      	ldrh	r2, [r7, #6]
 8003714:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2200      	movs	r2, #0
 800371a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2200      	movs	r2, #0
 8003726:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2200      	movs	r2, #0
 800372c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2200      	movs	r2, #0
 8003732:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800373c:	d10f      	bne.n	800375e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800374c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800375c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003768:	2b40      	cmp	r3, #64	; 0x40
 800376a:	d007      	beq.n	800377c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800377a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003784:	d14b      	bne.n	800381e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d002      	beq.n	8003794 <HAL_SPI_Transmit+0xf6>
 800378e:	8afb      	ldrh	r3, [r7, #22]
 8003790:	2b01      	cmp	r3, #1
 8003792:	d13e      	bne.n	8003812 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003798:	881a      	ldrh	r2, [r3, #0]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a4:	1c9a      	adds	r2, r3, #2
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	3b01      	subs	r3, #1
 80037b2:	b29a      	uxth	r2, r3
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80037b8:	e02b      	b.n	8003812 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	f003 0302 	and.w	r3, r3, #2
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d112      	bne.n	80037ee <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037cc:	881a      	ldrh	r2, [r3, #0]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d8:	1c9a      	adds	r2, r3, #2
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	3b01      	subs	r3, #1
 80037e6:	b29a      	uxth	r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	86da      	strh	r2, [r3, #54]	; 0x36
 80037ec:	e011      	b.n	8003812 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037ee:	f7fe ff9d 	bl	800272c <HAL_GetTick>
 80037f2:	4602      	mov	r2, r0
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	683a      	ldr	r2, [r7, #0]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d803      	bhi.n	8003806 <HAL_SPI_Transmit+0x168>
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003804:	d102      	bne.n	800380c <HAL_SPI_Transmit+0x16e>
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d102      	bne.n	8003812 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003810:	e074      	b.n	80038fc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003816:	b29b      	uxth	r3, r3
 8003818:	2b00      	cmp	r3, #0
 800381a:	d1ce      	bne.n	80037ba <HAL_SPI_Transmit+0x11c>
 800381c:	e04c      	b.n	80038b8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d002      	beq.n	800382c <HAL_SPI_Transmit+0x18e>
 8003826:	8afb      	ldrh	r3, [r7, #22]
 8003828:	2b01      	cmp	r3, #1
 800382a:	d140      	bne.n	80038ae <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	330c      	adds	r3, #12
 8003836:	7812      	ldrb	r2, [r2, #0]
 8003838:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383e:	1c5a      	adds	r2, r3, #1
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003848:	b29b      	uxth	r3, r3
 800384a:	3b01      	subs	r3, #1
 800384c:	b29a      	uxth	r2, r3
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003852:	e02c      	b.n	80038ae <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	2b02      	cmp	r3, #2
 8003860:	d113      	bne.n	800388a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	330c      	adds	r3, #12
 800386c:	7812      	ldrb	r2, [r2, #0]
 800386e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003874:	1c5a      	adds	r2, r3, #1
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800387e:	b29b      	uxth	r3, r3
 8003880:	3b01      	subs	r3, #1
 8003882:	b29a      	uxth	r2, r3
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	86da      	strh	r2, [r3, #54]	; 0x36
 8003888:	e011      	b.n	80038ae <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800388a:	f7fe ff4f 	bl	800272c <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	683a      	ldr	r2, [r7, #0]
 8003896:	429a      	cmp	r2, r3
 8003898:	d803      	bhi.n	80038a2 <HAL_SPI_Transmit+0x204>
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038a0:	d102      	bne.n	80038a8 <HAL_SPI_Transmit+0x20a>
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d102      	bne.n	80038ae <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80038a8:	2303      	movs	r3, #3
 80038aa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80038ac:	e026      	b.n	80038fc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d1cd      	bne.n	8003854 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80038b8:	69ba      	ldr	r2, [r7, #24]
 80038ba:	6839      	ldr	r1, [r7, #0]
 80038bc:	68f8      	ldr	r0, [r7, #12]
 80038be:	f000 fa63 	bl	8003d88 <SPI_EndRxTxTransaction>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d002      	beq.n	80038ce <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2220      	movs	r2, #32
 80038cc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d10a      	bne.n	80038ec <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80038d6:	2300      	movs	r3, #0
 80038d8:	613b      	str	r3, [r7, #16]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	613b      	str	r3, [r7, #16]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	613b      	str	r3, [r7, #16]
 80038ea:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d002      	beq.n	80038fa <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	77fb      	strb	r3, [r7, #31]
 80038f8:	e000      	b.n	80038fc <HAL_SPI_Transmit+0x25e>
  }

error:
 80038fa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2200      	movs	r2, #0
 8003908:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800390c:	7ffb      	ldrb	r3, [r7, #31]
}
 800390e:	4618      	mov	r0, r3
 8003910:	3720      	adds	r7, #32
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}

08003916 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003916:	b580      	push	{r7, lr}
 8003918:	b08c      	sub	sp, #48	; 0x30
 800391a:	af00      	add	r7, sp, #0
 800391c:	60f8      	str	r0, [r7, #12]
 800391e:	60b9      	str	r1, [r7, #8]
 8003920:	607a      	str	r2, [r7, #4]
 8003922:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003924:	2301      	movs	r3, #1
 8003926:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003928:	2300      	movs	r3, #0
 800392a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003934:	2b01      	cmp	r3, #1
 8003936:	d101      	bne.n	800393c <HAL_SPI_TransmitReceive+0x26>
 8003938:	2302      	movs	r3, #2
 800393a:	e18a      	b.n	8003c52 <HAL_SPI_TransmitReceive+0x33c>
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003944:	f7fe fef2 	bl	800272c <HAL_GetTick>
 8003948:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003950:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800395a:	887b      	ldrh	r3, [r7, #2]
 800395c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800395e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003962:	2b01      	cmp	r3, #1
 8003964:	d00f      	beq.n	8003986 <HAL_SPI_TransmitReceive+0x70>
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800396c:	d107      	bne.n	800397e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d103      	bne.n	800397e <HAL_SPI_TransmitReceive+0x68>
 8003976:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800397a:	2b04      	cmp	r3, #4
 800397c:	d003      	beq.n	8003986 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800397e:	2302      	movs	r3, #2
 8003980:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003984:	e15b      	b.n	8003c3e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d005      	beq.n	8003998 <HAL_SPI_TransmitReceive+0x82>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d002      	beq.n	8003998 <HAL_SPI_TransmitReceive+0x82>
 8003992:	887b      	ldrh	r3, [r7, #2]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d103      	bne.n	80039a0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800399e:	e14e      	b.n	8003c3e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	2b04      	cmp	r3, #4
 80039aa:	d003      	beq.n	80039b4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2205      	movs	r2, #5
 80039b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2200      	movs	r2, #0
 80039b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	887a      	ldrh	r2, [r7, #2]
 80039c4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	887a      	ldrh	r2, [r7, #2]
 80039ca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	68ba      	ldr	r2, [r7, #8]
 80039d0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	887a      	ldrh	r2, [r7, #2]
 80039d6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	887a      	ldrh	r2, [r7, #2]
 80039dc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2200      	movs	r2, #0
 80039e2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2200      	movs	r2, #0
 80039e8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039f4:	2b40      	cmp	r3, #64	; 0x40
 80039f6:	d007      	beq.n	8003a08 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a06:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a10:	d178      	bne.n	8003b04 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d002      	beq.n	8003a20 <HAL_SPI_TransmitReceive+0x10a>
 8003a1a:	8b7b      	ldrh	r3, [r7, #26]
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d166      	bne.n	8003aee <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a24:	881a      	ldrh	r2, [r3, #0]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a30:	1c9a      	adds	r2, r3, #2
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	3b01      	subs	r3, #1
 8003a3e:	b29a      	uxth	r2, r3
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a44:	e053      	b.n	8003aee <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	f003 0302 	and.w	r3, r3, #2
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d11b      	bne.n	8003a8c <HAL_SPI_TransmitReceive+0x176>
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d016      	beq.n	8003a8c <HAL_SPI_TransmitReceive+0x176>
 8003a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d113      	bne.n	8003a8c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a68:	881a      	ldrh	r2, [r3, #0]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a74:	1c9a      	adds	r2, r3, #2
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	3b01      	subs	r3, #1
 8003a82:	b29a      	uxth	r2, r3
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d119      	bne.n	8003ace <HAL_SPI_TransmitReceive+0x1b8>
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d014      	beq.n	8003ace <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68da      	ldr	r2, [r3, #12]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aae:	b292      	uxth	r2, r2
 8003ab0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab6:	1c9a      	adds	r2, r3, #2
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	b29a      	uxth	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003aca:	2301      	movs	r3, #1
 8003acc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003ace:	f7fe fe2d 	bl	800272c <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d807      	bhi.n	8003aee <HAL_SPI_TransmitReceive+0x1d8>
 8003ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ae4:	d003      	beq.n	8003aee <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003aec:	e0a7      	b.n	8003c3e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d1a6      	bne.n	8003a46 <HAL_SPI_TransmitReceive+0x130>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d1a1      	bne.n	8003a46 <HAL_SPI_TransmitReceive+0x130>
 8003b02:	e07c      	b.n	8003bfe <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d002      	beq.n	8003b12 <HAL_SPI_TransmitReceive+0x1fc>
 8003b0c:	8b7b      	ldrh	r3, [r7, #26]
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d16b      	bne.n	8003bea <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	330c      	adds	r3, #12
 8003b1c:	7812      	ldrb	r2, [r2, #0]
 8003b1e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b24:	1c5a      	adds	r2, r3, #1
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	3b01      	subs	r3, #1
 8003b32:	b29a      	uxth	r2, r3
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b38:	e057      	b.n	8003bea <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	f003 0302 	and.w	r3, r3, #2
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d11c      	bne.n	8003b82 <HAL_SPI_TransmitReceive+0x26c>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d017      	beq.n	8003b82 <HAL_SPI_TransmitReceive+0x26c>
 8003b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d114      	bne.n	8003b82 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	330c      	adds	r3, #12
 8003b62:	7812      	ldrb	r2, [r2, #0]
 8003b64:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6a:	1c5a      	adds	r2, r3, #1
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	3b01      	subs	r3, #1
 8003b78:	b29a      	uxth	r2, r3
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	f003 0301 	and.w	r3, r3, #1
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d119      	bne.n	8003bc4 <HAL_SPI_TransmitReceive+0x2ae>
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d014      	beq.n	8003bc4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68da      	ldr	r2, [r3, #12]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba4:	b2d2      	uxtb	r2, r2
 8003ba6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bac:	1c5a      	adds	r2, r3, #1
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	3b01      	subs	r3, #1
 8003bba:	b29a      	uxth	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003bc4:	f7fe fdb2 	bl	800272c <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d803      	bhi.n	8003bdc <HAL_SPI_TransmitReceive+0x2c6>
 8003bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bda:	d102      	bne.n	8003be2 <HAL_SPI_TransmitReceive+0x2cc>
 8003bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d103      	bne.n	8003bea <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003be8:	e029      	b.n	8003c3e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d1a2      	bne.n	8003b3a <HAL_SPI_TransmitReceive+0x224>
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d19d      	bne.n	8003b3a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003bfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c00:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c02:	68f8      	ldr	r0, [r7, #12]
 8003c04:	f000 f8c0 	bl	8003d88 <SPI_EndRxTxTransaction>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d006      	beq.n	8003c1c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2220      	movs	r2, #32
 8003c18:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003c1a:	e010      	b.n	8003c3e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d10b      	bne.n	8003c3c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c24:	2300      	movs	r3, #0
 8003c26:	617b      	str	r3, [r7, #20]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	617b      	str	r3, [r7, #20]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	617b      	str	r3, [r7, #20]
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	e000      	b.n	8003c3e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003c3c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2201      	movs	r2, #1
 8003c42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003c4e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3730      	adds	r7, #48	; 0x30
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}

08003c5a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003c5a:	b480      	push	{r7}
 8003c5c:	b083      	sub	sp, #12
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c68:	b2db      	uxtb	r3, r3
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	370c      	adds	r7, #12
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
	...

08003c78 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b088      	sub	sp, #32
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	603b      	str	r3, [r7, #0]
 8003c84:	4613      	mov	r3, r2
 8003c86:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003c88:	f7fe fd50 	bl	800272c <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c90:	1a9b      	subs	r3, r3, r2
 8003c92:	683a      	ldr	r2, [r7, #0]
 8003c94:	4413      	add	r3, r2
 8003c96:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003c98:	f7fe fd48 	bl	800272c <HAL_GetTick>
 8003c9c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003c9e:	4b39      	ldr	r3, [pc, #228]	; (8003d84 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	015b      	lsls	r3, r3, #5
 8003ca4:	0d1b      	lsrs	r3, r3, #20
 8003ca6:	69fa      	ldr	r2, [r7, #28]
 8003ca8:	fb02 f303 	mul.w	r3, r2, r3
 8003cac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003cae:	e054      	b.n	8003d5a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cb6:	d050      	beq.n	8003d5a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003cb8:	f7fe fd38 	bl	800272c <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	69fa      	ldr	r2, [r7, #28]
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d902      	bls.n	8003cce <SPI_WaitFlagStateUntilTimeout+0x56>
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d13d      	bne.n	8003d4a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	685a      	ldr	r2, [r3, #4]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003cdc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ce6:	d111      	bne.n	8003d0c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cf0:	d004      	beq.n	8003cfc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cfa:	d107      	bne.n	8003d0c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d0a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d14:	d10f      	bne.n	8003d36 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d24:	601a      	str	r2, [r3, #0]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d34:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2201      	movs	r2, #1
 8003d3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e017      	b.n	8003d7a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d101      	bne.n	8003d54 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003d50:	2300      	movs	r3, #0
 8003d52:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	3b01      	subs	r3, #1
 8003d58:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	689a      	ldr	r2, [r3, #8]
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	4013      	ands	r3, r2
 8003d64:	68ba      	ldr	r2, [r7, #8]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	bf0c      	ite	eq
 8003d6a:	2301      	moveq	r3, #1
 8003d6c:	2300      	movne	r3, #0
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	461a      	mov	r2, r3
 8003d72:	79fb      	ldrb	r3, [r7, #7]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d19b      	bne.n	8003cb0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3720      	adds	r7, #32
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	2000000c 	.word	0x2000000c

08003d88 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b088      	sub	sp, #32
 8003d8c:	af02      	add	r7, sp, #8
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003d94:	4b1b      	ldr	r3, [pc, #108]	; (8003e04 <SPI_EndRxTxTransaction+0x7c>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a1b      	ldr	r2, [pc, #108]	; (8003e08 <SPI_EndRxTxTransaction+0x80>)
 8003d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d9e:	0d5b      	lsrs	r3, r3, #21
 8003da0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003da4:	fb02 f303 	mul.w	r3, r2, r3
 8003da8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003db2:	d112      	bne.n	8003dda <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	9300      	str	r3, [sp, #0]
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	2180      	movs	r1, #128	; 0x80
 8003dbe:	68f8      	ldr	r0, [r7, #12]
 8003dc0:	f7ff ff5a 	bl	8003c78 <SPI_WaitFlagStateUntilTimeout>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d016      	beq.n	8003df8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dce:	f043 0220 	orr.w	r2, r3, #32
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e00f      	b.n	8003dfa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d00a      	beq.n	8003df6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	3b01      	subs	r3, #1
 8003de4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003df0:	2b80      	cmp	r3, #128	; 0x80
 8003df2:	d0f2      	beq.n	8003dda <SPI_EndRxTxTransaction+0x52>
 8003df4:	e000      	b.n	8003df8 <SPI_EndRxTxTransaction+0x70>
        break;
 8003df6:	bf00      	nop
  }

  return HAL_OK;
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3718      	adds	r7, #24
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	2000000c 	.word	0x2000000c
 8003e08:	165e9f81 	.word	0x165e9f81

08003e0c <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d101      	bne.n	8003e22 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e038      	b.n	8003e94 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d106      	bne.n	8003e3c <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8003e36:	68f8      	ldr	r0, [r7, #12]
 8003e38:	f7fe fb12 	bl	8002460 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	3308      	adds	r3, #8
 8003e44:	4619      	mov	r1, r3
 8003e46:	4610      	mov	r0, r2
 8003e48:	f000 feae 	bl	8004ba8 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6818      	ldr	r0, [r3, #0]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	461a      	mov	r2, r3
 8003e56:	68b9      	ldr	r1, [r7, #8]
 8003e58:	f000 ff10 	bl	8004c7c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6858      	ldr	r0, [r3, #4]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	689a      	ldr	r2, [r3, #8]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e68:	6879      	ldr	r1, [r7, #4]
 8003e6a:	f000 ff3d 	bl	8004ce8 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	6892      	ldr	r2, [r2, #8]
 8003e76:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68fa      	ldr	r2, [r7, #12]
 8003e80:	6892      	ldr	r2, [r2, #8]
 8003e82:	f041 0101 	orr.w	r1, r1, #1
 8003e86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 8003e92:	2300      	movs	r3, #0
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3710      	adds	r7, #16
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d101      	bne.n	8003eae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e041      	b.n	8003f32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d106      	bne.n	8003ec8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f7fe fa28 	bl	8002318 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2202      	movs	r2, #2
 8003ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	3304      	adds	r3, #4
 8003ed8:	4619      	mov	r1, r3
 8003eda:	4610      	mov	r0, r2
 8003edc:	f000 fad8 	bl	8004490 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3708      	adds	r7, #8
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}

08003f3a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f3a:	b580      	push	{r7, lr}
 8003f3c:	b082      	sub	sp, #8
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d101      	bne.n	8003f4c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e041      	b.n	8003fd0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d106      	bne.n	8003f66 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f000 f839 	bl	8003fd8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2202      	movs	r2, #2
 8003f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	3304      	adds	r3, #4
 8003f76:	4619      	mov	r1, r3
 8003f78:	4610      	mov	r0, r2
 8003f7a:	f000 fa89 	bl	8004490 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2201      	movs	r2, #1
 8003f82:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2201      	movs	r2, #1
 8003f8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2201      	movs	r2, #1
 8003f92:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fce:	2300      	movs	r3, #0
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3708      	adds	r7, #8
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003fe0:	bf00      	nop
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d109      	bne.n	8004010 <HAL_TIM_PWM_Start+0x24>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004002:	b2db      	uxtb	r3, r3
 8004004:	2b01      	cmp	r3, #1
 8004006:	bf14      	ite	ne
 8004008:	2301      	movne	r3, #1
 800400a:	2300      	moveq	r3, #0
 800400c:	b2db      	uxtb	r3, r3
 800400e:	e022      	b.n	8004056 <HAL_TIM_PWM_Start+0x6a>
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	2b04      	cmp	r3, #4
 8004014:	d109      	bne.n	800402a <HAL_TIM_PWM_Start+0x3e>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800401c:	b2db      	uxtb	r3, r3
 800401e:	2b01      	cmp	r3, #1
 8004020:	bf14      	ite	ne
 8004022:	2301      	movne	r3, #1
 8004024:	2300      	moveq	r3, #0
 8004026:	b2db      	uxtb	r3, r3
 8004028:	e015      	b.n	8004056 <HAL_TIM_PWM_Start+0x6a>
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	2b08      	cmp	r3, #8
 800402e:	d109      	bne.n	8004044 <HAL_TIM_PWM_Start+0x58>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004036:	b2db      	uxtb	r3, r3
 8004038:	2b01      	cmp	r3, #1
 800403a:	bf14      	ite	ne
 800403c:	2301      	movne	r3, #1
 800403e:	2300      	moveq	r3, #0
 8004040:	b2db      	uxtb	r3, r3
 8004042:	e008      	b.n	8004056 <HAL_TIM_PWM_Start+0x6a>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800404a:	b2db      	uxtb	r3, r3
 800404c:	2b01      	cmp	r3, #1
 800404e:	bf14      	ite	ne
 8004050:	2301      	movne	r3, #1
 8004052:	2300      	moveq	r3, #0
 8004054:	b2db      	uxtb	r3, r3
 8004056:	2b00      	cmp	r3, #0
 8004058:	d001      	beq.n	800405e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e07c      	b.n	8004158 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d104      	bne.n	800406e <HAL_TIM_PWM_Start+0x82>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2202      	movs	r2, #2
 8004068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800406c:	e013      	b.n	8004096 <HAL_TIM_PWM_Start+0xaa>
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	2b04      	cmp	r3, #4
 8004072:	d104      	bne.n	800407e <HAL_TIM_PWM_Start+0x92>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2202      	movs	r2, #2
 8004078:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800407c:	e00b      	b.n	8004096 <HAL_TIM_PWM_Start+0xaa>
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	2b08      	cmp	r3, #8
 8004082:	d104      	bne.n	800408e <HAL_TIM_PWM_Start+0xa2>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2202      	movs	r2, #2
 8004088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800408c:	e003      	b.n	8004096 <HAL_TIM_PWM_Start+0xaa>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2202      	movs	r2, #2
 8004092:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2201      	movs	r2, #1
 800409c:	6839      	ldr	r1, [r7, #0]
 800409e:	4618      	mov	r0, r3
 80040a0:	f000 fce0 	bl	8004a64 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a2d      	ldr	r2, [pc, #180]	; (8004160 <HAL_TIM_PWM_Start+0x174>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d004      	beq.n	80040b8 <HAL_TIM_PWM_Start+0xcc>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a2c      	ldr	r2, [pc, #176]	; (8004164 <HAL_TIM_PWM_Start+0x178>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d101      	bne.n	80040bc <HAL_TIM_PWM_Start+0xd0>
 80040b8:	2301      	movs	r3, #1
 80040ba:	e000      	b.n	80040be <HAL_TIM_PWM_Start+0xd2>
 80040bc:	2300      	movs	r3, #0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d007      	beq.n	80040d2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040d0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a22      	ldr	r2, [pc, #136]	; (8004160 <HAL_TIM_PWM_Start+0x174>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d022      	beq.n	8004122 <HAL_TIM_PWM_Start+0x136>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040e4:	d01d      	beq.n	8004122 <HAL_TIM_PWM_Start+0x136>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a1f      	ldr	r2, [pc, #124]	; (8004168 <HAL_TIM_PWM_Start+0x17c>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d018      	beq.n	8004122 <HAL_TIM_PWM_Start+0x136>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a1d      	ldr	r2, [pc, #116]	; (800416c <HAL_TIM_PWM_Start+0x180>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d013      	beq.n	8004122 <HAL_TIM_PWM_Start+0x136>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a1c      	ldr	r2, [pc, #112]	; (8004170 <HAL_TIM_PWM_Start+0x184>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d00e      	beq.n	8004122 <HAL_TIM_PWM_Start+0x136>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a16      	ldr	r2, [pc, #88]	; (8004164 <HAL_TIM_PWM_Start+0x178>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d009      	beq.n	8004122 <HAL_TIM_PWM_Start+0x136>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a18      	ldr	r2, [pc, #96]	; (8004174 <HAL_TIM_PWM_Start+0x188>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d004      	beq.n	8004122 <HAL_TIM_PWM_Start+0x136>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a16      	ldr	r2, [pc, #88]	; (8004178 <HAL_TIM_PWM_Start+0x18c>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d111      	bne.n	8004146 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	f003 0307 	and.w	r3, r3, #7
 800412c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2b06      	cmp	r3, #6
 8004132:	d010      	beq.n	8004156 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f042 0201 	orr.w	r2, r2, #1
 8004142:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004144:	e007      	b.n	8004156 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f042 0201 	orr.w	r2, r2, #1
 8004154:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004156:	2300      	movs	r3, #0
}
 8004158:	4618      	mov	r0, r3
 800415a:	3710      	adds	r7, #16
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}
 8004160:	40010000 	.word	0x40010000
 8004164:	40010400 	.word	0x40010400
 8004168:	40000400 	.word	0x40000400
 800416c:	40000800 	.word	0x40000800
 8004170:	40000c00 	.word	0x40000c00
 8004174:	40014000 	.word	0x40014000
 8004178:	40001800 	.word	0x40001800

0800417c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b086      	sub	sp, #24
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004188:	2300      	movs	r3, #0
 800418a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004192:	2b01      	cmp	r3, #1
 8004194:	d101      	bne.n	800419a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004196:	2302      	movs	r3, #2
 8004198:	e0ae      	b.n	80042f8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2201      	movs	r2, #1
 800419e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2b0c      	cmp	r3, #12
 80041a6:	f200 809f 	bhi.w	80042e8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80041aa:	a201      	add	r2, pc, #4	; (adr r2, 80041b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80041ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041b0:	080041e5 	.word	0x080041e5
 80041b4:	080042e9 	.word	0x080042e9
 80041b8:	080042e9 	.word	0x080042e9
 80041bc:	080042e9 	.word	0x080042e9
 80041c0:	08004225 	.word	0x08004225
 80041c4:	080042e9 	.word	0x080042e9
 80041c8:	080042e9 	.word	0x080042e9
 80041cc:	080042e9 	.word	0x080042e9
 80041d0:	08004267 	.word	0x08004267
 80041d4:	080042e9 	.word	0x080042e9
 80041d8:	080042e9 	.word	0x080042e9
 80041dc:	080042e9 	.word	0x080042e9
 80041e0:	080042a7 	.word	0x080042a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68b9      	ldr	r1, [r7, #8]
 80041ea:	4618      	mov	r0, r3
 80041ec:	f000 f9f0 	bl	80045d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	699a      	ldr	r2, [r3, #24]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f042 0208 	orr.w	r2, r2, #8
 80041fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	699a      	ldr	r2, [r3, #24]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f022 0204 	bic.w	r2, r2, #4
 800420e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	6999      	ldr	r1, [r3, #24]
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	691a      	ldr	r2, [r3, #16]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	430a      	orrs	r2, r1
 8004220:	619a      	str	r2, [r3, #24]
      break;
 8004222:	e064      	b.n	80042ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	68b9      	ldr	r1, [r7, #8]
 800422a:	4618      	mov	r0, r3
 800422c:	f000 fa40 	bl	80046b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	699a      	ldr	r2, [r3, #24]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800423e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	699a      	ldr	r2, [r3, #24]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800424e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	6999      	ldr	r1, [r3, #24]
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	021a      	lsls	r2, r3, #8
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	430a      	orrs	r2, r1
 8004262:	619a      	str	r2, [r3, #24]
      break;
 8004264:	e043      	b.n	80042ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	68b9      	ldr	r1, [r7, #8]
 800426c:	4618      	mov	r0, r3
 800426e:	f000 fa95 	bl	800479c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	69da      	ldr	r2, [r3, #28]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f042 0208 	orr.w	r2, r2, #8
 8004280:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	69da      	ldr	r2, [r3, #28]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f022 0204 	bic.w	r2, r2, #4
 8004290:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	69d9      	ldr	r1, [r3, #28]
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	691a      	ldr	r2, [r3, #16]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	430a      	orrs	r2, r1
 80042a2:	61da      	str	r2, [r3, #28]
      break;
 80042a4:	e023      	b.n	80042ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	68b9      	ldr	r1, [r7, #8]
 80042ac:	4618      	mov	r0, r3
 80042ae:	f000 fae9 	bl	8004884 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	69da      	ldr	r2, [r3, #28]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	69da      	ldr	r2, [r3, #28]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	69d9      	ldr	r1, [r3, #28]
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	691b      	ldr	r3, [r3, #16]
 80042dc:	021a      	lsls	r2, r3, #8
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	430a      	orrs	r2, r1
 80042e4:	61da      	str	r2, [r3, #28]
      break;
 80042e6:	e002      	b.n	80042ee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	75fb      	strb	r3, [r7, #23]
      break;
 80042ec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80042f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3718      	adds	r7, #24
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}

08004300 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800430a:	2300      	movs	r3, #0
 800430c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004314:	2b01      	cmp	r3, #1
 8004316:	d101      	bne.n	800431c <HAL_TIM_ConfigClockSource+0x1c>
 8004318:	2302      	movs	r3, #2
 800431a:	e0b4      	b.n	8004486 <HAL_TIM_ConfigClockSource+0x186>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2202      	movs	r2, #2
 8004328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800433a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004342:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68ba      	ldr	r2, [r7, #8]
 800434a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004354:	d03e      	beq.n	80043d4 <HAL_TIM_ConfigClockSource+0xd4>
 8004356:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800435a:	f200 8087 	bhi.w	800446c <HAL_TIM_ConfigClockSource+0x16c>
 800435e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004362:	f000 8086 	beq.w	8004472 <HAL_TIM_ConfigClockSource+0x172>
 8004366:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800436a:	d87f      	bhi.n	800446c <HAL_TIM_ConfigClockSource+0x16c>
 800436c:	2b70      	cmp	r3, #112	; 0x70
 800436e:	d01a      	beq.n	80043a6 <HAL_TIM_ConfigClockSource+0xa6>
 8004370:	2b70      	cmp	r3, #112	; 0x70
 8004372:	d87b      	bhi.n	800446c <HAL_TIM_ConfigClockSource+0x16c>
 8004374:	2b60      	cmp	r3, #96	; 0x60
 8004376:	d050      	beq.n	800441a <HAL_TIM_ConfigClockSource+0x11a>
 8004378:	2b60      	cmp	r3, #96	; 0x60
 800437a:	d877      	bhi.n	800446c <HAL_TIM_ConfigClockSource+0x16c>
 800437c:	2b50      	cmp	r3, #80	; 0x50
 800437e:	d03c      	beq.n	80043fa <HAL_TIM_ConfigClockSource+0xfa>
 8004380:	2b50      	cmp	r3, #80	; 0x50
 8004382:	d873      	bhi.n	800446c <HAL_TIM_ConfigClockSource+0x16c>
 8004384:	2b40      	cmp	r3, #64	; 0x40
 8004386:	d058      	beq.n	800443a <HAL_TIM_ConfigClockSource+0x13a>
 8004388:	2b40      	cmp	r3, #64	; 0x40
 800438a:	d86f      	bhi.n	800446c <HAL_TIM_ConfigClockSource+0x16c>
 800438c:	2b30      	cmp	r3, #48	; 0x30
 800438e:	d064      	beq.n	800445a <HAL_TIM_ConfigClockSource+0x15a>
 8004390:	2b30      	cmp	r3, #48	; 0x30
 8004392:	d86b      	bhi.n	800446c <HAL_TIM_ConfigClockSource+0x16c>
 8004394:	2b20      	cmp	r3, #32
 8004396:	d060      	beq.n	800445a <HAL_TIM_ConfigClockSource+0x15a>
 8004398:	2b20      	cmp	r3, #32
 800439a:	d867      	bhi.n	800446c <HAL_TIM_ConfigClockSource+0x16c>
 800439c:	2b00      	cmp	r3, #0
 800439e:	d05c      	beq.n	800445a <HAL_TIM_ConfigClockSource+0x15a>
 80043a0:	2b10      	cmp	r3, #16
 80043a2:	d05a      	beq.n	800445a <HAL_TIM_ConfigClockSource+0x15a>
 80043a4:	e062      	b.n	800446c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6818      	ldr	r0, [r3, #0]
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	6899      	ldr	r1, [r3, #8]
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	685a      	ldr	r2, [r3, #4]
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	f000 fb35 	bl	8004a24 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80043c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68ba      	ldr	r2, [r7, #8]
 80043d0:	609a      	str	r2, [r3, #8]
      break;
 80043d2:	e04f      	b.n	8004474 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6818      	ldr	r0, [r3, #0]
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	6899      	ldr	r1, [r3, #8]
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	685a      	ldr	r2, [r3, #4]
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	f000 fb1e 	bl	8004a24 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	689a      	ldr	r2, [r3, #8]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043f6:	609a      	str	r2, [r3, #8]
      break;
 80043f8:	e03c      	b.n	8004474 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6818      	ldr	r0, [r3, #0]
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	6859      	ldr	r1, [r3, #4]
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	461a      	mov	r2, r3
 8004408:	f000 fa92 	bl	8004930 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2150      	movs	r1, #80	; 0x50
 8004412:	4618      	mov	r0, r3
 8004414:	f000 faeb 	bl	80049ee <TIM_ITRx_SetConfig>
      break;
 8004418:	e02c      	b.n	8004474 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6818      	ldr	r0, [r3, #0]
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	6859      	ldr	r1, [r3, #4]
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	461a      	mov	r2, r3
 8004428:	f000 fab1 	bl	800498e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2160      	movs	r1, #96	; 0x60
 8004432:	4618      	mov	r0, r3
 8004434:	f000 fadb 	bl	80049ee <TIM_ITRx_SetConfig>
      break;
 8004438:	e01c      	b.n	8004474 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6818      	ldr	r0, [r3, #0]
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	6859      	ldr	r1, [r3, #4]
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	461a      	mov	r2, r3
 8004448:	f000 fa72 	bl	8004930 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2140      	movs	r1, #64	; 0x40
 8004452:	4618      	mov	r0, r3
 8004454:	f000 facb 	bl	80049ee <TIM_ITRx_SetConfig>
      break;
 8004458:	e00c      	b.n	8004474 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4619      	mov	r1, r3
 8004464:	4610      	mov	r0, r2
 8004466:	f000 fac2 	bl	80049ee <TIM_ITRx_SetConfig>
      break;
 800446a:	e003      	b.n	8004474 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	73fb      	strb	r3, [r7, #15]
      break;
 8004470:	e000      	b.n	8004474 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004472:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004484:	7bfb      	ldrb	r3, [r7, #15]
}
 8004486:	4618      	mov	r0, r3
 8004488:	3710      	adds	r7, #16
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
	...

08004490 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004490:	b480      	push	{r7}
 8004492:	b085      	sub	sp, #20
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4a40      	ldr	r2, [pc, #256]	; (80045a4 <TIM_Base_SetConfig+0x114>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d013      	beq.n	80044d0 <TIM_Base_SetConfig+0x40>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044ae:	d00f      	beq.n	80044d0 <TIM_Base_SetConfig+0x40>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	4a3d      	ldr	r2, [pc, #244]	; (80045a8 <TIM_Base_SetConfig+0x118>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d00b      	beq.n	80044d0 <TIM_Base_SetConfig+0x40>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4a3c      	ldr	r2, [pc, #240]	; (80045ac <TIM_Base_SetConfig+0x11c>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d007      	beq.n	80044d0 <TIM_Base_SetConfig+0x40>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a3b      	ldr	r2, [pc, #236]	; (80045b0 <TIM_Base_SetConfig+0x120>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d003      	beq.n	80044d0 <TIM_Base_SetConfig+0x40>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4a3a      	ldr	r2, [pc, #232]	; (80045b4 <TIM_Base_SetConfig+0x124>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d108      	bne.n	80044e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	68fa      	ldr	r2, [r7, #12]
 80044de:	4313      	orrs	r3, r2
 80044e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a2f      	ldr	r2, [pc, #188]	; (80045a4 <TIM_Base_SetConfig+0x114>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d02b      	beq.n	8004542 <TIM_Base_SetConfig+0xb2>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044f0:	d027      	beq.n	8004542 <TIM_Base_SetConfig+0xb2>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a2c      	ldr	r2, [pc, #176]	; (80045a8 <TIM_Base_SetConfig+0x118>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d023      	beq.n	8004542 <TIM_Base_SetConfig+0xb2>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a2b      	ldr	r2, [pc, #172]	; (80045ac <TIM_Base_SetConfig+0x11c>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d01f      	beq.n	8004542 <TIM_Base_SetConfig+0xb2>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a2a      	ldr	r2, [pc, #168]	; (80045b0 <TIM_Base_SetConfig+0x120>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d01b      	beq.n	8004542 <TIM_Base_SetConfig+0xb2>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a29      	ldr	r2, [pc, #164]	; (80045b4 <TIM_Base_SetConfig+0x124>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d017      	beq.n	8004542 <TIM_Base_SetConfig+0xb2>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a28      	ldr	r2, [pc, #160]	; (80045b8 <TIM_Base_SetConfig+0x128>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d013      	beq.n	8004542 <TIM_Base_SetConfig+0xb2>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a27      	ldr	r2, [pc, #156]	; (80045bc <TIM_Base_SetConfig+0x12c>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d00f      	beq.n	8004542 <TIM_Base_SetConfig+0xb2>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a26      	ldr	r2, [pc, #152]	; (80045c0 <TIM_Base_SetConfig+0x130>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d00b      	beq.n	8004542 <TIM_Base_SetConfig+0xb2>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a25      	ldr	r2, [pc, #148]	; (80045c4 <TIM_Base_SetConfig+0x134>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d007      	beq.n	8004542 <TIM_Base_SetConfig+0xb2>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a24      	ldr	r2, [pc, #144]	; (80045c8 <TIM_Base_SetConfig+0x138>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d003      	beq.n	8004542 <TIM_Base_SetConfig+0xb2>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a23      	ldr	r2, [pc, #140]	; (80045cc <TIM_Base_SetConfig+0x13c>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d108      	bne.n	8004554 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004548:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	68fa      	ldr	r2, [r7, #12]
 8004550:	4313      	orrs	r3, r2
 8004552:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	695b      	ldr	r3, [r3, #20]
 800455e:	4313      	orrs	r3, r2
 8004560:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	689a      	ldr	r2, [r3, #8]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	4a0a      	ldr	r2, [pc, #40]	; (80045a4 <TIM_Base_SetConfig+0x114>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d003      	beq.n	8004588 <TIM_Base_SetConfig+0xf8>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	4a0c      	ldr	r2, [pc, #48]	; (80045b4 <TIM_Base_SetConfig+0x124>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d103      	bne.n	8004590 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	691a      	ldr	r2, [r3, #16]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	615a      	str	r2, [r3, #20]
}
 8004596:	bf00      	nop
 8004598:	3714      	adds	r7, #20
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr
 80045a2:	bf00      	nop
 80045a4:	40010000 	.word	0x40010000
 80045a8:	40000400 	.word	0x40000400
 80045ac:	40000800 	.word	0x40000800
 80045b0:	40000c00 	.word	0x40000c00
 80045b4:	40010400 	.word	0x40010400
 80045b8:	40014000 	.word	0x40014000
 80045bc:	40014400 	.word	0x40014400
 80045c0:	40014800 	.word	0x40014800
 80045c4:	40001800 	.word	0x40001800
 80045c8:	40001c00 	.word	0x40001c00
 80045cc:	40002000 	.word	0x40002000

080045d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b087      	sub	sp, #28
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a1b      	ldr	r3, [r3, #32]
 80045de:	f023 0201 	bic.w	r2, r3, #1
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a1b      	ldr	r3, [r3, #32]
 80045ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	699b      	ldr	r3, [r3, #24]
 80045f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f023 0303 	bic.w	r3, r3, #3
 8004606:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68fa      	ldr	r2, [r7, #12]
 800460e:	4313      	orrs	r3, r2
 8004610:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	f023 0302 	bic.w	r3, r3, #2
 8004618:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	697a      	ldr	r2, [r7, #20]
 8004620:	4313      	orrs	r3, r2
 8004622:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4a20      	ldr	r2, [pc, #128]	; (80046a8 <TIM_OC1_SetConfig+0xd8>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d003      	beq.n	8004634 <TIM_OC1_SetConfig+0x64>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4a1f      	ldr	r2, [pc, #124]	; (80046ac <TIM_OC1_SetConfig+0xdc>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d10c      	bne.n	800464e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	f023 0308 	bic.w	r3, r3, #8
 800463a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	697a      	ldr	r2, [r7, #20]
 8004642:	4313      	orrs	r3, r2
 8004644:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	f023 0304 	bic.w	r3, r3, #4
 800464c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a15      	ldr	r2, [pc, #84]	; (80046a8 <TIM_OC1_SetConfig+0xd8>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d003      	beq.n	800465e <TIM_OC1_SetConfig+0x8e>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a14      	ldr	r2, [pc, #80]	; (80046ac <TIM_OC1_SetConfig+0xdc>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d111      	bne.n	8004682 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004664:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800466c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	695b      	ldr	r3, [r3, #20]
 8004672:	693a      	ldr	r2, [r7, #16]
 8004674:	4313      	orrs	r3, r2
 8004676:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	699b      	ldr	r3, [r3, #24]
 800467c:	693a      	ldr	r2, [r7, #16]
 800467e:	4313      	orrs	r3, r2
 8004680:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	693a      	ldr	r2, [r7, #16]
 8004686:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	68fa      	ldr	r2, [r7, #12]
 800468c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	685a      	ldr	r2, [r3, #4]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	697a      	ldr	r2, [r7, #20]
 800469a:	621a      	str	r2, [r3, #32]
}
 800469c:	bf00      	nop
 800469e:	371c      	adds	r7, #28
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr
 80046a8:	40010000 	.word	0x40010000
 80046ac:	40010400 	.word	0x40010400

080046b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b087      	sub	sp, #28
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a1b      	ldr	r3, [r3, #32]
 80046be:	f023 0210 	bic.w	r2, r3, #16
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a1b      	ldr	r3, [r3, #32]
 80046ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	699b      	ldr	r3, [r3, #24]
 80046d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	021b      	lsls	r3, r3, #8
 80046ee:	68fa      	ldr	r2, [r7, #12]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	f023 0320 	bic.w	r3, r3, #32
 80046fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	011b      	lsls	r3, r3, #4
 8004702:	697a      	ldr	r2, [r7, #20]
 8004704:	4313      	orrs	r3, r2
 8004706:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4a22      	ldr	r2, [pc, #136]	; (8004794 <TIM_OC2_SetConfig+0xe4>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d003      	beq.n	8004718 <TIM_OC2_SetConfig+0x68>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	4a21      	ldr	r2, [pc, #132]	; (8004798 <TIM_OC2_SetConfig+0xe8>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d10d      	bne.n	8004734 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800471e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	011b      	lsls	r3, r3, #4
 8004726:	697a      	ldr	r2, [r7, #20]
 8004728:	4313      	orrs	r3, r2
 800472a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004732:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	4a17      	ldr	r2, [pc, #92]	; (8004794 <TIM_OC2_SetConfig+0xe4>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d003      	beq.n	8004744 <TIM_OC2_SetConfig+0x94>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4a16      	ldr	r2, [pc, #88]	; (8004798 <TIM_OC2_SetConfig+0xe8>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d113      	bne.n	800476c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800474a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004752:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	695b      	ldr	r3, [r3, #20]
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	693a      	ldr	r2, [r7, #16]
 800475c:	4313      	orrs	r3, r2
 800475e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	699b      	ldr	r3, [r3, #24]
 8004764:	009b      	lsls	r3, r3, #2
 8004766:	693a      	ldr	r2, [r7, #16]
 8004768:	4313      	orrs	r3, r2
 800476a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	693a      	ldr	r2, [r7, #16]
 8004770:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	68fa      	ldr	r2, [r7, #12]
 8004776:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	685a      	ldr	r2, [r3, #4]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	697a      	ldr	r2, [r7, #20]
 8004784:	621a      	str	r2, [r3, #32]
}
 8004786:	bf00      	nop
 8004788:	371c      	adds	r7, #28
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	40010000 	.word	0x40010000
 8004798:	40010400 	.word	0x40010400

0800479c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800479c:	b480      	push	{r7}
 800479e:	b087      	sub	sp, #28
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a1b      	ldr	r3, [r3, #32]
 80047aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a1b      	ldr	r3, [r3, #32]
 80047b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	69db      	ldr	r3, [r3, #28]
 80047c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f023 0303 	bic.w	r3, r3, #3
 80047d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68fa      	ldr	r2, [r7, #12]
 80047da:	4313      	orrs	r3, r2
 80047dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80047e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	021b      	lsls	r3, r3, #8
 80047ec:	697a      	ldr	r2, [r7, #20]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4a21      	ldr	r2, [pc, #132]	; (800487c <TIM_OC3_SetConfig+0xe0>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d003      	beq.n	8004802 <TIM_OC3_SetConfig+0x66>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4a20      	ldr	r2, [pc, #128]	; (8004880 <TIM_OC3_SetConfig+0xe4>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d10d      	bne.n	800481e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004808:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	021b      	lsls	r3, r3, #8
 8004810:	697a      	ldr	r2, [r7, #20]
 8004812:	4313      	orrs	r3, r2
 8004814:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800481c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a16      	ldr	r2, [pc, #88]	; (800487c <TIM_OC3_SetConfig+0xe0>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d003      	beq.n	800482e <TIM_OC3_SetConfig+0x92>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a15      	ldr	r2, [pc, #84]	; (8004880 <TIM_OC3_SetConfig+0xe4>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d113      	bne.n	8004856 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004834:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800483c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	695b      	ldr	r3, [r3, #20]
 8004842:	011b      	lsls	r3, r3, #4
 8004844:	693a      	ldr	r2, [r7, #16]
 8004846:	4313      	orrs	r3, r2
 8004848:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	699b      	ldr	r3, [r3, #24]
 800484e:	011b      	lsls	r3, r3, #4
 8004850:	693a      	ldr	r2, [r7, #16]
 8004852:	4313      	orrs	r3, r2
 8004854:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	693a      	ldr	r2, [r7, #16]
 800485a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	68fa      	ldr	r2, [r7, #12]
 8004860:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	685a      	ldr	r2, [r3, #4]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	697a      	ldr	r2, [r7, #20]
 800486e:	621a      	str	r2, [r3, #32]
}
 8004870:	bf00      	nop
 8004872:	371c      	adds	r7, #28
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr
 800487c:	40010000 	.word	0x40010000
 8004880:	40010400 	.word	0x40010400

08004884 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004884:	b480      	push	{r7}
 8004886:	b087      	sub	sp, #28
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a1b      	ldr	r3, [r3, #32]
 8004892:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a1b      	ldr	r3, [r3, #32]
 800489e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	69db      	ldr	r3, [r3, #28]
 80048aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	021b      	lsls	r3, r3, #8
 80048c2:	68fa      	ldr	r2, [r7, #12]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80048ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	031b      	lsls	r3, r3, #12
 80048d6:	693a      	ldr	r2, [r7, #16]
 80048d8:	4313      	orrs	r3, r2
 80048da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	4a12      	ldr	r2, [pc, #72]	; (8004928 <TIM_OC4_SetConfig+0xa4>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d003      	beq.n	80048ec <TIM_OC4_SetConfig+0x68>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4a11      	ldr	r2, [pc, #68]	; (800492c <TIM_OC4_SetConfig+0xa8>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d109      	bne.n	8004900 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	695b      	ldr	r3, [r3, #20]
 80048f8:	019b      	lsls	r3, r3, #6
 80048fa:	697a      	ldr	r2, [r7, #20]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	697a      	ldr	r2, [r7, #20]
 8004904:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	68fa      	ldr	r2, [r7, #12]
 800490a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	685a      	ldr	r2, [r3, #4]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	693a      	ldr	r2, [r7, #16]
 8004918:	621a      	str	r2, [r3, #32]
}
 800491a:	bf00      	nop
 800491c:	371c      	adds	r7, #28
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop
 8004928:	40010000 	.word	0x40010000
 800492c:	40010400 	.word	0x40010400

08004930 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004930:	b480      	push	{r7}
 8004932:	b087      	sub	sp, #28
 8004934:	af00      	add	r7, sp, #0
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6a1b      	ldr	r3, [r3, #32]
 8004940:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	6a1b      	ldr	r3, [r3, #32]
 8004946:	f023 0201 	bic.w	r2, r3, #1
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	699b      	ldr	r3, [r3, #24]
 8004952:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800495a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	011b      	lsls	r3, r3, #4
 8004960:	693a      	ldr	r2, [r7, #16]
 8004962:	4313      	orrs	r3, r2
 8004964:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	f023 030a 	bic.w	r3, r3, #10
 800496c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800496e:	697a      	ldr	r2, [r7, #20]
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	4313      	orrs	r3, r2
 8004974:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	693a      	ldr	r2, [r7, #16]
 800497a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	697a      	ldr	r2, [r7, #20]
 8004980:	621a      	str	r2, [r3, #32]
}
 8004982:	bf00      	nop
 8004984:	371c      	adds	r7, #28
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr

0800498e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800498e:	b480      	push	{r7}
 8004990:	b087      	sub	sp, #28
 8004992:	af00      	add	r7, sp, #0
 8004994:	60f8      	str	r0, [r7, #12]
 8004996:	60b9      	str	r1, [r7, #8]
 8004998:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6a1b      	ldr	r3, [r3, #32]
 800499e:	f023 0210 	bic.w	r2, r3, #16
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	699b      	ldr	r3, [r3, #24]
 80049aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6a1b      	ldr	r3, [r3, #32]
 80049b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80049b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	031b      	lsls	r3, r3, #12
 80049be:	697a      	ldr	r2, [r7, #20]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80049ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	011b      	lsls	r3, r3, #4
 80049d0:	693a      	ldr	r2, [r7, #16]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	697a      	ldr	r2, [r7, #20]
 80049da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	693a      	ldr	r2, [r7, #16]
 80049e0:	621a      	str	r2, [r3, #32]
}
 80049e2:	bf00      	nop
 80049e4:	371c      	adds	r7, #28
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr

080049ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049ee:	b480      	push	{r7}
 80049f0:	b085      	sub	sp, #20
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
 80049f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a06:	683a      	ldr	r2, [r7, #0]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	f043 0307 	orr.w	r3, r3, #7
 8004a10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	68fa      	ldr	r2, [r7, #12]
 8004a16:	609a      	str	r2, [r3, #8]
}
 8004a18:	bf00      	nop
 8004a1a:	3714      	adds	r7, #20
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b087      	sub	sp, #28
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	607a      	str	r2, [r7, #4]
 8004a30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	021a      	lsls	r2, r3, #8
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	431a      	orrs	r2, r3
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	697a      	ldr	r2, [r7, #20]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	697a      	ldr	r2, [r7, #20]
 8004a56:	609a      	str	r2, [r3, #8]
}
 8004a58:	bf00      	nop
 8004a5a:	371c      	adds	r7, #28
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b087      	sub	sp, #28
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	60f8      	str	r0, [r7, #12]
 8004a6c:	60b9      	str	r1, [r7, #8]
 8004a6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	f003 031f 	and.w	r3, r3, #31
 8004a76:	2201      	movs	r2, #1
 8004a78:	fa02 f303 	lsl.w	r3, r2, r3
 8004a7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	6a1a      	ldr	r2, [r3, #32]
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	43db      	mvns	r3, r3
 8004a86:	401a      	ands	r2, r3
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6a1a      	ldr	r2, [r3, #32]
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	f003 031f 	and.w	r3, r3, #31
 8004a96:	6879      	ldr	r1, [r7, #4]
 8004a98:	fa01 f303 	lsl.w	r3, r1, r3
 8004a9c:	431a      	orrs	r2, r3
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	621a      	str	r2, [r3, #32]
}
 8004aa2:	bf00      	nop
 8004aa4:	371c      	adds	r7, #28
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr
	...

08004ab0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b085      	sub	sp, #20
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d101      	bne.n	8004ac8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ac4:	2302      	movs	r3, #2
 8004ac6:	e05a      	b.n	8004b7e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2202      	movs	r2, #2
 8004ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68fa      	ldr	r2, [r7, #12]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	68fa      	ldr	r2, [r7, #12]
 8004b00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a21      	ldr	r2, [pc, #132]	; (8004b8c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d022      	beq.n	8004b52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b14:	d01d      	beq.n	8004b52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a1d      	ldr	r2, [pc, #116]	; (8004b90 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d018      	beq.n	8004b52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a1b      	ldr	r2, [pc, #108]	; (8004b94 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d013      	beq.n	8004b52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a1a      	ldr	r2, [pc, #104]	; (8004b98 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d00e      	beq.n	8004b52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a18      	ldr	r2, [pc, #96]	; (8004b9c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d009      	beq.n	8004b52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a17      	ldr	r2, [pc, #92]	; (8004ba0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d004      	beq.n	8004b52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a15      	ldr	r2, [pc, #84]	; (8004ba4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d10c      	bne.n	8004b6c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	68ba      	ldr	r2, [r7, #8]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	68ba      	ldr	r2, [r7, #8]
 8004b6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b7c:	2300      	movs	r3, #0
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3714      	adds	r7, #20
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop
 8004b8c:	40010000 	.word	0x40010000
 8004b90:	40000400 	.word	0x40000400
 8004b94:	40000800 	.word	0x40000800
 8004b98:	40000c00 	.word	0x40000c00
 8004b9c:	40010400 	.word	0x40010400
 8004ba0:	40014000 	.word	0x40014000
 8004ba4:	40001800 	.word	0x40001800

08004ba8 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b087      	sub	sp, #28
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bbc:	683a      	ldr	r2, [r7, #0]
 8004bbe:	6812      	ldr	r2, [r2, #0]
 8004bc0:	f023 0101 	bic.w	r1, r3, #1
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	2b08      	cmp	r3, #8
 8004bd0:	d102      	bne.n	8004bd8 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8004bd2:	2340      	movs	r3, #64	; 0x40
 8004bd4:	617b      	str	r3, [r7, #20]
 8004bd6:	e001      	b.n	8004bdc <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8004be8:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8004bee:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8004bf4:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8004bfa:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8004c00:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8004c06:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8004c0c:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8004c12:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8004c18:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	699b      	ldr	r3, [r3, #24]
 8004c26:	693a      	ldr	r2, [r7, #16]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c30:	693a      	ldr	r2, [r7, #16]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 8004c36:	4b10      	ldr	r3, [pc, #64]	; (8004c78 <FSMC_NORSRAM_Init+0xd0>)
 8004c38:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c40:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8004c48:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	43db      	mvns	r3, r3
 8004c58:	ea02 0103 	and.w	r1, r2, r3
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	4319      	orrs	r1, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 8004c6a:	2300      	movs	r3, #0
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	371c      	adds	r7, #28
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr
 8004c78:	0008fb7f 	.word	0x0008fb7f

08004c7c <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b085      	sub	sp, #20
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	1c5a      	adds	r2, r3, #1
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c92:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	011b      	lsls	r3, r3, #4
 8004ca0:	431a      	orrs	r2, r3
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	021b      	lsls	r3, r3, #8
 8004ca8:	431a      	orrs	r2, r3
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	041b      	lsls	r3, r3, #16
 8004cb0:	431a      	orrs	r2, r3
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	051b      	lsls	r3, r3, #20
 8004cba:	431a      	orrs	r2, r3
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	695b      	ldr	r3, [r3, #20]
 8004cc0:	3b02      	subs	r3, #2
 8004cc2:	061b      	lsls	r3, r3, #24
 8004cc4:	431a      	orrs	r2, r3
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	699b      	ldr	r3, [r3, #24]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	3201      	adds	r2, #1
 8004cd0:	4319      	orrs	r1, r3
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 8004cd8:	2300      	movs	r3, #0
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3714      	adds	r7, #20
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr
	...

08004ce8 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b085      	sub	sp, #20
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	60b9      	str	r1, [r7, #8]
 8004cf2:	607a      	str	r2, [r7, #4]
 8004cf4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004cfc:	d11d      	bne.n	8004d3a <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004d06:	4b13      	ldr	r3, [pc, #76]	; (8004d54 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8004d08:	4013      	ands	r3, r2
 8004d0a:	68ba      	ldr	r2, [r7, #8]
 8004d0c:	6811      	ldr	r1, [r2, #0]
 8004d0e:	68ba      	ldr	r2, [r7, #8]
 8004d10:	6852      	ldr	r2, [r2, #4]
 8004d12:	0112      	lsls	r2, r2, #4
 8004d14:	4311      	orrs	r1, r2
 8004d16:	68ba      	ldr	r2, [r7, #8]
 8004d18:	6892      	ldr	r2, [r2, #8]
 8004d1a:	0212      	lsls	r2, r2, #8
 8004d1c:	4311      	orrs	r1, r2
 8004d1e:	68ba      	ldr	r2, [r7, #8]
 8004d20:	6992      	ldr	r2, [r2, #24]
 8004d22:	4311      	orrs	r1, r2
 8004d24:	68ba      	ldr	r2, [r7, #8]
 8004d26:	68d2      	ldr	r2, [r2, #12]
 8004d28:	0412      	lsls	r2, r2, #16
 8004d2a:	430a      	orrs	r2, r1
 8004d2c:	ea43 0102 	orr.w	r1, r3, r2
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004d38:	e005      	b.n	8004d46 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8004d42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8004d46:	2300      	movs	r3, #0
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3714      	adds	r7, #20
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr
 8004d54:	cff00000 	.word	0xcff00000

08004d58 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004d5c:	4904      	ldr	r1, [pc, #16]	; (8004d70 <MX_FATFS_Init+0x18>)
 8004d5e:	4805      	ldr	r0, [pc, #20]	; (8004d74 <MX_FATFS_Init+0x1c>)
 8004d60:	f003 f8e0 	bl	8007f24 <FATFS_LinkDriver>
 8004d64:	4603      	mov	r3, r0
 8004d66:	461a      	mov	r2, r3
 8004d68:	4b03      	ldr	r3, [pc, #12]	; (8004d78 <MX_FATFS_Init+0x20>)
 8004d6a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004d6c:	bf00      	nop
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	200012e4 	.word	0x200012e4
 8004d74:	20000018 	.word	0x20000018
 8004d78:	200012e0 	.word	0x200012e0

08004d7c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004d80:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr

08004d8c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	4603      	mov	r3, r0
 8004d94:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = SD_disk_initialize(pdrv);
 8004d96:	79fb      	ldrb	r3, [r7, #7]
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f7fb fda5 	bl	80008e8 <SD_disk_initialize>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	461a      	mov	r2, r3
 8004da2:	4b04      	ldr	r3, [pc, #16]	; (8004db4 <USER_initialize+0x28>)
 8004da4:	701a      	strb	r2, [r3, #0]
    return Stat;
 8004da6:	4b03      	ldr	r3, [pc, #12]	; (8004db4 <USER_initialize+0x28>)
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3708      	adds	r7, #8
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}
 8004db4:	20000015 	.word	0x20000015

08004db8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b082      	sub	sp, #8
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = SD_disk_status (pdrv);
 8004dc2:	79fb      	ldrb	r3, [r7, #7]
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f7fb fe79 	bl	8000abc <SD_disk_status>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	461a      	mov	r2, r3
 8004dce:	4b04      	ldr	r3, [pc, #16]	; (8004de0 <USER_status+0x28>)
 8004dd0:	701a      	strb	r2, [r3, #0]
    return Stat;
 8004dd2:	4b03      	ldr	r3, [pc, #12]	; (8004de0 <USER_status+0x28>)
 8004dd4:	781b      	ldrb	r3, [r3, #0]
 8004dd6:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3708      	adds	r7, #8
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}
 8004de0:	20000015 	.word	0x20000015

08004de4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b084      	sub	sp, #16
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	60b9      	str	r1, [r7, #8]
 8004dec:	607a      	str	r2, [r7, #4]
 8004dee:	603b      	str	r3, [r7, #0]
 8004df0:	4603      	mov	r3, r0
 8004df2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read (pdrv, buff, sector, count);
 8004df4:	7bf8      	ldrb	r0, [r7, #15]
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	68b9      	ldr	r1, [r7, #8]
 8004dfc:	f7fb fe74 	bl	8000ae8 <SD_disk_read>
 8004e00:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3710      	adds	r7, #16
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}

08004e0a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004e0a:	b580      	push	{r7, lr}
 8004e0c:	b084      	sub	sp, #16
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	60b9      	str	r1, [r7, #8]
 8004e12:	607a      	str	r2, [r7, #4]
 8004e14:	603b      	str	r3, [r7, #0]
 8004e16:	4603      	mov	r3, r0
 8004e18:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write (pdrv, buff, sector, count);
 8004e1a:	7bf8      	ldrb	r0, [r7, #15]
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	68b9      	ldr	r1, [r7, #8]
 8004e22:	f7fb fecb 	bl	8000bbc <SD_disk_write>
 8004e26:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3710      	adds	r7, #16
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}

08004e30 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	4603      	mov	r3, r0
 8004e38:	603a      	str	r2, [r7, #0]
 8004e3a:	71fb      	strb	r3, [r7, #7]
 8004e3c:	460b      	mov	r3, r1
 8004e3e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = SD_disk_ioctl (pdrv, cmd, buff);
 8004e40:	79b9      	ldrb	r1, [r7, #6]
 8004e42:	79fb      	ldrb	r3, [r7, #7]
 8004e44:	683a      	ldr	r2, [r7, #0]
 8004e46:	4618      	mov	r0, r3
 8004e48:	f7fb ff3c 	bl	8000cc4 <SD_disk_ioctl>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	73fb      	strb	r3, [r7, #15]
    return res;
 8004e50:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3710      	adds	r7, #16
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
	...

08004e5c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b084      	sub	sp, #16
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	4603      	mov	r3, r0
 8004e64:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004e66:	79fb      	ldrb	r3, [r7, #7]
 8004e68:	4a08      	ldr	r2, [pc, #32]	; (8004e8c <disk_status+0x30>)
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	4413      	add	r3, r2
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	79fa      	ldrb	r2, [r7, #7]
 8004e74:	4905      	ldr	r1, [pc, #20]	; (8004e8c <disk_status+0x30>)
 8004e76:	440a      	add	r2, r1
 8004e78:	7a12      	ldrb	r2, [r2, #8]
 8004e7a:	4610      	mov	r0, r2
 8004e7c:	4798      	blx	r3
 8004e7e:	4603      	mov	r3, r0
 8004e80:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3710      	adds	r7, #16
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}
 8004e8c:	20001510 	.word	0x20001510

08004e90 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	4603      	mov	r3, r0
 8004e98:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8004e9e:	79fb      	ldrb	r3, [r7, #7]
 8004ea0:	4a0d      	ldr	r2, [pc, #52]	; (8004ed8 <disk_initialize+0x48>)
 8004ea2:	5cd3      	ldrb	r3, [r2, r3]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d111      	bne.n	8004ecc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8004ea8:	79fb      	ldrb	r3, [r7, #7]
 8004eaa:	4a0b      	ldr	r2, [pc, #44]	; (8004ed8 <disk_initialize+0x48>)
 8004eac:	2101      	movs	r1, #1
 8004eae:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004eb0:	79fb      	ldrb	r3, [r7, #7]
 8004eb2:	4a09      	ldr	r2, [pc, #36]	; (8004ed8 <disk_initialize+0x48>)
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	4413      	add	r3, r2
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	79fa      	ldrb	r2, [r7, #7]
 8004ebe:	4906      	ldr	r1, [pc, #24]	; (8004ed8 <disk_initialize+0x48>)
 8004ec0:	440a      	add	r2, r1
 8004ec2:	7a12      	ldrb	r2, [r2, #8]
 8004ec4:	4610      	mov	r0, r2
 8004ec6:	4798      	blx	r3
 8004ec8:	4603      	mov	r3, r0
 8004eca:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3710      	adds	r7, #16
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	20001510 	.word	0x20001510

08004edc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004edc:	b590      	push	{r4, r7, lr}
 8004ede:	b087      	sub	sp, #28
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	60b9      	str	r1, [r7, #8]
 8004ee4:	607a      	str	r2, [r7, #4]
 8004ee6:	603b      	str	r3, [r7, #0]
 8004ee8:	4603      	mov	r3, r0
 8004eea:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004eec:	7bfb      	ldrb	r3, [r7, #15]
 8004eee:	4a0a      	ldr	r2, [pc, #40]	; (8004f18 <disk_read+0x3c>)
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	4413      	add	r3, r2
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	689c      	ldr	r4, [r3, #8]
 8004ef8:	7bfb      	ldrb	r3, [r7, #15]
 8004efa:	4a07      	ldr	r2, [pc, #28]	; (8004f18 <disk_read+0x3c>)
 8004efc:	4413      	add	r3, r2
 8004efe:	7a18      	ldrb	r0, [r3, #8]
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	68b9      	ldr	r1, [r7, #8]
 8004f06:	47a0      	blx	r4
 8004f08:	4603      	mov	r3, r0
 8004f0a:	75fb      	strb	r3, [r7, #23]
  return res;
 8004f0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	371c      	adds	r7, #28
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd90      	pop	{r4, r7, pc}
 8004f16:	bf00      	nop
 8004f18:	20001510 	.word	0x20001510

08004f1c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004f1c:	b590      	push	{r4, r7, lr}
 8004f1e:	b087      	sub	sp, #28
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	60b9      	str	r1, [r7, #8]
 8004f24:	607a      	str	r2, [r7, #4]
 8004f26:	603b      	str	r3, [r7, #0]
 8004f28:	4603      	mov	r3, r0
 8004f2a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004f2c:	7bfb      	ldrb	r3, [r7, #15]
 8004f2e:	4a0a      	ldr	r2, [pc, #40]	; (8004f58 <disk_write+0x3c>)
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	4413      	add	r3, r2
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	68dc      	ldr	r4, [r3, #12]
 8004f38:	7bfb      	ldrb	r3, [r7, #15]
 8004f3a:	4a07      	ldr	r2, [pc, #28]	; (8004f58 <disk_write+0x3c>)
 8004f3c:	4413      	add	r3, r2
 8004f3e:	7a18      	ldrb	r0, [r3, #8]
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	68b9      	ldr	r1, [r7, #8]
 8004f46:	47a0      	blx	r4
 8004f48:	4603      	mov	r3, r0
 8004f4a:	75fb      	strb	r3, [r7, #23]
  return res;
 8004f4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	371c      	adds	r7, #28
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd90      	pop	{r4, r7, pc}
 8004f56:	bf00      	nop
 8004f58:	20001510 	.word	0x20001510

08004f5c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b084      	sub	sp, #16
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	4603      	mov	r3, r0
 8004f64:	603a      	str	r2, [r7, #0]
 8004f66:	71fb      	strb	r3, [r7, #7]
 8004f68:	460b      	mov	r3, r1
 8004f6a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004f6c:	79fb      	ldrb	r3, [r7, #7]
 8004f6e:	4a09      	ldr	r2, [pc, #36]	; (8004f94 <disk_ioctl+0x38>)
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	4413      	add	r3, r2
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	691b      	ldr	r3, [r3, #16]
 8004f78:	79fa      	ldrb	r2, [r7, #7]
 8004f7a:	4906      	ldr	r1, [pc, #24]	; (8004f94 <disk_ioctl+0x38>)
 8004f7c:	440a      	add	r2, r1
 8004f7e:	7a10      	ldrb	r0, [r2, #8]
 8004f80:	79b9      	ldrb	r1, [r7, #6]
 8004f82:	683a      	ldr	r2, [r7, #0]
 8004f84:	4798      	blx	r3
 8004f86:	4603      	mov	r3, r0
 8004f88:	73fb      	strb	r3, [r7, #15]
  return res;
 8004f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3710      	adds	r7, #16
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	20001510 	.word	0x20001510

08004f98 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b085      	sub	sp, #20
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	781b      	ldrb	r3, [r3, #0]
 8004fa6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004fa8:	89fb      	ldrh	r3, [r7, #14]
 8004faa:	021b      	lsls	r3, r3, #8
 8004fac:	b21a      	sxth	r2, r3
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	781b      	ldrb	r3, [r3, #0]
 8004fb2:	b21b      	sxth	r3, r3
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	b21b      	sxth	r3, r3
 8004fb8:	81fb      	strh	r3, [r7, #14]
	return rv;
 8004fba:	89fb      	ldrh	r3, [r7, #14]
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3714      	adds	r7, #20
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr

08004fc8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b085      	sub	sp, #20
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	3303      	adds	r3, #3
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	021b      	lsls	r3, r3, #8
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	3202      	adds	r2, #2
 8004fe0:	7812      	ldrb	r2, [r2, #0]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	021b      	lsls	r3, r3, #8
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	3201      	adds	r2, #1
 8004fee:	7812      	ldrb	r2, [r2, #0]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	021b      	lsls	r3, r3, #8
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	7812      	ldrb	r2, [r2, #0]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	60fb      	str	r3, [r7, #12]
	return rv;
 8005000:	68fb      	ldr	r3, [r7, #12]
}
 8005002:	4618      	mov	r0, r3
 8005004:	3714      	adds	r7, #20
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr

0800500e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800500e:	b480      	push	{r7}
 8005010:	b083      	sub	sp, #12
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
 8005016:	460b      	mov	r3, r1
 8005018:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	1c5a      	adds	r2, r3, #1
 800501e:	607a      	str	r2, [r7, #4]
 8005020:	887a      	ldrh	r2, [r7, #2]
 8005022:	b2d2      	uxtb	r2, r2
 8005024:	701a      	strb	r2, [r3, #0]
 8005026:	887b      	ldrh	r3, [r7, #2]
 8005028:	0a1b      	lsrs	r3, r3, #8
 800502a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	1c5a      	adds	r2, r3, #1
 8005030:	607a      	str	r2, [r7, #4]
 8005032:	887a      	ldrh	r2, [r7, #2]
 8005034:	b2d2      	uxtb	r2, r2
 8005036:	701a      	strb	r2, [r3, #0]
}
 8005038:	bf00      	nop
 800503a:	370c      	adds	r7, #12
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr

08005044 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	1c5a      	adds	r2, r3, #1
 8005052:	607a      	str	r2, [r7, #4]
 8005054:	683a      	ldr	r2, [r7, #0]
 8005056:	b2d2      	uxtb	r2, r2
 8005058:	701a      	strb	r2, [r3, #0]
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	0a1b      	lsrs	r3, r3, #8
 800505e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	1c5a      	adds	r2, r3, #1
 8005064:	607a      	str	r2, [r7, #4]
 8005066:	683a      	ldr	r2, [r7, #0]
 8005068:	b2d2      	uxtb	r2, r2
 800506a:	701a      	strb	r2, [r3, #0]
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	0a1b      	lsrs	r3, r3, #8
 8005070:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	1c5a      	adds	r2, r3, #1
 8005076:	607a      	str	r2, [r7, #4]
 8005078:	683a      	ldr	r2, [r7, #0]
 800507a:	b2d2      	uxtb	r2, r2
 800507c:	701a      	strb	r2, [r3, #0]
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	0a1b      	lsrs	r3, r3, #8
 8005082:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	1c5a      	adds	r2, r3, #1
 8005088:	607a      	str	r2, [r7, #4]
 800508a:	683a      	ldr	r2, [r7, #0]
 800508c:	b2d2      	uxtb	r2, r2
 800508e:	701a      	strb	r2, [r3, #0]
}
 8005090:	bf00      	nop
 8005092:	370c      	adds	r7, #12
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800509c:	b480      	push	{r7}
 800509e:	b087      	sub	sp, #28
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	60f8      	str	r0, [r7, #12]
 80050a4:	60b9      	str	r1, [r7, #8]
 80050a6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d00d      	beq.n	80050d2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80050b6:	693a      	ldr	r2, [r7, #16]
 80050b8:	1c53      	adds	r3, r2, #1
 80050ba:	613b      	str	r3, [r7, #16]
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	1c59      	adds	r1, r3, #1
 80050c0:	6179      	str	r1, [r7, #20]
 80050c2:	7812      	ldrb	r2, [r2, #0]
 80050c4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	3b01      	subs	r3, #1
 80050ca:	607b      	str	r3, [r7, #4]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d1f1      	bne.n	80050b6 <mem_cpy+0x1a>
	}
}
 80050d2:	bf00      	nop
 80050d4:	371c      	adds	r7, #28
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr

080050de <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80050de:	b480      	push	{r7}
 80050e0:	b087      	sub	sp, #28
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	60f8      	str	r0, [r7, #12]
 80050e6:	60b9      	str	r1, [r7, #8]
 80050e8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	1c5a      	adds	r2, r3, #1
 80050f2:	617a      	str	r2, [r7, #20]
 80050f4:	68ba      	ldr	r2, [r7, #8]
 80050f6:	b2d2      	uxtb	r2, r2
 80050f8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	3b01      	subs	r3, #1
 80050fe:	607b      	str	r3, [r7, #4]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d1f3      	bne.n	80050ee <mem_set+0x10>
}
 8005106:	bf00      	nop
 8005108:	bf00      	nop
 800510a:	371c      	adds	r7, #28
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005114:	b480      	push	{r7}
 8005116:	b089      	sub	sp, #36	; 0x24
 8005118:	af00      	add	r7, sp, #0
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	61fb      	str	r3, [r7, #28]
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005128:	2300      	movs	r3, #0
 800512a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800512c:	69fb      	ldr	r3, [r7, #28]
 800512e:	1c5a      	adds	r2, r3, #1
 8005130:	61fa      	str	r2, [r7, #28]
 8005132:	781b      	ldrb	r3, [r3, #0]
 8005134:	4619      	mov	r1, r3
 8005136:	69bb      	ldr	r3, [r7, #24]
 8005138:	1c5a      	adds	r2, r3, #1
 800513a:	61ba      	str	r2, [r7, #24]
 800513c:	781b      	ldrb	r3, [r3, #0]
 800513e:	1acb      	subs	r3, r1, r3
 8005140:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	3b01      	subs	r3, #1
 8005146:	607b      	str	r3, [r7, #4]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d002      	beq.n	8005154 <mem_cmp+0x40>
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d0eb      	beq.n	800512c <mem_cmp+0x18>

	return r;
 8005154:	697b      	ldr	r3, [r7, #20]
}
 8005156:	4618      	mov	r0, r3
 8005158:	3724      	adds	r7, #36	; 0x24
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr

08005162 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005162:	b480      	push	{r7}
 8005164:	b083      	sub	sp, #12
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
 800516a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800516c:	e002      	b.n	8005174 <chk_chr+0x12>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	3301      	adds	r3, #1
 8005172:	607b      	str	r3, [r7, #4]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d005      	beq.n	8005188 <chk_chr+0x26>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	461a      	mov	r2, r3
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	4293      	cmp	r3, r2
 8005186:	d1f2      	bne.n	800516e <chk_chr+0xc>
	return *str;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	781b      	ldrb	r3, [r3, #0]
}
 800518c:	4618      	mov	r0, r3
 800518e:	370c      	adds	r7, #12
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr

08005198 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005198:	b480      	push	{r7}
 800519a:	b085      	sub	sp, #20
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80051a2:	2300      	movs	r3, #0
 80051a4:	60bb      	str	r3, [r7, #8]
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	60fb      	str	r3, [r7, #12]
 80051aa:	e029      	b.n	8005200 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80051ac:	4a27      	ldr	r2, [pc, #156]	; (800524c <chk_lock+0xb4>)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	011b      	lsls	r3, r3, #4
 80051b2:	4413      	add	r3, r2
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d01d      	beq.n	80051f6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80051ba:	4a24      	ldr	r2, [pc, #144]	; (800524c <chk_lock+0xb4>)
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	011b      	lsls	r3, r3, #4
 80051c0:	4413      	add	r3, r2
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d116      	bne.n	80051fa <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80051cc:	4a1f      	ldr	r2, [pc, #124]	; (800524c <chk_lock+0xb4>)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	011b      	lsls	r3, r3, #4
 80051d2:	4413      	add	r3, r2
 80051d4:	3304      	adds	r3, #4
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80051dc:	429a      	cmp	r2, r3
 80051de:	d10c      	bne.n	80051fa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80051e0:	4a1a      	ldr	r2, [pc, #104]	; (800524c <chk_lock+0xb4>)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	011b      	lsls	r3, r3, #4
 80051e6:	4413      	add	r3, r2
 80051e8:	3308      	adds	r3, #8
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d102      	bne.n	80051fa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80051f4:	e007      	b.n	8005206 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80051f6:	2301      	movs	r3, #1
 80051f8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	3301      	adds	r3, #1
 80051fe:	60fb      	str	r3, [r7, #12]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2b01      	cmp	r3, #1
 8005204:	d9d2      	bls.n	80051ac <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2b02      	cmp	r3, #2
 800520a:	d109      	bne.n	8005220 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d102      	bne.n	8005218 <chk_lock+0x80>
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	2b02      	cmp	r3, #2
 8005216:	d101      	bne.n	800521c <chk_lock+0x84>
 8005218:	2300      	movs	r3, #0
 800521a:	e010      	b.n	800523e <chk_lock+0xa6>
 800521c:	2312      	movs	r3, #18
 800521e:	e00e      	b.n	800523e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d108      	bne.n	8005238 <chk_lock+0xa0>
 8005226:	4a09      	ldr	r2, [pc, #36]	; (800524c <chk_lock+0xb4>)
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	011b      	lsls	r3, r3, #4
 800522c:	4413      	add	r3, r2
 800522e:	330c      	adds	r3, #12
 8005230:	881b      	ldrh	r3, [r3, #0]
 8005232:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005236:	d101      	bne.n	800523c <chk_lock+0xa4>
 8005238:	2310      	movs	r3, #16
 800523a:	e000      	b.n	800523e <chk_lock+0xa6>
 800523c:	2300      	movs	r3, #0
}
 800523e:	4618      	mov	r0, r3
 8005240:	3714      	adds	r7, #20
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr
 800524a:	bf00      	nop
 800524c:	200012f0 	.word	0x200012f0

08005250 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005256:	2300      	movs	r3, #0
 8005258:	607b      	str	r3, [r7, #4]
 800525a:	e002      	b.n	8005262 <enq_lock+0x12>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	3301      	adds	r3, #1
 8005260:	607b      	str	r3, [r7, #4]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2b01      	cmp	r3, #1
 8005266:	d806      	bhi.n	8005276 <enq_lock+0x26>
 8005268:	4a09      	ldr	r2, [pc, #36]	; (8005290 <enq_lock+0x40>)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	011b      	lsls	r3, r3, #4
 800526e:	4413      	add	r3, r2
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d1f2      	bne.n	800525c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2b02      	cmp	r3, #2
 800527a:	bf14      	ite	ne
 800527c:	2301      	movne	r3, #1
 800527e:	2300      	moveq	r3, #0
 8005280:	b2db      	uxtb	r3, r3
}
 8005282:	4618      	mov	r0, r3
 8005284:	370c      	adds	r7, #12
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop
 8005290:	200012f0 	.word	0x200012f0

08005294 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005294:	b480      	push	{r7}
 8005296:	b085      	sub	sp, #20
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800529e:	2300      	movs	r3, #0
 80052a0:	60fb      	str	r3, [r7, #12]
 80052a2:	e01f      	b.n	80052e4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80052a4:	4a41      	ldr	r2, [pc, #260]	; (80053ac <inc_lock+0x118>)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	011b      	lsls	r3, r3, #4
 80052aa:	4413      	add	r3, r2
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d113      	bne.n	80052de <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80052b6:	4a3d      	ldr	r2, [pc, #244]	; (80053ac <inc_lock+0x118>)
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	011b      	lsls	r3, r3, #4
 80052bc:	4413      	add	r3, r2
 80052be:	3304      	adds	r3, #4
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d109      	bne.n	80052de <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80052ca:	4a38      	ldr	r2, [pc, #224]	; (80053ac <inc_lock+0x118>)
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	011b      	lsls	r3, r3, #4
 80052d0:	4413      	add	r3, r2
 80052d2:	3308      	adds	r3, #8
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80052da:	429a      	cmp	r2, r3
 80052dc:	d006      	beq.n	80052ec <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	3301      	adds	r3, #1
 80052e2:	60fb      	str	r3, [r7, #12]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d9dc      	bls.n	80052a4 <inc_lock+0x10>
 80052ea:	e000      	b.n	80052ee <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80052ec:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2b02      	cmp	r3, #2
 80052f2:	d132      	bne.n	800535a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80052f4:	2300      	movs	r3, #0
 80052f6:	60fb      	str	r3, [r7, #12]
 80052f8:	e002      	b.n	8005300 <inc_lock+0x6c>
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	3301      	adds	r3, #1
 80052fe:	60fb      	str	r3, [r7, #12]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2b01      	cmp	r3, #1
 8005304:	d806      	bhi.n	8005314 <inc_lock+0x80>
 8005306:	4a29      	ldr	r2, [pc, #164]	; (80053ac <inc_lock+0x118>)
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	011b      	lsls	r3, r3, #4
 800530c:	4413      	add	r3, r2
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d1f2      	bne.n	80052fa <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2b02      	cmp	r3, #2
 8005318:	d101      	bne.n	800531e <inc_lock+0x8a>
 800531a:	2300      	movs	r3, #0
 800531c:	e040      	b.n	80053a0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	4922      	ldr	r1, [pc, #136]	; (80053ac <inc_lock+0x118>)
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	011b      	lsls	r3, r3, #4
 8005328:	440b      	add	r3, r1
 800532a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	689a      	ldr	r2, [r3, #8]
 8005330:	491e      	ldr	r1, [pc, #120]	; (80053ac <inc_lock+0x118>)
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	011b      	lsls	r3, r3, #4
 8005336:	440b      	add	r3, r1
 8005338:	3304      	adds	r3, #4
 800533a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	695a      	ldr	r2, [r3, #20]
 8005340:	491a      	ldr	r1, [pc, #104]	; (80053ac <inc_lock+0x118>)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	011b      	lsls	r3, r3, #4
 8005346:	440b      	add	r3, r1
 8005348:	3308      	adds	r3, #8
 800534a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800534c:	4a17      	ldr	r2, [pc, #92]	; (80053ac <inc_lock+0x118>)
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	011b      	lsls	r3, r3, #4
 8005352:	4413      	add	r3, r2
 8005354:	330c      	adds	r3, #12
 8005356:	2200      	movs	r2, #0
 8005358:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d009      	beq.n	8005374 <inc_lock+0xe0>
 8005360:	4a12      	ldr	r2, [pc, #72]	; (80053ac <inc_lock+0x118>)
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	011b      	lsls	r3, r3, #4
 8005366:	4413      	add	r3, r2
 8005368:	330c      	adds	r3, #12
 800536a:	881b      	ldrh	r3, [r3, #0]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d001      	beq.n	8005374 <inc_lock+0xe0>
 8005370:	2300      	movs	r3, #0
 8005372:	e015      	b.n	80053a0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d108      	bne.n	800538c <inc_lock+0xf8>
 800537a:	4a0c      	ldr	r2, [pc, #48]	; (80053ac <inc_lock+0x118>)
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	011b      	lsls	r3, r3, #4
 8005380:	4413      	add	r3, r2
 8005382:	330c      	adds	r3, #12
 8005384:	881b      	ldrh	r3, [r3, #0]
 8005386:	3301      	adds	r3, #1
 8005388:	b29a      	uxth	r2, r3
 800538a:	e001      	b.n	8005390 <inc_lock+0xfc>
 800538c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005390:	4906      	ldr	r1, [pc, #24]	; (80053ac <inc_lock+0x118>)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	011b      	lsls	r3, r3, #4
 8005396:	440b      	add	r3, r1
 8005398:	330c      	adds	r3, #12
 800539a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	3301      	adds	r3, #1
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3714      	adds	r7, #20
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr
 80053ac:	200012f0 	.word	0x200012f0

080053b0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b085      	sub	sp, #20
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	3b01      	subs	r3, #1
 80053bc:	607b      	str	r3, [r7, #4]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d825      	bhi.n	8005410 <dec_lock+0x60>
		n = Files[i].ctr;
 80053c4:	4a17      	ldr	r2, [pc, #92]	; (8005424 <dec_lock+0x74>)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	011b      	lsls	r3, r3, #4
 80053ca:	4413      	add	r3, r2
 80053cc:	330c      	adds	r3, #12
 80053ce:	881b      	ldrh	r3, [r3, #0]
 80053d0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80053d2:	89fb      	ldrh	r3, [r7, #14]
 80053d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053d8:	d101      	bne.n	80053de <dec_lock+0x2e>
 80053da:	2300      	movs	r3, #0
 80053dc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80053de:	89fb      	ldrh	r3, [r7, #14]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d002      	beq.n	80053ea <dec_lock+0x3a>
 80053e4:	89fb      	ldrh	r3, [r7, #14]
 80053e6:	3b01      	subs	r3, #1
 80053e8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80053ea:	4a0e      	ldr	r2, [pc, #56]	; (8005424 <dec_lock+0x74>)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	011b      	lsls	r3, r3, #4
 80053f0:	4413      	add	r3, r2
 80053f2:	330c      	adds	r3, #12
 80053f4:	89fa      	ldrh	r2, [r7, #14]
 80053f6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80053f8:	89fb      	ldrh	r3, [r7, #14]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d105      	bne.n	800540a <dec_lock+0x5a>
 80053fe:	4a09      	ldr	r2, [pc, #36]	; (8005424 <dec_lock+0x74>)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	011b      	lsls	r3, r3, #4
 8005404:	4413      	add	r3, r2
 8005406:	2200      	movs	r2, #0
 8005408:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800540a:	2300      	movs	r3, #0
 800540c:	737b      	strb	r3, [r7, #13]
 800540e:	e001      	b.n	8005414 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005410:	2302      	movs	r3, #2
 8005412:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005414:	7b7b      	ldrb	r3, [r7, #13]
}
 8005416:	4618      	mov	r0, r3
 8005418:	3714      	adds	r7, #20
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr
 8005422:	bf00      	nop
 8005424:	200012f0 	.word	0x200012f0

08005428 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005428:	b480      	push	{r7}
 800542a:	b085      	sub	sp, #20
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005430:	2300      	movs	r3, #0
 8005432:	60fb      	str	r3, [r7, #12]
 8005434:	e010      	b.n	8005458 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005436:	4a0d      	ldr	r2, [pc, #52]	; (800546c <clear_lock+0x44>)
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	011b      	lsls	r3, r3, #4
 800543c:	4413      	add	r3, r2
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	429a      	cmp	r2, r3
 8005444:	d105      	bne.n	8005452 <clear_lock+0x2a>
 8005446:	4a09      	ldr	r2, [pc, #36]	; (800546c <clear_lock+0x44>)
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	011b      	lsls	r3, r3, #4
 800544c:	4413      	add	r3, r2
 800544e:	2200      	movs	r2, #0
 8005450:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	3301      	adds	r3, #1
 8005456:	60fb      	str	r3, [r7, #12]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2b01      	cmp	r3, #1
 800545c:	d9eb      	bls.n	8005436 <clear_lock+0xe>
	}
}
 800545e:	bf00      	nop
 8005460:	bf00      	nop
 8005462:	3714      	adds	r7, #20
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr
 800546c:	200012f0 	.word	0x200012f0

08005470 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b086      	sub	sp, #24
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005478:	2300      	movs	r3, #0
 800547a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	78db      	ldrb	r3, [r3, #3]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d034      	beq.n	80054ee <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005488:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	7858      	ldrb	r0, [r3, #1]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005494:	2301      	movs	r3, #1
 8005496:	697a      	ldr	r2, [r7, #20]
 8005498:	f7ff fd40 	bl	8004f1c <disk_write>
 800549c:	4603      	mov	r3, r0
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d002      	beq.n	80054a8 <sync_window+0x38>
			res = FR_DISK_ERR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	73fb      	strb	r3, [r7, #15]
 80054a6:	e022      	b.n	80054ee <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b2:	697a      	ldr	r2, [r7, #20]
 80054b4:	1ad2      	subs	r2, r2, r3
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a1b      	ldr	r3, [r3, #32]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d217      	bcs.n	80054ee <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	789b      	ldrb	r3, [r3, #2]
 80054c2:	613b      	str	r3, [r7, #16]
 80054c4:	e010      	b.n	80054e8 <sync_window+0x78>
					wsect += fs->fsize;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a1b      	ldr	r3, [r3, #32]
 80054ca:	697a      	ldr	r2, [r7, #20]
 80054cc:	4413      	add	r3, r2
 80054ce:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	7858      	ldrb	r0, [r3, #1]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80054da:	2301      	movs	r3, #1
 80054dc:	697a      	ldr	r2, [r7, #20]
 80054de:	f7ff fd1d 	bl	8004f1c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	3b01      	subs	r3, #1
 80054e6:	613b      	str	r3, [r7, #16]
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d8eb      	bhi.n	80054c6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80054ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3718      	adds	r7, #24
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005502:	2300      	movs	r3, #0
 8005504:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800550a:	683a      	ldr	r2, [r7, #0]
 800550c:	429a      	cmp	r2, r3
 800550e:	d01b      	beq.n	8005548 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f7ff ffad 	bl	8005470 <sync_window>
 8005516:	4603      	mov	r3, r0
 8005518:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800551a:	7bfb      	ldrb	r3, [r7, #15]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d113      	bne.n	8005548 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	7858      	ldrb	r0, [r3, #1]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800552a:	2301      	movs	r3, #1
 800552c:	683a      	ldr	r2, [r7, #0]
 800552e:	f7ff fcd5 	bl	8004edc <disk_read>
 8005532:	4603      	mov	r3, r0
 8005534:	2b00      	cmp	r3, #0
 8005536:	d004      	beq.n	8005542 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005538:	f04f 33ff 	mov.w	r3, #4294967295
 800553c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800553e:	2301      	movs	r3, #1
 8005540:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	683a      	ldr	r2, [r7, #0]
 8005546:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8005548:	7bfb      	ldrb	r3, [r7, #15]
}
 800554a:	4618      	mov	r0, r3
 800554c:	3710      	adds	r7, #16
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
	...

08005554 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b084      	sub	sp, #16
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f7ff ff87 	bl	8005470 <sync_window>
 8005562:	4603      	mov	r3, r0
 8005564:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005566:	7bfb      	ldrb	r3, [r7, #15]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d159      	bne.n	8005620 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	2b03      	cmp	r3, #3
 8005572:	d149      	bne.n	8005608 <sync_fs+0xb4>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	791b      	ldrb	r3, [r3, #4]
 8005578:	2b01      	cmp	r3, #1
 800557a:	d145      	bne.n	8005608 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	899b      	ldrh	r3, [r3, #12]
 8005586:	461a      	mov	r2, r3
 8005588:	2100      	movs	r1, #0
 800558a:	f7ff fda8 	bl	80050de <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	3338      	adds	r3, #56	; 0x38
 8005592:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005596:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800559a:	4618      	mov	r0, r3
 800559c:	f7ff fd37 	bl	800500e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	3338      	adds	r3, #56	; 0x38
 80055a4:	4921      	ldr	r1, [pc, #132]	; (800562c <sync_fs+0xd8>)
 80055a6:	4618      	mov	r0, r3
 80055a8:	f7ff fd4c 	bl	8005044 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	3338      	adds	r3, #56	; 0x38
 80055b0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80055b4:	491e      	ldr	r1, [pc, #120]	; (8005630 <sync_fs+0xdc>)
 80055b6:	4618      	mov	r0, r3
 80055b8:	f7ff fd44 	bl	8005044 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	3338      	adds	r3, #56	; 0x38
 80055c0:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	699b      	ldr	r3, [r3, #24]
 80055c8:	4619      	mov	r1, r3
 80055ca:	4610      	mov	r0, r2
 80055cc:	f7ff fd3a 	bl	8005044 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	3338      	adds	r3, #56	; 0x38
 80055d4:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	695b      	ldr	r3, [r3, #20]
 80055dc:	4619      	mov	r1, r3
 80055de:	4610      	mov	r0, r2
 80055e0:	f7ff fd30 	bl	8005044 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e8:	1c5a      	adds	r2, r3, #1
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	7858      	ldrb	r0, [r3, #1]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055fc:	2301      	movs	r3, #1
 80055fe:	f7ff fc8d 	bl	8004f1c <disk_write>
			fs->fsi_flag = 0;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	785b      	ldrb	r3, [r3, #1]
 800560c:	2200      	movs	r2, #0
 800560e:	2100      	movs	r1, #0
 8005610:	4618      	mov	r0, r3
 8005612:	f7ff fca3 	bl	8004f5c <disk_ioctl>
 8005616:	4603      	mov	r3, r0
 8005618:	2b00      	cmp	r3, #0
 800561a:	d001      	beq.n	8005620 <sync_fs+0xcc>
 800561c:	2301      	movs	r3, #1
 800561e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005620:	7bfb      	ldrb	r3, [r7, #15]
}
 8005622:	4618      	mov	r0, r3
 8005624:	3710      	adds	r7, #16
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
 800562a:	bf00      	nop
 800562c:	41615252 	.word	0x41615252
 8005630:	61417272 	.word	0x61417272

08005634 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	3b02      	subs	r3, #2
 8005642:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	69db      	ldr	r3, [r3, #28]
 8005648:	3b02      	subs	r3, #2
 800564a:	683a      	ldr	r2, [r7, #0]
 800564c:	429a      	cmp	r2, r3
 800564e:	d301      	bcc.n	8005654 <clust2sect+0x20>
 8005650:	2300      	movs	r3, #0
 8005652:	e008      	b.n	8005666 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	895b      	ldrh	r3, [r3, #10]
 8005658:	461a      	mov	r2, r3
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	fb03 f202 	mul.w	r2, r3, r2
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005664:	4413      	add	r3, r2
}
 8005666:	4618      	mov	r0, r3
 8005668:	370c      	adds	r7, #12
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr

08005672 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005672:	b580      	push	{r7, lr}
 8005674:	b086      	sub	sp, #24
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
 800567a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	2b01      	cmp	r3, #1
 8005686:	d904      	bls.n	8005692 <get_fat+0x20>
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	69db      	ldr	r3, [r3, #28]
 800568c:	683a      	ldr	r2, [r7, #0]
 800568e:	429a      	cmp	r2, r3
 8005690:	d302      	bcc.n	8005698 <get_fat+0x26>
		val = 1;	/* Internal error */
 8005692:	2301      	movs	r3, #1
 8005694:	617b      	str	r3, [r7, #20]
 8005696:	e0bb      	b.n	8005810 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005698:	f04f 33ff 	mov.w	r3, #4294967295
 800569c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	781b      	ldrb	r3, [r3, #0]
 80056a2:	2b03      	cmp	r3, #3
 80056a4:	f000 8083 	beq.w	80057ae <get_fat+0x13c>
 80056a8:	2b03      	cmp	r3, #3
 80056aa:	f300 80a7 	bgt.w	80057fc <get_fat+0x18a>
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d002      	beq.n	80056b8 <get_fat+0x46>
 80056b2:	2b02      	cmp	r3, #2
 80056b4:	d056      	beq.n	8005764 <get_fat+0xf2>
 80056b6:	e0a1      	b.n	80057fc <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	60fb      	str	r3, [r7, #12]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	085b      	lsrs	r3, r3, #1
 80056c0:	68fa      	ldr	r2, [r7, #12]
 80056c2:	4413      	add	r3, r2
 80056c4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	899b      	ldrh	r3, [r3, #12]
 80056ce:	4619      	mov	r1, r3
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80056d6:	4413      	add	r3, r2
 80056d8:	4619      	mov	r1, r3
 80056da:	6938      	ldr	r0, [r7, #16]
 80056dc:	f7ff ff0c 	bl	80054f8 <move_window>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	f040 808d 	bne.w	8005802 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	1c5a      	adds	r2, r3, #1
 80056ec:	60fa      	str	r2, [r7, #12]
 80056ee:	693a      	ldr	r2, [r7, #16]
 80056f0:	8992      	ldrh	r2, [r2, #12]
 80056f2:	fbb3 f1f2 	udiv	r1, r3, r2
 80056f6:	fb01 f202 	mul.w	r2, r1, r2
 80056fa:	1a9b      	subs	r3, r3, r2
 80056fc:	693a      	ldr	r2, [r7, #16]
 80056fe:	4413      	add	r3, r2
 8005700:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005704:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	899b      	ldrh	r3, [r3, #12]
 800570e:	4619      	mov	r1, r3
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	fbb3 f3f1 	udiv	r3, r3, r1
 8005716:	4413      	add	r3, r2
 8005718:	4619      	mov	r1, r3
 800571a:	6938      	ldr	r0, [r7, #16]
 800571c:	f7ff feec 	bl	80054f8 <move_window>
 8005720:	4603      	mov	r3, r0
 8005722:	2b00      	cmp	r3, #0
 8005724:	d16f      	bne.n	8005806 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	899b      	ldrh	r3, [r3, #12]
 800572a:	461a      	mov	r2, r3
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005732:	fb01 f202 	mul.w	r2, r1, r2
 8005736:	1a9b      	subs	r3, r3, r2
 8005738:	693a      	ldr	r2, [r7, #16]
 800573a:	4413      	add	r3, r2
 800573c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005740:	021b      	lsls	r3, r3, #8
 8005742:	461a      	mov	r2, r3
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	4313      	orrs	r3, r2
 8005748:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	f003 0301 	and.w	r3, r3, #1
 8005750:	2b00      	cmp	r3, #0
 8005752:	d002      	beq.n	800575a <get_fat+0xe8>
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	091b      	lsrs	r3, r3, #4
 8005758:	e002      	b.n	8005760 <get_fat+0xee>
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005760:	617b      	str	r3, [r7, #20]
			break;
 8005762:	e055      	b.n	8005810 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	899b      	ldrh	r3, [r3, #12]
 800576c:	085b      	lsrs	r3, r3, #1
 800576e:	b29b      	uxth	r3, r3
 8005770:	4619      	mov	r1, r3
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	fbb3 f3f1 	udiv	r3, r3, r1
 8005778:	4413      	add	r3, r2
 800577a:	4619      	mov	r1, r3
 800577c:	6938      	ldr	r0, [r7, #16]
 800577e:	f7ff febb 	bl	80054f8 <move_window>
 8005782:	4603      	mov	r3, r0
 8005784:	2b00      	cmp	r3, #0
 8005786:	d140      	bne.n	800580a <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	005b      	lsls	r3, r3, #1
 8005792:	693a      	ldr	r2, [r7, #16]
 8005794:	8992      	ldrh	r2, [r2, #12]
 8005796:	fbb3 f0f2 	udiv	r0, r3, r2
 800579a:	fb00 f202 	mul.w	r2, r0, r2
 800579e:	1a9b      	subs	r3, r3, r2
 80057a0:	440b      	add	r3, r1
 80057a2:	4618      	mov	r0, r3
 80057a4:	f7ff fbf8 	bl	8004f98 <ld_word>
 80057a8:	4603      	mov	r3, r0
 80057aa:	617b      	str	r3, [r7, #20]
			break;
 80057ac:	e030      	b.n	8005810 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	899b      	ldrh	r3, [r3, #12]
 80057b6:	089b      	lsrs	r3, r3, #2
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	4619      	mov	r1, r3
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	fbb3 f3f1 	udiv	r3, r3, r1
 80057c2:	4413      	add	r3, r2
 80057c4:	4619      	mov	r1, r3
 80057c6:	6938      	ldr	r0, [r7, #16]
 80057c8:	f7ff fe96 	bl	80054f8 <move_window>
 80057cc:	4603      	mov	r3, r0
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d11d      	bne.n	800580e <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	693a      	ldr	r2, [r7, #16]
 80057de:	8992      	ldrh	r2, [r2, #12]
 80057e0:	fbb3 f0f2 	udiv	r0, r3, r2
 80057e4:	fb00 f202 	mul.w	r2, r0, r2
 80057e8:	1a9b      	subs	r3, r3, r2
 80057ea:	440b      	add	r3, r1
 80057ec:	4618      	mov	r0, r3
 80057ee:	f7ff fbeb 	bl	8004fc8 <ld_dword>
 80057f2:	4603      	mov	r3, r0
 80057f4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80057f8:	617b      	str	r3, [r7, #20]
			break;
 80057fa:	e009      	b.n	8005810 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80057fc:	2301      	movs	r3, #1
 80057fe:	617b      	str	r3, [r7, #20]
 8005800:	e006      	b.n	8005810 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005802:	bf00      	nop
 8005804:	e004      	b.n	8005810 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005806:	bf00      	nop
 8005808:	e002      	b.n	8005810 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800580a:	bf00      	nop
 800580c:	e000      	b.n	8005810 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800580e:	bf00      	nop
		}
	}

	return val;
 8005810:	697b      	ldr	r3, [r7, #20]
}
 8005812:	4618      	mov	r0, r3
 8005814:	3718      	adds	r7, #24
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}

0800581a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800581a:	b590      	push	{r4, r7, lr}
 800581c:	b089      	sub	sp, #36	; 0x24
 800581e:	af00      	add	r7, sp, #0
 8005820:	60f8      	str	r0, [r7, #12]
 8005822:	60b9      	str	r1, [r7, #8]
 8005824:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005826:	2302      	movs	r3, #2
 8005828:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	2b01      	cmp	r3, #1
 800582e:	f240 8102 	bls.w	8005a36 <put_fat+0x21c>
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	69db      	ldr	r3, [r3, #28]
 8005836:	68ba      	ldr	r2, [r7, #8]
 8005838:	429a      	cmp	r2, r3
 800583a:	f080 80fc 	bcs.w	8005a36 <put_fat+0x21c>
		switch (fs->fs_type) {
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	781b      	ldrb	r3, [r3, #0]
 8005842:	2b03      	cmp	r3, #3
 8005844:	f000 80b6 	beq.w	80059b4 <put_fat+0x19a>
 8005848:	2b03      	cmp	r3, #3
 800584a:	f300 80fd 	bgt.w	8005a48 <put_fat+0x22e>
 800584e:	2b01      	cmp	r3, #1
 8005850:	d003      	beq.n	800585a <put_fat+0x40>
 8005852:	2b02      	cmp	r3, #2
 8005854:	f000 8083 	beq.w	800595e <put_fat+0x144>
 8005858:	e0f6      	b.n	8005a48 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	61bb      	str	r3, [r7, #24]
 800585e:	69bb      	ldr	r3, [r7, #24]
 8005860:	085b      	lsrs	r3, r3, #1
 8005862:	69ba      	ldr	r2, [r7, #24]
 8005864:	4413      	add	r3, r2
 8005866:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	899b      	ldrh	r3, [r3, #12]
 8005870:	4619      	mov	r1, r3
 8005872:	69bb      	ldr	r3, [r7, #24]
 8005874:	fbb3 f3f1 	udiv	r3, r3, r1
 8005878:	4413      	add	r3, r2
 800587a:	4619      	mov	r1, r3
 800587c:	68f8      	ldr	r0, [r7, #12]
 800587e:	f7ff fe3b 	bl	80054f8 <move_window>
 8005882:	4603      	mov	r3, r0
 8005884:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005886:	7ffb      	ldrb	r3, [r7, #31]
 8005888:	2b00      	cmp	r3, #0
 800588a:	f040 80d6 	bne.w	8005a3a <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005894:	69bb      	ldr	r3, [r7, #24]
 8005896:	1c5a      	adds	r2, r3, #1
 8005898:	61ba      	str	r2, [r7, #24]
 800589a:	68fa      	ldr	r2, [r7, #12]
 800589c:	8992      	ldrh	r2, [r2, #12]
 800589e:	fbb3 f0f2 	udiv	r0, r3, r2
 80058a2:	fb00 f202 	mul.w	r2, r0, r2
 80058a6:	1a9b      	subs	r3, r3, r2
 80058a8:	440b      	add	r3, r1
 80058aa:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	f003 0301 	and.w	r3, r3, #1
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d00d      	beq.n	80058d2 <put_fat+0xb8>
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	b25b      	sxtb	r3, r3
 80058bc:	f003 030f 	and.w	r3, r3, #15
 80058c0:	b25a      	sxtb	r2, r3
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	011b      	lsls	r3, r3, #4
 80058c8:	b25b      	sxtb	r3, r3
 80058ca:	4313      	orrs	r3, r2
 80058cc:	b25b      	sxtb	r3, r3
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	e001      	b.n	80058d6 <put_fat+0xbc>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	697a      	ldr	r2, [r7, #20]
 80058d8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2201      	movs	r2, #1
 80058de:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	899b      	ldrh	r3, [r3, #12]
 80058e8:	4619      	mov	r1, r3
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	fbb3 f3f1 	udiv	r3, r3, r1
 80058f0:	4413      	add	r3, r2
 80058f2:	4619      	mov	r1, r3
 80058f4:	68f8      	ldr	r0, [r7, #12]
 80058f6:	f7ff fdff 	bl	80054f8 <move_window>
 80058fa:	4603      	mov	r3, r0
 80058fc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80058fe:	7ffb      	ldrb	r3, [r7, #31]
 8005900:	2b00      	cmp	r3, #0
 8005902:	f040 809c 	bne.w	8005a3e <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	899b      	ldrh	r3, [r3, #12]
 8005910:	461a      	mov	r2, r3
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	fbb3 f0f2 	udiv	r0, r3, r2
 8005918:	fb00 f202 	mul.w	r2, r0, r2
 800591c:	1a9b      	subs	r3, r3, r2
 800591e:	440b      	add	r3, r1
 8005920:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	f003 0301 	and.w	r3, r3, #1
 8005928:	2b00      	cmp	r3, #0
 800592a:	d003      	beq.n	8005934 <put_fat+0x11a>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	091b      	lsrs	r3, r3, #4
 8005930:	b2db      	uxtb	r3, r3
 8005932:	e00e      	b.n	8005952 <put_fat+0x138>
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	b25b      	sxtb	r3, r3
 800593a:	f023 030f 	bic.w	r3, r3, #15
 800593e:	b25a      	sxtb	r2, r3
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	0a1b      	lsrs	r3, r3, #8
 8005944:	b25b      	sxtb	r3, r3
 8005946:	f003 030f 	and.w	r3, r3, #15
 800594a:	b25b      	sxtb	r3, r3
 800594c:	4313      	orrs	r3, r2
 800594e:	b25b      	sxtb	r3, r3
 8005950:	b2db      	uxtb	r3, r3
 8005952:	697a      	ldr	r2, [r7, #20]
 8005954:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2201      	movs	r2, #1
 800595a:	70da      	strb	r2, [r3, #3]
			break;
 800595c:	e074      	b.n	8005a48 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	899b      	ldrh	r3, [r3, #12]
 8005966:	085b      	lsrs	r3, r3, #1
 8005968:	b29b      	uxth	r3, r3
 800596a:	4619      	mov	r1, r3
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005972:	4413      	add	r3, r2
 8005974:	4619      	mov	r1, r3
 8005976:	68f8      	ldr	r0, [r7, #12]
 8005978:	f7ff fdbe 	bl	80054f8 <move_window>
 800597c:	4603      	mov	r3, r0
 800597e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005980:	7ffb      	ldrb	r3, [r7, #31]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d15d      	bne.n	8005a42 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	005b      	lsls	r3, r3, #1
 8005990:	68fa      	ldr	r2, [r7, #12]
 8005992:	8992      	ldrh	r2, [r2, #12]
 8005994:	fbb3 f0f2 	udiv	r0, r3, r2
 8005998:	fb00 f202 	mul.w	r2, r0, r2
 800599c:	1a9b      	subs	r3, r3, r2
 800599e:	440b      	add	r3, r1
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	b292      	uxth	r2, r2
 80059a4:	4611      	mov	r1, r2
 80059a6:	4618      	mov	r0, r3
 80059a8:	f7ff fb31 	bl	800500e <st_word>
			fs->wflag = 1;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2201      	movs	r2, #1
 80059b0:	70da      	strb	r2, [r3, #3]
			break;
 80059b2:	e049      	b.n	8005a48 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	899b      	ldrh	r3, [r3, #12]
 80059bc:	089b      	lsrs	r3, r3, #2
 80059be:	b29b      	uxth	r3, r3
 80059c0:	4619      	mov	r1, r3
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	fbb3 f3f1 	udiv	r3, r3, r1
 80059c8:	4413      	add	r3, r2
 80059ca:	4619      	mov	r1, r3
 80059cc:	68f8      	ldr	r0, [r7, #12]
 80059ce:	f7ff fd93 	bl	80054f8 <move_window>
 80059d2:	4603      	mov	r3, r0
 80059d4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80059d6:	7ffb      	ldrb	r3, [r7, #31]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d134      	bne.n	8005a46 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	68fa      	ldr	r2, [r7, #12]
 80059ee:	8992      	ldrh	r2, [r2, #12]
 80059f0:	fbb3 f0f2 	udiv	r0, r3, r2
 80059f4:	fb00 f202 	mul.w	r2, r0, r2
 80059f8:	1a9b      	subs	r3, r3, r2
 80059fa:	440b      	add	r3, r1
 80059fc:	4618      	mov	r0, r3
 80059fe:	f7ff fae3 	bl	8004fc8 <ld_dword>
 8005a02:	4603      	mov	r3, r0
 8005a04:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005a08:	4323      	orrs	r3, r4
 8005a0a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	009b      	lsls	r3, r3, #2
 8005a16:	68fa      	ldr	r2, [r7, #12]
 8005a18:	8992      	ldrh	r2, [r2, #12]
 8005a1a:	fbb3 f0f2 	udiv	r0, r3, r2
 8005a1e:	fb00 f202 	mul.w	r2, r0, r2
 8005a22:	1a9b      	subs	r3, r3, r2
 8005a24:	440b      	add	r3, r1
 8005a26:	6879      	ldr	r1, [r7, #4]
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f7ff fb0b 	bl	8005044 <st_dword>
			fs->wflag = 1;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2201      	movs	r2, #1
 8005a32:	70da      	strb	r2, [r3, #3]
			break;
 8005a34:	e008      	b.n	8005a48 <put_fat+0x22e>
		}
	}
 8005a36:	bf00      	nop
 8005a38:	e006      	b.n	8005a48 <put_fat+0x22e>
			if (res != FR_OK) break;
 8005a3a:	bf00      	nop
 8005a3c:	e004      	b.n	8005a48 <put_fat+0x22e>
			if (res != FR_OK) break;
 8005a3e:	bf00      	nop
 8005a40:	e002      	b.n	8005a48 <put_fat+0x22e>
			if (res != FR_OK) break;
 8005a42:	bf00      	nop
 8005a44:	e000      	b.n	8005a48 <put_fat+0x22e>
			if (res != FR_OK) break;
 8005a46:	bf00      	nop
	return res;
 8005a48:	7ffb      	ldrb	r3, [r7, #31]
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3724      	adds	r7, #36	; 0x24
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd90      	pop	{r4, r7, pc}

08005a52 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005a52:	b580      	push	{r7, lr}
 8005a54:	b088      	sub	sp, #32
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	60f8      	str	r0, [r7, #12]
 8005a5a:	60b9      	str	r1, [r7, #8]
 8005a5c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d904      	bls.n	8005a78 <remove_chain+0x26>
 8005a6e:	69bb      	ldr	r3, [r7, #24]
 8005a70:	69db      	ldr	r3, [r3, #28]
 8005a72:	68ba      	ldr	r2, [r7, #8]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d301      	bcc.n	8005a7c <remove_chain+0x2a>
 8005a78:	2302      	movs	r3, #2
 8005a7a:	e04b      	b.n	8005b14 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d00c      	beq.n	8005a9c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005a82:	f04f 32ff 	mov.w	r2, #4294967295
 8005a86:	6879      	ldr	r1, [r7, #4]
 8005a88:	69b8      	ldr	r0, [r7, #24]
 8005a8a:	f7ff fec6 	bl	800581a <put_fat>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8005a92:	7ffb      	ldrb	r3, [r7, #31]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d001      	beq.n	8005a9c <remove_chain+0x4a>
 8005a98:	7ffb      	ldrb	r3, [r7, #31]
 8005a9a:	e03b      	b.n	8005b14 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005a9c:	68b9      	ldr	r1, [r7, #8]
 8005a9e:	68f8      	ldr	r0, [r7, #12]
 8005aa0:	f7ff fde7 	bl	8005672 <get_fat>
 8005aa4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d031      	beq.n	8005b10 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d101      	bne.n	8005ab6 <remove_chain+0x64>
 8005ab2:	2302      	movs	r3, #2
 8005ab4:	e02e      	b.n	8005b14 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005abc:	d101      	bne.n	8005ac2 <remove_chain+0x70>
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e028      	b.n	8005b14 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	68b9      	ldr	r1, [r7, #8]
 8005ac6:	69b8      	ldr	r0, [r7, #24]
 8005ac8:	f7ff fea7 	bl	800581a <put_fat>
 8005acc:	4603      	mov	r3, r0
 8005ace:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8005ad0:	7ffb      	ldrb	r3, [r7, #31]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d001      	beq.n	8005ada <remove_chain+0x88>
 8005ad6:	7ffb      	ldrb	r3, [r7, #31]
 8005ad8:	e01c      	b.n	8005b14 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005ada:	69bb      	ldr	r3, [r7, #24]
 8005adc:	699a      	ldr	r2, [r3, #24]
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	69db      	ldr	r3, [r3, #28]
 8005ae2:	3b02      	subs	r3, #2
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d20b      	bcs.n	8005b00 <remove_chain+0xae>
			fs->free_clst++;
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	699b      	ldr	r3, [r3, #24]
 8005aec:	1c5a      	adds	r2, r3, #1
 8005aee:	69bb      	ldr	r3, [r7, #24]
 8005af0:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8005af2:	69bb      	ldr	r3, [r7, #24]
 8005af4:	791b      	ldrb	r3, [r3, #4]
 8005af6:	f043 0301 	orr.w	r3, r3, #1
 8005afa:	b2da      	uxtb	r2, r3
 8005afc:	69bb      	ldr	r3, [r7, #24]
 8005afe:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005b04:	69bb      	ldr	r3, [r7, #24]
 8005b06:	69db      	ldr	r3, [r3, #28]
 8005b08:	68ba      	ldr	r2, [r7, #8]
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d3c6      	bcc.n	8005a9c <remove_chain+0x4a>
 8005b0e:	e000      	b.n	8005b12 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8005b10:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8005b12:	2300      	movs	r3, #0
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3720      	adds	r7, #32
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}

08005b1c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b088      	sub	sp, #32
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d10d      	bne.n	8005b4e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	695b      	ldr	r3, [r3, #20]
 8005b36:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005b38:	69bb      	ldr	r3, [r7, #24]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d004      	beq.n	8005b48 <create_chain+0x2c>
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	69db      	ldr	r3, [r3, #28]
 8005b42:	69ba      	ldr	r2, [r7, #24]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d31b      	bcc.n	8005b80 <create_chain+0x64>
 8005b48:	2301      	movs	r3, #1
 8005b4a:	61bb      	str	r3, [r7, #24]
 8005b4c:	e018      	b.n	8005b80 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005b4e:	6839      	ldr	r1, [r7, #0]
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f7ff fd8e 	bl	8005672 <get_fat>
 8005b56:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d801      	bhi.n	8005b62 <create_chain+0x46>
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e070      	b.n	8005c44 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b68:	d101      	bne.n	8005b6e <create_chain+0x52>
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	e06a      	b.n	8005c44 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	69db      	ldr	r3, [r3, #28]
 8005b72:	68fa      	ldr	r2, [r7, #12]
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d201      	bcs.n	8005b7c <create_chain+0x60>
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	e063      	b.n	8005c44 <create_chain+0x128>
		scl = clst;
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8005b80:	69bb      	ldr	r3, [r7, #24]
 8005b82:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8005b84:	69fb      	ldr	r3, [r7, #28]
 8005b86:	3301      	adds	r3, #1
 8005b88:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	69db      	ldr	r3, [r3, #28]
 8005b8e:	69fa      	ldr	r2, [r7, #28]
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d307      	bcc.n	8005ba4 <create_chain+0x88>
				ncl = 2;
 8005b94:	2302      	movs	r3, #2
 8005b96:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8005b98:	69fa      	ldr	r2, [r7, #28]
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d901      	bls.n	8005ba4 <create_chain+0x88>
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	e04f      	b.n	8005c44 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005ba4:	69f9      	ldr	r1, [r7, #28]
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f7ff fd63 	bl	8005672 <get_fat>
 8005bac:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d00e      	beq.n	8005bd2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d003      	beq.n	8005bc2 <create_chain+0xa6>
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc0:	d101      	bne.n	8005bc6 <create_chain+0xaa>
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	e03e      	b.n	8005c44 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8005bc6:	69fa      	ldr	r2, [r7, #28]
 8005bc8:	69bb      	ldr	r3, [r7, #24]
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d1da      	bne.n	8005b84 <create_chain+0x68>
 8005bce:	2300      	movs	r3, #0
 8005bd0:	e038      	b.n	8005c44 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8005bd2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8005bd8:	69f9      	ldr	r1, [r7, #28]
 8005bda:	6938      	ldr	r0, [r7, #16]
 8005bdc:	f7ff fe1d 	bl	800581a <put_fat>
 8005be0:	4603      	mov	r3, r0
 8005be2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005be4:	7dfb      	ldrb	r3, [r7, #23]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d109      	bne.n	8005bfe <create_chain+0xe2>
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d006      	beq.n	8005bfe <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005bf0:	69fa      	ldr	r2, [r7, #28]
 8005bf2:	6839      	ldr	r1, [r7, #0]
 8005bf4:	6938      	ldr	r0, [r7, #16]
 8005bf6:	f7ff fe10 	bl	800581a <put_fat>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005bfe:	7dfb      	ldrb	r3, [r7, #23]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d116      	bne.n	8005c32 <create_chain+0x116>
		fs->last_clst = ncl;
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	69fa      	ldr	r2, [r7, #28]
 8005c08:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	699a      	ldr	r2, [r3, #24]
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	69db      	ldr	r3, [r3, #28]
 8005c12:	3b02      	subs	r3, #2
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d804      	bhi.n	8005c22 <create_chain+0x106>
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	699b      	ldr	r3, [r3, #24]
 8005c1c:	1e5a      	subs	r2, r3, #1
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	791b      	ldrb	r3, [r3, #4]
 8005c26:	f043 0301 	orr.w	r3, r3, #1
 8005c2a:	b2da      	uxtb	r2, r3
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	711a      	strb	r2, [r3, #4]
 8005c30:	e007      	b.n	8005c42 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005c32:	7dfb      	ldrb	r3, [r7, #23]
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d102      	bne.n	8005c3e <create_chain+0x122>
 8005c38:	f04f 33ff 	mov.w	r3, #4294967295
 8005c3c:	e000      	b.n	8005c40 <create_chain+0x124>
 8005c3e:	2301      	movs	r3, #1
 8005c40:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005c42:	69fb      	ldr	r3, [r7, #28]
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3720      	adds	r7, #32
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}

08005c4c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b087      	sub	sp, #28
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c60:	3304      	adds	r3, #4
 8005c62:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	899b      	ldrh	r3, [r3, #12]
 8005c68:	461a      	mov	r2, r3
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c70:	68fa      	ldr	r2, [r7, #12]
 8005c72:	8952      	ldrh	r2, [r2, #10]
 8005c74:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c78:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	1d1a      	adds	r2, r3, #4
 8005c7e:	613a      	str	r2, [r7, #16]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d101      	bne.n	8005c8e <clmt_clust+0x42>
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	e010      	b.n	8005cb0 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8005c8e:	697a      	ldr	r2, [r7, #20]
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d307      	bcc.n	8005ca6 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8005c96:	697a      	ldr	r2, [r7, #20]
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	1ad3      	subs	r3, r2, r3
 8005c9c:	617b      	str	r3, [r7, #20]
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	3304      	adds	r3, #4
 8005ca2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005ca4:	e7e9      	b.n	8005c7a <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8005ca6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	4413      	add	r3, r2
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	371c      	adds	r7, #28
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr

08005cbc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b086      	sub	sp, #24
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005cd2:	d204      	bcs.n	8005cde <dir_sdi+0x22>
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	f003 031f 	and.w	r3, r3, #31
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d001      	beq.n	8005ce2 <dir_sdi+0x26>
		return FR_INT_ERR;
 8005cde:	2302      	movs	r3, #2
 8005ce0:	e071      	b.n	8005dc6 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	683a      	ldr	r2, [r7, #0]
 8005ce6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d106      	bne.n	8005d02 <dir_sdi+0x46>
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	2b02      	cmp	r3, #2
 8005cfa:	d902      	bls.n	8005d02 <dir_sdi+0x46>
		clst = fs->dirbase;
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d00:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d10c      	bne.n	8005d22 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	095b      	lsrs	r3, r3, #5
 8005d0c:	693a      	ldr	r2, [r7, #16]
 8005d0e:	8912      	ldrh	r2, [r2, #8]
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d301      	bcc.n	8005d18 <dir_sdi+0x5c>
 8005d14:	2302      	movs	r3, #2
 8005d16:	e056      	b.n	8005dc6 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	61da      	str	r2, [r3, #28]
 8005d20:	e02d      	b.n	8005d7e <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	895b      	ldrh	r3, [r3, #10]
 8005d26:	461a      	mov	r2, r3
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	899b      	ldrh	r3, [r3, #12]
 8005d2c:	fb02 f303 	mul.w	r3, r2, r3
 8005d30:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005d32:	e019      	b.n	8005d68 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6979      	ldr	r1, [r7, #20]
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f7ff fc9a 	bl	8005672 <get_fat>
 8005d3e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d46:	d101      	bne.n	8005d4c <dir_sdi+0x90>
 8005d48:	2301      	movs	r3, #1
 8005d4a:	e03c      	b.n	8005dc6 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d904      	bls.n	8005d5c <dir_sdi+0xa0>
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	69db      	ldr	r3, [r3, #28]
 8005d56:	697a      	ldr	r2, [r7, #20]
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d301      	bcc.n	8005d60 <dir_sdi+0xa4>
 8005d5c:	2302      	movs	r3, #2
 8005d5e:	e032      	b.n	8005dc6 <dir_sdi+0x10a>
			ofs -= csz;
 8005d60:	683a      	ldr	r2, [r7, #0]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	1ad3      	subs	r3, r2, r3
 8005d66:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005d68:	683a      	ldr	r2, [r7, #0]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d2e1      	bcs.n	8005d34 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8005d70:	6979      	ldr	r1, [r7, #20]
 8005d72:	6938      	ldr	r0, [r7, #16]
 8005d74:	f7ff fc5e 	bl	8005634 <clust2sect>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	697a      	ldr	r2, [r7, #20]
 8005d82:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	69db      	ldr	r3, [r3, #28]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d101      	bne.n	8005d90 <dir_sdi+0xd4>
 8005d8c:	2302      	movs	r3, #2
 8005d8e:	e01a      	b.n	8005dc6 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	69da      	ldr	r2, [r3, #28]
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	899b      	ldrh	r3, [r3, #12]
 8005d98:	4619      	mov	r1, r3
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	fbb3 f3f1 	udiv	r3, r3, r1
 8005da0:	441a      	add	r2, r3
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	899b      	ldrh	r3, [r3, #12]
 8005db0:	461a      	mov	r2, r3
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	fbb3 f0f2 	udiv	r0, r3, r2
 8005db8:	fb00 f202 	mul.w	r2, r0, r2
 8005dbc:	1a9b      	subs	r3, r3, r2
 8005dbe:	18ca      	adds	r2, r1, r3
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005dc4:	2300      	movs	r3, #0
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3718      	adds	r7, #24
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}

08005dce <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005dce:	b580      	push	{r7, lr}
 8005dd0:	b086      	sub	sp, #24
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	6078      	str	r0, [r7, #4]
 8005dd6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	695b      	ldr	r3, [r3, #20]
 8005de2:	3320      	adds	r3, #32
 8005de4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	69db      	ldr	r3, [r3, #28]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d003      	beq.n	8005df6 <dir_next+0x28>
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005df4:	d301      	bcc.n	8005dfa <dir_next+0x2c>
 8005df6:	2304      	movs	r3, #4
 8005df8:	e0bb      	b.n	8005f72 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	899b      	ldrh	r3, [r3, #12]
 8005dfe:	461a      	mov	r2, r3
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	fbb3 f1f2 	udiv	r1, r3, r2
 8005e06:	fb01 f202 	mul.w	r2, r1, r2
 8005e0a:	1a9b      	subs	r3, r3, r2
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	f040 809d 	bne.w	8005f4c <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	69db      	ldr	r3, [r3, #28]
 8005e16:	1c5a      	adds	r2, r3, #1
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	699b      	ldr	r3, [r3, #24]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d10b      	bne.n	8005e3c <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	095b      	lsrs	r3, r3, #5
 8005e28:	68fa      	ldr	r2, [r7, #12]
 8005e2a:	8912      	ldrh	r2, [r2, #8]
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	f0c0 808d 	bcc.w	8005f4c <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2200      	movs	r2, #0
 8005e36:	61da      	str	r2, [r3, #28]
 8005e38:	2304      	movs	r3, #4
 8005e3a:	e09a      	b.n	8005f72 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	899b      	ldrh	r3, [r3, #12]
 8005e40:	461a      	mov	r2, r3
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e48:	68fa      	ldr	r2, [r7, #12]
 8005e4a:	8952      	ldrh	r2, [r2, #10]
 8005e4c:	3a01      	subs	r2, #1
 8005e4e:	4013      	ands	r3, r2
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d17b      	bne.n	8005f4c <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	699b      	ldr	r3, [r3, #24]
 8005e5a:	4619      	mov	r1, r3
 8005e5c:	4610      	mov	r0, r2
 8005e5e:	f7ff fc08 	bl	8005672 <get_fat>
 8005e62:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d801      	bhi.n	8005e6e <dir_next+0xa0>
 8005e6a:	2302      	movs	r3, #2
 8005e6c:	e081      	b.n	8005f72 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e74:	d101      	bne.n	8005e7a <dir_next+0xac>
 8005e76:	2301      	movs	r3, #1
 8005e78:	e07b      	b.n	8005f72 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	69db      	ldr	r3, [r3, #28]
 8005e7e:	697a      	ldr	r2, [r7, #20]
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d359      	bcc.n	8005f38 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d104      	bne.n	8005e94 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	61da      	str	r2, [r3, #28]
 8005e90:	2304      	movs	r3, #4
 8005e92:	e06e      	b.n	8005f72 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	699b      	ldr	r3, [r3, #24]
 8005e9a:	4619      	mov	r1, r3
 8005e9c:	4610      	mov	r0, r2
 8005e9e:	f7ff fe3d 	bl	8005b1c <create_chain>
 8005ea2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d101      	bne.n	8005eae <dir_next+0xe0>
 8005eaa:	2307      	movs	r3, #7
 8005eac:	e061      	b.n	8005f72 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d101      	bne.n	8005eb8 <dir_next+0xea>
 8005eb4:	2302      	movs	r3, #2
 8005eb6:	e05c      	b.n	8005f72 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ebe:	d101      	bne.n	8005ec4 <dir_next+0xf6>
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e056      	b.n	8005f72 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005ec4:	68f8      	ldr	r0, [r7, #12]
 8005ec6:	f7ff fad3 	bl	8005470 <sync_window>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d001      	beq.n	8005ed4 <dir_next+0x106>
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e04e      	b.n	8005f72 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	899b      	ldrh	r3, [r3, #12]
 8005ede:	461a      	mov	r2, r3
 8005ee0:	2100      	movs	r1, #0
 8005ee2:	f7ff f8fc 	bl	80050de <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	613b      	str	r3, [r7, #16]
 8005eea:	6979      	ldr	r1, [r7, #20]
 8005eec:	68f8      	ldr	r0, [r7, #12]
 8005eee:	f7ff fba1 	bl	8005634 <clust2sect>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	635a      	str	r2, [r3, #52]	; 0x34
 8005ef8:	e012      	b.n	8005f20 <dir_next+0x152>
						fs->wflag = 1;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2201      	movs	r2, #1
 8005efe:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005f00:	68f8      	ldr	r0, [r7, #12]
 8005f02:	f7ff fab5 	bl	8005470 <sync_window>
 8005f06:	4603      	mov	r3, r0
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d001      	beq.n	8005f10 <dir_next+0x142>
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e030      	b.n	8005f72 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	3301      	adds	r3, #1
 8005f14:	613b      	str	r3, [r7, #16]
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f1a:	1c5a      	adds	r2, r3, #1
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	635a      	str	r2, [r3, #52]	; 0x34
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	895b      	ldrh	r3, [r3, #10]
 8005f24:	461a      	mov	r2, r3
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d3e6      	bcc.n	8005efa <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	1ad2      	subs	r2, r2, r3
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	697a      	ldr	r2, [r7, #20]
 8005f3c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8005f3e:	6979      	ldr	r1, [r7, #20]
 8005f40:	68f8      	ldr	r0, [r7, #12]
 8005f42:	f7ff fb77 	bl	8005634 <clust2sect>
 8005f46:	4602      	mov	r2, r0
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	68ba      	ldr	r2, [r7, #8]
 8005f50:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	899b      	ldrh	r3, [r3, #12]
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	fbb3 f0f2 	udiv	r0, r3, r2
 8005f64:	fb00 f202 	mul.w	r2, r0, r2
 8005f68:	1a9b      	subs	r3, r3, r2
 8005f6a:	18ca      	adds	r2, r1, r3
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005f70:	2300      	movs	r3, #0
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3718      	adds	r7, #24
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}

08005f7a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8005f7a:	b580      	push	{r7, lr}
 8005f7c:	b086      	sub	sp, #24
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]
 8005f82:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8005f8a:	2100      	movs	r1, #0
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f7ff fe95 	bl	8005cbc <dir_sdi>
 8005f92:	4603      	mov	r3, r0
 8005f94:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005f96:	7dfb      	ldrb	r3, [r7, #23]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d12b      	bne.n	8005ff4 <dir_alloc+0x7a>
		n = 0;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	69db      	ldr	r3, [r3, #28]
 8005fa4:	4619      	mov	r1, r3
 8005fa6:	68f8      	ldr	r0, [r7, #12]
 8005fa8:	f7ff faa6 	bl	80054f8 <move_window>
 8005fac:	4603      	mov	r3, r0
 8005fae:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005fb0:	7dfb      	ldrb	r3, [r7, #23]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d11d      	bne.n	8005ff2 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6a1b      	ldr	r3, [r3, #32]
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	2be5      	cmp	r3, #229	; 0xe5
 8005fbe:	d004      	beq.n	8005fca <dir_alloc+0x50>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6a1b      	ldr	r3, [r3, #32]
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d107      	bne.n	8005fda <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	3301      	adds	r3, #1
 8005fce:	613b      	str	r3, [r7, #16]
 8005fd0:	693a      	ldr	r2, [r7, #16]
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d102      	bne.n	8005fde <dir_alloc+0x64>
 8005fd8:	e00c      	b.n	8005ff4 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005fda:	2300      	movs	r3, #0
 8005fdc:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8005fde:	2101      	movs	r1, #1
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f7ff fef4 	bl	8005dce <dir_next>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005fea:	7dfb      	ldrb	r3, [r7, #23]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d0d7      	beq.n	8005fa0 <dir_alloc+0x26>
 8005ff0:	e000      	b.n	8005ff4 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8005ff2:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005ff4:	7dfb      	ldrb	r3, [r7, #23]
 8005ff6:	2b04      	cmp	r3, #4
 8005ff8:	d101      	bne.n	8005ffe <dir_alloc+0x84>
 8005ffa:	2307      	movs	r3, #7
 8005ffc:	75fb      	strb	r3, [r7, #23]
	return res;
 8005ffe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006000:	4618      	mov	r0, r3
 8006002:	3718      	adds	r7, #24
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}

08006008 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b084      	sub	sp, #16
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	331a      	adds	r3, #26
 8006016:	4618      	mov	r0, r3
 8006018:	f7fe ffbe 	bl	8004f98 <ld_word>
 800601c:	4603      	mov	r3, r0
 800601e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	2b03      	cmp	r3, #3
 8006026:	d109      	bne.n	800603c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	3314      	adds	r3, #20
 800602c:	4618      	mov	r0, r3
 800602e:	f7fe ffb3 	bl	8004f98 <ld_word>
 8006032:	4603      	mov	r3, r0
 8006034:	041b      	lsls	r3, r3, #16
 8006036:	68fa      	ldr	r2, [r7, #12]
 8006038:	4313      	orrs	r3, r2
 800603a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800603c:	68fb      	ldr	r3, [r7, #12]
}
 800603e:	4618      	mov	r0, r3
 8006040:	3710      	adds	r7, #16
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}

08006046 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006046:	b580      	push	{r7, lr}
 8006048:	b084      	sub	sp, #16
 800604a:	af00      	add	r7, sp, #0
 800604c:	60f8      	str	r0, [r7, #12]
 800604e:	60b9      	str	r1, [r7, #8]
 8006050:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	331a      	adds	r3, #26
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	b292      	uxth	r2, r2
 800605a:	4611      	mov	r1, r2
 800605c:	4618      	mov	r0, r3
 800605e:	f7fe ffd6 	bl	800500e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	2b03      	cmp	r3, #3
 8006068:	d109      	bne.n	800607e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	f103 0214 	add.w	r2, r3, #20
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	0c1b      	lsrs	r3, r3, #16
 8006074:	b29b      	uxth	r3, r3
 8006076:	4619      	mov	r1, r3
 8006078:	4610      	mov	r0, r2
 800607a:	f7fe ffc8 	bl	800500e <st_word>
	}
}
 800607e:	bf00      	nop
 8006080:	3710      	adds	r7, #16
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
	...

08006088 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8006088:	b590      	push	{r4, r7, lr}
 800608a:	b087      	sub	sp, #28
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	331a      	adds	r3, #26
 8006096:	4618      	mov	r0, r3
 8006098:	f7fe ff7e 	bl	8004f98 <ld_word>
 800609c:	4603      	mov	r3, r0
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d001      	beq.n	80060a6 <cmp_lfn+0x1e>
 80060a2:	2300      	movs	r3, #0
 80060a4:	e059      	b.n	800615a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	781b      	ldrb	r3, [r3, #0]
 80060aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80060ae:	1e5a      	subs	r2, r3, #1
 80060b0:	4613      	mov	r3, r2
 80060b2:	005b      	lsls	r3, r3, #1
 80060b4:	4413      	add	r3, r2
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	4413      	add	r3, r2
 80060ba:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80060bc:	2301      	movs	r3, #1
 80060be:	81fb      	strh	r3, [r7, #14]
 80060c0:	2300      	movs	r3, #0
 80060c2:	613b      	str	r3, [r7, #16]
 80060c4:	e033      	b.n	800612e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80060c6:	4a27      	ldr	r2, [pc, #156]	; (8006164 <cmp_lfn+0xdc>)
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	4413      	add	r3, r2
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	461a      	mov	r2, r3
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	4413      	add	r3, r2
 80060d4:	4618      	mov	r0, r3
 80060d6:	f7fe ff5f 	bl	8004f98 <ld_word>
 80060da:	4603      	mov	r3, r0
 80060dc:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80060de:	89fb      	ldrh	r3, [r7, #14]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d01a      	beq.n	800611a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	2bfe      	cmp	r3, #254	; 0xfe
 80060e8:	d812      	bhi.n	8006110 <cmp_lfn+0x88>
 80060ea:	89bb      	ldrh	r3, [r7, #12]
 80060ec:	4618      	mov	r0, r3
 80060ee:	f001 ff65 	bl	8007fbc <ff_wtoupper>
 80060f2:	4603      	mov	r3, r0
 80060f4:	461c      	mov	r4, r3
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	1c5a      	adds	r2, r3, #1
 80060fa:	617a      	str	r2, [r7, #20]
 80060fc:	005b      	lsls	r3, r3, #1
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	4413      	add	r3, r2
 8006102:	881b      	ldrh	r3, [r3, #0]
 8006104:	4618      	mov	r0, r3
 8006106:	f001 ff59 	bl	8007fbc <ff_wtoupper>
 800610a:	4603      	mov	r3, r0
 800610c:	429c      	cmp	r4, r3
 800610e:	d001      	beq.n	8006114 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8006110:	2300      	movs	r3, #0
 8006112:	e022      	b.n	800615a <cmp_lfn+0xd2>
			}
			wc = uc;
 8006114:	89bb      	ldrh	r3, [r7, #12]
 8006116:	81fb      	strh	r3, [r7, #14]
 8006118:	e006      	b.n	8006128 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800611a:	89bb      	ldrh	r3, [r7, #12]
 800611c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006120:	4293      	cmp	r3, r2
 8006122:	d001      	beq.n	8006128 <cmp_lfn+0xa0>
 8006124:	2300      	movs	r3, #0
 8006126:	e018      	b.n	800615a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	3301      	adds	r3, #1
 800612c:	613b      	str	r3, [r7, #16]
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	2b0c      	cmp	r3, #12
 8006132:	d9c8      	bls.n	80060c6 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	781b      	ldrb	r3, [r3, #0]
 8006138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800613c:	2b00      	cmp	r3, #0
 800613e:	d00b      	beq.n	8006158 <cmp_lfn+0xd0>
 8006140:	89fb      	ldrh	r3, [r7, #14]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d008      	beq.n	8006158 <cmp_lfn+0xd0>
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	005b      	lsls	r3, r3, #1
 800614a:	687a      	ldr	r2, [r7, #4]
 800614c:	4413      	add	r3, r2
 800614e:	881b      	ldrh	r3, [r3, #0]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d001      	beq.n	8006158 <cmp_lfn+0xd0>
 8006154:	2300      	movs	r3, #0
 8006156:	e000      	b.n	800615a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8006158:	2301      	movs	r3, #1
}
 800615a:	4618      	mov	r0, r3
 800615c:	371c      	adds	r7, #28
 800615e:	46bd      	mov	sp, r7
 8006160:	bd90      	pop	{r4, r7, pc}
 8006162:	bf00      	nop
 8006164:	080094f0 	.word	0x080094f0

08006168 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b088      	sub	sp, #32
 800616c:	af00      	add	r7, sp, #0
 800616e:	60f8      	str	r0, [r7, #12]
 8006170:	60b9      	str	r1, [r7, #8]
 8006172:	4611      	mov	r1, r2
 8006174:	461a      	mov	r2, r3
 8006176:	460b      	mov	r3, r1
 8006178:	71fb      	strb	r3, [r7, #7]
 800617a:	4613      	mov	r3, r2
 800617c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	330d      	adds	r3, #13
 8006182:	79ba      	ldrb	r2, [r7, #6]
 8006184:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	330b      	adds	r3, #11
 800618a:	220f      	movs	r2, #15
 800618c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	330c      	adds	r3, #12
 8006192:	2200      	movs	r2, #0
 8006194:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	331a      	adds	r3, #26
 800619a:	2100      	movs	r1, #0
 800619c:	4618      	mov	r0, r3
 800619e:	f7fe ff36 	bl	800500e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80061a2:	79fb      	ldrb	r3, [r7, #7]
 80061a4:	1e5a      	subs	r2, r3, #1
 80061a6:	4613      	mov	r3, r2
 80061a8:	005b      	lsls	r3, r3, #1
 80061aa:	4413      	add	r3, r2
 80061ac:	009b      	lsls	r3, r3, #2
 80061ae:	4413      	add	r3, r2
 80061b0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80061b2:	2300      	movs	r3, #0
 80061b4:	82fb      	strh	r3, [r7, #22]
 80061b6:	2300      	movs	r3, #0
 80061b8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80061ba:	8afb      	ldrh	r3, [r7, #22]
 80061bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d007      	beq.n	80061d4 <put_lfn+0x6c>
 80061c4:	69fb      	ldr	r3, [r7, #28]
 80061c6:	1c5a      	adds	r2, r3, #1
 80061c8:	61fa      	str	r2, [r7, #28]
 80061ca:	005b      	lsls	r3, r3, #1
 80061cc:	68fa      	ldr	r2, [r7, #12]
 80061ce:	4413      	add	r3, r2
 80061d0:	881b      	ldrh	r3, [r3, #0]
 80061d2:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80061d4:	4a17      	ldr	r2, [pc, #92]	; (8006234 <put_lfn+0xcc>)
 80061d6:	69bb      	ldr	r3, [r7, #24]
 80061d8:	4413      	add	r3, r2
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	461a      	mov	r2, r3
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	4413      	add	r3, r2
 80061e2:	8afa      	ldrh	r2, [r7, #22]
 80061e4:	4611      	mov	r1, r2
 80061e6:	4618      	mov	r0, r3
 80061e8:	f7fe ff11 	bl	800500e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80061ec:	8afb      	ldrh	r3, [r7, #22]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d102      	bne.n	80061f8 <put_lfn+0x90>
 80061f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80061f6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80061f8:	69bb      	ldr	r3, [r7, #24]
 80061fa:	3301      	adds	r3, #1
 80061fc:	61bb      	str	r3, [r7, #24]
 80061fe:	69bb      	ldr	r3, [r7, #24]
 8006200:	2b0c      	cmp	r3, #12
 8006202:	d9da      	bls.n	80061ba <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8006204:	8afb      	ldrh	r3, [r7, #22]
 8006206:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800620a:	4293      	cmp	r3, r2
 800620c:	d006      	beq.n	800621c <put_lfn+0xb4>
 800620e:	69fb      	ldr	r3, [r7, #28]
 8006210:	005b      	lsls	r3, r3, #1
 8006212:	68fa      	ldr	r2, [r7, #12]
 8006214:	4413      	add	r3, r2
 8006216:	881b      	ldrh	r3, [r3, #0]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d103      	bne.n	8006224 <put_lfn+0xbc>
 800621c:	79fb      	ldrb	r3, [r7, #7]
 800621e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006222:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	79fa      	ldrb	r2, [r7, #7]
 8006228:	701a      	strb	r2, [r3, #0]
}
 800622a:	bf00      	nop
 800622c:	3720      	adds	r7, #32
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}
 8006232:	bf00      	nop
 8006234:	080094f0 	.word	0x080094f0

08006238 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b08c      	sub	sp, #48	; 0x30
 800623c:	af00      	add	r7, sp, #0
 800623e:	60f8      	str	r0, [r7, #12]
 8006240:	60b9      	str	r1, [r7, #8]
 8006242:	607a      	str	r2, [r7, #4]
 8006244:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8006246:	220b      	movs	r2, #11
 8006248:	68b9      	ldr	r1, [r7, #8]
 800624a:	68f8      	ldr	r0, [r7, #12]
 800624c:	f7fe ff26 	bl	800509c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	2b05      	cmp	r3, #5
 8006254:	d92b      	bls.n	80062ae <gen_numname+0x76>
		sr = seq;
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800625a:	e022      	b.n	80062a2 <gen_numname+0x6a>
			wc = *lfn++;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	1c9a      	adds	r2, r3, #2
 8006260:	607a      	str	r2, [r7, #4]
 8006262:	881b      	ldrh	r3, [r3, #0]
 8006264:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8006266:	2300      	movs	r3, #0
 8006268:	62bb      	str	r3, [r7, #40]	; 0x28
 800626a:	e017      	b.n	800629c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800626c:	69fb      	ldr	r3, [r7, #28]
 800626e:	005a      	lsls	r2, r3, #1
 8006270:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006272:	f003 0301 	and.w	r3, r3, #1
 8006276:	4413      	add	r3, r2
 8006278:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800627a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800627c:	085b      	lsrs	r3, r3, #1
 800627e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8006280:	69fb      	ldr	r3, [r7, #28]
 8006282:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006286:	2b00      	cmp	r3, #0
 8006288:	d005      	beq.n	8006296 <gen_numname+0x5e>
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8006290:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8006294:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8006296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006298:	3301      	adds	r3, #1
 800629a:	62bb      	str	r3, [r7, #40]	; 0x28
 800629c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800629e:	2b0f      	cmp	r3, #15
 80062a0:	d9e4      	bls.n	800626c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	881b      	ldrh	r3, [r3, #0]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d1d8      	bne.n	800625c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80062aa:	69fb      	ldr	r3, [r7, #28]
 80062ac:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80062ae:	2307      	movs	r3, #7
 80062b0:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	f003 030f 	and.w	r3, r3, #15
 80062ba:	b2db      	uxtb	r3, r3
 80062bc:	3330      	adds	r3, #48	; 0x30
 80062be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80062c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80062c6:	2b39      	cmp	r3, #57	; 0x39
 80062c8:	d904      	bls.n	80062d4 <gen_numname+0x9c>
 80062ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80062ce:	3307      	adds	r3, #7
 80062d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80062d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d6:	1e5a      	subs	r2, r3, #1
 80062d8:	62ba      	str	r2, [r7, #40]	; 0x28
 80062da:	3330      	adds	r3, #48	; 0x30
 80062dc:	443b      	add	r3, r7
 80062de:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80062e2:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	091b      	lsrs	r3, r3, #4
 80062ea:	603b      	str	r3, [r7, #0]
	} while (seq);
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d1df      	bne.n	80062b2 <gen_numname+0x7a>
	ns[i] = '~';
 80062f2:	f107 0214 	add.w	r2, r7, #20
 80062f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f8:	4413      	add	r3, r2
 80062fa:	227e      	movs	r2, #126	; 0x7e
 80062fc:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80062fe:	2300      	movs	r3, #0
 8006300:	627b      	str	r3, [r7, #36]	; 0x24
 8006302:	e002      	b.n	800630a <gen_numname+0xd2>
 8006304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006306:	3301      	adds	r3, #1
 8006308:	627b      	str	r3, [r7, #36]	; 0x24
 800630a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800630c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800630e:	429a      	cmp	r2, r3
 8006310:	d205      	bcs.n	800631e <gen_numname+0xe6>
 8006312:	68fa      	ldr	r2, [r7, #12]
 8006314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006316:	4413      	add	r3, r2
 8006318:	781b      	ldrb	r3, [r3, #0]
 800631a:	2b20      	cmp	r3, #32
 800631c:	d1f2      	bne.n	8006304 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800631e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006320:	2b07      	cmp	r3, #7
 8006322:	d807      	bhi.n	8006334 <gen_numname+0xfc>
 8006324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006326:	1c5a      	adds	r2, r3, #1
 8006328:	62ba      	str	r2, [r7, #40]	; 0x28
 800632a:	3330      	adds	r3, #48	; 0x30
 800632c:	443b      	add	r3, r7
 800632e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8006332:	e000      	b.n	8006336 <gen_numname+0xfe>
 8006334:	2120      	movs	r1, #32
 8006336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006338:	1c5a      	adds	r2, r3, #1
 800633a:	627a      	str	r2, [r7, #36]	; 0x24
 800633c:	68fa      	ldr	r2, [r7, #12]
 800633e:	4413      	add	r3, r2
 8006340:	460a      	mov	r2, r1
 8006342:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8006344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006346:	2b07      	cmp	r3, #7
 8006348:	d9e9      	bls.n	800631e <gen_numname+0xe6>
}
 800634a:	bf00      	nop
 800634c:	bf00      	nop
 800634e:	3730      	adds	r7, #48	; 0x30
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8006354:	b480      	push	{r7}
 8006356:	b085      	sub	sp, #20
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800635c:	2300      	movs	r3, #0
 800635e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8006360:	230b      	movs	r3, #11
 8006362:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8006364:	7bfb      	ldrb	r3, [r7, #15]
 8006366:	b2da      	uxtb	r2, r3
 8006368:	0852      	lsrs	r2, r2, #1
 800636a:	01db      	lsls	r3, r3, #7
 800636c:	4313      	orrs	r3, r2
 800636e:	b2da      	uxtb	r2, r3
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	1c59      	adds	r1, r3, #1
 8006374:	6079      	str	r1, [r7, #4]
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	4413      	add	r3, r2
 800637a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	3b01      	subs	r3, #1
 8006380:	60bb      	str	r3, [r7, #8]
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d1ed      	bne.n	8006364 <sum_sfn+0x10>
	return sum;
 8006388:	7bfb      	ldrb	r3, [r7, #15]
}
 800638a:	4618      	mov	r0, r3
 800638c:	3714      	adds	r7, #20
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr

08006396 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006396:	b580      	push	{r7, lr}
 8006398:	b086      	sub	sp, #24
 800639a:	af00      	add	r7, sp, #0
 800639c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80063a4:	2100      	movs	r1, #0
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f7ff fc88 	bl	8005cbc <dir_sdi>
 80063ac:	4603      	mov	r3, r0
 80063ae:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80063b0:	7dfb      	ldrb	r3, [r7, #23]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d001      	beq.n	80063ba <dir_find+0x24>
 80063b6:	7dfb      	ldrb	r3, [r7, #23]
 80063b8:	e0a9      	b.n	800650e <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80063ba:	23ff      	movs	r3, #255	; 0xff
 80063bc:	753b      	strb	r3, [r7, #20]
 80063be:	7d3b      	ldrb	r3, [r7, #20]
 80063c0:	757b      	strb	r3, [r7, #21]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f04f 32ff 	mov.w	r2, #4294967295
 80063c8:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	69db      	ldr	r3, [r3, #28]
 80063ce:	4619      	mov	r1, r3
 80063d0:	6938      	ldr	r0, [r7, #16]
 80063d2:	f7ff f891 	bl	80054f8 <move_window>
 80063d6:	4603      	mov	r3, r0
 80063d8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80063da:	7dfb      	ldrb	r3, [r7, #23]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	f040 8090 	bne.w	8006502 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6a1b      	ldr	r3, [r3, #32]
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80063ea:	7dbb      	ldrb	r3, [r7, #22]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d102      	bne.n	80063f6 <dir_find+0x60>
 80063f0:	2304      	movs	r3, #4
 80063f2:	75fb      	strb	r3, [r7, #23]
 80063f4:	e08a      	b.n	800650c <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6a1b      	ldr	r3, [r3, #32]
 80063fa:	330b      	adds	r3, #11
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006402:	73fb      	strb	r3, [r7, #15]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	7bfa      	ldrb	r2, [r7, #15]
 8006408:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800640a:	7dbb      	ldrb	r3, [r7, #22]
 800640c:	2be5      	cmp	r3, #229	; 0xe5
 800640e:	d007      	beq.n	8006420 <dir_find+0x8a>
 8006410:	7bfb      	ldrb	r3, [r7, #15]
 8006412:	f003 0308 	and.w	r3, r3, #8
 8006416:	2b00      	cmp	r3, #0
 8006418:	d009      	beq.n	800642e <dir_find+0x98>
 800641a:	7bfb      	ldrb	r3, [r7, #15]
 800641c:	2b0f      	cmp	r3, #15
 800641e:	d006      	beq.n	800642e <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006420:	23ff      	movs	r3, #255	; 0xff
 8006422:	757b      	strb	r3, [r7, #21]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f04f 32ff 	mov.w	r2, #4294967295
 800642a:	631a      	str	r2, [r3, #48]	; 0x30
 800642c:	e05e      	b.n	80064ec <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800642e:	7bfb      	ldrb	r3, [r7, #15]
 8006430:	2b0f      	cmp	r3, #15
 8006432:	d136      	bne.n	80064a2 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800643a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800643e:	2b00      	cmp	r3, #0
 8006440:	d154      	bne.n	80064ec <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8006442:	7dbb      	ldrb	r3, [r7, #22]
 8006444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006448:	2b00      	cmp	r3, #0
 800644a:	d00d      	beq.n	8006468 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6a1b      	ldr	r3, [r3, #32]
 8006450:	7b5b      	ldrb	r3, [r3, #13]
 8006452:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8006454:	7dbb      	ldrb	r3, [r7, #22]
 8006456:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800645a:	75bb      	strb	r3, [r7, #22]
 800645c:	7dbb      	ldrb	r3, [r7, #22]
 800645e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	695a      	ldr	r2, [r3, #20]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006468:	7dba      	ldrb	r2, [r7, #22]
 800646a:	7d7b      	ldrb	r3, [r7, #21]
 800646c:	429a      	cmp	r2, r3
 800646e:	d115      	bne.n	800649c <dir_find+0x106>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6a1b      	ldr	r3, [r3, #32]
 8006474:	330d      	adds	r3, #13
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	7d3a      	ldrb	r2, [r7, #20]
 800647a:	429a      	cmp	r2, r3
 800647c:	d10e      	bne.n	800649c <dir_find+0x106>
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	691a      	ldr	r2, [r3, #16]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6a1b      	ldr	r3, [r3, #32]
 8006486:	4619      	mov	r1, r3
 8006488:	4610      	mov	r0, r2
 800648a:	f7ff fdfd 	bl	8006088 <cmp_lfn>
 800648e:	4603      	mov	r3, r0
 8006490:	2b00      	cmp	r3, #0
 8006492:	d003      	beq.n	800649c <dir_find+0x106>
 8006494:	7d7b      	ldrb	r3, [r7, #21]
 8006496:	3b01      	subs	r3, #1
 8006498:	b2db      	uxtb	r3, r3
 800649a:	e000      	b.n	800649e <dir_find+0x108>
 800649c:	23ff      	movs	r3, #255	; 0xff
 800649e:	757b      	strb	r3, [r7, #21]
 80064a0:	e024      	b.n	80064ec <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80064a2:	7d7b      	ldrb	r3, [r7, #21]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d109      	bne.n	80064bc <dir_find+0x126>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6a1b      	ldr	r3, [r3, #32]
 80064ac:	4618      	mov	r0, r3
 80064ae:	f7ff ff51 	bl	8006354 <sum_sfn>
 80064b2:	4603      	mov	r3, r0
 80064b4:	461a      	mov	r2, r3
 80064b6:	7d3b      	ldrb	r3, [r7, #20]
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d024      	beq.n	8006506 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80064c2:	f003 0301 	and.w	r3, r3, #1
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d10a      	bne.n	80064e0 <dir_find+0x14a>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6a18      	ldr	r0, [r3, #32]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	3324      	adds	r3, #36	; 0x24
 80064d2:	220b      	movs	r2, #11
 80064d4:	4619      	mov	r1, r3
 80064d6:	f7fe fe1d 	bl	8005114 <mem_cmp>
 80064da:	4603      	mov	r3, r0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d014      	beq.n	800650a <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80064e0:	23ff      	movs	r3, #255	; 0xff
 80064e2:	757b      	strb	r3, [r7, #21]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f04f 32ff 	mov.w	r2, #4294967295
 80064ea:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80064ec:	2100      	movs	r1, #0
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f7ff fc6d 	bl	8005dce <dir_next>
 80064f4:	4603      	mov	r3, r0
 80064f6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80064f8:	7dfb      	ldrb	r3, [r7, #23]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	f43f af65 	beq.w	80063ca <dir_find+0x34>
 8006500:	e004      	b.n	800650c <dir_find+0x176>
		if (res != FR_OK) break;
 8006502:	bf00      	nop
 8006504:	e002      	b.n	800650c <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006506:	bf00      	nop
 8006508:	e000      	b.n	800650c <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800650a:	bf00      	nop

	return res;
 800650c:	7dfb      	ldrb	r3, [r7, #23]
}
 800650e:	4618      	mov	r0, r3
 8006510:	3718      	adds	r7, #24
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}
	...

08006518 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b08c      	sub	sp, #48	; 0x30
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800652c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006530:	2b00      	cmp	r3, #0
 8006532:	d001      	beq.n	8006538 <dir_register+0x20>
 8006534:	2306      	movs	r3, #6
 8006536:	e0e0      	b.n	80066fa <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8006538:	2300      	movs	r3, #0
 800653a:	627b      	str	r3, [r7, #36]	; 0x24
 800653c:	e002      	b.n	8006544 <dir_register+0x2c>
 800653e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006540:	3301      	adds	r3, #1
 8006542:	627b      	str	r3, [r7, #36]	; 0x24
 8006544:	69fb      	ldr	r3, [r7, #28]
 8006546:	691a      	ldr	r2, [r3, #16]
 8006548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654a:	005b      	lsls	r3, r3, #1
 800654c:	4413      	add	r3, r2
 800654e:	881b      	ldrh	r3, [r3, #0]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d1f4      	bne.n	800653e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800655a:	f107 030c 	add.w	r3, r7, #12
 800655e:	220c      	movs	r2, #12
 8006560:	4618      	mov	r0, r3
 8006562:	f7fe fd9b 	bl	800509c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8006566:	7dfb      	ldrb	r3, [r7, #23]
 8006568:	f003 0301 	and.w	r3, r3, #1
 800656c:	2b00      	cmp	r3, #0
 800656e:	d032      	beq.n	80065d6 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2240      	movs	r2, #64	; 0x40
 8006574:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8006578:	2301      	movs	r3, #1
 800657a:	62bb      	str	r3, [r7, #40]	; 0x28
 800657c:	e016      	b.n	80065ac <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8006584:	69fb      	ldr	r3, [r7, #28]
 8006586:	691a      	ldr	r2, [r3, #16]
 8006588:	f107 010c 	add.w	r1, r7, #12
 800658c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800658e:	f7ff fe53 	bl	8006238 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f7ff feff 	bl	8006396 <dir_find>
 8006598:	4603      	mov	r3, r0
 800659a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800659e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d106      	bne.n	80065b4 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 80065a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a8:	3301      	adds	r3, #1
 80065aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80065ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ae:	2b63      	cmp	r3, #99	; 0x63
 80065b0:	d9e5      	bls.n	800657e <dir_register+0x66>
 80065b2:	e000      	b.n	80065b6 <dir_register+0x9e>
			if (res != FR_OK) break;
 80065b4:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80065b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b8:	2b64      	cmp	r3, #100	; 0x64
 80065ba:	d101      	bne.n	80065c0 <dir_register+0xa8>
 80065bc:	2307      	movs	r3, #7
 80065be:	e09c      	b.n	80066fa <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80065c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80065c4:	2b04      	cmp	r3, #4
 80065c6:	d002      	beq.n	80065ce <dir_register+0xb6>
 80065c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80065cc:	e095      	b.n	80066fa <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80065ce:	7dfa      	ldrb	r2, [r7, #23]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80065d6:	7dfb      	ldrb	r3, [r7, #23]
 80065d8:	f003 0302 	and.w	r3, r3, #2
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d007      	beq.n	80065f0 <dir_register+0xd8>
 80065e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e2:	330c      	adds	r3, #12
 80065e4:	4a47      	ldr	r2, [pc, #284]	; (8006704 <dir_register+0x1ec>)
 80065e6:	fba2 2303 	umull	r2, r3, r2, r3
 80065ea:	089b      	lsrs	r3, r3, #2
 80065ec:	3301      	adds	r3, #1
 80065ee:	e000      	b.n	80065f2 <dir_register+0xda>
 80065f0:	2301      	movs	r3, #1
 80065f2:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80065f4:	6a39      	ldr	r1, [r7, #32]
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f7ff fcbf 	bl	8005f7a <dir_alloc>
 80065fc:	4603      	mov	r3, r0
 80065fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8006602:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006606:	2b00      	cmp	r3, #0
 8006608:	d148      	bne.n	800669c <dir_register+0x184>
 800660a:	6a3b      	ldr	r3, [r7, #32]
 800660c:	3b01      	subs	r3, #1
 800660e:	623b      	str	r3, [r7, #32]
 8006610:	6a3b      	ldr	r3, [r7, #32]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d042      	beq.n	800669c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	695a      	ldr	r2, [r3, #20]
 800661a:	6a3b      	ldr	r3, [r7, #32]
 800661c:	015b      	lsls	r3, r3, #5
 800661e:	1ad3      	subs	r3, r2, r3
 8006620:	4619      	mov	r1, r3
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f7ff fb4a 	bl	8005cbc <dir_sdi>
 8006628:	4603      	mov	r3, r0
 800662a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800662e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006632:	2b00      	cmp	r3, #0
 8006634:	d132      	bne.n	800669c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	3324      	adds	r3, #36	; 0x24
 800663a:	4618      	mov	r0, r3
 800663c:	f7ff fe8a 	bl	8006354 <sum_sfn>
 8006640:	4603      	mov	r3, r0
 8006642:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	69db      	ldr	r3, [r3, #28]
 8006648:	4619      	mov	r1, r3
 800664a:	69f8      	ldr	r0, [r7, #28]
 800664c:	f7fe ff54 	bl	80054f8 <move_window>
 8006650:	4603      	mov	r3, r0
 8006652:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8006656:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800665a:	2b00      	cmp	r3, #0
 800665c:	d11d      	bne.n	800669a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800665e:	69fb      	ldr	r3, [r7, #28]
 8006660:	6918      	ldr	r0, [r3, #16]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6a19      	ldr	r1, [r3, #32]
 8006666:	6a3b      	ldr	r3, [r7, #32]
 8006668:	b2da      	uxtb	r2, r3
 800666a:	7efb      	ldrb	r3, [r7, #27]
 800666c:	f7ff fd7c 	bl	8006168 <put_lfn>
				fs->wflag = 1;
 8006670:	69fb      	ldr	r3, [r7, #28]
 8006672:	2201      	movs	r2, #1
 8006674:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8006676:	2100      	movs	r1, #0
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f7ff fba8 	bl	8005dce <dir_next>
 800667e:	4603      	mov	r3, r0
 8006680:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8006684:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006688:	2b00      	cmp	r3, #0
 800668a:	d107      	bne.n	800669c <dir_register+0x184>
 800668c:	6a3b      	ldr	r3, [r7, #32]
 800668e:	3b01      	subs	r3, #1
 8006690:	623b      	str	r3, [r7, #32]
 8006692:	6a3b      	ldr	r3, [r7, #32]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d1d5      	bne.n	8006644 <dir_register+0x12c>
 8006698:	e000      	b.n	800669c <dir_register+0x184>
				if (res != FR_OK) break;
 800669a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800669c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d128      	bne.n	80066f6 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	69db      	ldr	r3, [r3, #28]
 80066a8:	4619      	mov	r1, r3
 80066aa:	69f8      	ldr	r0, [r7, #28]
 80066ac:	f7fe ff24 	bl	80054f8 <move_window>
 80066b0:	4603      	mov	r3, r0
 80066b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80066b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d11b      	bne.n	80066f6 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6a1b      	ldr	r3, [r3, #32]
 80066c2:	2220      	movs	r2, #32
 80066c4:	2100      	movs	r1, #0
 80066c6:	4618      	mov	r0, r3
 80066c8:	f7fe fd09 	bl	80050de <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6a18      	ldr	r0, [r3, #32]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	3324      	adds	r3, #36	; 0x24
 80066d4:	220b      	movs	r2, #11
 80066d6:	4619      	mov	r1, r3
 80066d8:	f7fe fce0 	bl	800509c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6a1b      	ldr	r3, [r3, #32]
 80066e6:	330c      	adds	r3, #12
 80066e8:	f002 0218 	and.w	r2, r2, #24
 80066ec:	b2d2      	uxtb	r2, r2
 80066ee:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80066f0:	69fb      	ldr	r3, [r7, #28]
 80066f2:	2201      	movs	r2, #1
 80066f4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80066f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3730      	adds	r7, #48	; 0x30
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
 8006702:	bf00      	nop
 8006704:	4ec4ec4f 	.word	0x4ec4ec4f

08006708 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b08a      	sub	sp, #40	; 0x28
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
 8006710:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	613b      	str	r3, [r7, #16]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	691b      	ldr	r3, [r3, #16]
 800671e:	60fb      	str	r3, [r7, #12]
 8006720:	2300      	movs	r3, #0
 8006722:	617b      	str	r3, [r7, #20]
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8006728:	69bb      	ldr	r3, [r7, #24]
 800672a:	1c5a      	adds	r2, r3, #1
 800672c:	61ba      	str	r2, [r7, #24]
 800672e:	693a      	ldr	r2, [r7, #16]
 8006730:	4413      	add	r3, r2
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8006736:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006738:	2b1f      	cmp	r3, #31
 800673a:	d940      	bls.n	80067be <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800673c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800673e:	2b2f      	cmp	r3, #47	; 0x2f
 8006740:	d006      	beq.n	8006750 <create_name+0x48>
 8006742:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006744:	2b5c      	cmp	r3, #92	; 0x5c
 8006746:	d110      	bne.n	800676a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006748:	e002      	b.n	8006750 <create_name+0x48>
 800674a:	69bb      	ldr	r3, [r7, #24]
 800674c:	3301      	adds	r3, #1
 800674e:	61bb      	str	r3, [r7, #24]
 8006750:	693a      	ldr	r2, [r7, #16]
 8006752:	69bb      	ldr	r3, [r7, #24]
 8006754:	4413      	add	r3, r2
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	2b2f      	cmp	r3, #47	; 0x2f
 800675a:	d0f6      	beq.n	800674a <create_name+0x42>
 800675c:	693a      	ldr	r2, [r7, #16]
 800675e:	69bb      	ldr	r3, [r7, #24]
 8006760:	4413      	add	r3, r2
 8006762:	781b      	ldrb	r3, [r3, #0]
 8006764:	2b5c      	cmp	r3, #92	; 0x5c
 8006766:	d0f0      	beq.n	800674a <create_name+0x42>
			break;
 8006768:	e02a      	b.n	80067c0 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	2bfe      	cmp	r3, #254	; 0xfe
 800676e:	d901      	bls.n	8006774 <create_name+0x6c>
 8006770:	2306      	movs	r3, #6
 8006772:	e17d      	b.n	8006a70 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8006774:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006776:	b2db      	uxtb	r3, r3
 8006778:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800677a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800677c:	2101      	movs	r1, #1
 800677e:	4618      	mov	r0, r3
 8006780:	f001 fbe0 	bl	8007f44 <ff_convert>
 8006784:	4603      	mov	r3, r0
 8006786:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8006788:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800678a:	2b00      	cmp	r3, #0
 800678c:	d101      	bne.n	8006792 <create_name+0x8a>
 800678e:	2306      	movs	r3, #6
 8006790:	e16e      	b.n	8006a70 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8006792:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006794:	2b7f      	cmp	r3, #127	; 0x7f
 8006796:	d809      	bhi.n	80067ac <create_name+0xa4>
 8006798:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800679a:	4619      	mov	r1, r3
 800679c:	488d      	ldr	r0, [pc, #564]	; (80069d4 <create_name+0x2cc>)
 800679e:	f7fe fce0 	bl	8005162 <chk_chr>
 80067a2:	4603      	mov	r3, r0
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d001      	beq.n	80067ac <create_name+0xa4>
 80067a8:	2306      	movs	r3, #6
 80067aa:	e161      	b.n	8006a70 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	1c5a      	adds	r2, r3, #1
 80067b0:	617a      	str	r2, [r7, #20]
 80067b2:	005b      	lsls	r3, r3, #1
 80067b4:	68fa      	ldr	r2, [r7, #12]
 80067b6:	4413      	add	r3, r2
 80067b8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80067ba:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80067bc:	e7b4      	b.n	8006728 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80067be:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80067c0:	693a      	ldr	r2, [r7, #16]
 80067c2:	69bb      	ldr	r3, [r7, #24]
 80067c4:	441a      	add	r2, r3
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80067ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80067cc:	2b1f      	cmp	r3, #31
 80067ce:	d801      	bhi.n	80067d4 <create_name+0xcc>
 80067d0:	2304      	movs	r3, #4
 80067d2:	e000      	b.n	80067d6 <create_name+0xce>
 80067d4:	2300      	movs	r3, #0
 80067d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80067da:	e011      	b.n	8006800 <create_name+0xf8>
		w = lfn[di - 1];
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80067e2:	3b01      	subs	r3, #1
 80067e4:	005b      	lsls	r3, r3, #1
 80067e6:	68fa      	ldr	r2, [r7, #12]
 80067e8:	4413      	add	r3, r2
 80067ea:	881b      	ldrh	r3, [r3, #0]
 80067ec:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80067ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80067f0:	2b20      	cmp	r3, #32
 80067f2:	d002      	beq.n	80067fa <create_name+0xf2>
 80067f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80067f6:	2b2e      	cmp	r3, #46	; 0x2e
 80067f8:	d106      	bne.n	8006808 <create_name+0x100>
		di--;
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	3b01      	subs	r3, #1
 80067fe:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d1ea      	bne.n	80067dc <create_name+0xd4>
 8006806:	e000      	b.n	800680a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8006808:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	005b      	lsls	r3, r3, #1
 800680e:	68fa      	ldr	r2, [r7, #12]
 8006810:	4413      	add	r3, r2
 8006812:	2200      	movs	r2, #0
 8006814:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d101      	bne.n	8006820 <create_name+0x118>
 800681c:	2306      	movs	r3, #6
 800681e:	e127      	b.n	8006a70 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	3324      	adds	r3, #36	; 0x24
 8006824:	220b      	movs	r2, #11
 8006826:	2120      	movs	r1, #32
 8006828:	4618      	mov	r0, r3
 800682a:	f7fe fc58 	bl	80050de <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800682e:	2300      	movs	r3, #0
 8006830:	61bb      	str	r3, [r7, #24]
 8006832:	e002      	b.n	800683a <create_name+0x132>
 8006834:	69bb      	ldr	r3, [r7, #24]
 8006836:	3301      	adds	r3, #1
 8006838:	61bb      	str	r3, [r7, #24]
 800683a:	69bb      	ldr	r3, [r7, #24]
 800683c:	005b      	lsls	r3, r3, #1
 800683e:	68fa      	ldr	r2, [r7, #12]
 8006840:	4413      	add	r3, r2
 8006842:	881b      	ldrh	r3, [r3, #0]
 8006844:	2b20      	cmp	r3, #32
 8006846:	d0f5      	beq.n	8006834 <create_name+0x12c>
 8006848:	69bb      	ldr	r3, [r7, #24]
 800684a:	005b      	lsls	r3, r3, #1
 800684c:	68fa      	ldr	r2, [r7, #12]
 800684e:	4413      	add	r3, r2
 8006850:	881b      	ldrh	r3, [r3, #0]
 8006852:	2b2e      	cmp	r3, #46	; 0x2e
 8006854:	d0ee      	beq.n	8006834 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8006856:	69bb      	ldr	r3, [r7, #24]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d009      	beq.n	8006870 <create_name+0x168>
 800685c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006860:	f043 0303 	orr.w	r3, r3, #3
 8006864:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8006868:	e002      	b.n	8006870 <create_name+0x168>
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	3b01      	subs	r3, #1
 800686e:	617b      	str	r3, [r7, #20]
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d009      	beq.n	800688a <create_name+0x182>
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800687c:	3b01      	subs	r3, #1
 800687e:	005b      	lsls	r3, r3, #1
 8006880:	68fa      	ldr	r2, [r7, #12]
 8006882:	4413      	add	r3, r2
 8006884:	881b      	ldrh	r3, [r3, #0]
 8006886:	2b2e      	cmp	r3, #46	; 0x2e
 8006888:	d1ef      	bne.n	800686a <create_name+0x162>

	i = b = 0; ni = 8;
 800688a:	2300      	movs	r3, #0
 800688c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006890:	2300      	movs	r3, #0
 8006892:	623b      	str	r3, [r7, #32]
 8006894:	2308      	movs	r3, #8
 8006896:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8006898:	69bb      	ldr	r3, [r7, #24]
 800689a:	1c5a      	adds	r2, r3, #1
 800689c:	61ba      	str	r2, [r7, #24]
 800689e:	005b      	lsls	r3, r3, #1
 80068a0:	68fa      	ldr	r2, [r7, #12]
 80068a2:	4413      	add	r3, r2
 80068a4:	881b      	ldrh	r3, [r3, #0]
 80068a6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 80068a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	f000 8090 	beq.w	80069d0 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80068b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80068b2:	2b20      	cmp	r3, #32
 80068b4:	d006      	beq.n	80068c4 <create_name+0x1bc>
 80068b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80068b8:	2b2e      	cmp	r3, #46	; 0x2e
 80068ba:	d10a      	bne.n	80068d2 <create_name+0x1ca>
 80068bc:	69ba      	ldr	r2, [r7, #24]
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d006      	beq.n	80068d2 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80068c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80068c8:	f043 0303 	orr.w	r3, r3, #3
 80068cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80068d0:	e07d      	b.n	80069ce <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80068d2:	6a3a      	ldr	r2, [r7, #32]
 80068d4:	69fb      	ldr	r3, [r7, #28]
 80068d6:	429a      	cmp	r2, r3
 80068d8:	d203      	bcs.n	80068e2 <create_name+0x1da>
 80068da:	69ba      	ldr	r2, [r7, #24]
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	429a      	cmp	r2, r3
 80068e0:	d123      	bne.n	800692a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80068e2:	69fb      	ldr	r3, [r7, #28]
 80068e4:	2b0b      	cmp	r3, #11
 80068e6:	d106      	bne.n	80068f6 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80068e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80068ec:	f043 0303 	orr.w	r3, r3, #3
 80068f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80068f4:	e075      	b.n	80069e2 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80068f6:	69ba      	ldr	r2, [r7, #24]
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	429a      	cmp	r2, r3
 80068fc:	d005      	beq.n	800690a <create_name+0x202>
 80068fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006902:	f043 0303 	orr.w	r3, r3, #3
 8006906:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800690a:	69ba      	ldr	r2, [r7, #24]
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	429a      	cmp	r2, r3
 8006910:	d866      	bhi.n	80069e0 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	61bb      	str	r3, [r7, #24]
 8006916:	2308      	movs	r3, #8
 8006918:	623b      	str	r3, [r7, #32]
 800691a:	230b      	movs	r3, #11
 800691c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800691e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006922:	009b      	lsls	r3, r3, #2
 8006924:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006928:	e051      	b.n	80069ce <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800692a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800692c:	2b7f      	cmp	r3, #127	; 0x7f
 800692e:	d914      	bls.n	800695a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8006930:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006932:	2100      	movs	r1, #0
 8006934:	4618      	mov	r0, r3
 8006936:	f001 fb05 	bl	8007f44 <ff_convert>
 800693a:	4603      	mov	r3, r0
 800693c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800693e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006940:	2b00      	cmp	r3, #0
 8006942:	d004      	beq.n	800694e <create_name+0x246>
 8006944:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006946:	3b80      	subs	r3, #128	; 0x80
 8006948:	4a23      	ldr	r2, [pc, #140]	; (80069d8 <create_name+0x2d0>)
 800694a:	5cd3      	ldrb	r3, [r2, r3]
 800694c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800694e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006952:	f043 0302 	orr.w	r3, r3, #2
 8006956:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800695a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800695c:	2b00      	cmp	r3, #0
 800695e:	d007      	beq.n	8006970 <create_name+0x268>
 8006960:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006962:	4619      	mov	r1, r3
 8006964:	481d      	ldr	r0, [pc, #116]	; (80069dc <create_name+0x2d4>)
 8006966:	f7fe fbfc 	bl	8005162 <chk_chr>
 800696a:	4603      	mov	r3, r0
 800696c:	2b00      	cmp	r3, #0
 800696e:	d008      	beq.n	8006982 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8006970:	235f      	movs	r3, #95	; 0x5f
 8006972:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006974:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006978:	f043 0303 	orr.w	r3, r3, #3
 800697c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006980:	e01b      	b.n	80069ba <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8006982:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006984:	2b40      	cmp	r3, #64	; 0x40
 8006986:	d909      	bls.n	800699c <create_name+0x294>
 8006988:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800698a:	2b5a      	cmp	r3, #90	; 0x5a
 800698c:	d806      	bhi.n	800699c <create_name+0x294>
					b |= 2;
 800698e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006992:	f043 0302 	orr.w	r3, r3, #2
 8006996:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800699a:	e00e      	b.n	80069ba <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800699c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800699e:	2b60      	cmp	r3, #96	; 0x60
 80069a0:	d90b      	bls.n	80069ba <create_name+0x2b2>
 80069a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80069a4:	2b7a      	cmp	r3, #122	; 0x7a
 80069a6:	d808      	bhi.n	80069ba <create_name+0x2b2>
						b |= 1; w -= 0x20;
 80069a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80069ac:	f043 0301 	orr.w	r3, r3, #1
 80069b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80069b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80069b6:	3b20      	subs	r3, #32
 80069b8:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80069ba:	6a3b      	ldr	r3, [r7, #32]
 80069bc:	1c5a      	adds	r2, r3, #1
 80069be:	623a      	str	r2, [r7, #32]
 80069c0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80069c2:	b2d1      	uxtb	r1, r2
 80069c4:	687a      	ldr	r2, [r7, #4]
 80069c6:	4413      	add	r3, r2
 80069c8:	460a      	mov	r2, r1
 80069ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 80069ce:	e763      	b.n	8006898 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80069d0:	bf00      	nop
 80069d2:	e006      	b.n	80069e2 <create_name+0x2da>
 80069d4:	08008cac 	.word	0x08008cac
 80069d8:	08009470 	.word	0x08009470
 80069dc:	08008cb8 	.word	0x08008cb8
			if (si > di) break;			/* No extension */
 80069e0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80069e8:	2be5      	cmp	r3, #229	; 0xe5
 80069ea:	d103      	bne.n	80069f4 <create_name+0x2ec>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2205      	movs	r2, #5
 80069f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 80069f4:	69fb      	ldr	r3, [r7, #28]
 80069f6:	2b08      	cmp	r3, #8
 80069f8:	d104      	bne.n	8006a04 <create_name+0x2fc>
 80069fa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80069fe:	009b      	lsls	r3, r3, #2
 8006a00:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8006a04:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006a08:	f003 030c 	and.w	r3, r3, #12
 8006a0c:	2b0c      	cmp	r3, #12
 8006a0e:	d005      	beq.n	8006a1c <create_name+0x314>
 8006a10:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006a14:	f003 0303 	and.w	r3, r3, #3
 8006a18:	2b03      	cmp	r3, #3
 8006a1a:	d105      	bne.n	8006a28 <create_name+0x320>
 8006a1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a20:	f043 0302 	orr.w	r3, r3, #2
 8006a24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8006a28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a2c:	f003 0302 	and.w	r3, r3, #2
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d117      	bne.n	8006a64 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8006a34:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006a38:	f003 0303 	and.w	r3, r3, #3
 8006a3c:	2b01      	cmp	r3, #1
 8006a3e:	d105      	bne.n	8006a4c <create_name+0x344>
 8006a40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a44:	f043 0310 	orr.w	r3, r3, #16
 8006a48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8006a4c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006a50:	f003 030c 	and.w	r3, r3, #12
 8006a54:	2b04      	cmp	r3, #4
 8006a56:	d105      	bne.n	8006a64 <create_name+0x35c>
 8006a58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a5c:	f043 0308 	orr.w	r3, r3, #8
 8006a60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006a6a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8006a6e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3728      	adds	r7, #40	; 0x28
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}

08006a78 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b086      	sub	sp, #24
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006a8c:	e002      	b.n	8006a94 <follow_path+0x1c>
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	3301      	adds	r3, #1
 8006a92:	603b      	str	r3, [r7, #0]
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	781b      	ldrb	r3, [r3, #0]
 8006a98:	2b2f      	cmp	r3, #47	; 0x2f
 8006a9a:	d0f8      	beq.n	8006a8e <follow_path+0x16>
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	2b5c      	cmp	r3, #92	; 0x5c
 8006aa2:	d0f4      	beq.n	8006a8e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	781b      	ldrb	r3, [r3, #0]
 8006aae:	2b1f      	cmp	r3, #31
 8006ab0:	d80a      	bhi.n	8006ac8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2280      	movs	r2, #128	; 0x80
 8006ab6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8006aba:	2100      	movs	r1, #0
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f7ff f8fd 	bl	8005cbc <dir_sdi>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	75fb      	strb	r3, [r7, #23]
 8006ac6:	e048      	b.n	8006b5a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006ac8:	463b      	mov	r3, r7
 8006aca:	4619      	mov	r1, r3
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f7ff fe1b 	bl	8006708 <create_name>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006ad6:	7dfb      	ldrb	r3, [r7, #23]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d139      	bne.n	8006b50 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f7ff fc5a 	bl	8006396 <dir_find>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006aec:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006aee:	7dfb      	ldrb	r3, [r7, #23]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d00a      	beq.n	8006b0a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006af4:	7dfb      	ldrb	r3, [r7, #23]
 8006af6:	2b04      	cmp	r3, #4
 8006af8:	d12c      	bne.n	8006b54 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006afa:	7afb      	ldrb	r3, [r7, #11]
 8006afc:	f003 0304 	and.w	r3, r3, #4
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d127      	bne.n	8006b54 <follow_path+0xdc>
 8006b04:	2305      	movs	r3, #5
 8006b06:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006b08:	e024      	b.n	8006b54 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006b0a:	7afb      	ldrb	r3, [r7, #11]
 8006b0c:	f003 0304 	and.w	r3, r3, #4
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d121      	bne.n	8006b58 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	799b      	ldrb	r3, [r3, #6]
 8006b18:	f003 0310 	and.w	r3, r3, #16
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d102      	bne.n	8006b26 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006b20:	2305      	movs	r3, #5
 8006b22:	75fb      	strb	r3, [r7, #23]
 8006b24:	e019      	b.n	8006b5a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	695b      	ldr	r3, [r3, #20]
 8006b30:	68fa      	ldr	r2, [r7, #12]
 8006b32:	8992      	ldrh	r2, [r2, #12]
 8006b34:	fbb3 f0f2 	udiv	r0, r3, r2
 8006b38:	fb00 f202 	mul.w	r2, r0, r2
 8006b3c:	1a9b      	subs	r3, r3, r2
 8006b3e:	440b      	add	r3, r1
 8006b40:	4619      	mov	r1, r3
 8006b42:	68f8      	ldr	r0, [r7, #12]
 8006b44:	f7ff fa60 	bl	8006008 <ld_clust>
 8006b48:	4602      	mov	r2, r0
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006b4e:	e7bb      	b.n	8006ac8 <follow_path+0x50>
			if (res != FR_OK) break;
 8006b50:	bf00      	nop
 8006b52:	e002      	b.n	8006b5a <follow_path+0xe2>
				break;
 8006b54:	bf00      	nop
 8006b56:	e000      	b.n	8006b5a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006b58:	bf00      	nop
			}
		}
	}

	return res;
 8006b5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3718      	adds	r7, #24
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}

08006b64 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b087      	sub	sp, #28
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006b6c:	f04f 33ff 	mov.w	r3, #4294967295
 8006b70:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d031      	beq.n	8006bde <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	617b      	str	r3, [r7, #20]
 8006b80:	e002      	b.n	8006b88 <get_ldnumber+0x24>
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	3301      	adds	r3, #1
 8006b86:	617b      	str	r3, [r7, #20]
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	781b      	ldrb	r3, [r3, #0]
 8006b8c:	2b1f      	cmp	r3, #31
 8006b8e:	d903      	bls.n	8006b98 <get_ldnumber+0x34>
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	781b      	ldrb	r3, [r3, #0]
 8006b94:	2b3a      	cmp	r3, #58	; 0x3a
 8006b96:	d1f4      	bne.n	8006b82 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	2b3a      	cmp	r3, #58	; 0x3a
 8006b9e:	d11c      	bne.n	8006bda <get_ldnumber+0x76>
			tp = *path;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	1c5a      	adds	r2, r3, #1
 8006baa:	60fa      	str	r2, [r7, #12]
 8006bac:	781b      	ldrb	r3, [r3, #0]
 8006bae:	3b30      	subs	r3, #48	; 0x30
 8006bb0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	2b09      	cmp	r3, #9
 8006bb6:	d80e      	bhi.n	8006bd6 <get_ldnumber+0x72>
 8006bb8:	68fa      	ldr	r2, [r7, #12]
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d10a      	bne.n	8006bd6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d107      	bne.n	8006bd6 <get_ldnumber+0x72>
					vol = (int)i;
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	3301      	adds	r3, #1
 8006bce:	617b      	str	r3, [r7, #20]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	697a      	ldr	r2, [r7, #20]
 8006bd4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	e002      	b.n	8006be0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006bda:	2300      	movs	r3, #0
 8006bdc:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006bde:	693b      	ldr	r3, [r7, #16]
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	371c      	adds	r7, #28
 8006be4:	46bd      	mov	sp, r7
 8006be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bea:	4770      	bx	lr

08006bec <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b082      	sub	sp, #8
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	70da      	strb	r2, [r3, #3]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f04f 32ff 	mov.w	r2, #4294967295
 8006c02:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006c04:	6839      	ldr	r1, [r7, #0]
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f7fe fc76 	bl	80054f8 <move_window>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d001      	beq.n	8006c16 <check_fs+0x2a>
 8006c12:	2304      	movs	r3, #4
 8006c14:	e038      	b.n	8006c88 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	3338      	adds	r3, #56	; 0x38
 8006c1a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f7fe f9ba 	bl	8004f98 <ld_word>
 8006c24:	4603      	mov	r3, r0
 8006c26:	461a      	mov	r2, r3
 8006c28:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d001      	beq.n	8006c34 <check_fs+0x48>
 8006c30:	2303      	movs	r3, #3
 8006c32:	e029      	b.n	8006c88 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006c3a:	2be9      	cmp	r3, #233	; 0xe9
 8006c3c:	d009      	beq.n	8006c52 <check_fs+0x66>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006c44:	2beb      	cmp	r3, #235	; 0xeb
 8006c46:	d11e      	bne.n	8006c86 <check_fs+0x9a>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006c4e:	2b90      	cmp	r3, #144	; 0x90
 8006c50:	d119      	bne.n	8006c86 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	3338      	adds	r3, #56	; 0x38
 8006c56:	3336      	adds	r3, #54	; 0x36
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f7fe f9b5 	bl	8004fc8 <ld_dword>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006c64:	4a0a      	ldr	r2, [pc, #40]	; (8006c90 <check_fs+0xa4>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d101      	bne.n	8006c6e <check_fs+0x82>
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	e00c      	b.n	8006c88 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	3338      	adds	r3, #56	; 0x38
 8006c72:	3352      	adds	r3, #82	; 0x52
 8006c74:	4618      	mov	r0, r3
 8006c76:	f7fe f9a7 	bl	8004fc8 <ld_dword>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	4a05      	ldr	r2, [pc, #20]	; (8006c94 <check_fs+0xa8>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d101      	bne.n	8006c86 <check_fs+0x9a>
 8006c82:	2300      	movs	r3, #0
 8006c84:	e000      	b.n	8006c88 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006c86:	2302      	movs	r3, #2
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3708      	adds	r7, #8
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}
 8006c90:	00544146 	.word	0x00544146
 8006c94:	33544146 	.word	0x33544146

08006c98 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b096      	sub	sp, #88	; 0x58
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	60f8      	str	r0, [r7, #12]
 8006ca0:	60b9      	str	r1, [r7, #8]
 8006ca2:	4613      	mov	r3, r2
 8006ca4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006cac:	68f8      	ldr	r0, [r7, #12]
 8006cae:	f7ff ff59 	bl	8006b64 <get_ldnumber>
 8006cb2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006cb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	da01      	bge.n	8006cbe <find_volume+0x26>
 8006cba:	230b      	movs	r3, #11
 8006cbc:	e265      	b.n	800718a <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006cbe:	4a9f      	ldr	r2, [pc, #636]	; (8006f3c <find_volume+0x2a4>)
 8006cc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cc6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d101      	bne.n	8006cd2 <find_volume+0x3a>
 8006cce:	230c      	movs	r3, #12
 8006cd0:	e25b      	b.n	800718a <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006cd6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006cd8:	79fb      	ldrb	r3, [r7, #7]
 8006cda:	f023 0301 	bic.w	r3, r3, #1
 8006cde:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ce2:	781b      	ldrb	r3, [r3, #0]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d01a      	beq.n	8006d1e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cea:	785b      	ldrb	r3, [r3, #1]
 8006cec:	4618      	mov	r0, r3
 8006cee:	f7fe f8b5 	bl	8004e5c <disk_status>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006cf8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006cfc:	f003 0301 	and.w	r3, r3, #1
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d10c      	bne.n	8006d1e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006d04:	79fb      	ldrb	r3, [r7, #7]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d007      	beq.n	8006d1a <find_volume+0x82>
 8006d0a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006d0e:	f003 0304 	and.w	r3, r3, #4
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d001      	beq.n	8006d1a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006d16:	230a      	movs	r3, #10
 8006d18:	e237      	b.n	800718a <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	e235      	b.n	800718a <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d20:	2200      	movs	r2, #0
 8006d22:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006d24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d26:	b2da      	uxtb	r2, r3
 8006d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d2a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d2e:	785b      	ldrb	r3, [r3, #1]
 8006d30:	4618      	mov	r0, r3
 8006d32:	f7fe f8ad 	bl	8004e90 <disk_initialize>
 8006d36:	4603      	mov	r3, r0
 8006d38:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006d3c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006d40:	f003 0301 	and.w	r3, r3, #1
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d001      	beq.n	8006d4c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006d48:	2303      	movs	r3, #3
 8006d4a:	e21e      	b.n	800718a <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006d4c:	79fb      	ldrb	r3, [r7, #7]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d007      	beq.n	8006d62 <find_volume+0xca>
 8006d52:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006d56:	f003 0304 	and.w	r3, r3, #4
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d001      	beq.n	8006d62 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8006d5e:	230a      	movs	r3, #10
 8006d60:	e213      	b.n	800718a <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8006d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d64:	7858      	ldrb	r0, [r3, #1]
 8006d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d68:	330c      	adds	r3, #12
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	2102      	movs	r1, #2
 8006d6e:	f7fe f8f5 	bl	8004f5c <disk_ioctl>
 8006d72:	4603      	mov	r3, r0
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d001      	beq.n	8006d7c <find_volume+0xe4>
 8006d78:	2301      	movs	r3, #1
 8006d7a:	e206      	b.n	800718a <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8006d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d7e:	899b      	ldrh	r3, [r3, #12]
 8006d80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d84:	d80d      	bhi.n	8006da2 <find_volume+0x10a>
 8006d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d88:	899b      	ldrh	r3, [r3, #12]
 8006d8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d8e:	d308      	bcc.n	8006da2 <find_volume+0x10a>
 8006d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d92:	899b      	ldrh	r3, [r3, #12]
 8006d94:	461a      	mov	r2, r3
 8006d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d98:	899b      	ldrh	r3, [r3, #12]
 8006d9a:	3b01      	subs	r3, #1
 8006d9c:	4013      	ands	r3, r2
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d001      	beq.n	8006da6 <find_volume+0x10e>
 8006da2:	2301      	movs	r3, #1
 8006da4:	e1f1      	b.n	800718a <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8006da6:	2300      	movs	r3, #0
 8006da8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006daa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006dac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006dae:	f7ff ff1d 	bl	8006bec <check_fs>
 8006db2:	4603      	mov	r3, r0
 8006db4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006db8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006dbc:	2b02      	cmp	r3, #2
 8006dbe:	d149      	bne.n	8006e54 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	643b      	str	r3, [r7, #64]	; 0x40
 8006dc4:	e01e      	b.n	8006e04 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8006dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dc8:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006dcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dce:	011b      	lsls	r3, r3, #4
 8006dd0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006dd4:	4413      	add	r3, r2
 8006dd6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dda:	3304      	adds	r3, #4
 8006ddc:	781b      	ldrb	r3, [r3, #0]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d006      	beq.n	8006df0 <find_volume+0x158>
 8006de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de4:	3308      	adds	r3, #8
 8006de6:	4618      	mov	r0, r3
 8006de8:	f7fe f8ee 	bl	8004fc8 <ld_dword>
 8006dec:	4602      	mov	r2, r0
 8006dee:	e000      	b.n	8006df2 <find_volume+0x15a>
 8006df0:	2200      	movs	r2, #0
 8006df2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006df4:	009b      	lsls	r3, r3, #2
 8006df6:	3358      	adds	r3, #88	; 0x58
 8006df8:	443b      	add	r3, r7
 8006dfa:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006dfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e00:	3301      	adds	r3, #1
 8006e02:	643b      	str	r3, [r7, #64]	; 0x40
 8006e04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e06:	2b03      	cmp	r3, #3
 8006e08:	d9dd      	bls.n	8006dc6 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006e0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d002      	beq.n	8006e1a <find_volume+0x182>
 8006e14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e16:	3b01      	subs	r3, #1
 8006e18:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006e1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e1c:	009b      	lsls	r3, r3, #2
 8006e1e:	3358      	adds	r3, #88	; 0x58
 8006e20:	443b      	add	r3, r7
 8006e22:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006e26:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006e28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d005      	beq.n	8006e3a <find_volume+0x1a2>
 8006e2e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006e30:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006e32:	f7ff fedb 	bl	8006bec <check_fs>
 8006e36:	4603      	mov	r3, r0
 8006e38:	e000      	b.n	8006e3c <find_volume+0x1a4>
 8006e3a:	2303      	movs	r3, #3
 8006e3c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006e40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	d905      	bls.n	8006e54 <find_volume+0x1bc>
 8006e48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e4a:	3301      	adds	r3, #1
 8006e4c:	643b      	str	r3, [r7, #64]	; 0x40
 8006e4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e50:	2b03      	cmp	r3, #3
 8006e52:	d9e2      	bls.n	8006e1a <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006e54:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006e58:	2b04      	cmp	r3, #4
 8006e5a:	d101      	bne.n	8006e60 <find_volume+0x1c8>
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	e194      	b.n	800718a <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006e60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d901      	bls.n	8006e6c <find_volume+0x1d4>
 8006e68:	230d      	movs	r3, #13
 8006e6a:	e18e      	b.n	800718a <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e6e:	3338      	adds	r3, #56	; 0x38
 8006e70:	330b      	adds	r3, #11
 8006e72:	4618      	mov	r0, r3
 8006e74:	f7fe f890 	bl	8004f98 <ld_word>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e7e:	899b      	ldrh	r3, [r3, #12]
 8006e80:	429a      	cmp	r2, r3
 8006e82:	d001      	beq.n	8006e88 <find_volume+0x1f0>
 8006e84:	230d      	movs	r3, #13
 8006e86:	e180      	b.n	800718a <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e8a:	3338      	adds	r3, #56	; 0x38
 8006e8c:	3316      	adds	r3, #22
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f7fe f882 	bl	8004f98 <ld_word>
 8006e94:	4603      	mov	r3, r0
 8006e96:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006e98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d106      	bne.n	8006eac <find_volume+0x214>
 8006e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ea0:	3338      	adds	r3, #56	; 0x38
 8006ea2:	3324      	adds	r3, #36	; 0x24
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	f7fe f88f 	bl	8004fc8 <ld_dword>
 8006eaa:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8006eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006eb0:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb4:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8006eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eba:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ebe:	789b      	ldrb	r3, [r3, #2]
 8006ec0:	2b01      	cmp	r3, #1
 8006ec2:	d005      	beq.n	8006ed0 <find_volume+0x238>
 8006ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec6:	789b      	ldrb	r3, [r3, #2]
 8006ec8:	2b02      	cmp	r3, #2
 8006eca:	d001      	beq.n	8006ed0 <find_volume+0x238>
 8006ecc:	230d      	movs	r3, #13
 8006ece:	e15c      	b.n	800718a <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed2:	789b      	ldrb	r3, [r3, #2]
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ed8:	fb02 f303 	mul.w	r3, r2, r3
 8006edc:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ee4:	b29a      	uxth	r2, r3
 8006ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eec:	895b      	ldrh	r3, [r3, #10]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d008      	beq.n	8006f04 <find_volume+0x26c>
 8006ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef4:	895b      	ldrh	r3, [r3, #10]
 8006ef6:	461a      	mov	r2, r3
 8006ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006efa:	895b      	ldrh	r3, [r3, #10]
 8006efc:	3b01      	subs	r3, #1
 8006efe:	4013      	ands	r3, r2
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d001      	beq.n	8006f08 <find_volume+0x270>
 8006f04:	230d      	movs	r3, #13
 8006f06:	e140      	b.n	800718a <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f0a:	3338      	adds	r3, #56	; 0x38
 8006f0c:	3311      	adds	r3, #17
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f7fe f842 	bl	8004f98 <ld_word>
 8006f14:	4603      	mov	r3, r0
 8006f16:	461a      	mov	r2, r3
 8006f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f1a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f1e:	891b      	ldrh	r3, [r3, #8]
 8006f20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f22:	8992      	ldrh	r2, [r2, #12]
 8006f24:	0952      	lsrs	r2, r2, #5
 8006f26:	b292      	uxth	r2, r2
 8006f28:	fbb3 f1f2 	udiv	r1, r3, r2
 8006f2c:	fb01 f202 	mul.w	r2, r1, r2
 8006f30:	1a9b      	subs	r3, r3, r2
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d003      	beq.n	8006f40 <find_volume+0x2a8>
 8006f38:	230d      	movs	r3, #13
 8006f3a:	e126      	b.n	800718a <find_volume+0x4f2>
 8006f3c:	200012e8 	.word	0x200012e8

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f42:	3338      	adds	r3, #56	; 0x38
 8006f44:	3313      	adds	r3, #19
 8006f46:	4618      	mov	r0, r3
 8006f48:	f7fe f826 	bl	8004f98 <ld_word>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006f50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d106      	bne.n	8006f64 <find_volume+0x2cc>
 8006f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f58:	3338      	adds	r3, #56	; 0x38
 8006f5a:	3320      	adds	r3, #32
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f7fe f833 	bl	8004fc8 <ld_dword>
 8006f62:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f66:	3338      	adds	r3, #56	; 0x38
 8006f68:	330e      	adds	r3, #14
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f7fe f814 	bl	8004f98 <ld_word>
 8006f70:	4603      	mov	r3, r0
 8006f72:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006f74:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d101      	bne.n	8006f7e <find_volume+0x2e6>
 8006f7a:	230d      	movs	r3, #13
 8006f7c:	e105      	b.n	800718a <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006f7e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006f80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f82:	4413      	add	r3, r2
 8006f84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f86:	8911      	ldrh	r1, [r2, #8]
 8006f88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f8a:	8992      	ldrh	r2, [r2, #12]
 8006f8c:	0952      	lsrs	r2, r2, #5
 8006f8e:	b292      	uxth	r2, r2
 8006f90:	fbb1 f2f2 	udiv	r2, r1, r2
 8006f94:	b292      	uxth	r2, r2
 8006f96:	4413      	add	r3, r2
 8006f98:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006f9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f9e:	429a      	cmp	r2, r3
 8006fa0:	d201      	bcs.n	8006fa6 <find_volume+0x30e>
 8006fa2:	230d      	movs	r3, #13
 8006fa4:	e0f1      	b.n	800718a <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006fa6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006faa:	1ad3      	subs	r3, r2, r3
 8006fac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006fae:	8952      	ldrh	r2, [r2, #10]
 8006fb0:	fbb3 f3f2 	udiv	r3, r3, r2
 8006fb4:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d101      	bne.n	8006fc0 <find_volume+0x328>
 8006fbc:	230d      	movs	r3, #13
 8006fbe:	e0e4      	b.n	800718a <find_volume+0x4f2>
		fmt = FS_FAT32;
 8006fc0:	2303      	movs	r3, #3
 8006fc2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d802      	bhi.n	8006fd6 <find_volume+0x33e>
 8006fd0:	2302      	movs	r3, #2
 8006fd2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd8:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d802      	bhi.n	8006fe6 <find_volume+0x34e>
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe8:	1c9a      	adds	r2, r3, #2
 8006fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fec:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8006fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ff0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006ff2:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006ff4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006ff6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ff8:	441a      	add	r2, r3
 8006ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ffc:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8006ffe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007002:	441a      	add	r2, r3
 8007004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007006:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8007008:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800700c:	2b03      	cmp	r3, #3
 800700e:	d11e      	bne.n	800704e <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007012:	3338      	adds	r3, #56	; 0x38
 8007014:	332a      	adds	r3, #42	; 0x2a
 8007016:	4618      	mov	r0, r3
 8007018:	f7fd ffbe 	bl	8004f98 <ld_word>
 800701c:	4603      	mov	r3, r0
 800701e:	2b00      	cmp	r3, #0
 8007020:	d001      	beq.n	8007026 <find_volume+0x38e>
 8007022:	230d      	movs	r3, #13
 8007024:	e0b1      	b.n	800718a <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007028:	891b      	ldrh	r3, [r3, #8]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d001      	beq.n	8007032 <find_volume+0x39a>
 800702e:	230d      	movs	r3, #13
 8007030:	e0ab      	b.n	800718a <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007034:	3338      	adds	r3, #56	; 0x38
 8007036:	332c      	adds	r3, #44	; 0x2c
 8007038:	4618      	mov	r0, r3
 800703a:	f7fd ffc5 	bl	8004fc8 <ld_dword>
 800703e:	4602      	mov	r2, r0
 8007040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007042:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007046:	69db      	ldr	r3, [r3, #28]
 8007048:	009b      	lsls	r3, r3, #2
 800704a:	647b      	str	r3, [r7, #68]	; 0x44
 800704c:	e01f      	b.n	800708e <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800704e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007050:	891b      	ldrh	r3, [r3, #8]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d101      	bne.n	800705a <find_volume+0x3c2>
 8007056:	230d      	movs	r3, #13
 8007058:	e097      	b.n	800718a <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800705a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800705c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800705e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007060:	441a      	add	r2, r3
 8007062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007064:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007066:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800706a:	2b02      	cmp	r3, #2
 800706c:	d103      	bne.n	8007076 <find_volume+0x3de>
 800706e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007070:	69db      	ldr	r3, [r3, #28]
 8007072:	005b      	lsls	r3, r3, #1
 8007074:	e00a      	b.n	800708c <find_volume+0x3f4>
 8007076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007078:	69da      	ldr	r2, [r3, #28]
 800707a:	4613      	mov	r3, r2
 800707c:	005b      	lsls	r3, r3, #1
 800707e:	4413      	add	r3, r2
 8007080:	085a      	lsrs	r2, r3, #1
 8007082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007084:	69db      	ldr	r3, [r3, #28]
 8007086:	f003 0301 	and.w	r3, r3, #1
 800708a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800708c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800708e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007090:	6a1a      	ldr	r2, [r3, #32]
 8007092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007094:	899b      	ldrh	r3, [r3, #12]
 8007096:	4619      	mov	r1, r3
 8007098:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800709a:	440b      	add	r3, r1
 800709c:	3b01      	subs	r3, #1
 800709e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80070a0:	8989      	ldrh	r1, [r1, #12]
 80070a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80070a6:	429a      	cmp	r2, r3
 80070a8:	d201      	bcs.n	80070ae <find_volume+0x416>
 80070aa:	230d      	movs	r3, #13
 80070ac:	e06d      	b.n	800718a <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80070ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070b0:	f04f 32ff 	mov.w	r2, #4294967295
 80070b4:	619a      	str	r2, [r3, #24]
 80070b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070b8:	699a      	ldr	r2, [r3, #24]
 80070ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070bc:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80070be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070c0:	2280      	movs	r2, #128	; 0x80
 80070c2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80070c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80070c8:	2b03      	cmp	r3, #3
 80070ca:	d149      	bne.n	8007160 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80070cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ce:	3338      	adds	r3, #56	; 0x38
 80070d0:	3330      	adds	r3, #48	; 0x30
 80070d2:	4618      	mov	r0, r3
 80070d4:	f7fd ff60 	bl	8004f98 <ld_word>
 80070d8:	4603      	mov	r3, r0
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d140      	bne.n	8007160 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 80070de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070e0:	3301      	adds	r3, #1
 80070e2:	4619      	mov	r1, r3
 80070e4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80070e6:	f7fe fa07 	bl	80054f8 <move_window>
 80070ea:	4603      	mov	r3, r0
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d137      	bne.n	8007160 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 80070f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070f2:	2200      	movs	r2, #0
 80070f4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80070f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070f8:	3338      	adds	r3, #56	; 0x38
 80070fa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80070fe:	4618      	mov	r0, r3
 8007100:	f7fd ff4a 	bl	8004f98 <ld_word>
 8007104:	4603      	mov	r3, r0
 8007106:	461a      	mov	r2, r3
 8007108:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800710c:	429a      	cmp	r2, r3
 800710e:	d127      	bne.n	8007160 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007112:	3338      	adds	r3, #56	; 0x38
 8007114:	4618      	mov	r0, r3
 8007116:	f7fd ff57 	bl	8004fc8 <ld_dword>
 800711a:	4603      	mov	r3, r0
 800711c:	4a1d      	ldr	r2, [pc, #116]	; (8007194 <find_volume+0x4fc>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d11e      	bne.n	8007160 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007124:	3338      	adds	r3, #56	; 0x38
 8007126:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800712a:	4618      	mov	r0, r3
 800712c:	f7fd ff4c 	bl	8004fc8 <ld_dword>
 8007130:	4603      	mov	r3, r0
 8007132:	4a19      	ldr	r2, [pc, #100]	; (8007198 <find_volume+0x500>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d113      	bne.n	8007160 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800713a:	3338      	adds	r3, #56	; 0x38
 800713c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8007140:	4618      	mov	r0, r3
 8007142:	f7fd ff41 	bl	8004fc8 <ld_dword>
 8007146:	4602      	mov	r2, r0
 8007148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800714a:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800714c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800714e:	3338      	adds	r3, #56	; 0x38
 8007150:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8007154:	4618      	mov	r0, r3
 8007156:	f7fd ff37 	bl	8004fc8 <ld_dword>
 800715a:	4602      	mov	r2, r0
 800715c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800715e:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007162:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8007166:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007168:	4b0c      	ldr	r3, [pc, #48]	; (800719c <find_volume+0x504>)
 800716a:	881b      	ldrh	r3, [r3, #0]
 800716c:	3301      	adds	r3, #1
 800716e:	b29a      	uxth	r2, r3
 8007170:	4b0a      	ldr	r3, [pc, #40]	; (800719c <find_volume+0x504>)
 8007172:	801a      	strh	r2, [r3, #0]
 8007174:	4b09      	ldr	r3, [pc, #36]	; (800719c <find_volume+0x504>)
 8007176:	881a      	ldrh	r2, [r3, #0]
 8007178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800717a:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800717c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800717e:	4a08      	ldr	r2, [pc, #32]	; (80071a0 <find_volume+0x508>)
 8007180:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007182:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007184:	f7fe f950 	bl	8005428 <clear_lock>
#endif
	return FR_OK;
 8007188:	2300      	movs	r3, #0
}
 800718a:	4618      	mov	r0, r3
 800718c:	3758      	adds	r7, #88	; 0x58
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
 8007192:	bf00      	nop
 8007194:	41615252 	.word	0x41615252
 8007198:	61417272 	.word	0x61417272
 800719c:	200012ec 	.word	0x200012ec
 80071a0:	20001310 	.word	0x20001310

080071a4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b084      	sub	sp, #16
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80071ae:	2309      	movs	r3, #9
 80071b0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d01c      	beq.n	80071f2 <validate+0x4e>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d018      	beq.n	80071f2 <validate+0x4e>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	781b      	ldrb	r3, [r3, #0]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d013      	beq.n	80071f2 <validate+0x4e>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	889a      	ldrh	r2, [r3, #4]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	88db      	ldrh	r3, [r3, #6]
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d10c      	bne.n	80071f2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	785b      	ldrb	r3, [r3, #1]
 80071de:	4618      	mov	r0, r3
 80071e0:	f7fd fe3c 	bl	8004e5c <disk_status>
 80071e4:	4603      	mov	r3, r0
 80071e6:	f003 0301 	and.w	r3, r3, #1
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d101      	bne.n	80071f2 <validate+0x4e>
			res = FR_OK;
 80071ee:	2300      	movs	r3, #0
 80071f0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80071f2:	7bfb      	ldrb	r3, [r7, #15]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d102      	bne.n	80071fe <validate+0x5a>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	e000      	b.n	8007200 <validate+0x5c>
 80071fe:	2300      	movs	r3, #0
 8007200:	683a      	ldr	r2, [r7, #0]
 8007202:	6013      	str	r3, [r2, #0]
	return res;
 8007204:	7bfb      	ldrb	r3, [r7, #15]
}
 8007206:	4618      	mov	r0, r3
 8007208:	3710      	adds	r7, #16
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}
	...

08007210 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b088      	sub	sp, #32
 8007214:	af00      	add	r7, sp, #0
 8007216:	60f8      	str	r0, [r7, #12]
 8007218:	60b9      	str	r1, [r7, #8]
 800721a:	4613      	mov	r3, r2
 800721c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007222:	f107 0310 	add.w	r3, r7, #16
 8007226:	4618      	mov	r0, r3
 8007228:	f7ff fc9c 	bl	8006b64 <get_ldnumber>
 800722c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800722e:	69fb      	ldr	r3, [r7, #28]
 8007230:	2b00      	cmp	r3, #0
 8007232:	da01      	bge.n	8007238 <f_mount+0x28>
 8007234:	230b      	movs	r3, #11
 8007236:	e02b      	b.n	8007290 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007238:	4a17      	ldr	r2, [pc, #92]	; (8007298 <f_mount+0x88>)
 800723a:	69fb      	ldr	r3, [r7, #28]
 800723c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007240:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007242:	69bb      	ldr	r3, [r7, #24]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d005      	beq.n	8007254 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007248:	69b8      	ldr	r0, [r7, #24]
 800724a:	f7fe f8ed 	bl	8005428 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800724e:	69bb      	ldr	r3, [r7, #24]
 8007250:	2200      	movs	r2, #0
 8007252:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d002      	beq.n	8007260 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2200      	movs	r2, #0
 800725e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007260:	68fa      	ldr	r2, [r7, #12]
 8007262:	490d      	ldr	r1, [pc, #52]	; (8007298 <f_mount+0x88>)
 8007264:	69fb      	ldr	r3, [r7, #28]
 8007266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d002      	beq.n	8007276 <f_mount+0x66>
 8007270:	79fb      	ldrb	r3, [r7, #7]
 8007272:	2b01      	cmp	r3, #1
 8007274:	d001      	beq.n	800727a <f_mount+0x6a>
 8007276:	2300      	movs	r3, #0
 8007278:	e00a      	b.n	8007290 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800727a:	f107 010c 	add.w	r1, r7, #12
 800727e:	f107 0308 	add.w	r3, r7, #8
 8007282:	2200      	movs	r2, #0
 8007284:	4618      	mov	r0, r3
 8007286:	f7ff fd07 	bl	8006c98 <find_volume>
 800728a:	4603      	mov	r3, r0
 800728c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800728e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007290:	4618      	mov	r0, r3
 8007292:	3720      	adds	r7, #32
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}
 8007298:	200012e8 	.word	0x200012e8

0800729c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b09a      	sub	sp, #104	; 0x68
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	60f8      	str	r0, [r7, #12]
 80072a4:	60b9      	str	r1, [r7, #8]
 80072a6:	4613      	mov	r3, r2
 80072a8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d101      	bne.n	80072b4 <f_open+0x18>
 80072b0:	2309      	movs	r3, #9
 80072b2:	e1bb      	b.n	800762c <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80072b4:	79fb      	ldrb	r3, [r7, #7]
 80072b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80072ba:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80072bc:	79fa      	ldrb	r2, [r7, #7]
 80072be:	f107 0114 	add.w	r1, r7, #20
 80072c2:	f107 0308 	add.w	r3, r7, #8
 80072c6:	4618      	mov	r0, r3
 80072c8:	f7ff fce6 	bl	8006c98 <find_volume>
 80072cc:	4603      	mov	r3, r0
 80072ce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 80072d2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	f040 819f 	bne.w	800761a <f_open+0x37e>
		dj.obj.fs = fs;
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80072e0:	68ba      	ldr	r2, [r7, #8]
 80072e2:	f107 0318 	add.w	r3, r7, #24
 80072e6:	4611      	mov	r1, r2
 80072e8:	4618      	mov	r0, r3
 80072ea:	f7ff fbc5 	bl	8006a78 <follow_path>
 80072ee:	4603      	mov	r3, r0
 80072f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80072f4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d11a      	bne.n	8007332 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80072fc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007300:	b25b      	sxtb	r3, r3
 8007302:	2b00      	cmp	r3, #0
 8007304:	da03      	bge.n	800730e <f_open+0x72>
				res = FR_INVALID_NAME;
 8007306:	2306      	movs	r3, #6
 8007308:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800730c:	e011      	b.n	8007332 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800730e:	79fb      	ldrb	r3, [r7, #7]
 8007310:	f023 0301 	bic.w	r3, r3, #1
 8007314:	2b00      	cmp	r3, #0
 8007316:	bf14      	ite	ne
 8007318:	2301      	movne	r3, #1
 800731a:	2300      	moveq	r3, #0
 800731c:	b2db      	uxtb	r3, r3
 800731e:	461a      	mov	r2, r3
 8007320:	f107 0318 	add.w	r3, r7, #24
 8007324:	4611      	mov	r1, r2
 8007326:	4618      	mov	r0, r3
 8007328:	f7fd ff36 	bl	8005198 <chk_lock>
 800732c:	4603      	mov	r3, r0
 800732e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007332:	79fb      	ldrb	r3, [r7, #7]
 8007334:	f003 031c 	and.w	r3, r3, #28
 8007338:	2b00      	cmp	r3, #0
 800733a:	d07f      	beq.n	800743c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800733c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007340:	2b00      	cmp	r3, #0
 8007342:	d017      	beq.n	8007374 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007344:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007348:	2b04      	cmp	r3, #4
 800734a:	d10e      	bne.n	800736a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800734c:	f7fd ff80 	bl	8005250 <enq_lock>
 8007350:	4603      	mov	r3, r0
 8007352:	2b00      	cmp	r3, #0
 8007354:	d006      	beq.n	8007364 <f_open+0xc8>
 8007356:	f107 0318 	add.w	r3, r7, #24
 800735a:	4618      	mov	r0, r3
 800735c:	f7ff f8dc 	bl	8006518 <dir_register>
 8007360:	4603      	mov	r3, r0
 8007362:	e000      	b.n	8007366 <f_open+0xca>
 8007364:	2312      	movs	r3, #18
 8007366:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800736a:	79fb      	ldrb	r3, [r7, #7]
 800736c:	f043 0308 	orr.w	r3, r3, #8
 8007370:	71fb      	strb	r3, [r7, #7]
 8007372:	e010      	b.n	8007396 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007374:	7fbb      	ldrb	r3, [r7, #30]
 8007376:	f003 0311 	and.w	r3, r3, #17
 800737a:	2b00      	cmp	r3, #0
 800737c:	d003      	beq.n	8007386 <f_open+0xea>
					res = FR_DENIED;
 800737e:	2307      	movs	r3, #7
 8007380:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007384:	e007      	b.n	8007396 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007386:	79fb      	ldrb	r3, [r7, #7]
 8007388:	f003 0304 	and.w	r3, r3, #4
 800738c:	2b00      	cmp	r3, #0
 800738e:	d002      	beq.n	8007396 <f_open+0xfa>
 8007390:	2308      	movs	r3, #8
 8007392:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007396:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800739a:	2b00      	cmp	r3, #0
 800739c:	d168      	bne.n	8007470 <f_open+0x1d4>
 800739e:	79fb      	ldrb	r3, [r7, #7]
 80073a0:	f003 0308 	and.w	r3, r3, #8
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d063      	beq.n	8007470 <f_open+0x1d4>
				dw = GET_FATTIME();
 80073a8:	f7fd fce8 	bl	8004d7c <get_fattime>
 80073ac:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80073ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073b0:	330e      	adds	r3, #14
 80073b2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80073b4:	4618      	mov	r0, r3
 80073b6:	f7fd fe45 	bl	8005044 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80073ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073bc:	3316      	adds	r3, #22
 80073be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80073c0:	4618      	mov	r0, r3
 80073c2:	f7fd fe3f 	bl	8005044 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80073c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073c8:	330b      	adds	r3, #11
 80073ca:	2220      	movs	r2, #32
 80073cc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80073d2:	4611      	mov	r1, r2
 80073d4:	4618      	mov	r0, r3
 80073d6:	f7fe fe17 	bl	8006008 <ld_clust>
 80073da:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80073e0:	2200      	movs	r2, #0
 80073e2:	4618      	mov	r0, r3
 80073e4:	f7fe fe2f 	bl	8006046 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80073e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ea:	331c      	adds	r3, #28
 80073ec:	2100      	movs	r1, #0
 80073ee:	4618      	mov	r0, r3
 80073f0:	f7fd fe28 	bl	8005044 <st_dword>
					fs->wflag = 1;
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	2201      	movs	r2, #1
 80073f8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80073fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d037      	beq.n	8007470 <f_open+0x1d4>
						dw = fs->winsect;
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007404:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8007406:	f107 0318 	add.w	r3, r7, #24
 800740a:	2200      	movs	r2, #0
 800740c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800740e:	4618      	mov	r0, r3
 8007410:	f7fe fb1f 	bl	8005a52 <remove_chain>
 8007414:	4603      	mov	r3, r0
 8007416:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800741a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800741e:	2b00      	cmp	r3, #0
 8007420:	d126      	bne.n	8007470 <f_open+0x1d4>
							res = move_window(fs, dw);
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007426:	4618      	mov	r0, r3
 8007428:	f7fe f866 	bl	80054f8 <move_window>
 800742c:	4603      	mov	r3, r0
 800742e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007436:	3a01      	subs	r2, #1
 8007438:	615a      	str	r2, [r3, #20]
 800743a:	e019      	b.n	8007470 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800743c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007440:	2b00      	cmp	r3, #0
 8007442:	d115      	bne.n	8007470 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007444:	7fbb      	ldrb	r3, [r7, #30]
 8007446:	f003 0310 	and.w	r3, r3, #16
 800744a:	2b00      	cmp	r3, #0
 800744c:	d003      	beq.n	8007456 <f_open+0x1ba>
					res = FR_NO_FILE;
 800744e:	2304      	movs	r3, #4
 8007450:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007454:	e00c      	b.n	8007470 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007456:	79fb      	ldrb	r3, [r7, #7]
 8007458:	f003 0302 	and.w	r3, r3, #2
 800745c:	2b00      	cmp	r3, #0
 800745e:	d007      	beq.n	8007470 <f_open+0x1d4>
 8007460:	7fbb      	ldrb	r3, [r7, #30]
 8007462:	f003 0301 	and.w	r3, r3, #1
 8007466:	2b00      	cmp	r3, #0
 8007468:	d002      	beq.n	8007470 <f_open+0x1d4>
						res = FR_DENIED;
 800746a:	2307      	movs	r3, #7
 800746c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8007470:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007474:	2b00      	cmp	r3, #0
 8007476:	d128      	bne.n	80074ca <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007478:	79fb      	ldrb	r3, [r7, #7]
 800747a:	f003 0308 	and.w	r3, r3, #8
 800747e:	2b00      	cmp	r3, #0
 8007480:	d003      	beq.n	800748a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8007482:	79fb      	ldrb	r3, [r7, #7]
 8007484:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007488:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8007492:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007498:	79fb      	ldrb	r3, [r7, #7]
 800749a:	f023 0301 	bic.w	r3, r3, #1
 800749e:	2b00      	cmp	r3, #0
 80074a0:	bf14      	ite	ne
 80074a2:	2301      	movne	r3, #1
 80074a4:	2300      	moveq	r3, #0
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	461a      	mov	r2, r3
 80074aa:	f107 0318 	add.w	r3, r7, #24
 80074ae:	4611      	mov	r1, r2
 80074b0:	4618      	mov	r0, r3
 80074b2:	f7fd feef 	bl	8005294 <inc_lock>
 80074b6:	4602      	mov	r2, r0
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	691b      	ldr	r3, [r3, #16]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d102      	bne.n	80074ca <f_open+0x22e>
 80074c4:	2302      	movs	r3, #2
 80074c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80074ca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	f040 80a3 	bne.w	800761a <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074d8:	4611      	mov	r1, r2
 80074da:	4618      	mov	r0, r3
 80074dc:	f7fe fd94 	bl	8006008 <ld_clust>
 80074e0:	4602      	mov	r2, r0
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80074e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e8:	331c      	adds	r3, #28
 80074ea:	4618      	mov	r0, r3
 80074ec:	f7fd fd6c 	bl	8004fc8 <ld_dword>
 80074f0:	4602      	mov	r2, r0
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2200      	movs	r2, #0
 80074fa:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80074fc:	697a      	ldr	r2, [r7, #20]
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	88da      	ldrh	r2, [r3, #6]
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	79fa      	ldrb	r2, [r7, #7]
 800750e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2200      	movs	r2, #0
 8007514:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2200      	movs	r2, #0
 800751a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2200      	movs	r2, #0
 8007520:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	3330      	adds	r3, #48	; 0x30
 8007526:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800752a:	2100      	movs	r1, #0
 800752c:	4618      	mov	r0, r3
 800752e:	f7fd fdd6 	bl	80050de <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007532:	79fb      	ldrb	r3, [r7, #7]
 8007534:	f003 0320 	and.w	r3, r3, #32
 8007538:	2b00      	cmp	r3, #0
 800753a:	d06e      	beq.n	800761a <f_open+0x37e>
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	68db      	ldr	r3, [r3, #12]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d06a      	beq.n	800761a <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	68da      	ldr	r2, [r3, #12]
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	895b      	ldrh	r3, [r3, #10]
 8007550:	461a      	mov	r2, r3
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	899b      	ldrh	r3, [r3, #12]
 8007556:	fb02 f303 	mul.w	r3, r2, r3
 800755a:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	689b      	ldr	r3, [r3, #8]
 8007560:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	68db      	ldr	r3, [r3, #12]
 8007566:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007568:	e016      	b.n	8007598 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800756e:	4618      	mov	r0, r3
 8007570:	f7fe f87f 	bl	8005672 <get_fat>
 8007574:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8007576:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007578:	2b01      	cmp	r3, #1
 800757a:	d802      	bhi.n	8007582 <f_open+0x2e6>
 800757c:	2302      	movs	r3, #2
 800757e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007582:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007588:	d102      	bne.n	8007590 <f_open+0x2f4>
 800758a:	2301      	movs	r3, #1
 800758c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007590:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007592:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007594:	1ad3      	subs	r3, r2, r3
 8007596:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007598:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800759c:	2b00      	cmp	r3, #0
 800759e:	d103      	bne.n	80075a8 <f_open+0x30c>
 80075a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80075a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d8e0      	bhi.n	800756a <f_open+0x2ce>
				}
				fp->clust = clst;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80075ac:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80075ae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d131      	bne.n	800761a <f_open+0x37e>
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	899b      	ldrh	r3, [r3, #12]
 80075ba:	461a      	mov	r2, r3
 80075bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80075be:	fbb3 f1f2 	udiv	r1, r3, r2
 80075c2:	fb01 f202 	mul.w	r2, r1, r2
 80075c6:	1a9b      	subs	r3, r3, r2
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d026      	beq.n	800761a <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80075d0:	4618      	mov	r0, r3
 80075d2:	f7fe f82f 	bl	8005634 <clust2sect>
 80075d6:	64f8      	str	r0, [r7, #76]	; 0x4c
 80075d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d103      	bne.n	80075e6 <f_open+0x34a>
						res = FR_INT_ERR;
 80075de:	2302      	movs	r3, #2
 80075e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80075e4:	e019      	b.n	800761a <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	899b      	ldrh	r3, [r3, #12]
 80075ea:	461a      	mov	r2, r3
 80075ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80075ee:	fbb3 f2f2 	udiv	r2, r3, r2
 80075f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075f4:	441a      	add	r2, r3
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	7858      	ldrb	r0, [r3, #1]
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	6a1a      	ldr	r2, [r3, #32]
 8007608:	2301      	movs	r3, #1
 800760a:	f7fd fc67 	bl	8004edc <disk_read>
 800760e:	4603      	mov	r3, r0
 8007610:	2b00      	cmp	r3, #0
 8007612:	d002      	beq.n	800761a <f_open+0x37e>
 8007614:	2301      	movs	r3, #1
 8007616:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800761a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800761e:	2b00      	cmp	r3, #0
 8007620:	d002      	beq.n	8007628 <f_open+0x38c>
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2200      	movs	r2, #0
 8007626:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007628:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800762c:	4618      	mov	r0, r3
 800762e:	3768      	adds	r7, #104	; 0x68
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}

08007634 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b08e      	sub	sp, #56	; 0x38
 8007638:	af00      	add	r7, sp, #0
 800763a:	60f8      	str	r0, [r7, #12]
 800763c:	60b9      	str	r1, [r7, #8]
 800763e:	607a      	str	r2, [r7, #4]
 8007640:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	2200      	movs	r2, #0
 800764a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f107 0214 	add.w	r2, r7, #20
 8007652:	4611      	mov	r1, r2
 8007654:	4618      	mov	r0, r3
 8007656:	f7ff fda5 	bl	80071a4 <validate>
 800765a:	4603      	mov	r3, r0
 800765c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007660:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007664:	2b00      	cmp	r3, #0
 8007666:	d107      	bne.n	8007678 <f_read+0x44>
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	7d5b      	ldrb	r3, [r3, #21]
 800766c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007670:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007674:	2b00      	cmp	r3, #0
 8007676:	d002      	beq.n	800767e <f_read+0x4a>
 8007678:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800767c:	e135      	b.n	80078ea <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	7d1b      	ldrb	r3, [r3, #20]
 8007682:	f003 0301 	and.w	r3, r3, #1
 8007686:	2b00      	cmp	r3, #0
 8007688:	d101      	bne.n	800768e <f_read+0x5a>
 800768a:	2307      	movs	r3, #7
 800768c:	e12d      	b.n	80078ea <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	68da      	ldr	r2, [r3, #12]
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	699b      	ldr	r3, [r3, #24]
 8007696:	1ad3      	subs	r3, r2, r3
 8007698:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800769a:	687a      	ldr	r2, [r7, #4]
 800769c:	6a3b      	ldr	r3, [r7, #32]
 800769e:	429a      	cmp	r2, r3
 80076a0:	f240 811e 	bls.w	80078e0 <f_read+0x2ac>
 80076a4:	6a3b      	ldr	r3, [r7, #32]
 80076a6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80076a8:	e11a      	b.n	80078e0 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	699b      	ldr	r3, [r3, #24]
 80076ae:	697a      	ldr	r2, [r7, #20]
 80076b0:	8992      	ldrh	r2, [r2, #12]
 80076b2:	fbb3 f1f2 	udiv	r1, r3, r2
 80076b6:	fb01 f202 	mul.w	r2, r1, r2
 80076ba:	1a9b      	subs	r3, r3, r2
 80076bc:	2b00      	cmp	r3, #0
 80076be:	f040 80d5 	bne.w	800786c <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	699b      	ldr	r3, [r3, #24]
 80076c6:	697a      	ldr	r2, [r7, #20]
 80076c8:	8992      	ldrh	r2, [r2, #12]
 80076ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80076ce:	697a      	ldr	r2, [r7, #20]
 80076d0:	8952      	ldrh	r2, [r2, #10]
 80076d2:	3a01      	subs	r2, #1
 80076d4:	4013      	ands	r3, r2
 80076d6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80076d8:	69fb      	ldr	r3, [r7, #28]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d12f      	bne.n	800773e <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	699b      	ldr	r3, [r3, #24]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d103      	bne.n	80076ee <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	689b      	ldr	r3, [r3, #8]
 80076ea:	633b      	str	r3, [r7, #48]	; 0x30
 80076ec:	e013      	b.n	8007716 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d007      	beq.n	8007706 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	699b      	ldr	r3, [r3, #24]
 80076fa:	4619      	mov	r1, r3
 80076fc:	68f8      	ldr	r0, [r7, #12]
 80076fe:	f7fe faa5 	bl	8005c4c <clmt_clust>
 8007702:	6338      	str	r0, [r7, #48]	; 0x30
 8007704:	e007      	b.n	8007716 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8007706:	68fa      	ldr	r2, [r7, #12]
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	69db      	ldr	r3, [r3, #28]
 800770c:	4619      	mov	r1, r3
 800770e:	4610      	mov	r0, r2
 8007710:	f7fd ffaf 	bl	8005672 <get_fat>
 8007714:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8007716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007718:	2b01      	cmp	r3, #1
 800771a:	d804      	bhi.n	8007726 <f_read+0xf2>
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2202      	movs	r2, #2
 8007720:	755a      	strb	r2, [r3, #21]
 8007722:	2302      	movs	r3, #2
 8007724:	e0e1      	b.n	80078ea <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800772c:	d104      	bne.n	8007738 <f_read+0x104>
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	2201      	movs	r2, #1
 8007732:	755a      	strb	r2, [r3, #21]
 8007734:	2301      	movs	r3, #1
 8007736:	e0d8      	b.n	80078ea <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800773c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800773e:	697a      	ldr	r2, [r7, #20]
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	69db      	ldr	r3, [r3, #28]
 8007744:	4619      	mov	r1, r3
 8007746:	4610      	mov	r0, r2
 8007748:	f7fd ff74 	bl	8005634 <clust2sect>
 800774c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800774e:	69bb      	ldr	r3, [r7, #24]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d104      	bne.n	800775e <f_read+0x12a>
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2202      	movs	r2, #2
 8007758:	755a      	strb	r2, [r3, #21]
 800775a:	2302      	movs	r3, #2
 800775c:	e0c5      	b.n	80078ea <f_read+0x2b6>
			sect += csect;
 800775e:	69ba      	ldr	r2, [r7, #24]
 8007760:	69fb      	ldr	r3, [r7, #28]
 8007762:	4413      	add	r3, r2
 8007764:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	899b      	ldrh	r3, [r3, #12]
 800776a:	461a      	mov	r2, r3
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007772:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8007774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007776:	2b00      	cmp	r3, #0
 8007778:	d041      	beq.n	80077fe <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800777a:	69fa      	ldr	r2, [r7, #28]
 800777c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800777e:	4413      	add	r3, r2
 8007780:	697a      	ldr	r2, [r7, #20]
 8007782:	8952      	ldrh	r2, [r2, #10]
 8007784:	4293      	cmp	r3, r2
 8007786:	d905      	bls.n	8007794 <f_read+0x160>
					cc = fs->csize - csect;
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	895b      	ldrh	r3, [r3, #10]
 800778c:	461a      	mov	r2, r3
 800778e:	69fb      	ldr	r3, [r7, #28]
 8007790:	1ad3      	subs	r3, r2, r3
 8007792:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	7858      	ldrb	r0, [r3, #1]
 8007798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800779a:	69ba      	ldr	r2, [r7, #24]
 800779c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800779e:	f7fd fb9d 	bl	8004edc <disk_read>
 80077a2:	4603      	mov	r3, r0
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d004      	beq.n	80077b2 <f_read+0x17e>
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2201      	movs	r2, #1
 80077ac:	755a      	strb	r2, [r3, #21]
 80077ae:	2301      	movs	r3, #1
 80077b0:	e09b      	b.n	80078ea <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	7d1b      	ldrb	r3, [r3, #20]
 80077b6:	b25b      	sxtb	r3, r3
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	da18      	bge.n	80077ee <f_read+0x1ba>
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	6a1a      	ldr	r2, [r3, #32]
 80077c0:	69bb      	ldr	r3, [r7, #24]
 80077c2:	1ad3      	subs	r3, r2, r3
 80077c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077c6:	429a      	cmp	r2, r3
 80077c8:	d911      	bls.n	80077ee <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	6a1a      	ldr	r2, [r3, #32]
 80077ce:	69bb      	ldr	r3, [r7, #24]
 80077d0:	1ad3      	subs	r3, r2, r3
 80077d2:	697a      	ldr	r2, [r7, #20]
 80077d4:	8992      	ldrh	r2, [r2, #12]
 80077d6:	fb02 f303 	mul.w	r3, r2, r3
 80077da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077dc:	18d0      	adds	r0, r2, r3
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	899b      	ldrh	r3, [r3, #12]
 80077e8:	461a      	mov	r2, r3
 80077ea:	f7fd fc57 	bl	800509c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	899b      	ldrh	r3, [r3, #12]
 80077f2:	461a      	mov	r2, r3
 80077f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077f6:	fb02 f303 	mul.w	r3, r2, r3
 80077fa:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80077fc:	e05c      	b.n	80078b8 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	6a1b      	ldr	r3, [r3, #32]
 8007802:	69ba      	ldr	r2, [r7, #24]
 8007804:	429a      	cmp	r2, r3
 8007806:	d02e      	beq.n	8007866 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	7d1b      	ldrb	r3, [r3, #20]
 800780c:	b25b      	sxtb	r3, r3
 800780e:	2b00      	cmp	r3, #0
 8007810:	da18      	bge.n	8007844 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	7858      	ldrb	r0, [r3, #1]
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	6a1a      	ldr	r2, [r3, #32]
 8007820:	2301      	movs	r3, #1
 8007822:	f7fd fb7b 	bl	8004f1c <disk_write>
 8007826:	4603      	mov	r3, r0
 8007828:	2b00      	cmp	r3, #0
 800782a:	d004      	beq.n	8007836 <f_read+0x202>
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2201      	movs	r2, #1
 8007830:	755a      	strb	r2, [r3, #21]
 8007832:	2301      	movs	r3, #1
 8007834:	e059      	b.n	80078ea <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	7d1b      	ldrb	r3, [r3, #20]
 800783a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800783e:	b2da      	uxtb	r2, r3
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	7858      	ldrb	r0, [r3, #1]
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800784e:	2301      	movs	r3, #1
 8007850:	69ba      	ldr	r2, [r7, #24]
 8007852:	f7fd fb43 	bl	8004edc <disk_read>
 8007856:	4603      	mov	r3, r0
 8007858:	2b00      	cmp	r3, #0
 800785a:	d004      	beq.n	8007866 <f_read+0x232>
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	2201      	movs	r2, #1
 8007860:	755a      	strb	r2, [r3, #21]
 8007862:	2301      	movs	r3, #1
 8007864:	e041      	b.n	80078ea <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	69ba      	ldr	r2, [r7, #24]
 800786a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	899b      	ldrh	r3, [r3, #12]
 8007870:	4618      	mov	r0, r3
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	699b      	ldr	r3, [r3, #24]
 8007876:	697a      	ldr	r2, [r7, #20]
 8007878:	8992      	ldrh	r2, [r2, #12]
 800787a:	fbb3 f1f2 	udiv	r1, r3, r2
 800787e:	fb01 f202 	mul.w	r2, r1, r2
 8007882:	1a9b      	subs	r3, r3, r2
 8007884:	1ac3      	subs	r3, r0, r3
 8007886:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8007888:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	429a      	cmp	r2, r3
 800788e:	d901      	bls.n	8007894 <f_read+0x260>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	699b      	ldr	r3, [r3, #24]
 800789e:	697a      	ldr	r2, [r7, #20]
 80078a0:	8992      	ldrh	r2, [r2, #12]
 80078a2:	fbb3 f0f2 	udiv	r0, r3, r2
 80078a6:	fb00 f202 	mul.w	r2, r0, r2
 80078aa:	1a9b      	subs	r3, r3, r2
 80078ac:	440b      	add	r3, r1
 80078ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078b0:	4619      	mov	r1, r3
 80078b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80078b4:	f7fd fbf2 	bl	800509c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80078b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078bc:	4413      	add	r3, r2
 80078be:	627b      	str	r3, [r7, #36]	; 0x24
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	699a      	ldr	r2, [r3, #24]
 80078c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078c6:	441a      	add	r2, r3
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	619a      	str	r2, [r3, #24]
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	681a      	ldr	r2, [r3, #0]
 80078d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078d2:	441a      	add	r2, r3
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	601a      	str	r2, [r3, #0]
 80078d8:	687a      	ldr	r2, [r7, #4]
 80078da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078dc:	1ad3      	subs	r3, r2, r3
 80078de:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	f47f aee1 	bne.w	80076aa <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80078e8:	2300      	movs	r3, #0
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3738      	adds	r7, #56	; 0x38
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}

080078f2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80078f2:	b580      	push	{r7, lr}
 80078f4:	b086      	sub	sp, #24
 80078f6:	af00      	add	r7, sp, #0
 80078f8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f107 0208 	add.w	r2, r7, #8
 8007900:	4611      	mov	r1, r2
 8007902:	4618      	mov	r0, r3
 8007904:	f7ff fc4e 	bl	80071a4 <validate>
 8007908:	4603      	mov	r3, r0
 800790a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800790c:	7dfb      	ldrb	r3, [r7, #23]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d168      	bne.n	80079e4 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	7d1b      	ldrb	r3, [r3, #20]
 8007916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800791a:	2b00      	cmp	r3, #0
 800791c:	d062      	beq.n	80079e4 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	7d1b      	ldrb	r3, [r3, #20]
 8007922:	b25b      	sxtb	r3, r3
 8007924:	2b00      	cmp	r3, #0
 8007926:	da15      	bge.n	8007954 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	7858      	ldrb	r0, [r3, #1]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6a1a      	ldr	r2, [r3, #32]
 8007936:	2301      	movs	r3, #1
 8007938:	f7fd faf0 	bl	8004f1c <disk_write>
 800793c:	4603      	mov	r3, r0
 800793e:	2b00      	cmp	r3, #0
 8007940:	d001      	beq.n	8007946 <f_sync+0x54>
 8007942:	2301      	movs	r3, #1
 8007944:	e04f      	b.n	80079e6 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	7d1b      	ldrb	r3, [r3, #20]
 800794a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800794e:	b2da      	uxtb	r2, r3
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007954:	f7fd fa12 	bl	8004d7c <get_fattime>
 8007958:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800795a:	68ba      	ldr	r2, [r7, #8]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007960:	4619      	mov	r1, r3
 8007962:	4610      	mov	r0, r2
 8007964:	f7fd fdc8 	bl	80054f8 <move_window>
 8007968:	4603      	mov	r3, r0
 800796a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800796c:	7dfb      	ldrb	r3, [r7, #23]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d138      	bne.n	80079e4 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007976:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	330b      	adds	r3, #11
 800797c:	781a      	ldrb	r2, [r3, #0]
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	330b      	adds	r3, #11
 8007982:	f042 0220 	orr.w	r2, r2, #32
 8007986:	b2d2      	uxtb	r2, r2
 8007988:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6818      	ldr	r0, [r3, #0]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	461a      	mov	r2, r3
 8007994:	68f9      	ldr	r1, [r7, #12]
 8007996:	f7fe fb56 	bl	8006046 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	f103 021c 	add.w	r2, r3, #28
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	68db      	ldr	r3, [r3, #12]
 80079a4:	4619      	mov	r1, r3
 80079a6:	4610      	mov	r0, r2
 80079a8:	f7fd fb4c 	bl	8005044 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	3316      	adds	r3, #22
 80079b0:	6939      	ldr	r1, [r7, #16]
 80079b2:	4618      	mov	r0, r3
 80079b4:	f7fd fb46 	bl	8005044 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	3312      	adds	r3, #18
 80079bc:	2100      	movs	r1, #0
 80079be:	4618      	mov	r0, r3
 80079c0:	f7fd fb25 	bl	800500e <st_word>
					fs->wflag = 1;
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	2201      	movs	r2, #1
 80079c8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	4618      	mov	r0, r3
 80079ce:	f7fd fdc1 	bl	8005554 <sync_fs>
 80079d2:	4603      	mov	r3, r0
 80079d4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	7d1b      	ldrb	r3, [r3, #20]
 80079da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079de:	b2da      	uxtb	r2, r3
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80079e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3718      	adds	r7, #24
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}

080079ee <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80079ee:	b580      	push	{r7, lr}
 80079f0:	b084      	sub	sp, #16
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f7ff ff7b 	bl	80078f2 <f_sync>
 80079fc:	4603      	mov	r3, r0
 80079fe:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007a00:	7bfb      	ldrb	r3, [r7, #15]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d118      	bne.n	8007a38 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f107 0208 	add.w	r2, r7, #8
 8007a0c:	4611      	mov	r1, r2
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f7ff fbc8 	bl	80071a4 <validate>
 8007a14:	4603      	mov	r3, r0
 8007a16:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007a18:	7bfb      	ldrb	r3, [r7, #15]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d10c      	bne.n	8007a38 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	691b      	ldr	r3, [r3, #16]
 8007a22:	4618      	mov	r0, r3
 8007a24:	f7fd fcc4 	bl	80053b0 <dec_lock>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007a2c:	7bfb      	ldrb	r3, [r7, #15]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d102      	bne.n	8007a38 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2200      	movs	r2, #0
 8007a36:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3710      	adds	r7, #16
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}

08007a42 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8007a42:	b580      	push	{r7, lr}
 8007a44:	b090      	sub	sp, #64	; 0x40
 8007a46:	af00      	add	r7, sp, #0
 8007a48:	6078      	str	r0, [r7, #4]
 8007a4a:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f107 0208 	add.w	r2, r7, #8
 8007a52:	4611      	mov	r1, r2
 8007a54:	4618      	mov	r0, r3
 8007a56:	f7ff fba5 	bl	80071a4 <validate>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8007a60:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d103      	bne.n	8007a70 <f_lseek+0x2e>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	7d5b      	ldrb	r3, [r3, #21]
 8007a6c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8007a70:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d002      	beq.n	8007a7e <f_lseek+0x3c>
 8007a78:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007a7c:	e201      	b.n	8007e82 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	f000 80d9 	beq.w	8007c3a <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a8e:	d15a      	bne.n	8007b46 <f_lseek+0x104>
			tbl = fp->cltbl;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a94:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8007a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a98:	1d1a      	adds	r2, r3, #4
 8007a9a:	627a      	str	r2, [r7, #36]	; 0x24
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	617b      	str	r3, [r7, #20]
 8007aa0:	2302      	movs	r3, #2
 8007aa2:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	689b      	ldr	r3, [r3, #8]
 8007aa8:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8007aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d03a      	beq.n	8007b26 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8007ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab2:	613b      	str	r3, [r7, #16]
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aba:	3302      	adds	r3, #2
 8007abc:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8007abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac0:	60fb      	str	r3, [r7, #12]
 8007ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ac4:	3301      	adds	r3, #1
 8007ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007acc:	4618      	mov	r0, r3
 8007ace:	f7fd fdd0 	bl	8005672 <get_fat>
 8007ad2:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8007ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad6:	2b01      	cmp	r3, #1
 8007ad8:	d804      	bhi.n	8007ae4 <f_lseek+0xa2>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2202      	movs	r2, #2
 8007ade:	755a      	strb	r2, [r3, #21]
 8007ae0:	2302      	movs	r3, #2
 8007ae2:	e1ce      	b.n	8007e82 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aea:	d104      	bne.n	8007af6 <f_lseek+0xb4>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2201      	movs	r2, #1
 8007af0:	755a      	strb	r2, [r3, #21]
 8007af2:	2301      	movs	r3, #1
 8007af4:	e1c5      	b.n	8007e82 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	3301      	adds	r3, #1
 8007afa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d0de      	beq.n	8007abe <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8007b00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	429a      	cmp	r2, r3
 8007b06:	d809      	bhi.n	8007b1c <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8007b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0a:	1d1a      	adds	r2, r3, #4
 8007b0c:	627a      	str	r2, [r7, #36]	; 0x24
 8007b0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b10:	601a      	str	r2, [r3, #0]
 8007b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b14:	1d1a      	adds	r2, r3, #4
 8007b16:	627a      	str	r2, [r7, #36]	; 0x24
 8007b18:	693a      	ldr	r2, [r7, #16]
 8007b1a:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	69db      	ldr	r3, [r3, #28]
 8007b20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d3c4      	bcc.n	8007ab0 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b2c:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8007b2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	429a      	cmp	r2, r3
 8007b34:	d803      	bhi.n	8007b3e <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8007b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b38:	2200      	movs	r2, #0
 8007b3a:	601a      	str	r2, [r3, #0]
 8007b3c:	e19f      	b.n	8007e7e <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8007b3e:	2311      	movs	r3, #17
 8007b40:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8007b44:	e19b      	b.n	8007e7e <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	68db      	ldr	r3, [r3, #12]
 8007b4a:	683a      	ldr	r2, [r7, #0]
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	d902      	bls.n	8007b56 <f_lseek+0x114>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	68db      	ldr	r3, [r3, #12]
 8007b54:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	683a      	ldr	r2, [r7, #0]
 8007b5a:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	f000 818d 	beq.w	8007e7e <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	3b01      	subs	r3, #1
 8007b68:	4619      	mov	r1, r3
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f7fe f86e 	bl	8005c4c <clmt_clust>
 8007b70:	4602      	mov	r2, r0
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8007b76:	68ba      	ldr	r2, [r7, #8]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	69db      	ldr	r3, [r3, #28]
 8007b7c:	4619      	mov	r1, r3
 8007b7e:	4610      	mov	r0, r2
 8007b80:	f7fd fd58 	bl	8005634 <clust2sect>
 8007b84:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8007b86:	69bb      	ldr	r3, [r7, #24]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d104      	bne.n	8007b96 <f_lseek+0x154>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2202      	movs	r2, #2
 8007b90:	755a      	strb	r2, [r3, #21]
 8007b92:	2302      	movs	r3, #2
 8007b94:	e175      	b.n	8007e82 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	3b01      	subs	r3, #1
 8007b9a:	68ba      	ldr	r2, [r7, #8]
 8007b9c:	8992      	ldrh	r2, [r2, #12]
 8007b9e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ba2:	68ba      	ldr	r2, [r7, #8]
 8007ba4:	8952      	ldrh	r2, [r2, #10]
 8007ba6:	3a01      	subs	r2, #1
 8007ba8:	4013      	ands	r3, r2
 8007baa:	69ba      	ldr	r2, [r7, #24]
 8007bac:	4413      	add	r3, r2
 8007bae:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	699b      	ldr	r3, [r3, #24]
 8007bb4:	68ba      	ldr	r2, [r7, #8]
 8007bb6:	8992      	ldrh	r2, [r2, #12]
 8007bb8:	fbb3 f1f2 	udiv	r1, r3, r2
 8007bbc:	fb01 f202 	mul.w	r2, r1, r2
 8007bc0:	1a9b      	subs	r3, r3, r2
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	f000 815b 	beq.w	8007e7e <f_lseek+0x43c>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6a1b      	ldr	r3, [r3, #32]
 8007bcc:	69ba      	ldr	r2, [r7, #24]
 8007bce:	429a      	cmp	r2, r3
 8007bd0:	f000 8155 	beq.w	8007e7e <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	7d1b      	ldrb	r3, [r3, #20]
 8007bd8:	b25b      	sxtb	r3, r3
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	da18      	bge.n	8007c10 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	7858      	ldrb	r0, [r3, #1]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6a1a      	ldr	r2, [r3, #32]
 8007bec:	2301      	movs	r3, #1
 8007bee:	f7fd f995 	bl	8004f1c <disk_write>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d004      	beq.n	8007c02 <f_lseek+0x1c0>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	755a      	strb	r2, [r3, #21]
 8007bfe:	2301      	movs	r3, #1
 8007c00:	e13f      	b.n	8007e82 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	7d1b      	ldrb	r3, [r3, #20]
 8007c06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c0a:	b2da      	uxtb	r2, r3
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	7858      	ldrb	r0, [r3, #1]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	69ba      	ldr	r2, [r7, #24]
 8007c1e:	f7fd f95d 	bl	8004edc <disk_read>
 8007c22:	4603      	mov	r3, r0
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d004      	beq.n	8007c32 <f_lseek+0x1f0>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	755a      	strb	r2, [r3, #21]
 8007c2e:	2301      	movs	r3, #1
 8007c30:	e127      	b.n	8007e82 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	69ba      	ldr	r2, [r7, #24]
 8007c36:	621a      	str	r2, [r3, #32]
 8007c38:	e121      	b.n	8007e7e <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	68db      	ldr	r3, [r3, #12]
 8007c3e:	683a      	ldr	r2, [r7, #0]
 8007c40:	429a      	cmp	r2, r3
 8007c42:	d908      	bls.n	8007c56 <f_lseek+0x214>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	7d1b      	ldrb	r3, [r3, #20]
 8007c48:	f003 0302 	and.w	r3, r3, #2
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d102      	bne.n	8007c56 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	68db      	ldr	r3, [r3, #12]
 8007c54:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	699b      	ldr	r3, [r3, #24]
 8007c5a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	637b      	str	r3, [r7, #52]	; 0x34
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c64:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	f000 80b5 	beq.w	8007dd8 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	895b      	ldrh	r3, [r3, #10]
 8007c72:	461a      	mov	r2, r3
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	899b      	ldrh	r3, [r3, #12]
 8007c78:	fb02 f303 	mul.w	r3, r2, r3
 8007c7c:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8007c7e:	6a3b      	ldr	r3, [r7, #32]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d01b      	beq.n	8007cbc <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	1e5a      	subs	r2, r3, #1
 8007c88:	69fb      	ldr	r3, [r7, #28]
 8007c8a:	fbb2 f2f3 	udiv	r2, r2, r3
 8007c8e:	6a3b      	ldr	r3, [r7, #32]
 8007c90:	1e59      	subs	r1, r3, #1
 8007c92:	69fb      	ldr	r3, [r7, #28]
 8007c94:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8007c98:	429a      	cmp	r2, r3
 8007c9a:	d30f      	bcc.n	8007cbc <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8007c9c:	6a3b      	ldr	r3, [r7, #32]
 8007c9e:	1e5a      	subs	r2, r3, #1
 8007ca0:	69fb      	ldr	r3, [r7, #28]
 8007ca2:	425b      	negs	r3, r3
 8007ca4:	401a      	ands	r2, r3
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	699b      	ldr	r3, [r3, #24]
 8007cae:	683a      	ldr	r2, [r7, #0]
 8007cb0:	1ad3      	subs	r3, r2, r3
 8007cb2:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	69db      	ldr	r3, [r3, #28]
 8007cb8:	63bb      	str	r3, [r7, #56]	; 0x38
 8007cba:	e022      	b.n	8007d02 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	689b      	ldr	r3, [r3, #8]
 8007cc0:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8007cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d119      	bne.n	8007cfc <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2100      	movs	r1, #0
 8007ccc:	4618      	mov	r0, r3
 8007cce:	f7fd ff25 	bl	8005b1c <create_chain>
 8007cd2:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cd6:	2b01      	cmp	r3, #1
 8007cd8:	d104      	bne.n	8007ce4 <f_lseek+0x2a2>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2202      	movs	r2, #2
 8007cde:	755a      	strb	r2, [r3, #21]
 8007ce0:	2302      	movs	r3, #2
 8007ce2:	e0ce      	b.n	8007e82 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cea:	d104      	bne.n	8007cf6 <f_lseek+0x2b4>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2201      	movs	r2, #1
 8007cf0:	755a      	strb	r2, [r3, #21]
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	e0c5      	b.n	8007e82 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007cfa:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d00:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8007d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d067      	beq.n	8007dd8 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8007d08:	e03a      	b.n	8007d80 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8007d0a:	683a      	ldr	r2, [r7, #0]
 8007d0c:	69fb      	ldr	r3, [r7, #28]
 8007d0e:	1ad3      	subs	r3, r2, r3
 8007d10:	603b      	str	r3, [r7, #0]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	699a      	ldr	r2, [r3, #24]
 8007d16:	69fb      	ldr	r3, [r7, #28]
 8007d18:	441a      	add	r2, r3
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	7d1b      	ldrb	r3, [r3, #20]
 8007d22:	f003 0302 	and.w	r3, r3, #2
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d00b      	beq.n	8007d42 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f7fd fef4 	bl	8005b1c <create_chain>
 8007d34:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8007d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d108      	bne.n	8007d4e <f_lseek+0x30c>
							ofs = 0; break;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	603b      	str	r3, [r7, #0]
 8007d40:	e022      	b.n	8007d88 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007d46:	4618      	mov	r0, r3
 8007d48:	f7fd fc93 	bl	8005672 <get_fat>
 8007d4c:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d54:	d104      	bne.n	8007d60 <f_lseek+0x31e>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2201      	movs	r2, #1
 8007d5a:	755a      	strb	r2, [r3, #21]
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	e090      	b.n	8007e82 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8007d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d62:	2b01      	cmp	r3, #1
 8007d64:	d904      	bls.n	8007d70 <f_lseek+0x32e>
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	69db      	ldr	r3, [r3, #28]
 8007d6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	d304      	bcc.n	8007d7a <f_lseek+0x338>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2202      	movs	r2, #2
 8007d74:	755a      	strb	r2, [r3, #21]
 8007d76:	2302      	movs	r3, #2
 8007d78:	e083      	b.n	8007e82 <f_lseek+0x440>
					fp->clust = clst;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d7e:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8007d80:	683a      	ldr	r2, [r7, #0]
 8007d82:	69fb      	ldr	r3, [r7, #28]
 8007d84:	429a      	cmp	r2, r3
 8007d86:	d8c0      	bhi.n	8007d0a <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	699a      	ldr	r2, [r3, #24]
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	441a      	add	r2, r3
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	899b      	ldrh	r3, [r3, #12]
 8007d98:	461a      	mov	r2, r3
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007da0:	fb01 f202 	mul.w	r2, r1, r2
 8007da4:	1a9b      	subs	r3, r3, r2
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d016      	beq.n	8007dd8 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007dae:	4618      	mov	r0, r3
 8007db0:	f7fd fc40 	bl	8005634 <clust2sect>
 8007db4:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8007db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d104      	bne.n	8007dc6 <f_lseek+0x384>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2202      	movs	r2, #2
 8007dc0:	755a      	strb	r2, [r3, #21]
 8007dc2:	2302      	movs	r3, #2
 8007dc4:	e05d      	b.n	8007e82 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	899b      	ldrh	r3, [r3, #12]
 8007dca:	461a      	mov	r2, r3
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	fbb3 f3f2 	udiv	r3, r3, r2
 8007dd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007dd4:	4413      	add	r3, r2
 8007dd6:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	699a      	ldr	r2, [r3, #24]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	68db      	ldr	r3, [r3, #12]
 8007de0:	429a      	cmp	r2, r3
 8007de2:	d90a      	bls.n	8007dfa <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	699a      	ldr	r2, [r3, #24]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	7d1b      	ldrb	r3, [r3, #20]
 8007df0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007df4:	b2da      	uxtb	r2, r3
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	699b      	ldr	r3, [r3, #24]
 8007dfe:	68ba      	ldr	r2, [r7, #8]
 8007e00:	8992      	ldrh	r2, [r2, #12]
 8007e02:	fbb3 f1f2 	udiv	r1, r3, r2
 8007e06:	fb01 f202 	mul.w	r2, r1, r2
 8007e0a:	1a9b      	subs	r3, r3, r2
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d036      	beq.n	8007e7e <f_lseek+0x43c>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6a1b      	ldr	r3, [r3, #32]
 8007e14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e16:	429a      	cmp	r2, r3
 8007e18:	d031      	beq.n	8007e7e <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	7d1b      	ldrb	r3, [r3, #20]
 8007e1e:	b25b      	sxtb	r3, r3
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	da18      	bge.n	8007e56 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	7858      	ldrb	r0, [r3, #1]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6a1a      	ldr	r2, [r3, #32]
 8007e32:	2301      	movs	r3, #1
 8007e34:	f7fd f872 	bl	8004f1c <disk_write>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d004      	beq.n	8007e48 <f_lseek+0x406>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2201      	movs	r2, #1
 8007e42:	755a      	strb	r2, [r3, #21]
 8007e44:	2301      	movs	r3, #1
 8007e46:	e01c      	b.n	8007e82 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	7d1b      	ldrb	r3, [r3, #20]
 8007e4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e50:	b2da      	uxtb	r2, r3
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	7858      	ldrb	r0, [r3, #1]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007e60:	2301      	movs	r3, #1
 8007e62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e64:	f7fd f83a 	bl	8004edc <disk_read>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d004      	beq.n	8007e78 <f_lseek+0x436>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2201      	movs	r2, #1
 8007e72:	755a      	strb	r2, [r3, #21]
 8007e74:	2301      	movs	r3, #1
 8007e76:	e004      	b.n	8007e82 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e7c:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8007e7e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3740      	adds	r7, #64	; 0x40
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}
	...

08007e8c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b087      	sub	sp, #28
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	60f8      	str	r0, [r7, #12]
 8007e94:	60b9      	str	r1, [r7, #8]
 8007e96:	4613      	mov	r3, r2
 8007e98:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007ea2:	4b1f      	ldr	r3, [pc, #124]	; (8007f20 <FATFS_LinkDriverEx+0x94>)
 8007ea4:	7a5b      	ldrb	r3, [r3, #9]
 8007ea6:	b2db      	uxtb	r3, r3
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d131      	bne.n	8007f10 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007eac:	4b1c      	ldr	r3, [pc, #112]	; (8007f20 <FATFS_LinkDriverEx+0x94>)
 8007eae:	7a5b      	ldrb	r3, [r3, #9]
 8007eb0:	b2db      	uxtb	r3, r3
 8007eb2:	461a      	mov	r2, r3
 8007eb4:	4b1a      	ldr	r3, [pc, #104]	; (8007f20 <FATFS_LinkDriverEx+0x94>)
 8007eb6:	2100      	movs	r1, #0
 8007eb8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007eba:	4b19      	ldr	r3, [pc, #100]	; (8007f20 <FATFS_LinkDriverEx+0x94>)
 8007ebc:	7a5b      	ldrb	r3, [r3, #9]
 8007ebe:	b2db      	uxtb	r3, r3
 8007ec0:	4a17      	ldr	r2, [pc, #92]	; (8007f20 <FATFS_LinkDriverEx+0x94>)
 8007ec2:	009b      	lsls	r3, r3, #2
 8007ec4:	4413      	add	r3, r2
 8007ec6:	68fa      	ldr	r2, [r7, #12]
 8007ec8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007eca:	4b15      	ldr	r3, [pc, #84]	; (8007f20 <FATFS_LinkDriverEx+0x94>)
 8007ecc:	7a5b      	ldrb	r3, [r3, #9]
 8007ece:	b2db      	uxtb	r3, r3
 8007ed0:	461a      	mov	r2, r3
 8007ed2:	4b13      	ldr	r3, [pc, #76]	; (8007f20 <FATFS_LinkDriverEx+0x94>)
 8007ed4:	4413      	add	r3, r2
 8007ed6:	79fa      	ldrb	r2, [r7, #7]
 8007ed8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007eda:	4b11      	ldr	r3, [pc, #68]	; (8007f20 <FATFS_LinkDriverEx+0x94>)
 8007edc:	7a5b      	ldrb	r3, [r3, #9]
 8007ede:	b2db      	uxtb	r3, r3
 8007ee0:	1c5a      	adds	r2, r3, #1
 8007ee2:	b2d1      	uxtb	r1, r2
 8007ee4:	4a0e      	ldr	r2, [pc, #56]	; (8007f20 <FATFS_LinkDriverEx+0x94>)
 8007ee6:	7251      	strb	r1, [r2, #9]
 8007ee8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007eea:	7dbb      	ldrb	r3, [r7, #22]
 8007eec:	3330      	adds	r3, #48	; 0x30
 8007eee:	b2da      	uxtb	r2, r3
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	3301      	adds	r3, #1
 8007ef8:	223a      	movs	r2, #58	; 0x3a
 8007efa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	3302      	adds	r3, #2
 8007f00:	222f      	movs	r2, #47	; 0x2f
 8007f02:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	3303      	adds	r3, #3
 8007f08:	2200      	movs	r2, #0
 8007f0a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007f10:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	371c      	adds	r7, #28
 8007f16:	46bd      	mov	sp, r7
 8007f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1c:	4770      	bx	lr
 8007f1e:	bf00      	nop
 8007f20:	20001510 	.word	0x20001510

08007f24 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b082      	sub	sp, #8
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
 8007f2c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007f2e:	2200      	movs	r2, #0
 8007f30:	6839      	ldr	r1, [r7, #0]
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f7ff ffaa 	bl	8007e8c <FATFS_LinkDriverEx>
 8007f38:	4603      	mov	r3, r0
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3708      	adds	r7, #8
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}
	...

08007f44 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b085      	sub	sp, #20
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	6039      	str	r1, [r7, #0]
 8007f4e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8007f50:	88fb      	ldrh	r3, [r7, #6]
 8007f52:	2b7f      	cmp	r3, #127	; 0x7f
 8007f54:	d802      	bhi.n	8007f5c <ff_convert+0x18>
		c = chr;
 8007f56:	88fb      	ldrh	r3, [r7, #6]
 8007f58:	81fb      	strh	r3, [r7, #14]
 8007f5a:	e025      	b.n	8007fa8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d00b      	beq.n	8007f7a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8007f62:	88fb      	ldrh	r3, [r7, #6]
 8007f64:	2bff      	cmp	r3, #255	; 0xff
 8007f66:	d805      	bhi.n	8007f74 <ff_convert+0x30>
 8007f68:	88fb      	ldrh	r3, [r7, #6]
 8007f6a:	3b80      	subs	r3, #128	; 0x80
 8007f6c:	4a12      	ldr	r2, [pc, #72]	; (8007fb8 <ff_convert+0x74>)
 8007f6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f72:	e000      	b.n	8007f76 <ff_convert+0x32>
 8007f74:	2300      	movs	r3, #0
 8007f76:	81fb      	strh	r3, [r7, #14]
 8007f78:	e016      	b.n	8007fa8 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	81fb      	strh	r3, [r7, #14]
 8007f7e:	e009      	b.n	8007f94 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8007f80:	89fb      	ldrh	r3, [r7, #14]
 8007f82:	4a0d      	ldr	r2, [pc, #52]	; (8007fb8 <ff_convert+0x74>)
 8007f84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f88:	88fa      	ldrh	r2, [r7, #6]
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	d006      	beq.n	8007f9c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8007f8e:	89fb      	ldrh	r3, [r7, #14]
 8007f90:	3301      	adds	r3, #1
 8007f92:	81fb      	strh	r3, [r7, #14]
 8007f94:	89fb      	ldrh	r3, [r7, #14]
 8007f96:	2b7f      	cmp	r3, #127	; 0x7f
 8007f98:	d9f2      	bls.n	8007f80 <ff_convert+0x3c>
 8007f9a:	e000      	b.n	8007f9e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8007f9c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8007f9e:	89fb      	ldrh	r3, [r7, #14]
 8007fa0:	3380      	adds	r3, #128	; 0x80
 8007fa2:	b29b      	uxth	r3, r3
 8007fa4:	b2db      	uxtb	r3, r3
 8007fa6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8007fa8:	89fb      	ldrh	r3, [r7, #14]
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3714      	adds	r7, #20
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb4:	4770      	bx	lr
 8007fb6:	bf00      	nop
 8007fb8:	08009500 	.word	0x08009500

08007fbc <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b087      	sub	sp, #28
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8007fc6:	88fb      	ldrh	r3, [r7, #6]
 8007fc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fcc:	d201      	bcs.n	8007fd2 <ff_wtoupper+0x16>
 8007fce:	4b3e      	ldr	r3, [pc, #248]	; (80080c8 <ff_wtoupper+0x10c>)
 8007fd0:	e000      	b.n	8007fd4 <ff_wtoupper+0x18>
 8007fd2:	4b3e      	ldr	r3, [pc, #248]	; (80080cc <ff_wtoupper+0x110>)
 8007fd4:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	1c9a      	adds	r2, r3, #2
 8007fda:	617a      	str	r2, [r7, #20]
 8007fdc:	881b      	ldrh	r3, [r3, #0]
 8007fde:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8007fe0:	8a7b      	ldrh	r3, [r7, #18]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d068      	beq.n	80080b8 <ff_wtoupper+0xfc>
 8007fe6:	88fa      	ldrh	r2, [r7, #6]
 8007fe8:	8a7b      	ldrh	r3, [r7, #18]
 8007fea:	429a      	cmp	r2, r3
 8007fec:	d364      	bcc.n	80080b8 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8007fee:	697b      	ldr	r3, [r7, #20]
 8007ff0:	1c9a      	adds	r2, r3, #2
 8007ff2:	617a      	str	r2, [r7, #20]
 8007ff4:	881b      	ldrh	r3, [r3, #0]
 8007ff6:	823b      	strh	r3, [r7, #16]
 8007ff8:	8a3b      	ldrh	r3, [r7, #16]
 8007ffa:	0a1b      	lsrs	r3, r3, #8
 8007ffc:	81fb      	strh	r3, [r7, #14]
 8007ffe:	8a3b      	ldrh	r3, [r7, #16]
 8008000:	b2db      	uxtb	r3, r3
 8008002:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8008004:	88fa      	ldrh	r2, [r7, #6]
 8008006:	8a79      	ldrh	r1, [r7, #18]
 8008008:	8a3b      	ldrh	r3, [r7, #16]
 800800a:	440b      	add	r3, r1
 800800c:	429a      	cmp	r2, r3
 800800e:	da49      	bge.n	80080a4 <ff_wtoupper+0xe8>
			switch (cmd) {
 8008010:	89fb      	ldrh	r3, [r7, #14]
 8008012:	2b08      	cmp	r3, #8
 8008014:	d84f      	bhi.n	80080b6 <ff_wtoupper+0xfa>
 8008016:	a201      	add	r2, pc, #4	; (adr r2, 800801c <ff_wtoupper+0x60>)
 8008018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800801c:	08008041 	.word	0x08008041
 8008020:	08008053 	.word	0x08008053
 8008024:	08008069 	.word	0x08008069
 8008028:	08008071 	.word	0x08008071
 800802c:	08008079 	.word	0x08008079
 8008030:	08008081 	.word	0x08008081
 8008034:	08008089 	.word	0x08008089
 8008038:	08008091 	.word	0x08008091
 800803c:	08008099 	.word	0x08008099
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8008040:	88fa      	ldrh	r2, [r7, #6]
 8008042:	8a7b      	ldrh	r3, [r7, #18]
 8008044:	1ad3      	subs	r3, r2, r3
 8008046:	005b      	lsls	r3, r3, #1
 8008048:	697a      	ldr	r2, [r7, #20]
 800804a:	4413      	add	r3, r2
 800804c:	881b      	ldrh	r3, [r3, #0]
 800804e:	80fb      	strh	r3, [r7, #6]
 8008050:	e027      	b.n	80080a2 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8008052:	88fa      	ldrh	r2, [r7, #6]
 8008054:	8a7b      	ldrh	r3, [r7, #18]
 8008056:	1ad3      	subs	r3, r2, r3
 8008058:	b29b      	uxth	r3, r3
 800805a:	f003 0301 	and.w	r3, r3, #1
 800805e:	b29b      	uxth	r3, r3
 8008060:	88fa      	ldrh	r2, [r7, #6]
 8008062:	1ad3      	subs	r3, r2, r3
 8008064:	80fb      	strh	r3, [r7, #6]
 8008066:	e01c      	b.n	80080a2 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8008068:	88fb      	ldrh	r3, [r7, #6]
 800806a:	3b10      	subs	r3, #16
 800806c:	80fb      	strh	r3, [r7, #6]
 800806e:	e018      	b.n	80080a2 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8008070:	88fb      	ldrh	r3, [r7, #6]
 8008072:	3b20      	subs	r3, #32
 8008074:	80fb      	strh	r3, [r7, #6]
 8008076:	e014      	b.n	80080a2 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8008078:	88fb      	ldrh	r3, [r7, #6]
 800807a:	3b30      	subs	r3, #48	; 0x30
 800807c:	80fb      	strh	r3, [r7, #6]
 800807e:	e010      	b.n	80080a2 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8008080:	88fb      	ldrh	r3, [r7, #6]
 8008082:	3b1a      	subs	r3, #26
 8008084:	80fb      	strh	r3, [r7, #6]
 8008086:	e00c      	b.n	80080a2 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8008088:	88fb      	ldrh	r3, [r7, #6]
 800808a:	3308      	adds	r3, #8
 800808c:	80fb      	strh	r3, [r7, #6]
 800808e:	e008      	b.n	80080a2 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8008090:	88fb      	ldrh	r3, [r7, #6]
 8008092:	3b50      	subs	r3, #80	; 0x50
 8008094:	80fb      	strh	r3, [r7, #6]
 8008096:	e004      	b.n	80080a2 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8008098:	88fb      	ldrh	r3, [r7, #6]
 800809a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800809e:	80fb      	strh	r3, [r7, #6]
 80080a0:	bf00      	nop
			}
			break;
 80080a2:	e008      	b.n	80080b6 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80080a4:	89fb      	ldrh	r3, [r7, #14]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d195      	bne.n	8007fd6 <ff_wtoupper+0x1a>
 80080aa:	8a3b      	ldrh	r3, [r7, #16]
 80080ac:	005b      	lsls	r3, r3, #1
 80080ae:	697a      	ldr	r2, [r7, #20]
 80080b0:	4413      	add	r3, r2
 80080b2:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80080b4:	e78f      	b.n	8007fd6 <ff_wtoupper+0x1a>
			break;
 80080b6:	bf00      	nop
	}

	return chr;
 80080b8:	88fb      	ldrh	r3, [r7, #6]
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	371c      	adds	r7, #28
 80080be:	46bd      	mov	sp, r7
 80080c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c4:	4770      	bx	lr
 80080c6:	bf00      	nop
 80080c8:	08009600 	.word	0x08009600
 80080cc:	080097f4 	.word	0x080097f4

080080d0 <__errno>:
 80080d0:	4b01      	ldr	r3, [pc, #4]	; (80080d8 <__errno+0x8>)
 80080d2:	6818      	ldr	r0, [r3, #0]
 80080d4:	4770      	bx	lr
 80080d6:	bf00      	nop
 80080d8:	2000002c 	.word	0x2000002c

080080dc <__libc_init_array>:
 80080dc:	b570      	push	{r4, r5, r6, lr}
 80080de:	4d0d      	ldr	r5, [pc, #52]	; (8008114 <__libc_init_array+0x38>)
 80080e0:	4c0d      	ldr	r4, [pc, #52]	; (8008118 <__libc_init_array+0x3c>)
 80080e2:	1b64      	subs	r4, r4, r5
 80080e4:	10a4      	asrs	r4, r4, #2
 80080e6:	2600      	movs	r6, #0
 80080e8:	42a6      	cmp	r6, r4
 80080ea:	d109      	bne.n	8008100 <__libc_init_array+0x24>
 80080ec:	4d0b      	ldr	r5, [pc, #44]	; (800811c <__libc_init_array+0x40>)
 80080ee:	4c0c      	ldr	r4, [pc, #48]	; (8008120 <__libc_init_array+0x44>)
 80080f0:	f000 fca2 	bl	8008a38 <_init>
 80080f4:	1b64      	subs	r4, r4, r5
 80080f6:	10a4      	asrs	r4, r4, #2
 80080f8:	2600      	movs	r6, #0
 80080fa:	42a6      	cmp	r6, r4
 80080fc:	d105      	bne.n	800810a <__libc_init_array+0x2e>
 80080fe:	bd70      	pop	{r4, r5, r6, pc}
 8008100:	f855 3b04 	ldr.w	r3, [r5], #4
 8008104:	4798      	blx	r3
 8008106:	3601      	adds	r6, #1
 8008108:	e7ee      	b.n	80080e8 <__libc_init_array+0xc>
 800810a:	f855 3b04 	ldr.w	r3, [r5], #4
 800810e:	4798      	blx	r3
 8008110:	3601      	adds	r6, #1
 8008112:	e7f2      	b.n	80080fa <__libc_init_array+0x1e>
 8008114:	080098ec 	.word	0x080098ec
 8008118:	080098ec 	.word	0x080098ec
 800811c:	080098ec 	.word	0x080098ec
 8008120:	080098f0 	.word	0x080098f0

08008124 <memcpy>:
 8008124:	440a      	add	r2, r1
 8008126:	4291      	cmp	r1, r2
 8008128:	f100 33ff 	add.w	r3, r0, #4294967295
 800812c:	d100      	bne.n	8008130 <memcpy+0xc>
 800812e:	4770      	bx	lr
 8008130:	b510      	push	{r4, lr}
 8008132:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008136:	f803 4f01 	strb.w	r4, [r3, #1]!
 800813a:	4291      	cmp	r1, r2
 800813c:	d1f9      	bne.n	8008132 <memcpy+0xe>
 800813e:	bd10      	pop	{r4, pc}

08008140 <memmove>:
 8008140:	4288      	cmp	r0, r1
 8008142:	b510      	push	{r4, lr}
 8008144:	eb01 0402 	add.w	r4, r1, r2
 8008148:	d902      	bls.n	8008150 <memmove+0x10>
 800814a:	4284      	cmp	r4, r0
 800814c:	4623      	mov	r3, r4
 800814e:	d807      	bhi.n	8008160 <memmove+0x20>
 8008150:	1e43      	subs	r3, r0, #1
 8008152:	42a1      	cmp	r1, r4
 8008154:	d008      	beq.n	8008168 <memmove+0x28>
 8008156:	f811 2b01 	ldrb.w	r2, [r1], #1
 800815a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800815e:	e7f8      	b.n	8008152 <memmove+0x12>
 8008160:	4402      	add	r2, r0
 8008162:	4601      	mov	r1, r0
 8008164:	428a      	cmp	r2, r1
 8008166:	d100      	bne.n	800816a <memmove+0x2a>
 8008168:	bd10      	pop	{r4, pc}
 800816a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800816e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008172:	e7f7      	b.n	8008164 <memmove+0x24>

08008174 <memset>:
 8008174:	4402      	add	r2, r0
 8008176:	4603      	mov	r3, r0
 8008178:	4293      	cmp	r3, r2
 800817a:	d100      	bne.n	800817e <memset+0xa>
 800817c:	4770      	bx	lr
 800817e:	f803 1b01 	strb.w	r1, [r3], #1
 8008182:	e7f9      	b.n	8008178 <memset+0x4>

08008184 <sniprintf>:
 8008184:	b40c      	push	{r2, r3}
 8008186:	b530      	push	{r4, r5, lr}
 8008188:	4b17      	ldr	r3, [pc, #92]	; (80081e8 <sniprintf+0x64>)
 800818a:	1e0c      	subs	r4, r1, #0
 800818c:	681d      	ldr	r5, [r3, #0]
 800818e:	b09d      	sub	sp, #116	; 0x74
 8008190:	da08      	bge.n	80081a4 <sniprintf+0x20>
 8008192:	238b      	movs	r3, #139	; 0x8b
 8008194:	602b      	str	r3, [r5, #0]
 8008196:	f04f 30ff 	mov.w	r0, #4294967295
 800819a:	b01d      	add	sp, #116	; 0x74
 800819c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80081a0:	b002      	add	sp, #8
 80081a2:	4770      	bx	lr
 80081a4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80081a8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80081ac:	bf14      	ite	ne
 80081ae:	f104 33ff 	addne.w	r3, r4, #4294967295
 80081b2:	4623      	moveq	r3, r4
 80081b4:	9304      	str	r3, [sp, #16]
 80081b6:	9307      	str	r3, [sp, #28]
 80081b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80081bc:	9002      	str	r0, [sp, #8]
 80081be:	9006      	str	r0, [sp, #24]
 80081c0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80081c4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80081c6:	ab21      	add	r3, sp, #132	; 0x84
 80081c8:	a902      	add	r1, sp, #8
 80081ca:	4628      	mov	r0, r5
 80081cc:	9301      	str	r3, [sp, #4]
 80081ce:	f000 f869 	bl	80082a4 <_svfiprintf_r>
 80081d2:	1c43      	adds	r3, r0, #1
 80081d4:	bfbc      	itt	lt
 80081d6:	238b      	movlt	r3, #139	; 0x8b
 80081d8:	602b      	strlt	r3, [r5, #0]
 80081da:	2c00      	cmp	r4, #0
 80081dc:	d0dd      	beq.n	800819a <sniprintf+0x16>
 80081de:	9b02      	ldr	r3, [sp, #8]
 80081e0:	2200      	movs	r2, #0
 80081e2:	701a      	strb	r2, [r3, #0]
 80081e4:	e7d9      	b.n	800819a <sniprintf+0x16>
 80081e6:	bf00      	nop
 80081e8:	2000002c 	.word	0x2000002c

080081ec <__ssputs_r>:
 80081ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081f0:	688e      	ldr	r6, [r1, #8]
 80081f2:	429e      	cmp	r6, r3
 80081f4:	4682      	mov	sl, r0
 80081f6:	460c      	mov	r4, r1
 80081f8:	4690      	mov	r8, r2
 80081fa:	461f      	mov	r7, r3
 80081fc:	d838      	bhi.n	8008270 <__ssputs_r+0x84>
 80081fe:	898a      	ldrh	r2, [r1, #12]
 8008200:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008204:	d032      	beq.n	800826c <__ssputs_r+0x80>
 8008206:	6825      	ldr	r5, [r4, #0]
 8008208:	6909      	ldr	r1, [r1, #16]
 800820a:	eba5 0901 	sub.w	r9, r5, r1
 800820e:	6965      	ldr	r5, [r4, #20]
 8008210:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008214:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008218:	3301      	adds	r3, #1
 800821a:	444b      	add	r3, r9
 800821c:	106d      	asrs	r5, r5, #1
 800821e:	429d      	cmp	r5, r3
 8008220:	bf38      	it	cc
 8008222:	461d      	movcc	r5, r3
 8008224:	0553      	lsls	r3, r2, #21
 8008226:	d531      	bpl.n	800828c <__ssputs_r+0xa0>
 8008228:	4629      	mov	r1, r5
 800822a:	f000 fb3b 	bl	80088a4 <_malloc_r>
 800822e:	4606      	mov	r6, r0
 8008230:	b950      	cbnz	r0, 8008248 <__ssputs_r+0x5c>
 8008232:	230c      	movs	r3, #12
 8008234:	f8ca 3000 	str.w	r3, [sl]
 8008238:	89a3      	ldrh	r3, [r4, #12]
 800823a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800823e:	81a3      	strh	r3, [r4, #12]
 8008240:	f04f 30ff 	mov.w	r0, #4294967295
 8008244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008248:	6921      	ldr	r1, [r4, #16]
 800824a:	464a      	mov	r2, r9
 800824c:	f7ff ff6a 	bl	8008124 <memcpy>
 8008250:	89a3      	ldrh	r3, [r4, #12]
 8008252:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008256:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800825a:	81a3      	strh	r3, [r4, #12]
 800825c:	6126      	str	r6, [r4, #16]
 800825e:	6165      	str	r5, [r4, #20]
 8008260:	444e      	add	r6, r9
 8008262:	eba5 0509 	sub.w	r5, r5, r9
 8008266:	6026      	str	r6, [r4, #0]
 8008268:	60a5      	str	r5, [r4, #8]
 800826a:	463e      	mov	r6, r7
 800826c:	42be      	cmp	r6, r7
 800826e:	d900      	bls.n	8008272 <__ssputs_r+0x86>
 8008270:	463e      	mov	r6, r7
 8008272:	6820      	ldr	r0, [r4, #0]
 8008274:	4632      	mov	r2, r6
 8008276:	4641      	mov	r1, r8
 8008278:	f7ff ff62 	bl	8008140 <memmove>
 800827c:	68a3      	ldr	r3, [r4, #8]
 800827e:	1b9b      	subs	r3, r3, r6
 8008280:	60a3      	str	r3, [r4, #8]
 8008282:	6823      	ldr	r3, [r4, #0]
 8008284:	4433      	add	r3, r6
 8008286:	6023      	str	r3, [r4, #0]
 8008288:	2000      	movs	r0, #0
 800828a:	e7db      	b.n	8008244 <__ssputs_r+0x58>
 800828c:	462a      	mov	r2, r5
 800828e:	f000 fb7d 	bl	800898c <_realloc_r>
 8008292:	4606      	mov	r6, r0
 8008294:	2800      	cmp	r0, #0
 8008296:	d1e1      	bne.n	800825c <__ssputs_r+0x70>
 8008298:	6921      	ldr	r1, [r4, #16]
 800829a:	4650      	mov	r0, sl
 800829c:	f000 fa96 	bl	80087cc <_free_r>
 80082a0:	e7c7      	b.n	8008232 <__ssputs_r+0x46>
	...

080082a4 <_svfiprintf_r>:
 80082a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082a8:	4698      	mov	r8, r3
 80082aa:	898b      	ldrh	r3, [r1, #12]
 80082ac:	061b      	lsls	r3, r3, #24
 80082ae:	b09d      	sub	sp, #116	; 0x74
 80082b0:	4607      	mov	r7, r0
 80082b2:	460d      	mov	r5, r1
 80082b4:	4614      	mov	r4, r2
 80082b6:	d50e      	bpl.n	80082d6 <_svfiprintf_r+0x32>
 80082b8:	690b      	ldr	r3, [r1, #16]
 80082ba:	b963      	cbnz	r3, 80082d6 <_svfiprintf_r+0x32>
 80082bc:	2140      	movs	r1, #64	; 0x40
 80082be:	f000 faf1 	bl	80088a4 <_malloc_r>
 80082c2:	6028      	str	r0, [r5, #0]
 80082c4:	6128      	str	r0, [r5, #16]
 80082c6:	b920      	cbnz	r0, 80082d2 <_svfiprintf_r+0x2e>
 80082c8:	230c      	movs	r3, #12
 80082ca:	603b      	str	r3, [r7, #0]
 80082cc:	f04f 30ff 	mov.w	r0, #4294967295
 80082d0:	e0d1      	b.n	8008476 <_svfiprintf_r+0x1d2>
 80082d2:	2340      	movs	r3, #64	; 0x40
 80082d4:	616b      	str	r3, [r5, #20]
 80082d6:	2300      	movs	r3, #0
 80082d8:	9309      	str	r3, [sp, #36]	; 0x24
 80082da:	2320      	movs	r3, #32
 80082dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80082e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80082e4:	2330      	movs	r3, #48	; 0x30
 80082e6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008490 <_svfiprintf_r+0x1ec>
 80082ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80082ee:	f04f 0901 	mov.w	r9, #1
 80082f2:	4623      	mov	r3, r4
 80082f4:	469a      	mov	sl, r3
 80082f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80082fa:	b10a      	cbz	r2, 8008300 <_svfiprintf_r+0x5c>
 80082fc:	2a25      	cmp	r2, #37	; 0x25
 80082fe:	d1f9      	bne.n	80082f4 <_svfiprintf_r+0x50>
 8008300:	ebba 0b04 	subs.w	fp, sl, r4
 8008304:	d00b      	beq.n	800831e <_svfiprintf_r+0x7a>
 8008306:	465b      	mov	r3, fp
 8008308:	4622      	mov	r2, r4
 800830a:	4629      	mov	r1, r5
 800830c:	4638      	mov	r0, r7
 800830e:	f7ff ff6d 	bl	80081ec <__ssputs_r>
 8008312:	3001      	adds	r0, #1
 8008314:	f000 80aa 	beq.w	800846c <_svfiprintf_r+0x1c8>
 8008318:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800831a:	445a      	add	r2, fp
 800831c:	9209      	str	r2, [sp, #36]	; 0x24
 800831e:	f89a 3000 	ldrb.w	r3, [sl]
 8008322:	2b00      	cmp	r3, #0
 8008324:	f000 80a2 	beq.w	800846c <_svfiprintf_r+0x1c8>
 8008328:	2300      	movs	r3, #0
 800832a:	f04f 32ff 	mov.w	r2, #4294967295
 800832e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008332:	f10a 0a01 	add.w	sl, sl, #1
 8008336:	9304      	str	r3, [sp, #16]
 8008338:	9307      	str	r3, [sp, #28]
 800833a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800833e:	931a      	str	r3, [sp, #104]	; 0x68
 8008340:	4654      	mov	r4, sl
 8008342:	2205      	movs	r2, #5
 8008344:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008348:	4851      	ldr	r0, [pc, #324]	; (8008490 <_svfiprintf_r+0x1ec>)
 800834a:	f7f7 ff41 	bl	80001d0 <memchr>
 800834e:	9a04      	ldr	r2, [sp, #16]
 8008350:	b9d8      	cbnz	r0, 800838a <_svfiprintf_r+0xe6>
 8008352:	06d0      	lsls	r0, r2, #27
 8008354:	bf44      	itt	mi
 8008356:	2320      	movmi	r3, #32
 8008358:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800835c:	0711      	lsls	r1, r2, #28
 800835e:	bf44      	itt	mi
 8008360:	232b      	movmi	r3, #43	; 0x2b
 8008362:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008366:	f89a 3000 	ldrb.w	r3, [sl]
 800836a:	2b2a      	cmp	r3, #42	; 0x2a
 800836c:	d015      	beq.n	800839a <_svfiprintf_r+0xf6>
 800836e:	9a07      	ldr	r2, [sp, #28]
 8008370:	4654      	mov	r4, sl
 8008372:	2000      	movs	r0, #0
 8008374:	f04f 0c0a 	mov.w	ip, #10
 8008378:	4621      	mov	r1, r4
 800837a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800837e:	3b30      	subs	r3, #48	; 0x30
 8008380:	2b09      	cmp	r3, #9
 8008382:	d94e      	bls.n	8008422 <_svfiprintf_r+0x17e>
 8008384:	b1b0      	cbz	r0, 80083b4 <_svfiprintf_r+0x110>
 8008386:	9207      	str	r2, [sp, #28]
 8008388:	e014      	b.n	80083b4 <_svfiprintf_r+0x110>
 800838a:	eba0 0308 	sub.w	r3, r0, r8
 800838e:	fa09 f303 	lsl.w	r3, r9, r3
 8008392:	4313      	orrs	r3, r2
 8008394:	9304      	str	r3, [sp, #16]
 8008396:	46a2      	mov	sl, r4
 8008398:	e7d2      	b.n	8008340 <_svfiprintf_r+0x9c>
 800839a:	9b03      	ldr	r3, [sp, #12]
 800839c:	1d19      	adds	r1, r3, #4
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	9103      	str	r1, [sp, #12]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	bfbb      	ittet	lt
 80083a6:	425b      	neglt	r3, r3
 80083a8:	f042 0202 	orrlt.w	r2, r2, #2
 80083ac:	9307      	strge	r3, [sp, #28]
 80083ae:	9307      	strlt	r3, [sp, #28]
 80083b0:	bfb8      	it	lt
 80083b2:	9204      	strlt	r2, [sp, #16]
 80083b4:	7823      	ldrb	r3, [r4, #0]
 80083b6:	2b2e      	cmp	r3, #46	; 0x2e
 80083b8:	d10c      	bne.n	80083d4 <_svfiprintf_r+0x130>
 80083ba:	7863      	ldrb	r3, [r4, #1]
 80083bc:	2b2a      	cmp	r3, #42	; 0x2a
 80083be:	d135      	bne.n	800842c <_svfiprintf_r+0x188>
 80083c0:	9b03      	ldr	r3, [sp, #12]
 80083c2:	1d1a      	adds	r2, r3, #4
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	9203      	str	r2, [sp, #12]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	bfb8      	it	lt
 80083cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80083d0:	3402      	adds	r4, #2
 80083d2:	9305      	str	r3, [sp, #20]
 80083d4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80084a0 <_svfiprintf_r+0x1fc>
 80083d8:	7821      	ldrb	r1, [r4, #0]
 80083da:	2203      	movs	r2, #3
 80083dc:	4650      	mov	r0, sl
 80083de:	f7f7 fef7 	bl	80001d0 <memchr>
 80083e2:	b140      	cbz	r0, 80083f6 <_svfiprintf_r+0x152>
 80083e4:	2340      	movs	r3, #64	; 0x40
 80083e6:	eba0 000a 	sub.w	r0, r0, sl
 80083ea:	fa03 f000 	lsl.w	r0, r3, r0
 80083ee:	9b04      	ldr	r3, [sp, #16]
 80083f0:	4303      	orrs	r3, r0
 80083f2:	3401      	adds	r4, #1
 80083f4:	9304      	str	r3, [sp, #16]
 80083f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083fa:	4826      	ldr	r0, [pc, #152]	; (8008494 <_svfiprintf_r+0x1f0>)
 80083fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008400:	2206      	movs	r2, #6
 8008402:	f7f7 fee5 	bl	80001d0 <memchr>
 8008406:	2800      	cmp	r0, #0
 8008408:	d038      	beq.n	800847c <_svfiprintf_r+0x1d8>
 800840a:	4b23      	ldr	r3, [pc, #140]	; (8008498 <_svfiprintf_r+0x1f4>)
 800840c:	bb1b      	cbnz	r3, 8008456 <_svfiprintf_r+0x1b2>
 800840e:	9b03      	ldr	r3, [sp, #12]
 8008410:	3307      	adds	r3, #7
 8008412:	f023 0307 	bic.w	r3, r3, #7
 8008416:	3308      	adds	r3, #8
 8008418:	9303      	str	r3, [sp, #12]
 800841a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800841c:	4433      	add	r3, r6
 800841e:	9309      	str	r3, [sp, #36]	; 0x24
 8008420:	e767      	b.n	80082f2 <_svfiprintf_r+0x4e>
 8008422:	fb0c 3202 	mla	r2, ip, r2, r3
 8008426:	460c      	mov	r4, r1
 8008428:	2001      	movs	r0, #1
 800842a:	e7a5      	b.n	8008378 <_svfiprintf_r+0xd4>
 800842c:	2300      	movs	r3, #0
 800842e:	3401      	adds	r4, #1
 8008430:	9305      	str	r3, [sp, #20]
 8008432:	4619      	mov	r1, r3
 8008434:	f04f 0c0a 	mov.w	ip, #10
 8008438:	4620      	mov	r0, r4
 800843a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800843e:	3a30      	subs	r2, #48	; 0x30
 8008440:	2a09      	cmp	r2, #9
 8008442:	d903      	bls.n	800844c <_svfiprintf_r+0x1a8>
 8008444:	2b00      	cmp	r3, #0
 8008446:	d0c5      	beq.n	80083d4 <_svfiprintf_r+0x130>
 8008448:	9105      	str	r1, [sp, #20]
 800844a:	e7c3      	b.n	80083d4 <_svfiprintf_r+0x130>
 800844c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008450:	4604      	mov	r4, r0
 8008452:	2301      	movs	r3, #1
 8008454:	e7f0      	b.n	8008438 <_svfiprintf_r+0x194>
 8008456:	ab03      	add	r3, sp, #12
 8008458:	9300      	str	r3, [sp, #0]
 800845a:	462a      	mov	r2, r5
 800845c:	4b0f      	ldr	r3, [pc, #60]	; (800849c <_svfiprintf_r+0x1f8>)
 800845e:	a904      	add	r1, sp, #16
 8008460:	4638      	mov	r0, r7
 8008462:	f3af 8000 	nop.w
 8008466:	1c42      	adds	r2, r0, #1
 8008468:	4606      	mov	r6, r0
 800846a:	d1d6      	bne.n	800841a <_svfiprintf_r+0x176>
 800846c:	89ab      	ldrh	r3, [r5, #12]
 800846e:	065b      	lsls	r3, r3, #25
 8008470:	f53f af2c 	bmi.w	80082cc <_svfiprintf_r+0x28>
 8008474:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008476:	b01d      	add	sp, #116	; 0x74
 8008478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800847c:	ab03      	add	r3, sp, #12
 800847e:	9300      	str	r3, [sp, #0]
 8008480:	462a      	mov	r2, r5
 8008482:	4b06      	ldr	r3, [pc, #24]	; (800849c <_svfiprintf_r+0x1f8>)
 8008484:	a904      	add	r1, sp, #16
 8008486:	4638      	mov	r0, r7
 8008488:	f000 f87a 	bl	8008580 <_printf_i>
 800848c:	e7eb      	b.n	8008466 <_svfiprintf_r+0x1c2>
 800848e:	bf00      	nop
 8008490:	080098b0 	.word	0x080098b0
 8008494:	080098ba 	.word	0x080098ba
 8008498:	00000000 	.word	0x00000000
 800849c:	080081ed 	.word	0x080081ed
 80084a0:	080098b6 	.word	0x080098b6

080084a4 <_printf_common>:
 80084a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084a8:	4616      	mov	r6, r2
 80084aa:	4699      	mov	r9, r3
 80084ac:	688a      	ldr	r2, [r1, #8]
 80084ae:	690b      	ldr	r3, [r1, #16]
 80084b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80084b4:	4293      	cmp	r3, r2
 80084b6:	bfb8      	it	lt
 80084b8:	4613      	movlt	r3, r2
 80084ba:	6033      	str	r3, [r6, #0]
 80084bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80084c0:	4607      	mov	r7, r0
 80084c2:	460c      	mov	r4, r1
 80084c4:	b10a      	cbz	r2, 80084ca <_printf_common+0x26>
 80084c6:	3301      	adds	r3, #1
 80084c8:	6033      	str	r3, [r6, #0]
 80084ca:	6823      	ldr	r3, [r4, #0]
 80084cc:	0699      	lsls	r1, r3, #26
 80084ce:	bf42      	ittt	mi
 80084d0:	6833      	ldrmi	r3, [r6, #0]
 80084d2:	3302      	addmi	r3, #2
 80084d4:	6033      	strmi	r3, [r6, #0]
 80084d6:	6825      	ldr	r5, [r4, #0]
 80084d8:	f015 0506 	ands.w	r5, r5, #6
 80084dc:	d106      	bne.n	80084ec <_printf_common+0x48>
 80084de:	f104 0a19 	add.w	sl, r4, #25
 80084e2:	68e3      	ldr	r3, [r4, #12]
 80084e4:	6832      	ldr	r2, [r6, #0]
 80084e6:	1a9b      	subs	r3, r3, r2
 80084e8:	42ab      	cmp	r3, r5
 80084ea:	dc26      	bgt.n	800853a <_printf_common+0x96>
 80084ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80084f0:	1e13      	subs	r3, r2, #0
 80084f2:	6822      	ldr	r2, [r4, #0]
 80084f4:	bf18      	it	ne
 80084f6:	2301      	movne	r3, #1
 80084f8:	0692      	lsls	r2, r2, #26
 80084fa:	d42b      	bmi.n	8008554 <_printf_common+0xb0>
 80084fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008500:	4649      	mov	r1, r9
 8008502:	4638      	mov	r0, r7
 8008504:	47c0      	blx	r8
 8008506:	3001      	adds	r0, #1
 8008508:	d01e      	beq.n	8008548 <_printf_common+0xa4>
 800850a:	6823      	ldr	r3, [r4, #0]
 800850c:	68e5      	ldr	r5, [r4, #12]
 800850e:	6832      	ldr	r2, [r6, #0]
 8008510:	f003 0306 	and.w	r3, r3, #6
 8008514:	2b04      	cmp	r3, #4
 8008516:	bf08      	it	eq
 8008518:	1aad      	subeq	r5, r5, r2
 800851a:	68a3      	ldr	r3, [r4, #8]
 800851c:	6922      	ldr	r2, [r4, #16]
 800851e:	bf0c      	ite	eq
 8008520:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008524:	2500      	movne	r5, #0
 8008526:	4293      	cmp	r3, r2
 8008528:	bfc4      	itt	gt
 800852a:	1a9b      	subgt	r3, r3, r2
 800852c:	18ed      	addgt	r5, r5, r3
 800852e:	2600      	movs	r6, #0
 8008530:	341a      	adds	r4, #26
 8008532:	42b5      	cmp	r5, r6
 8008534:	d11a      	bne.n	800856c <_printf_common+0xc8>
 8008536:	2000      	movs	r0, #0
 8008538:	e008      	b.n	800854c <_printf_common+0xa8>
 800853a:	2301      	movs	r3, #1
 800853c:	4652      	mov	r2, sl
 800853e:	4649      	mov	r1, r9
 8008540:	4638      	mov	r0, r7
 8008542:	47c0      	blx	r8
 8008544:	3001      	adds	r0, #1
 8008546:	d103      	bne.n	8008550 <_printf_common+0xac>
 8008548:	f04f 30ff 	mov.w	r0, #4294967295
 800854c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008550:	3501      	adds	r5, #1
 8008552:	e7c6      	b.n	80084e2 <_printf_common+0x3e>
 8008554:	18e1      	adds	r1, r4, r3
 8008556:	1c5a      	adds	r2, r3, #1
 8008558:	2030      	movs	r0, #48	; 0x30
 800855a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800855e:	4422      	add	r2, r4
 8008560:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008564:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008568:	3302      	adds	r3, #2
 800856a:	e7c7      	b.n	80084fc <_printf_common+0x58>
 800856c:	2301      	movs	r3, #1
 800856e:	4622      	mov	r2, r4
 8008570:	4649      	mov	r1, r9
 8008572:	4638      	mov	r0, r7
 8008574:	47c0      	blx	r8
 8008576:	3001      	adds	r0, #1
 8008578:	d0e6      	beq.n	8008548 <_printf_common+0xa4>
 800857a:	3601      	adds	r6, #1
 800857c:	e7d9      	b.n	8008532 <_printf_common+0x8e>
	...

08008580 <_printf_i>:
 8008580:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008584:	7e0f      	ldrb	r7, [r1, #24]
 8008586:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008588:	2f78      	cmp	r7, #120	; 0x78
 800858a:	4691      	mov	r9, r2
 800858c:	4680      	mov	r8, r0
 800858e:	460c      	mov	r4, r1
 8008590:	469a      	mov	sl, r3
 8008592:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008596:	d807      	bhi.n	80085a8 <_printf_i+0x28>
 8008598:	2f62      	cmp	r7, #98	; 0x62
 800859a:	d80a      	bhi.n	80085b2 <_printf_i+0x32>
 800859c:	2f00      	cmp	r7, #0
 800859e:	f000 80d8 	beq.w	8008752 <_printf_i+0x1d2>
 80085a2:	2f58      	cmp	r7, #88	; 0x58
 80085a4:	f000 80a3 	beq.w	80086ee <_printf_i+0x16e>
 80085a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80085ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80085b0:	e03a      	b.n	8008628 <_printf_i+0xa8>
 80085b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80085b6:	2b15      	cmp	r3, #21
 80085b8:	d8f6      	bhi.n	80085a8 <_printf_i+0x28>
 80085ba:	a101      	add	r1, pc, #4	; (adr r1, 80085c0 <_printf_i+0x40>)
 80085bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80085c0:	08008619 	.word	0x08008619
 80085c4:	0800862d 	.word	0x0800862d
 80085c8:	080085a9 	.word	0x080085a9
 80085cc:	080085a9 	.word	0x080085a9
 80085d0:	080085a9 	.word	0x080085a9
 80085d4:	080085a9 	.word	0x080085a9
 80085d8:	0800862d 	.word	0x0800862d
 80085dc:	080085a9 	.word	0x080085a9
 80085e0:	080085a9 	.word	0x080085a9
 80085e4:	080085a9 	.word	0x080085a9
 80085e8:	080085a9 	.word	0x080085a9
 80085ec:	08008739 	.word	0x08008739
 80085f0:	0800865d 	.word	0x0800865d
 80085f4:	0800871b 	.word	0x0800871b
 80085f8:	080085a9 	.word	0x080085a9
 80085fc:	080085a9 	.word	0x080085a9
 8008600:	0800875b 	.word	0x0800875b
 8008604:	080085a9 	.word	0x080085a9
 8008608:	0800865d 	.word	0x0800865d
 800860c:	080085a9 	.word	0x080085a9
 8008610:	080085a9 	.word	0x080085a9
 8008614:	08008723 	.word	0x08008723
 8008618:	682b      	ldr	r3, [r5, #0]
 800861a:	1d1a      	adds	r2, r3, #4
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	602a      	str	r2, [r5, #0]
 8008620:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008624:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008628:	2301      	movs	r3, #1
 800862a:	e0a3      	b.n	8008774 <_printf_i+0x1f4>
 800862c:	6820      	ldr	r0, [r4, #0]
 800862e:	6829      	ldr	r1, [r5, #0]
 8008630:	0606      	lsls	r6, r0, #24
 8008632:	f101 0304 	add.w	r3, r1, #4
 8008636:	d50a      	bpl.n	800864e <_printf_i+0xce>
 8008638:	680e      	ldr	r6, [r1, #0]
 800863a:	602b      	str	r3, [r5, #0]
 800863c:	2e00      	cmp	r6, #0
 800863e:	da03      	bge.n	8008648 <_printf_i+0xc8>
 8008640:	232d      	movs	r3, #45	; 0x2d
 8008642:	4276      	negs	r6, r6
 8008644:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008648:	485e      	ldr	r0, [pc, #376]	; (80087c4 <_printf_i+0x244>)
 800864a:	230a      	movs	r3, #10
 800864c:	e019      	b.n	8008682 <_printf_i+0x102>
 800864e:	680e      	ldr	r6, [r1, #0]
 8008650:	602b      	str	r3, [r5, #0]
 8008652:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008656:	bf18      	it	ne
 8008658:	b236      	sxthne	r6, r6
 800865a:	e7ef      	b.n	800863c <_printf_i+0xbc>
 800865c:	682b      	ldr	r3, [r5, #0]
 800865e:	6820      	ldr	r0, [r4, #0]
 8008660:	1d19      	adds	r1, r3, #4
 8008662:	6029      	str	r1, [r5, #0]
 8008664:	0601      	lsls	r1, r0, #24
 8008666:	d501      	bpl.n	800866c <_printf_i+0xec>
 8008668:	681e      	ldr	r6, [r3, #0]
 800866a:	e002      	b.n	8008672 <_printf_i+0xf2>
 800866c:	0646      	lsls	r6, r0, #25
 800866e:	d5fb      	bpl.n	8008668 <_printf_i+0xe8>
 8008670:	881e      	ldrh	r6, [r3, #0]
 8008672:	4854      	ldr	r0, [pc, #336]	; (80087c4 <_printf_i+0x244>)
 8008674:	2f6f      	cmp	r7, #111	; 0x6f
 8008676:	bf0c      	ite	eq
 8008678:	2308      	moveq	r3, #8
 800867a:	230a      	movne	r3, #10
 800867c:	2100      	movs	r1, #0
 800867e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008682:	6865      	ldr	r5, [r4, #4]
 8008684:	60a5      	str	r5, [r4, #8]
 8008686:	2d00      	cmp	r5, #0
 8008688:	bfa2      	ittt	ge
 800868a:	6821      	ldrge	r1, [r4, #0]
 800868c:	f021 0104 	bicge.w	r1, r1, #4
 8008690:	6021      	strge	r1, [r4, #0]
 8008692:	b90e      	cbnz	r6, 8008698 <_printf_i+0x118>
 8008694:	2d00      	cmp	r5, #0
 8008696:	d04d      	beq.n	8008734 <_printf_i+0x1b4>
 8008698:	4615      	mov	r5, r2
 800869a:	fbb6 f1f3 	udiv	r1, r6, r3
 800869e:	fb03 6711 	mls	r7, r3, r1, r6
 80086a2:	5dc7      	ldrb	r7, [r0, r7]
 80086a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80086a8:	4637      	mov	r7, r6
 80086aa:	42bb      	cmp	r3, r7
 80086ac:	460e      	mov	r6, r1
 80086ae:	d9f4      	bls.n	800869a <_printf_i+0x11a>
 80086b0:	2b08      	cmp	r3, #8
 80086b2:	d10b      	bne.n	80086cc <_printf_i+0x14c>
 80086b4:	6823      	ldr	r3, [r4, #0]
 80086b6:	07de      	lsls	r6, r3, #31
 80086b8:	d508      	bpl.n	80086cc <_printf_i+0x14c>
 80086ba:	6923      	ldr	r3, [r4, #16]
 80086bc:	6861      	ldr	r1, [r4, #4]
 80086be:	4299      	cmp	r1, r3
 80086c0:	bfde      	ittt	le
 80086c2:	2330      	movle	r3, #48	; 0x30
 80086c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80086c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80086cc:	1b52      	subs	r2, r2, r5
 80086ce:	6122      	str	r2, [r4, #16]
 80086d0:	f8cd a000 	str.w	sl, [sp]
 80086d4:	464b      	mov	r3, r9
 80086d6:	aa03      	add	r2, sp, #12
 80086d8:	4621      	mov	r1, r4
 80086da:	4640      	mov	r0, r8
 80086dc:	f7ff fee2 	bl	80084a4 <_printf_common>
 80086e0:	3001      	adds	r0, #1
 80086e2:	d14c      	bne.n	800877e <_printf_i+0x1fe>
 80086e4:	f04f 30ff 	mov.w	r0, #4294967295
 80086e8:	b004      	add	sp, #16
 80086ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086ee:	4835      	ldr	r0, [pc, #212]	; (80087c4 <_printf_i+0x244>)
 80086f0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80086f4:	6829      	ldr	r1, [r5, #0]
 80086f6:	6823      	ldr	r3, [r4, #0]
 80086f8:	f851 6b04 	ldr.w	r6, [r1], #4
 80086fc:	6029      	str	r1, [r5, #0]
 80086fe:	061d      	lsls	r5, r3, #24
 8008700:	d514      	bpl.n	800872c <_printf_i+0x1ac>
 8008702:	07df      	lsls	r7, r3, #31
 8008704:	bf44      	itt	mi
 8008706:	f043 0320 	orrmi.w	r3, r3, #32
 800870a:	6023      	strmi	r3, [r4, #0]
 800870c:	b91e      	cbnz	r6, 8008716 <_printf_i+0x196>
 800870e:	6823      	ldr	r3, [r4, #0]
 8008710:	f023 0320 	bic.w	r3, r3, #32
 8008714:	6023      	str	r3, [r4, #0]
 8008716:	2310      	movs	r3, #16
 8008718:	e7b0      	b.n	800867c <_printf_i+0xfc>
 800871a:	6823      	ldr	r3, [r4, #0]
 800871c:	f043 0320 	orr.w	r3, r3, #32
 8008720:	6023      	str	r3, [r4, #0]
 8008722:	2378      	movs	r3, #120	; 0x78
 8008724:	4828      	ldr	r0, [pc, #160]	; (80087c8 <_printf_i+0x248>)
 8008726:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800872a:	e7e3      	b.n	80086f4 <_printf_i+0x174>
 800872c:	0659      	lsls	r1, r3, #25
 800872e:	bf48      	it	mi
 8008730:	b2b6      	uxthmi	r6, r6
 8008732:	e7e6      	b.n	8008702 <_printf_i+0x182>
 8008734:	4615      	mov	r5, r2
 8008736:	e7bb      	b.n	80086b0 <_printf_i+0x130>
 8008738:	682b      	ldr	r3, [r5, #0]
 800873a:	6826      	ldr	r6, [r4, #0]
 800873c:	6961      	ldr	r1, [r4, #20]
 800873e:	1d18      	adds	r0, r3, #4
 8008740:	6028      	str	r0, [r5, #0]
 8008742:	0635      	lsls	r5, r6, #24
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	d501      	bpl.n	800874c <_printf_i+0x1cc>
 8008748:	6019      	str	r1, [r3, #0]
 800874a:	e002      	b.n	8008752 <_printf_i+0x1d2>
 800874c:	0670      	lsls	r0, r6, #25
 800874e:	d5fb      	bpl.n	8008748 <_printf_i+0x1c8>
 8008750:	8019      	strh	r1, [r3, #0]
 8008752:	2300      	movs	r3, #0
 8008754:	6123      	str	r3, [r4, #16]
 8008756:	4615      	mov	r5, r2
 8008758:	e7ba      	b.n	80086d0 <_printf_i+0x150>
 800875a:	682b      	ldr	r3, [r5, #0]
 800875c:	1d1a      	adds	r2, r3, #4
 800875e:	602a      	str	r2, [r5, #0]
 8008760:	681d      	ldr	r5, [r3, #0]
 8008762:	6862      	ldr	r2, [r4, #4]
 8008764:	2100      	movs	r1, #0
 8008766:	4628      	mov	r0, r5
 8008768:	f7f7 fd32 	bl	80001d0 <memchr>
 800876c:	b108      	cbz	r0, 8008772 <_printf_i+0x1f2>
 800876e:	1b40      	subs	r0, r0, r5
 8008770:	6060      	str	r0, [r4, #4]
 8008772:	6863      	ldr	r3, [r4, #4]
 8008774:	6123      	str	r3, [r4, #16]
 8008776:	2300      	movs	r3, #0
 8008778:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800877c:	e7a8      	b.n	80086d0 <_printf_i+0x150>
 800877e:	6923      	ldr	r3, [r4, #16]
 8008780:	462a      	mov	r2, r5
 8008782:	4649      	mov	r1, r9
 8008784:	4640      	mov	r0, r8
 8008786:	47d0      	blx	sl
 8008788:	3001      	adds	r0, #1
 800878a:	d0ab      	beq.n	80086e4 <_printf_i+0x164>
 800878c:	6823      	ldr	r3, [r4, #0]
 800878e:	079b      	lsls	r3, r3, #30
 8008790:	d413      	bmi.n	80087ba <_printf_i+0x23a>
 8008792:	68e0      	ldr	r0, [r4, #12]
 8008794:	9b03      	ldr	r3, [sp, #12]
 8008796:	4298      	cmp	r0, r3
 8008798:	bfb8      	it	lt
 800879a:	4618      	movlt	r0, r3
 800879c:	e7a4      	b.n	80086e8 <_printf_i+0x168>
 800879e:	2301      	movs	r3, #1
 80087a0:	4632      	mov	r2, r6
 80087a2:	4649      	mov	r1, r9
 80087a4:	4640      	mov	r0, r8
 80087a6:	47d0      	blx	sl
 80087a8:	3001      	adds	r0, #1
 80087aa:	d09b      	beq.n	80086e4 <_printf_i+0x164>
 80087ac:	3501      	adds	r5, #1
 80087ae:	68e3      	ldr	r3, [r4, #12]
 80087b0:	9903      	ldr	r1, [sp, #12]
 80087b2:	1a5b      	subs	r3, r3, r1
 80087b4:	42ab      	cmp	r3, r5
 80087b6:	dcf2      	bgt.n	800879e <_printf_i+0x21e>
 80087b8:	e7eb      	b.n	8008792 <_printf_i+0x212>
 80087ba:	2500      	movs	r5, #0
 80087bc:	f104 0619 	add.w	r6, r4, #25
 80087c0:	e7f5      	b.n	80087ae <_printf_i+0x22e>
 80087c2:	bf00      	nop
 80087c4:	080098c1 	.word	0x080098c1
 80087c8:	080098d2 	.word	0x080098d2

080087cc <_free_r>:
 80087cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80087ce:	2900      	cmp	r1, #0
 80087d0:	d044      	beq.n	800885c <_free_r+0x90>
 80087d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087d6:	9001      	str	r0, [sp, #4]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	f1a1 0404 	sub.w	r4, r1, #4
 80087de:	bfb8      	it	lt
 80087e0:	18e4      	addlt	r4, r4, r3
 80087e2:	f000 f913 	bl	8008a0c <__malloc_lock>
 80087e6:	4a1e      	ldr	r2, [pc, #120]	; (8008860 <_free_r+0x94>)
 80087e8:	9801      	ldr	r0, [sp, #4]
 80087ea:	6813      	ldr	r3, [r2, #0]
 80087ec:	b933      	cbnz	r3, 80087fc <_free_r+0x30>
 80087ee:	6063      	str	r3, [r4, #4]
 80087f0:	6014      	str	r4, [r2, #0]
 80087f2:	b003      	add	sp, #12
 80087f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80087f8:	f000 b90e 	b.w	8008a18 <__malloc_unlock>
 80087fc:	42a3      	cmp	r3, r4
 80087fe:	d908      	bls.n	8008812 <_free_r+0x46>
 8008800:	6825      	ldr	r5, [r4, #0]
 8008802:	1961      	adds	r1, r4, r5
 8008804:	428b      	cmp	r3, r1
 8008806:	bf01      	itttt	eq
 8008808:	6819      	ldreq	r1, [r3, #0]
 800880a:	685b      	ldreq	r3, [r3, #4]
 800880c:	1949      	addeq	r1, r1, r5
 800880e:	6021      	streq	r1, [r4, #0]
 8008810:	e7ed      	b.n	80087ee <_free_r+0x22>
 8008812:	461a      	mov	r2, r3
 8008814:	685b      	ldr	r3, [r3, #4]
 8008816:	b10b      	cbz	r3, 800881c <_free_r+0x50>
 8008818:	42a3      	cmp	r3, r4
 800881a:	d9fa      	bls.n	8008812 <_free_r+0x46>
 800881c:	6811      	ldr	r1, [r2, #0]
 800881e:	1855      	adds	r5, r2, r1
 8008820:	42a5      	cmp	r5, r4
 8008822:	d10b      	bne.n	800883c <_free_r+0x70>
 8008824:	6824      	ldr	r4, [r4, #0]
 8008826:	4421      	add	r1, r4
 8008828:	1854      	adds	r4, r2, r1
 800882a:	42a3      	cmp	r3, r4
 800882c:	6011      	str	r1, [r2, #0]
 800882e:	d1e0      	bne.n	80087f2 <_free_r+0x26>
 8008830:	681c      	ldr	r4, [r3, #0]
 8008832:	685b      	ldr	r3, [r3, #4]
 8008834:	6053      	str	r3, [r2, #4]
 8008836:	4421      	add	r1, r4
 8008838:	6011      	str	r1, [r2, #0]
 800883a:	e7da      	b.n	80087f2 <_free_r+0x26>
 800883c:	d902      	bls.n	8008844 <_free_r+0x78>
 800883e:	230c      	movs	r3, #12
 8008840:	6003      	str	r3, [r0, #0]
 8008842:	e7d6      	b.n	80087f2 <_free_r+0x26>
 8008844:	6825      	ldr	r5, [r4, #0]
 8008846:	1961      	adds	r1, r4, r5
 8008848:	428b      	cmp	r3, r1
 800884a:	bf04      	itt	eq
 800884c:	6819      	ldreq	r1, [r3, #0]
 800884e:	685b      	ldreq	r3, [r3, #4]
 8008850:	6063      	str	r3, [r4, #4]
 8008852:	bf04      	itt	eq
 8008854:	1949      	addeq	r1, r1, r5
 8008856:	6021      	streq	r1, [r4, #0]
 8008858:	6054      	str	r4, [r2, #4]
 800885a:	e7ca      	b.n	80087f2 <_free_r+0x26>
 800885c:	b003      	add	sp, #12
 800885e:	bd30      	pop	{r4, r5, pc}
 8008860:	2000151c 	.word	0x2000151c

08008864 <sbrk_aligned>:
 8008864:	b570      	push	{r4, r5, r6, lr}
 8008866:	4e0e      	ldr	r6, [pc, #56]	; (80088a0 <sbrk_aligned+0x3c>)
 8008868:	460c      	mov	r4, r1
 800886a:	6831      	ldr	r1, [r6, #0]
 800886c:	4605      	mov	r5, r0
 800886e:	b911      	cbnz	r1, 8008876 <sbrk_aligned+0x12>
 8008870:	f000 f8bc 	bl	80089ec <_sbrk_r>
 8008874:	6030      	str	r0, [r6, #0]
 8008876:	4621      	mov	r1, r4
 8008878:	4628      	mov	r0, r5
 800887a:	f000 f8b7 	bl	80089ec <_sbrk_r>
 800887e:	1c43      	adds	r3, r0, #1
 8008880:	d00a      	beq.n	8008898 <sbrk_aligned+0x34>
 8008882:	1cc4      	adds	r4, r0, #3
 8008884:	f024 0403 	bic.w	r4, r4, #3
 8008888:	42a0      	cmp	r0, r4
 800888a:	d007      	beq.n	800889c <sbrk_aligned+0x38>
 800888c:	1a21      	subs	r1, r4, r0
 800888e:	4628      	mov	r0, r5
 8008890:	f000 f8ac 	bl	80089ec <_sbrk_r>
 8008894:	3001      	adds	r0, #1
 8008896:	d101      	bne.n	800889c <sbrk_aligned+0x38>
 8008898:	f04f 34ff 	mov.w	r4, #4294967295
 800889c:	4620      	mov	r0, r4
 800889e:	bd70      	pop	{r4, r5, r6, pc}
 80088a0:	20001520 	.word	0x20001520

080088a4 <_malloc_r>:
 80088a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088a8:	1ccd      	adds	r5, r1, #3
 80088aa:	f025 0503 	bic.w	r5, r5, #3
 80088ae:	3508      	adds	r5, #8
 80088b0:	2d0c      	cmp	r5, #12
 80088b2:	bf38      	it	cc
 80088b4:	250c      	movcc	r5, #12
 80088b6:	2d00      	cmp	r5, #0
 80088b8:	4607      	mov	r7, r0
 80088ba:	db01      	blt.n	80088c0 <_malloc_r+0x1c>
 80088bc:	42a9      	cmp	r1, r5
 80088be:	d905      	bls.n	80088cc <_malloc_r+0x28>
 80088c0:	230c      	movs	r3, #12
 80088c2:	603b      	str	r3, [r7, #0]
 80088c4:	2600      	movs	r6, #0
 80088c6:	4630      	mov	r0, r6
 80088c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088cc:	4e2e      	ldr	r6, [pc, #184]	; (8008988 <_malloc_r+0xe4>)
 80088ce:	f000 f89d 	bl	8008a0c <__malloc_lock>
 80088d2:	6833      	ldr	r3, [r6, #0]
 80088d4:	461c      	mov	r4, r3
 80088d6:	bb34      	cbnz	r4, 8008926 <_malloc_r+0x82>
 80088d8:	4629      	mov	r1, r5
 80088da:	4638      	mov	r0, r7
 80088dc:	f7ff ffc2 	bl	8008864 <sbrk_aligned>
 80088e0:	1c43      	adds	r3, r0, #1
 80088e2:	4604      	mov	r4, r0
 80088e4:	d14d      	bne.n	8008982 <_malloc_r+0xde>
 80088e6:	6834      	ldr	r4, [r6, #0]
 80088e8:	4626      	mov	r6, r4
 80088ea:	2e00      	cmp	r6, #0
 80088ec:	d140      	bne.n	8008970 <_malloc_r+0xcc>
 80088ee:	6823      	ldr	r3, [r4, #0]
 80088f0:	4631      	mov	r1, r6
 80088f2:	4638      	mov	r0, r7
 80088f4:	eb04 0803 	add.w	r8, r4, r3
 80088f8:	f000 f878 	bl	80089ec <_sbrk_r>
 80088fc:	4580      	cmp	r8, r0
 80088fe:	d13a      	bne.n	8008976 <_malloc_r+0xd2>
 8008900:	6821      	ldr	r1, [r4, #0]
 8008902:	3503      	adds	r5, #3
 8008904:	1a6d      	subs	r5, r5, r1
 8008906:	f025 0503 	bic.w	r5, r5, #3
 800890a:	3508      	adds	r5, #8
 800890c:	2d0c      	cmp	r5, #12
 800890e:	bf38      	it	cc
 8008910:	250c      	movcc	r5, #12
 8008912:	4629      	mov	r1, r5
 8008914:	4638      	mov	r0, r7
 8008916:	f7ff ffa5 	bl	8008864 <sbrk_aligned>
 800891a:	3001      	adds	r0, #1
 800891c:	d02b      	beq.n	8008976 <_malloc_r+0xd2>
 800891e:	6823      	ldr	r3, [r4, #0]
 8008920:	442b      	add	r3, r5
 8008922:	6023      	str	r3, [r4, #0]
 8008924:	e00e      	b.n	8008944 <_malloc_r+0xa0>
 8008926:	6822      	ldr	r2, [r4, #0]
 8008928:	1b52      	subs	r2, r2, r5
 800892a:	d41e      	bmi.n	800896a <_malloc_r+0xc6>
 800892c:	2a0b      	cmp	r2, #11
 800892e:	d916      	bls.n	800895e <_malloc_r+0xba>
 8008930:	1961      	adds	r1, r4, r5
 8008932:	42a3      	cmp	r3, r4
 8008934:	6025      	str	r5, [r4, #0]
 8008936:	bf18      	it	ne
 8008938:	6059      	strne	r1, [r3, #4]
 800893a:	6863      	ldr	r3, [r4, #4]
 800893c:	bf08      	it	eq
 800893e:	6031      	streq	r1, [r6, #0]
 8008940:	5162      	str	r2, [r4, r5]
 8008942:	604b      	str	r3, [r1, #4]
 8008944:	4638      	mov	r0, r7
 8008946:	f104 060b 	add.w	r6, r4, #11
 800894a:	f000 f865 	bl	8008a18 <__malloc_unlock>
 800894e:	f026 0607 	bic.w	r6, r6, #7
 8008952:	1d23      	adds	r3, r4, #4
 8008954:	1af2      	subs	r2, r6, r3
 8008956:	d0b6      	beq.n	80088c6 <_malloc_r+0x22>
 8008958:	1b9b      	subs	r3, r3, r6
 800895a:	50a3      	str	r3, [r4, r2]
 800895c:	e7b3      	b.n	80088c6 <_malloc_r+0x22>
 800895e:	6862      	ldr	r2, [r4, #4]
 8008960:	42a3      	cmp	r3, r4
 8008962:	bf0c      	ite	eq
 8008964:	6032      	streq	r2, [r6, #0]
 8008966:	605a      	strne	r2, [r3, #4]
 8008968:	e7ec      	b.n	8008944 <_malloc_r+0xa0>
 800896a:	4623      	mov	r3, r4
 800896c:	6864      	ldr	r4, [r4, #4]
 800896e:	e7b2      	b.n	80088d6 <_malloc_r+0x32>
 8008970:	4634      	mov	r4, r6
 8008972:	6876      	ldr	r6, [r6, #4]
 8008974:	e7b9      	b.n	80088ea <_malloc_r+0x46>
 8008976:	230c      	movs	r3, #12
 8008978:	603b      	str	r3, [r7, #0]
 800897a:	4638      	mov	r0, r7
 800897c:	f000 f84c 	bl	8008a18 <__malloc_unlock>
 8008980:	e7a1      	b.n	80088c6 <_malloc_r+0x22>
 8008982:	6025      	str	r5, [r4, #0]
 8008984:	e7de      	b.n	8008944 <_malloc_r+0xa0>
 8008986:	bf00      	nop
 8008988:	2000151c 	.word	0x2000151c

0800898c <_realloc_r>:
 800898c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008990:	4680      	mov	r8, r0
 8008992:	4614      	mov	r4, r2
 8008994:	460e      	mov	r6, r1
 8008996:	b921      	cbnz	r1, 80089a2 <_realloc_r+0x16>
 8008998:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800899c:	4611      	mov	r1, r2
 800899e:	f7ff bf81 	b.w	80088a4 <_malloc_r>
 80089a2:	b92a      	cbnz	r2, 80089b0 <_realloc_r+0x24>
 80089a4:	f7ff ff12 	bl	80087cc <_free_r>
 80089a8:	4625      	mov	r5, r4
 80089aa:	4628      	mov	r0, r5
 80089ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089b0:	f000 f838 	bl	8008a24 <_malloc_usable_size_r>
 80089b4:	4284      	cmp	r4, r0
 80089b6:	4607      	mov	r7, r0
 80089b8:	d802      	bhi.n	80089c0 <_realloc_r+0x34>
 80089ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80089be:	d812      	bhi.n	80089e6 <_realloc_r+0x5a>
 80089c0:	4621      	mov	r1, r4
 80089c2:	4640      	mov	r0, r8
 80089c4:	f7ff ff6e 	bl	80088a4 <_malloc_r>
 80089c8:	4605      	mov	r5, r0
 80089ca:	2800      	cmp	r0, #0
 80089cc:	d0ed      	beq.n	80089aa <_realloc_r+0x1e>
 80089ce:	42bc      	cmp	r4, r7
 80089d0:	4622      	mov	r2, r4
 80089d2:	4631      	mov	r1, r6
 80089d4:	bf28      	it	cs
 80089d6:	463a      	movcs	r2, r7
 80089d8:	f7ff fba4 	bl	8008124 <memcpy>
 80089dc:	4631      	mov	r1, r6
 80089de:	4640      	mov	r0, r8
 80089e0:	f7ff fef4 	bl	80087cc <_free_r>
 80089e4:	e7e1      	b.n	80089aa <_realloc_r+0x1e>
 80089e6:	4635      	mov	r5, r6
 80089e8:	e7df      	b.n	80089aa <_realloc_r+0x1e>
	...

080089ec <_sbrk_r>:
 80089ec:	b538      	push	{r3, r4, r5, lr}
 80089ee:	4d06      	ldr	r5, [pc, #24]	; (8008a08 <_sbrk_r+0x1c>)
 80089f0:	2300      	movs	r3, #0
 80089f2:	4604      	mov	r4, r0
 80089f4:	4608      	mov	r0, r1
 80089f6:	602b      	str	r3, [r5, #0]
 80089f8:	f7f9 fd9e 	bl	8002538 <_sbrk>
 80089fc:	1c43      	adds	r3, r0, #1
 80089fe:	d102      	bne.n	8008a06 <_sbrk_r+0x1a>
 8008a00:	682b      	ldr	r3, [r5, #0]
 8008a02:	b103      	cbz	r3, 8008a06 <_sbrk_r+0x1a>
 8008a04:	6023      	str	r3, [r4, #0]
 8008a06:	bd38      	pop	{r3, r4, r5, pc}
 8008a08:	20001524 	.word	0x20001524

08008a0c <__malloc_lock>:
 8008a0c:	4801      	ldr	r0, [pc, #4]	; (8008a14 <__malloc_lock+0x8>)
 8008a0e:	f000 b811 	b.w	8008a34 <__retarget_lock_acquire_recursive>
 8008a12:	bf00      	nop
 8008a14:	20001528 	.word	0x20001528

08008a18 <__malloc_unlock>:
 8008a18:	4801      	ldr	r0, [pc, #4]	; (8008a20 <__malloc_unlock+0x8>)
 8008a1a:	f000 b80c 	b.w	8008a36 <__retarget_lock_release_recursive>
 8008a1e:	bf00      	nop
 8008a20:	20001528 	.word	0x20001528

08008a24 <_malloc_usable_size_r>:
 8008a24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a28:	1f18      	subs	r0, r3, #4
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	bfbc      	itt	lt
 8008a2e:	580b      	ldrlt	r3, [r1, r0]
 8008a30:	18c0      	addlt	r0, r0, r3
 8008a32:	4770      	bx	lr

08008a34 <__retarget_lock_acquire_recursive>:
 8008a34:	4770      	bx	lr

08008a36 <__retarget_lock_release_recursive>:
 8008a36:	4770      	bx	lr

08008a38 <_init>:
 8008a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a3a:	bf00      	nop
 8008a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a3e:	bc08      	pop	{r3}
 8008a40:	469e      	mov	lr, r3
 8008a42:	4770      	bx	lr

08008a44 <_fini>:
 8008a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a46:	bf00      	nop
 8008a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a4a:	bc08      	pop	{r3}
 8008a4c:	469e      	mov	lr, r3
 8008a4e:	4770      	bx	lr
