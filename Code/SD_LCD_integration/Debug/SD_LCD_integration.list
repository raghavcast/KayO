
SD_LCD_integration.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fd8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c54  08008178  08008178  00018178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008dcc  08008dcc  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08008dcc  08008dcc  00018dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008dd4  08008dd4  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008dd4  08008dd4  00018dd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008dd8  08008dd8  00018dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08008ddc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e0  20000090  08008e6c  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000470  08008e6c  00020470  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f6a1  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002676  00000000  00000000  0002f761  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d10  00000000  00000000  00031dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00018699  00000000  00000000  00032ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00011a63  00000000  00000000  0004b181  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0008b027  00000000  00000000  0005cbe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  000e7c0b  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000bf0  00000000  00000000  000e7c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003e18  00000000  00000000  000e8850  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000090 	.word	0x20000090
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008160 	.word	0x08008160

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000094 	.word	0x20000094
 80001dc:	08008160 	.word	0x08008160

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <ILI9341_Select>:
/* vim: set ai et ts=4 sw=4: */
#include "stm32f4xx_hal.h"
#include "ili9341.h"

static void ILI9341_Select() {
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_RESET);
 8000588:	2200      	movs	r2, #0
 800058a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800058e:	4802      	ldr	r0, [pc, #8]	; (8000598 <ILI9341_Select+0x14>)
 8000590:	f001 fd4c 	bl	800202c <HAL_GPIO_WritePin>
}
 8000594:	bf00      	nop
 8000596:	bd80      	pop	{r7, pc}
 8000598:	40020000 	.word	0x40020000

0800059c <ILI9341_Unselect>:

void ILI9341_Unselect() {
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_SET);
 80005a0:	2201      	movs	r2, #1
 80005a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005a6:	4802      	ldr	r0, [pc, #8]	; (80005b0 <ILI9341_Unselect+0x14>)
 80005a8:	f001 fd40 	bl	800202c <HAL_GPIO_WritePin>
}
 80005ac:	bf00      	nop
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	40020000 	.word	0x40020000

080005b4 <ILI9341_Reset>:

static void ILI9341_Reset() {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_RESET);
 80005b8:	2200      	movs	r2, #0
 80005ba:	2104      	movs	r1, #4
 80005bc:	4806      	ldr	r0, [pc, #24]	; (80005d8 <ILI9341_Reset+0x24>)
 80005be:	f001 fd35 	bl	800202c <HAL_GPIO_WritePin>
    HAL_Delay(5);
 80005c2:	2005      	movs	r0, #5
 80005c4:	f001 faa4 	bl	8001b10 <HAL_Delay>
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_SET);
 80005c8:	2201      	movs	r2, #1
 80005ca:	2104      	movs	r1, #4
 80005cc:	4802      	ldr	r0, [pc, #8]	; (80005d8 <ILI9341_Reset+0x24>)
 80005ce:	f001 fd2d 	bl	800202c <HAL_GPIO_WritePin>
}
 80005d2:	bf00      	nop
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	40020c00 	.word	0x40020c00

080005dc <ILI9341_WriteCommand>:

static void ILI9341_WriteCommand(uint8_t cmd) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 80005e6:	2200      	movs	r2, #0
 80005e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005ec:	4806      	ldr	r0, [pc, #24]	; (8000608 <ILI9341_WriteCommand+0x2c>)
 80005ee:	f001 fd1d 	bl	800202c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ILI9341_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80005f2:	1df9      	adds	r1, r7, #7
 80005f4:	f04f 33ff 	mov.w	r3, #4294967295
 80005f8:	2201      	movs	r2, #1
 80005fa:	4804      	ldr	r0, [pc, #16]	; (800060c <ILI9341_WriteCommand+0x30>)
 80005fc:	f002 fa51 	bl	8002aa2 <HAL_SPI_Transmit>
}
 8000600:	bf00      	nop
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	40020800 	.word	0x40020800
 800060c:	20000104 	.word	0x20000104

08000610 <ILI9341_WriteData>:

static void ILI9341_WriteData(uint8_t* buff, size_t buff_size) {
 8000610:	b580      	push	{r7, lr}
 8000612:	b084      	sub	sp, #16
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
 8000618:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 800061a:	2201      	movs	r2, #1
 800061c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000620:	4810      	ldr	r0, [pc, #64]	; (8000664 <ILI9341_WriteData+0x54>)
 8000622:	f001 fd03 	bl	800202c <HAL_GPIO_WritePin>

    // split data in small chunks because HAL can't send more then 64K at once
    while(buff_size > 0) {
 8000626:	e015      	b.n	8000654 <ILI9341_WriteData+0x44>
        uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800062e:	bf28      	it	cs
 8000630:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8000634:	81fb      	strh	r3, [r7, #14]
        HAL_SPI_Transmit(&ILI9341_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 8000636:	89fa      	ldrh	r2, [r7, #14]
 8000638:	f04f 33ff 	mov.w	r3, #4294967295
 800063c:	6879      	ldr	r1, [r7, #4]
 800063e:	480a      	ldr	r0, [pc, #40]	; (8000668 <ILI9341_WriteData+0x58>)
 8000640:	f002 fa2f 	bl	8002aa2 <HAL_SPI_Transmit>
        buff += chunk_size;
 8000644:	89fb      	ldrh	r3, [r7, #14]
 8000646:	687a      	ldr	r2, [r7, #4]
 8000648:	4413      	add	r3, r2
 800064a:	607b      	str	r3, [r7, #4]
        buff_size -= chunk_size;
 800064c:	89fb      	ldrh	r3, [r7, #14]
 800064e:	683a      	ldr	r2, [r7, #0]
 8000650:	1ad3      	subs	r3, r2, r3
 8000652:	603b      	str	r3, [r7, #0]
    while(buff_size > 0) {
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d1e6      	bne.n	8000628 <ILI9341_WriteData+0x18>
    }
}
 800065a:	bf00      	nop
 800065c:	bf00      	nop
 800065e:	3710      	adds	r7, #16
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	40020800 	.word	0x40020800
 8000668:	20000104 	.word	0x20000104

0800066c <ILI9341_SetAddressWindow>:

static void ILI9341_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 800066c:	b590      	push	{r4, r7, lr}
 800066e:	b085      	sub	sp, #20
 8000670:	af00      	add	r7, sp, #0
 8000672:	4604      	mov	r4, r0
 8000674:	4608      	mov	r0, r1
 8000676:	4611      	mov	r1, r2
 8000678:	461a      	mov	r2, r3
 800067a:	4623      	mov	r3, r4
 800067c:	80fb      	strh	r3, [r7, #6]
 800067e:	4603      	mov	r3, r0
 8000680:	80bb      	strh	r3, [r7, #4]
 8000682:	460b      	mov	r3, r1
 8000684:	807b      	strh	r3, [r7, #2]
 8000686:	4613      	mov	r3, r2
 8000688:	803b      	strh	r3, [r7, #0]
    // column address set
    ILI9341_WriteCommand(0x2A); // CASET
 800068a:	202a      	movs	r0, #42	; 0x2a
 800068c:	f7ff ffa6 	bl	80005dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 8000690:	88fb      	ldrh	r3, [r7, #6]
 8000692:	0a1b      	lsrs	r3, r3, #8
 8000694:	b29b      	uxth	r3, r3
 8000696:	b2db      	uxtb	r3, r3
 8000698:	733b      	strb	r3, [r7, #12]
 800069a:	88fb      	ldrh	r3, [r7, #6]
 800069c:	b2db      	uxtb	r3, r3
 800069e:	737b      	strb	r3, [r7, #13]
 80006a0:	887b      	ldrh	r3, [r7, #2]
 80006a2:	0a1b      	lsrs	r3, r3, #8
 80006a4:	b29b      	uxth	r3, r3
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	73bb      	strb	r3, [r7, #14]
 80006aa:	887b      	ldrh	r3, [r7, #2]
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	73fb      	strb	r3, [r7, #15]
        ILI9341_WriteData(data, sizeof(data));
 80006b0:	f107 030c 	add.w	r3, r7, #12
 80006b4:	2104      	movs	r1, #4
 80006b6:	4618      	mov	r0, r3
 80006b8:	f7ff ffaa 	bl	8000610 <ILI9341_WriteData>
    }

    // row address set
    ILI9341_WriteCommand(0x2B); // RASET
 80006bc:	202b      	movs	r0, #43	; 0x2b
 80006be:	f7ff ff8d 	bl	80005dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 80006c2:	88bb      	ldrh	r3, [r7, #4]
 80006c4:	0a1b      	lsrs	r3, r3, #8
 80006c6:	b29b      	uxth	r3, r3
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	723b      	strb	r3, [r7, #8]
 80006cc:	88bb      	ldrh	r3, [r7, #4]
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	727b      	strb	r3, [r7, #9]
 80006d2:	883b      	ldrh	r3, [r7, #0]
 80006d4:	0a1b      	lsrs	r3, r3, #8
 80006d6:	b29b      	uxth	r3, r3
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	72bb      	strb	r3, [r7, #10]
 80006dc:	883b      	ldrh	r3, [r7, #0]
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	72fb      	strb	r3, [r7, #11]
        ILI9341_WriteData(data, sizeof(data));
 80006e2:	f107 0308 	add.w	r3, r7, #8
 80006e6:	2104      	movs	r1, #4
 80006e8:	4618      	mov	r0, r3
 80006ea:	f7ff ff91 	bl	8000610 <ILI9341_WriteData>
    }

    // write to RAM
    ILI9341_WriteCommand(0x2C); // RAMWR
 80006ee:	202c      	movs	r0, #44	; 0x2c
 80006f0:	f7ff ff74 	bl	80005dc <ILI9341_WriteCommand>
}
 80006f4:	bf00      	nop
 80006f6:	3714      	adds	r7, #20
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd90      	pop	{r4, r7, pc}

080006fc <ILI9341_Init>:

void ILI9341_Init() {
 80006fc:	b590      	push	{r4, r7, lr}
 80006fe:	b09b      	sub	sp, #108	; 0x6c
 8000700:	af00      	add	r7, sp, #0
    ILI9341_Select();
 8000702:	f7ff ff3f 	bl	8000584 <ILI9341_Select>
    ILI9341_Reset();
 8000706:	f7ff ff55 	bl	80005b4 <ILI9341_Reset>

    // command list is based on https://github.com/martnak/STM32-ILI9341

    // SOFTWARE RESET
    ILI9341_WriteCommand(0x01);
 800070a:	2001      	movs	r0, #1
 800070c:	f7ff ff66 	bl	80005dc <ILI9341_WriteCommand>
    HAL_Delay(1000);
 8000710:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000714:	f001 f9fc 	bl	8001b10 <HAL_Delay>

    // POWER CONTROL A
    ILI9341_WriteCommand(0xCB);
 8000718:	20cb      	movs	r0, #203	; 0xcb
 800071a:	f7ff ff5f 	bl	80005dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x39, 0x2C, 0x00, 0x34, 0x02 };
 800071e:	4a87      	ldr	r2, [pc, #540]	; (800093c <ILI9341_Init+0x240>)
 8000720:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000724:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000728:	6018      	str	r0, [r3, #0]
 800072a:	3304      	adds	r3, #4
 800072c:	7019      	strb	r1, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 800072e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000732:	2105      	movs	r1, #5
 8000734:	4618      	mov	r0, r3
 8000736:	f7ff ff6b 	bl	8000610 <ILI9341_WriteData>
    }

    // POWER CONTROL B
    ILI9341_WriteCommand(0xCF);
 800073a:	20cf      	movs	r0, #207	; 0xcf
 800073c:	f7ff ff4e 	bl	80005dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0xC1, 0x30 };
 8000740:	4a7f      	ldr	r2, [pc, #508]	; (8000940 <ILI9341_Init+0x244>)
 8000742:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000746:	6812      	ldr	r2, [r2, #0]
 8000748:	4611      	mov	r1, r2
 800074a:	8019      	strh	r1, [r3, #0]
 800074c:	3302      	adds	r3, #2
 800074e:	0c12      	lsrs	r2, r2, #16
 8000750:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8000752:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000756:	2103      	movs	r1, #3
 8000758:	4618      	mov	r0, r3
 800075a:	f7ff ff59 	bl	8000610 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL A
    ILI9341_WriteCommand(0xE8);
 800075e:	20e8      	movs	r0, #232	; 0xe8
 8000760:	f7ff ff3c 	bl	80005dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x85, 0x00, 0x78 };
 8000764:	4a77      	ldr	r2, [pc, #476]	; (8000944 <ILI9341_Init+0x248>)
 8000766:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800076a:	6812      	ldr	r2, [r2, #0]
 800076c:	4611      	mov	r1, r2
 800076e:	8019      	strh	r1, [r3, #0]
 8000770:	3302      	adds	r3, #2
 8000772:	0c12      	lsrs	r2, r2, #16
 8000774:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8000776:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800077a:	2103      	movs	r1, #3
 800077c:	4618      	mov	r0, r3
 800077e:	f7ff ff47 	bl	8000610 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL B
    ILI9341_WriteCommand(0xEA);
 8000782:	20ea      	movs	r0, #234	; 0xea
 8000784:	f7ff ff2a 	bl	80005dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x00 };
 8000788:	2300      	movs	r3, #0
 800078a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
        ILI9341_WriteData(data, sizeof(data));
 800078e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000792:	2102      	movs	r1, #2
 8000794:	4618      	mov	r0, r3
 8000796:	f7ff ff3b 	bl	8000610 <ILI9341_WriteData>
    }

    // POWER ON SEQUENCE CONTROL
    ILI9341_WriteCommand(0xED);
 800079a:	20ed      	movs	r0, #237	; 0xed
 800079c:	f7ff ff1e 	bl	80005dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x64, 0x03, 0x12, 0x81 };
 80007a0:	4b69      	ldr	r3, [pc, #420]	; (8000948 <ILI9341_Init+0x24c>)
 80007a2:	653b      	str	r3, [r7, #80]	; 0x50
        ILI9341_WriteData(data, sizeof(data));
 80007a4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80007a8:	2104      	movs	r1, #4
 80007aa:	4618      	mov	r0, r3
 80007ac:	f7ff ff30 	bl	8000610 <ILI9341_WriteData>
    }

    // PUMP RATIO CONTROL
    ILI9341_WriteCommand(0xF7);
 80007b0:	20f7      	movs	r0, #247	; 0xf7
 80007b2:	f7ff ff13 	bl	80005dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x20 };
 80007b6:	2320      	movs	r3, #32
 80007b8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
        ILI9341_WriteData(data, sizeof(data));
 80007bc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80007c0:	2101      	movs	r1, #1
 80007c2:	4618      	mov	r0, r3
 80007c4:	f7ff ff24 	bl	8000610 <ILI9341_WriteData>
    }

    // POWER CONTROL,VRH[5:0]
    ILI9341_WriteCommand(0xC0);
 80007c8:	20c0      	movs	r0, #192	; 0xc0
 80007ca:	f7ff ff07 	bl	80005dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x23 };
 80007ce:	2323      	movs	r3, #35	; 0x23
 80007d0:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
        ILI9341_WriteData(data, sizeof(data));
 80007d4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80007d8:	2101      	movs	r1, #1
 80007da:	4618      	mov	r0, r3
 80007dc:	f7ff ff18 	bl	8000610 <ILI9341_WriteData>
    }

    // POWER CONTROL,SAP[2:0];BT[3:0]
    ILI9341_WriteCommand(0xC1);
 80007e0:	20c1      	movs	r0, #193	; 0xc1
 80007e2:	f7ff fefb 	bl	80005dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x10 };
 80007e6:	2310      	movs	r3, #16
 80007e8:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
        ILI9341_WriteData(data, sizeof(data));
 80007ec:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80007f0:	2101      	movs	r1, #1
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff ff0c 	bl	8000610 <ILI9341_WriteData>
    }

    // VCM CONTROL
    ILI9341_WriteCommand(0xC5);
 80007f8:	20c5      	movs	r0, #197	; 0xc5
 80007fa:	f7ff feef 	bl	80005dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x3E, 0x28 };
 80007fe:	f642 033e 	movw	r3, #10302	; 0x283e
 8000802:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
        ILI9341_WriteData(data, sizeof(data));
 8000806:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800080a:	2102      	movs	r1, #2
 800080c:	4618      	mov	r0, r3
 800080e:	f7ff feff 	bl	8000610 <ILI9341_WriteData>
    }

    // VCM CONTROL 2
    ILI9341_WriteCommand(0xC7);
 8000812:	20c7      	movs	r0, #199	; 0xc7
 8000814:	f7ff fee2 	bl	80005dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x86 };
 8000818:	2386      	movs	r3, #134	; 0x86
 800081a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        ILI9341_WriteData(data, sizeof(data));
 800081e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000822:	2101      	movs	r1, #1
 8000824:	4618      	mov	r0, r3
 8000826:	f7ff fef3 	bl	8000610 <ILI9341_WriteData>
    }

    // MEMORY ACCESS CONTROL
    ILI9341_WriteCommand(0x36);
 800082a:	2036      	movs	r0, #54	; 0x36
 800082c:	f7ff fed6 	bl	80005dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x48 };
 8000830:	2348      	movs	r3, #72	; 0x48
 8000832:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        ILI9341_WriteData(data, sizeof(data));
 8000836:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800083a:	2101      	movs	r1, #1
 800083c:	4618      	mov	r0, r3
 800083e:	f7ff fee7 	bl	8000610 <ILI9341_WriteData>
    }

    // PIXEL FORMAT
    ILI9341_WriteCommand(0x3A);
 8000842:	203a      	movs	r0, #58	; 0x3a
 8000844:	f7ff feca 	bl	80005dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x55 };
 8000848:	2355      	movs	r3, #85	; 0x55
 800084a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        ILI9341_WriteData(data, sizeof(data));
 800084e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000852:	2101      	movs	r1, #1
 8000854:	4618      	mov	r0, r3
 8000856:	f7ff fedb 	bl	8000610 <ILI9341_WriteData>
    }

    // FRAME RATIO CONTROL, STANDARD RGB COLOR
    ILI9341_WriteCommand(0xB1);
 800085a:	20b1      	movs	r0, #177	; 0xb1
 800085c:	f7ff febe 	bl	80005dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x18 };
 8000860:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000864:	863b      	strh	r3, [r7, #48]	; 0x30
        ILI9341_WriteData(data, sizeof(data));
 8000866:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800086a:	2102      	movs	r1, #2
 800086c:	4618      	mov	r0, r3
 800086e:	f7ff fecf 	bl	8000610 <ILI9341_WriteData>
    }

    // DISPLAY FUNCTION CONTROL
    ILI9341_WriteCommand(0xB6);
 8000872:	20b6      	movs	r0, #182	; 0xb6
 8000874:	f7ff feb2 	bl	80005dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x08, 0x82, 0x27 };
 8000878:	4a34      	ldr	r2, [pc, #208]	; (800094c <ILI9341_Init+0x250>)
 800087a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800087e:	6812      	ldr	r2, [r2, #0]
 8000880:	4611      	mov	r1, r2
 8000882:	8019      	strh	r1, [r3, #0]
 8000884:	3302      	adds	r3, #2
 8000886:	0c12      	lsrs	r2, r2, #16
 8000888:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 800088a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800088e:	2103      	movs	r1, #3
 8000890:	4618      	mov	r0, r3
 8000892:	f7ff febd 	bl	8000610 <ILI9341_WriteData>
    }

    // 3GAMMA FUNCTION DISABLE
    ILI9341_WriteCommand(0xF2);
 8000896:	20f2      	movs	r0, #242	; 0xf2
 8000898:	f7ff fea0 	bl	80005dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00 };
 800089c:	2300      	movs	r3, #0
 800089e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        ILI9341_WriteData(data, sizeof(data));
 80008a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008a6:	2101      	movs	r1, #1
 80008a8:	4618      	mov	r0, r3
 80008aa:	f7ff feb1 	bl	8000610 <ILI9341_WriteData>
    }

    // GAMMA CURVE SELECTED
    ILI9341_WriteCommand(0x26);
 80008ae:	2026      	movs	r0, #38	; 0x26
 80008b0:	f7ff fe94 	bl	80005dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x01 };
 80008b4:	2301      	movs	r3, #1
 80008b6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        ILI9341_WriteData(data, sizeof(data));
 80008ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008be:	2101      	movs	r1, #1
 80008c0:	4618      	mov	r0, r3
 80008c2:	f7ff fea5 	bl	8000610 <ILI9341_WriteData>
    }

    // POSITIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE0);
 80008c6:	20e0      	movs	r0, #224	; 0xe0
 80008c8:	f7ff fe88 	bl	80005dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,
 80008cc:	4b20      	ldr	r3, [pc, #128]	; (8000950 <ILI9341_Init+0x254>)
 80008ce:	f107 0414 	add.w	r4, r7, #20
 80008d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008d4:	c407      	stmia	r4!, {r0, r1, r2}
 80008d6:	8023      	strh	r3, [r4, #0]
 80008d8:	3402      	adds	r4, #2
 80008da:	0c1b      	lsrs	r3, r3, #16
 80008dc:	7023      	strb	r3, [r4, #0]
                           0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00 };
        ILI9341_WriteData(data, sizeof(data));
 80008de:	f107 0314 	add.w	r3, r7, #20
 80008e2:	210f      	movs	r1, #15
 80008e4:	4618      	mov	r0, r3
 80008e6:	f7ff fe93 	bl	8000610 <ILI9341_WriteData>
    }

    // NEGATIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE1);
 80008ea:	20e1      	movs	r0, #225	; 0xe1
 80008ec:	f7ff fe76 	bl	80005dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,
 80008f0:	4b18      	ldr	r3, [pc, #96]	; (8000954 <ILI9341_Init+0x258>)
 80008f2:	1d3c      	adds	r4, r7, #4
 80008f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008f6:	c407      	stmia	r4!, {r0, r1, r2}
 80008f8:	8023      	strh	r3, [r4, #0]
 80008fa:	3402      	adds	r4, #2
 80008fc:	0c1b      	lsrs	r3, r3, #16
 80008fe:	7023      	strb	r3, [r4, #0]
                           0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F };
        ILI9341_WriteData(data, sizeof(data));
 8000900:	1d3b      	adds	r3, r7, #4
 8000902:	210f      	movs	r1, #15
 8000904:	4618      	mov	r0, r3
 8000906:	f7ff fe83 	bl	8000610 <ILI9341_WriteData>
    }

    // EXIT SLEEP
    ILI9341_WriteCommand(0x11);
 800090a:	2011      	movs	r0, #17
 800090c:	f7ff fe66 	bl	80005dc <ILI9341_WriteCommand>
    HAL_Delay(120);
 8000910:	2078      	movs	r0, #120	; 0x78
 8000912:	f001 f8fd 	bl	8001b10 <HAL_Delay>

    // TURN ON DISPLAY
    ILI9341_WriteCommand(0x29);
 8000916:	2029      	movs	r0, #41	; 0x29
 8000918:	f7ff fe60 	bl	80005dc <ILI9341_WriteCommand>

    // MADCTL
    ILI9341_WriteCommand(0x36);
 800091c:	2036      	movs	r0, #54	; 0x36
 800091e:	f7ff fe5d 	bl	80005dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { ILI9341_ROTATION };
 8000922:	2348      	movs	r3, #72	; 0x48
 8000924:	703b      	strb	r3, [r7, #0]
        ILI9341_WriteData(data, sizeof(data));
 8000926:	463b      	mov	r3, r7
 8000928:	2101      	movs	r1, #1
 800092a:	4618      	mov	r0, r3
 800092c:	f7ff fe70 	bl	8000610 <ILI9341_WriteData>
    }

    ILI9341_Unselect();
 8000930:	f7ff fe34 	bl	800059c <ILI9341_Unselect>
}
 8000934:	bf00      	nop
 8000936:	376c      	adds	r7, #108	; 0x6c
 8000938:	46bd      	mov	sp, r7
 800093a:	bd90      	pop	{r4, r7, pc}
 800093c:	08008178 	.word	0x08008178
 8000940:	08008180 	.word	0x08008180
 8000944:	08008184 	.word	0x08008184
 8000948:	81120364 	.word	0x81120364
 800094c:	08008188 	.word	0x08008188
 8000950:	0800818c 	.word	0x0800818c
 8000954:	0800819c 	.word	0x0800819c

08000958 <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	80fb      	strh	r3, [r7, #6]
 8000962:	460b      	mov	r3, r1
 8000964:	80bb      	strh	r3, [r7, #4]
 8000966:	4613      	mov	r3, r2
 8000968:	807b      	strh	r3, [r7, #2]
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT))
 800096a:	88fb      	ldrh	r3, [r7, #6]
 800096c:	2bef      	cmp	r3, #239	; 0xef
 800096e:	d820      	bhi.n	80009b2 <ILI9341_DrawPixel+0x5a>
 8000970:	88bb      	ldrh	r3, [r7, #4]
 8000972:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000976:	d21c      	bcs.n	80009b2 <ILI9341_DrawPixel+0x5a>
        return;

    ILI9341_Select();
 8000978:	f7ff fe04 	bl	8000584 <ILI9341_Select>

    ILI9341_SetAddressWindow(x, y, x+1, y+1);
 800097c:	88fb      	ldrh	r3, [r7, #6]
 800097e:	3301      	adds	r3, #1
 8000980:	b29a      	uxth	r2, r3
 8000982:	88bb      	ldrh	r3, [r7, #4]
 8000984:	3301      	adds	r3, #1
 8000986:	b29b      	uxth	r3, r3
 8000988:	88b9      	ldrh	r1, [r7, #4]
 800098a:	88f8      	ldrh	r0, [r7, #6]
 800098c:	f7ff fe6e 	bl	800066c <ILI9341_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 8000990:	887b      	ldrh	r3, [r7, #2]
 8000992:	0a1b      	lsrs	r3, r3, #8
 8000994:	b29b      	uxth	r3, r3
 8000996:	b2db      	uxtb	r3, r3
 8000998:	733b      	strb	r3, [r7, #12]
 800099a:	887b      	ldrh	r3, [r7, #2]
 800099c:	b2db      	uxtb	r3, r3
 800099e:	737b      	strb	r3, [r7, #13]
    ILI9341_WriteData(data, sizeof(data));
 80009a0:	f107 030c 	add.w	r3, r7, #12
 80009a4:	2102      	movs	r1, #2
 80009a6:	4618      	mov	r0, r3
 80009a8:	f7ff fe32 	bl	8000610 <ILI9341_WriteData>

    ILI9341_Unselect();
 80009ac:	f7ff fdf6 	bl	800059c <ILI9341_Unselect>
 80009b0:	e000      	b.n	80009b4 <ILI9341_DrawPixel+0x5c>
        return;
 80009b2:	bf00      	nop
}
 80009b4:	3710      	adds	r7, #16
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}

080009ba <ILI9341_WriteChar>:

static void ILI9341_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 80009ba:	b082      	sub	sp, #8
 80009bc:	b590      	push	{r4, r7, lr}
 80009be:	b089      	sub	sp, #36	; 0x24
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	637b      	str	r3, [r7, #52]	; 0x34
 80009c4:	4603      	mov	r3, r0
 80009c6:	80fb      	strh	r3, [r7, #6]
 80009c8:	460b      	mov	r3, r1
 80009ca:	80bb      	strh	r3, [r7, #4]
 80009cc:	4613      	mov	r3, r2
 80009ce:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ILI9341_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 80009d0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80009d4:	b29a      	uxth	r2, r3
 80009d6:	88fb      	ldrh	r3, [r7, #6]
 80009d8:	4413      	add	r3, r2
 80009da:	b29b      	uxth	r3, r3
 80009dc:	3b01      	subs	r3, #1
 80009de:	b29c      	uxth	r4, r3
 80009e0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80009e4:	b29a      	uxth	r2, r3
 80009e6:	88bb      	ldrh	r3, [r7, #4]
 80009e8:	4413      	add	r3, r2
 80009ea:	b29b      	uxth	r3, r3
 80009ec:	3b01      	subs	r3, #1
 80009ee:	b29b      	uxth	r3, r3
 80009f0:	88b9      	ldrh	r1, [r7, #4]
 80009f2:	88f8      	ldrh	r0, [r7, #6]
 80009f4:	4622      	mov	r2, r4
 80009f6:	f7ff fe39 	bl	800066c <ILI9341_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 80009fa:	2300      	movs	r3, #0
 80009fc:	61fb      	str	r3, [r7, #28]
 80009fe:	e043      	b.n	8000a88 <ILI9341_WriteChar+0xce>
        b = font.data[(ch - 32) * font.height + i];
 8000a00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000a02:	78fb      	ldrb	r3, [r7, #3]
 8000a04:	3b20      	subs	r3, #32
 8000a06:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8000a0a:	fb01 f303 	mul.w	r3, r1, r3
 8000a0e:	4619      	mov	r1, r3
 8000a10:	69fb      	ldr	r3, [r7, #28]
 8000a12:	440b      	add	r3, r1
 8000a14:	005b      	lsls	r3, r3, #1
 8000a16:	4413      	add	r3, r2
 8000a18:	881b      	ldrh	r3, [r3, #0]
 8000a1a:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	61bb      	str	r3, [r7, #24]
 8000a20:	e029      	b.n	8000a76 <ILI9341_WriteChar+0xbc>
            if((b << j) & 0x8000)  {
 8000a22:	697a      	ldr	r2, [r7, #20]
 8000a24:	69bb      	ldr	r3, [r7, #24]
 8000a26:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d00e      	beq.n	8000a50 <ILI9341_WriteChar+0x96>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8000a32:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000a34:	0a1b      	lsrs	r3, r3, #8
 8000a36:	b29b      	uxth	r3, r3
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	743b      	strb	r3, [r7, #16]
 8000a3c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	747b      	strb	r3, [r7, #17]
                ILI9341_WriteData(data, sizeof(data));
 8000a42:	f107 0310 	add.w	r3, r7, #16
 8000a46:	2102      	movs	r1, #2
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff fde1 	bl	8000610 <ILI9341_WriteData>
 8000a4e:	e00f      	b.n	8000a70 <ILI9341_WriteChar+0xb6>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8000a50:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000a54:	0a1b      	lsrs	r3, r3, #8
 8000a56:	b29b      	uxth	r3, r3
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	733b      	strb	r3, [r7, #12]
 8000a5c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	737b      	strb	r3, [r7, #13]
                ILI9341_WriteData(data, sizeof(data));
 8000a64:	f107 030c 	add.w	r3, r7, #12
 8000a68:	2102      	movs	r1, #2
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f7ff fdd0 	bl	8000610 <ILI9341_WriteData>
        for(j = 0; j < font.width; j++) {
 8000a70:	69bb      	ldr	r3, [r7, #24]
 8000a72:	3301      	adds	r3, #1
 8000a74:	61bb      	str	r3, [r7, #24]
 8000a76:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	69bb      	ldr	r3, [r7, #24]
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d3cf      	bcc.n	8000a22 <ILI9341_WriteChar+0x68>
    for(i = 0; i < font.height; i++) {
 8000a82:	69fb      	ldr	r3, [r7, #28]
 8000a84:	3301      	adds	r3, #1
 8000a86:	61fb      	str	r3, [r7, #28]
 8000a88:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	69fb      	ldr	r3, [r7, #28]
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d3b5      	bcc.n	8000a00 <ILI9341_WriteChar+0x46>
            }
        }
    }
}
 8000a94:	bf00      	nop
 8000a96:	bf00      	nop
 8000a98:	3724      	adds	r7, #36	; 0x24
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000aa0:	b002      	add	sp, #8
 8000aa2:	4770      	bx	lr

08000aa4 <ILI9341_WriteString>:

void ILI9341_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000aa4:	b082      	sub	sp, #8
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	b086      	sub	sp, #24
 8000aaa:	af04      	add	r7, sp, #16
 8000aac:	603a      	str	r2, [r7, #0]
 8000aae:	617b      	str	r3, [r7, #20]
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	80fb      	strh	r3, [r7, #6]
 8000ab4:	460b      	mov	r3, r1
 8000ab6:	80bb      	strh	r3, [r7, #4]
    ILI9341_Select();
 8000ab8:	f7ff fd64 	bl	8000584 <ILI9341_Select>

    while(*str) {
 8000abc:	e02e      	b.n	8000b1c <ILI9341_WriteString+0x78>
        if(x + font.width >= ILI9341_WIDTH) {
 8000abe:	88fb      	ldrh	r3, [r7, #6]
 8000ac0:	7d3a      	ldrb	r2, [r7, #20]
 8000ac2:	4413      	add	r3, r2
 8000ac4:	2bef      	cmp	r3, #239	; 0xef
 8000ac6:	dd14      	ble.n	8000af2 <ILI9341_WriteString+0x4e>
            x = 0;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8000acc:	7d7b      	ldrb	r3, [r7, #21]
 8000ace:	b29a      	uxth	r2, r3
 8000ad0:	88bb      	ldrh	r3, [r7, #4]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ILI9341_HEIGHT) {
 8000ad6:	88bb      	ldrh	r3, [r7, #4]
 8000ad8:	7d7a      	ldrb	r2, [r7, #21]
 8000ada:	4413      	add	r3, r2
 8000adc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000ae0:	da21      	bge.n	8000b26 <ILI9341_WriteString+0x82>
                break;
            }

            if(*str == ' ') {
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	2b20      	cmp	r3, #32
 8000ae8:	d103      	bne.n	8000af2 <ILI9341_WriteString+0x4e>
                // skip spaces in the beginning of the new line
                str++;
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	3301      	adds	r3, #1
 8000aee:	603b      	str	r3, [r7, #0]
                continue;
 8000af0:	e014      	b.n	8000b1c <ILI9341_WriteString+0x78>
            }
        }

        ILI9341_WriteChar(x, y, *str, font, color, bgcolor);
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	781a      	ldrb	r2, [r3, #0]
 8000af6:	88b9      	ldrh	r1, [r7, #4]
 8000af8:	88f8      	ldrh	r0, [r7, #6]
 8000afa:	8c3b      	ldrh	r3, [r7, #32]
 8000afc:	9302      	str	r3, [sp, #8]
 8000afe:	8bbb      	ldrh	r3, [r7, #28]
 8000b00:	9301      	str	r3, [sp, #4]
 8000b02:	69bb      	ldr	r3, [r7, #24]
 8000b04:	9300      	str	r3, [sp, #0]
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	f7ff ff57 	bl	80009ba <ILI9341_WriteChar>
        x += font.width;
 8000b0c:	7d3b      	ldrb	r3, [r7, #20]
 8000b0e:	b29a      	uxth	r2, r3
 8000b10:	88fb      	ldrh	r3, [r7, #6]
 8000b12:	4413      	add	r3, r2
 8000b14:	80fb      	strh	r3, [r7, #6]
        str++;
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	3301      	adds	r3, #1
 8000b1a:	603b      	str	r3, [r7, #0]
    while(*str) {
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d1cc      	bne.n	8000abe <ILI9341_WriteString+0x1a>
 8000b24:	e000      	b.n	8000b28 <ILI9341_WriteString+0x84>
                break;
 8000b26:	bf00      	nop
    }

    ILI9341_Unselect();
 8000b28:	f7ff fd38 	bl	800059c <ILI9341_Unselect>
}
 8000b2c:	bf00      	nop
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b36:	b002      	add	sp, #8
 8000b38:	4770      	bx	lr
	...

08000b3c <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000b44:	1d39      	adds	r1, r7, #4
 8000b46:	f04f 33ff 	mov.w	r3, #4294967295
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	4803      	ldr	r0, [pc, #12]	; (8000b5c <__io_putchar+0x20>)
 8000b4e:	f002 fb9e 	bl	800328e <HAL_UART_Transmit>
  return ch;
 8000b52:	687b      	ldr	r3, [r7, #4]
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3708      	adds	r7, #8
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	2000015c 	.word	0x2000015c

08000b60 <displayImage>:
    {
    	buffer[i]= '\0';
    }
}

int displayImage(const char* fname) {
 8000b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b64:	b09e      	sub	sp, #120	; 0x78
 8000b66:	af04      	add	r7, sp, #16
 8000b68:	6078      	str	r0, [r7, #4]
 8000b6a:	466b      	mov	r3, sp
 8000b6c:	469a      	mov	sl, r3
//    UART_Printf("Openning %s...\r\n", fname);
//    FIL file;
    FRESULT res = f_open(&file, fname, FA_READ);
 8000b6e:	2201      	movs	r2, #1
 8000b70:	6879      	ldr	r1, [r7, #4]
 8000b72:	4841      	ldr	r0, [pc, #260]	; (8000c78 <displayImage+0x118>)
 8000b74:	f005 f9d2 	bl	8005f1c <f_open>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    if(res != FR_OK) {
 8000b7e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d01e      	beq.n	8000bc4 <displayImage+0x64>
    	snprintf(buff, sizeof(buff), "f_open() failed, res = %d\r\n", res);
 8000b86:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8000b8a:	4a3c      	ldr	r2, [pc, #240]	; (8000c7c <displayImage+0x11c>)
 8000b8c:	2140      	movs	r1, #64	; 0x40
 8000b8e:	483c      	ldr	r0, [pc, #240]	; (8000c80 <displayImage+0x120>)
 8000b90:	f006 f980 	bl	8006e94 <sniprintf>
    	printf("f_open() failed, res = %d\r\n", res);
 8000b94:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4838      	ldr	r0, [pc, #224]	; (8000c7c <displayImage+0x11c>)
 8000b9c:	f006 f8ec 	bl	8006d78 <iprintf>
        ILI9341_WriteString(0, 10, buff, Font_7x10, ILI9341_RED, ILI9341_WHITE);
 8000ba0:	4b38      	ldr	r3, [pc, #224]	; (8000c84 <displayImage+0x124>)
 8000ba2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ba6:	9202      	str	r2, [sp, #8]
 8000ba8:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000bac:	9201      	str	r2, [sp, #4]
 8000bae:	685a      	ldr	r2, [r3, #4]
 8000bb0:	9200      	str	r2, [sp, #0]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a32      	ldr	r2, [pc, #200]	; (8000c80 <displayImage+0x120>)
 8000bb6:	210a      	movs	r1, #10
 8000bb8:	2000      	movs	r0, #0
 8000bba:	f7ff ff73 	bl	8000aa4 <ILI9341_WriteString>
        return -1;
 8000bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc2:	e28c      	b.n	80010de <displayImage+0x57e>
    }

    printf("File opened, reading...\r\n");
 8000bc4:	4830      	ldr	r0, [pc, #192]	; (8000c88 <displayImage+0x128>)
 8000bc6:	f006 f95d 	bl	8006e84 <puts>
    ILI9341_WriteString(0, 20, "File opened, reading...\r\n", Font_7x10, ILI9341_RED, ILI9341_WHITE);
 8000bca:	4b2e      	ldr	r3, [pc, #184]	; (8000c84 <displayImage+0x124>)
 8000bcc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bd0:	9202      	str	r2, [sp, #8]
 8000bd2:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000bd6:	9201      	str	r2, [sp, #4]
 8000bd8:	685a      	ldr	r2, [r3, #4]
 8000bda:	9200      	str	r2, [sp, #0]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a2b      	ldr	r2, [pc, #172]	; (8000c8c <displayImage+0x12c>)
 8000be0:	2114      	movs	r1, #20
 8000be2:	2000      	movs	r0, #0
 8000be4:	f7ff ff5e 	bl	8000aa4 <ILI9341_WriteString>

    unsigned int bytesRead;
    uint8_t header[34];
    res = f_read(&file, header, sizeof(header), &bytesRead);
 8000be8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bec:	f107 010c 	add.w	r1, r7, #12
 8000bf0:	2222      	movs	r2, #34	; 0x22
 8000bf2:	4821      	ldr	r0, [pc, #132]	; (8000c78 <displayImage+0x118>)
 8000bf4:	f005 fb50 	bl	8006298 <f_read>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    if(res != FR_OK) {
 8000bfe:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d01a      	beq.n	8000c3c <displayImage+0xdc>
    	printf("f_read() failed: %i\r\n", res);
 8000c06:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4820      	ldr	r0, [pc, #128]	; (8000c90 <displayImage+0x130>)
 8000c0e:	f006 f8b3 	bl	8006d78 <iprintf>
        ILI9341_WriteString(0, 30, "f_read() failed, res = %d\r\n", Font_7x10, ILI9341_RED, ILI9341_WHITE);
 8000c12:	4b1c      	ldr	r3, [pc, #112]	; (8000c84 <displayImage+0x124>)
 8000c14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c18:	9202      	str	r2, [sp, #8]
 8000c1a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000c1e:	9201      	str	r2, [sp, #4]
 8000c20:	685a      	ldr	r2, [r3, #4]
 8000c22:	9200      	str	r2, [sp, #0]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a1b      	ldr	r2, [pc, #108]	; (8000c94 <displayImage+0x134>)
 8000c28:	211e      	movs	r1, #30
 8000c2a:	2000      	movs	r0, #0
 8000c2c:	f7ff ff3a 	bl	8000aa4 <ILI9341_WriteString>
        f_close(&file);
 8000c30:	4811      	ldr	r0, [pc, #68]	; (8000c78 <displayImage+0x118>)
 8000c32:	f005 fcee 	bl	8006612 <f_close>
        return -2;
 8000c36:	f06f 0301 	mvn.w	r3, #1
 8000c3a:	e250      	b.n	80010de <displayImage+0x57e>
    }

    if((header[0] != 0x42) || (header[1] != 0x4D)) {
 8000c3c:	7b3b      	ldrb	r3, [r7, #12]
 8000c3e:	2b42      	cmp	r3, #66	; 0x42
 8000c40:	d102      	bne.n	8000c48 <displayImage+0xe8>
 8000c42:	7b7b      	ldrb	r3, [r7, #13]
 8000c44:	2b4d      	cmp	r3, #77	; 0x4d
 8000c46:	d02b      	beq.n	8000ca0 <displayImage+0x140>
    	printf("Wrong BMP signature\r\n");
 8000c48:	4813      	ldr	r0, [pc, #76]	; (8000c98 <displayImage+0x138>)
 8000c4a:	f006 f91b 	bl	8006e84 <puts>
        ILI9341_WriteString(0, 40, "Wrong BMP signature: 0x%02X 0x%02X\r\n", Font_7x10, ILI9341_RED, ILI9341_WHITE);
 8000c4e:	4b0d      	ldr	r3, [pc, #52]	; (8000c84 <displayImage+0x124>)
 8000c50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c54:	9202      	str	r2, [sp, #8]
 8000c56:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000c5a:	9201      	str	r2, [sp, #4]
 8000c5c:	685a      	ldr	r2, [r3, #4]
 8000c5e:	9200      	str	r2, [sp, #0]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4a0e      	ldr	r2, [pc, #56]	; (8000c9c <displayImage+0x13c>)
 8000c64:	2128      	movs	r1, #40	; 0x28
 8000c66:	2000      	movs	r0, #0
 8000c68:	f7ff ff1c 	bl	8000aa4 <ILI9341_WriteString>
        f_close(&file);
 8000c6c:	4802      	ldr	r0, [pc, #8]	; (8000c78 <displayImage+0x118>)
 8000c6e:	f005 fcd0 	bl	8006612 <f_close>
        return -3;
 8000c72:	f06f 0302 	mvn.w	r3, #2
 8000c76:	e232      	b.n	80010de <displayImage+0x57e>
 8000c78:	200001e0 	.word	0x200001e0
 8000c7c:	080081ac 	.word	0x080081ac
 8000c80:	200001a0 	.word	0x200001a0
 8000c84:	20000000 	.word	0x20000000
 8000c88:	080081c8 	.word	0x080081c8
 8000c8c:	080081e4 	.word	0x080081e4
 8000c90:	08008200 	.word	0x08008200
 8000c94:	08008218 	.word	0x08008218
 8000c98:	08008234 	.word	0x08008234
 8000c9c:	0800824c 	.word	0x0800824c
    }

    uint32_t imageOffset = header[10] | (header[11] << 8) | (header[12] << 16) | (header[13] << 24);
 8000ca0:	7dbb      	ldrb	r3, [r7, #22]
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	7dfb      	ldrb	r3, [r7, #23]
 8000ca6:	021b      	lsls	r3, r3, #8
 8000ca8:	431a      	orrs	r2, r3
 8000caa:	7e3b      	ldrb	r3, [r7, #24]
 8000cac:	041b      	lsls	r3, r3, #16
 8000cae:	431a      	orrs	r2, r3
 8000cb0:	7e7b      	ldrb	r3, [r7, #25]
 8000cb2:	061b      	lsls	r3, r3, #24
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	657b      	str	r3, [r7, #84]	; 0x54
    uint32_t imageWidth = header[18] | (header[19] << 8) | (header[20] << 16) | (header[21] << 24);
 8000cb8:	7fbb      	ldrb	r3, [r7, #30]
 8000cba:	461a      	mov	r2, r3
 8000cbc:	7ffb      	ldrb	r3, [r7, #31]
 8000cbe:	021b      	lsls	r3, r3, #8
 8000cc0:	431a      	orrs	r2, r3
 8000cc2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000cc6:	041b      	lsls	r3, r3, #16
 8000cc8:	431a      	orrs	r2, r3
 8000cca:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000cce:	061b      	lsls	r3, r3, #24
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	653b      	str	r3, [r7, #80]	; 0x50
    uint32_t imageHeight = header[22] | (header[23] << 8) | (header[24] << 16) | (header[25] << 24);
 8000cd4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000cd8:	461a      	mov	r2, r3
 8000cda:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000cde:	021b      	lsls	r3, r3, #8
 8000ce0:	431a      	orrs	r2, r3
 8000ce2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000ce6:	041b      	lsls	r3, r3, #16
 8000ce8:	431a      	orrs	r2, r3
 8000cea:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000cee:	061b      	lsls	r3, r3, #24
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	64fb      	str	r3, [r7, #76]	; 0x4c
    uint16_t imagePlanes = header[26] | (header[27] << 8);
 8000cf4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000cf8:	b21a      	sxth	r2, r3
 8000cfa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000cfe:	021b      	lsls	r3, r3, #8
 8000d00:	b21b      	sxth	r3, r3
 8000d02:	4313      	orrs	r3, r2
 8000d04:	b21b      	sxth	r3, r3
 8000d06:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    uint16_t imageBitsPerPixel = header[28] | (header[29] << 8);
 8000d0a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000d0e:	b21a      	sxth	r2, r3
 8000d10:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000d14:	021b      	lsls	r3, r3, #8
 8000d16:	b21b      	sxth	r3, r3
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	b21b      	sxth	r3, r3
 8000d1c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    uint32_t imageCompression = header[30] | (header[31] << 8) | (header[32] << 16) | (header[33] << 24);
 8000d20:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000d24:	461a      	mov	r2, r3
 8000d26:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000d2a:	021b      	lsls	r3, r3, #8
 8000d2c:	431a      	orrs	r2, r3
 8000d2e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000d32:	041b      	lsls	r3, r3, #16
 8000d34:	431a      	orrs	r2, r3
 8000d36:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000d3a:	061b      	lsls	r3, r3, #24
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	647b      	str	r3, [r7, #68]	; 0x44

    printf("Pixels offset: %lu\r\n", imageOffset);
 8000d40:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8000d42:	489b      	ldr	r0, [pc, #620]	; (8000fb0 <displayImage+0x450>)
 8000d44:	f006 f818 	bl	8006d78 <iprintf>
    snprintf(buff, sizeof(buff), "Pixels offset: %lu\r\n ", imageOffset);
 8000d48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000d4a:	4a9a      	ldr	r2, [pc, #616]	; (8000fb4 <displayImage+0x454>)
 8000d4c:	2140      	movs	r1, #64	; 0x40
 8000d4e:	489a      	ldr	r0, [pc, #616]	; (8000fb8 <displayImage+0x458>)
 8000d50:	f006 f8a0 	bl	8006e94 <sniprintf>
	ILI9341_WriteString(0, 50, buff, Font_7x10, ILI9341_RED, ILI9341_WHITE);
 8000d54:	4b99      	ldr	r3, [pc, #612]	; (8000fbc <displayImage+0x45c>)
 8000d56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d5a:	9202      	str	r2, [sp, #8]
 8000d5c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000d60:	9201      	str	r2, [sp, #4]
 8000d62:	685a      	ldr	r2, [r3, #4]
 8000d64:	9200      	str	r2, [sp, #0]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a93      	ldr	r2, [pc, #588]	; (8000fb8 <displayImage+0x458>)
 8000d6a:	2132      	movs	r1, #50	; 0x32
 8000d6c:	2000      	movs	r0, #0
 8000d6e:	f7ff fe99 	bl	8000aa4 <ILI9341_WriteString>
    printf("WxH: %lux%lu\r\n", imageWidth, imageHeight);
 8000d72:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000d74:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8000d76:	4892      	ldr	r0, [pc, #584]	; (8000fc0 <displayImage+0x460>)
 8000d78:	f005 fffe 	bl	8006d78 <iprintf>
	snprintf(buff, sizeof(buff), "WxH: %lux%lu\r\n ", imageWidth, imageHeight);
 8000d7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d7e:	9300      	str	r3, [sp, #0]
 8000d80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000d82:	4a90      	ldr	r2, [pc, #576]	; (8000fc4 <displayImage+0x464>)
 8000d84:	2140      	movs	r1, #64	; 0x40
 8000d86:	488c      	ldr	r0, [pc, #560]	; (8000fb8 <displayImage+0x458>)
 8000d88:	f006 f884 	bl	8006e94 <sniprintf>
	ILI9341_WriteString(0, 60, buff, Font_7x10, ILI9341_RED, ILI9341_WHITE);
 8000d8c:	4b8b      	ldr	r3, [pc, #556]	; (8000fbc <displayImage+0x45c>)
 8000d8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d92:	9202      	str	r2, [sp, #8]
 8000d94:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000d98:	9201      	str	r2, [sp, #4]
 8000d9a:	685a      	ldr	r2, [r3, #4]
 8000d9c:	9200      	str	r2, [sp, #0]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a85      	ldr	r2, [pc, #532]	; (8000fb8 <displayImage+0x458>)
 8000da2:	213c      	movs	r1, #60	; 0x3c
 8000da4:	2000      	movs	r0, #0
 8000da6:	f7ff fe7d 	bl	8000aa4 <ILI9341_WriteString>
	printf("Planes: %d\r\n", imagePlanes);
 8000daa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8000dae:	4619      	mov	r1, r3
 8000db0:	4885      	ldr	r0, [pc, #532]	; (8000fc8 <displayImage+0x468>)
 8000db2:	f005 ffe1 	bl	8006d78 <iprintf>
    snprintf(buff, sizeof(buff), "Planes: %d\r\n ", imagePlanes);
 8000db6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8000dba:	4a84      	ldr	r2, [pc, #528]	; (8000fcc <displayImage+0x46c>)
 8000dbc:	2140      	movs	r1, #64	; 0x40
 8000dbe:	487e      	ldr	r0, [pc, #504]	; (8000fb8 <displayImage+0x458>)
 8000dc0:	f006 f868 	bl	8006e94 <sniprintf>
	ILI9341_WriteString(0, 70, buff, Font_7x10, ILI9341_RED, ILI9341_WHITE);
 8000dc4:	4b7d      	ldr	r3, [pc, #500]	; (8000fbc <displayImage+0x45c>)
 8000dc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dca:	9202      	str	r2, [sp, #8]
 8000dcc:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000dd0:	9201      	str	r2, [sp, #4]
 8000dd2:	685a      	ldr	r2, [r3, #4]
 8000dd4:	9200      	str	r2, [sp, #0]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a77      	ldr	r2, [pc, #476]	; (8000fb8 <displayImage+0x458>)
 8000dda:	2146      	movs	r1, #70	; 0x46
 8000ddc:	2000      	movs	r0, #0
 8000dde:	f7ff fe61 	bl	8000aa4 <ILI9341_WriteString>
	printf("Bits per pixel: %ld\r\n", imageBitsPerPixel);
 8000de2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8000de6:	4619      	mov	r1, r3
 8000de8:	4879      	ldr	r0, [pc, #484]	; (8000fd0 <displayImage+0x470>)
 8000dea:	f005 ffc5 	bl	8006d78 <iprintf>
    snprintf(buff, sizeof(buff), "Bits per pixel: %d\r\n ", imageBitsPerPixel);
 8000dee:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8000df2:	4a78      	ldr	r2, [pc, #480]	; (8000fd4 <displayImage+0x474>)
 8000df4:	2140      	movs	r1, #64	; 0x40
 8000df6:	4870      	ldr	r0, [pc, #448]	; (8000fb8 <displayImage+0x458>)
 8000df8:	f006 f84c 	bl	8006e94 <sniprintf>
	ILI9341_WriteString(0, 80, buff, Font_7x10, ILI9341_RED, ILI9341_WHITE);
 8000dfc:	4b6f      	ldr	r3, [pc, #444]	; (8000fbc <displayImage+0x45c>)
 8000dfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e02:	9202      	str	r2, [sp, #8]
 8000e04:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000e08:	9201      	str	r2, [sp, #4]
 8000e0a:	685a      	ldr	r2, [r3, #4]
 8000e0c:	9200      	str	r2, [sp, #0]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a69      	ldr	r2, [pc, #420]	; (8000fb8 <displayImage+0x458>)
 8000e12:	2150      	movs	r1, #80	; 0x50
 8000e14:	2000      	movs	r0, #0
 8000e16:	f7ff fe45 	bl	8000aa4 <ILI9341_WriteString>
	printf("Compression: %ld\r\n", imageCompression);
 8000e1a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8000e1c:	486e      	ldr	r0, [pc, #440]	; (8000fd8 <displayImage+0x478>)
 8000e1e:	f005 ffab 	bl	8006d78 <iprintf>
    snprintf(buff, sizeof(buff), "Compression: %d\r\n ", imageCompression);
 8000e22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e24:	4a6d      	ldr	r2, [pc, #436]	; (8000fdc <displayImage+0x47c>)
 8000e26:	2140      	movs	r1, #64	; 0x40
 8000e28:	4863      	ldr	r0, [pc, #396]	; (8000fb8 <displayImage+0x458>)
 8000e2a:	f006 f833 	bl	8006e94 <sniprintf>
	ILI9341_WriteString(0, 90, buff, Font_7x10, ILI9341_RED, ILI9341_WHITE);
 8000e2e:	4b63      	ldr	r3, [pc, #396]	; (8000fbc <displayImage+0x45c>)
 8000e30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e34:	9202      	str	r2, [sp, #8]
 8000e36:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000e3a:	9201      	str	r2, [sp, #4]
 8000e3c:	685a      	ldr	r2, [r3, #4]
 8000e3e:	9200      	str	r2, [sp, #0]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a5d      	ldr	r2, [pc, #372]	; (8000fb8 <displayImage+0x458>)
 8000e44:	215a      	movs	r1, #90	; 0x5a
 8000e46:	2000      	movs	r0, #0
 8000e48:	f7ff fe2c 	bl	8000aa4 <ILI9341_WriteString>
//        ILI9341_WriteString(0, 100, "Wrong BMP size, %dx%d expected\r\n", Font_7x10, ILI9341_RED, ILI9341_WHITE);
//        f_close(&file);
//        return -4;
//    }

    if((imagePlanes != 1) || (imageBitsPerPixel != 24) || (imageCompression != 0)) {
 8000e4c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d106      	bne.n	8000e62 <displayImage+0x302>
 8000e54:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8000e58:	2b18      	cmp	r3, #24
 8000e5a:	d102      	bne.n	8000e62 <displayImage+0x302>
 8000e5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d014      	beq.n	8000e8c <displayImage+0x32c>
        ILI9341_WriteString(0, 110, "Unsupported image format\r\n", Font_7x10, ILI9341_RED, ILI9341_WHITE);
 8000e62:	4b56      	ldr	r3, [pc, #344]	; (8000fbc <displayImage+0x45c>)
 8000e64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e68:	9202      	str	r2, [sp, #8]
 8000e6a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000e6e:	9201      	str	r2, [sp, #4]
 8000e70:	685a      	ldr	r2, [r3, #4]
 8000e72:	9200      	str	r2, [sp, #0]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a5a      	ldr	r2, [pc, #360]	; (8000fe0 <displayImage+0x480>)
 8000e78:	216e      	movs	r1, #110	; 0x6e
 8000e7a:	2000      	movs	r0, #0
 8000e7c:	f7ff fe12 	bl	8000aa4 <ILI9341_WriteString>
        f_close(&file);
 8000e80:	4858      	ldr	r0, [pc, #352]	; (8000fe4 <displayImage+0x484>)
 8000e82:	f005 fbc6 	bl	8006612 <f_close>
        return -5;
 8000e86:	f06f 0304 	mvn.w	r3, #4
 8000e8a:	e128      	b.n	80010de <displayImage+0x57e>
    }

    res = f_lseek(&file, imageOffset);
 8000e8c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8000e8e:	4855      	ldr	r0, [pc, #340]	; (8000fe4 <displayImage+0x484>)
 8000e90:	f005 fbe9 	bl	8006666 <f_lseek>
 8000e94:	4603      	mov	r3, r0
 8000e96:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    if(res != FR_OK) {
 8000e9a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d021      	beq.n	8000ee6 <displayImage+0x386>
    	printf("f_lseek() failed, %i", res);
 8000ea2:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	484f      	ldr	r0, [pc, #316]	; (8000fe8 <displayImage+0x488>)
 8000eaa:	f005 ff65 	bl	8006d78 <iprintf>
        snprintf(buff, sizeof(buff), "f_lseek() failed, res = %d\r\n ", res);
 8000eae:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8000eb2:	4a4e      	ldr	r2, [pc, #312]	; (8000fec <displayImage+0x48c>)
 8000eb4:	2140      	movs	r1, #64	; 0x40
 8000eb6:	4840      	ldr	r0, [pc, #256]	; (8000fb8 <displayImage+0x458>)
 8000eb8:	f005 ffec 	bl	8006e94 <sniprintf>
    	ILI9341_WriteString(0, 120, buff, Font_7x10, ILI9341_RED, ILI9341_WHITE);
 8000ebc:	4b3f      	ldr	r3, [pc, #252]	; (8000fbc <displayImage+0x45c>)
 8000ebe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ec2:	9202      	str	r2, [sp, #8]
 8000ec4:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000ec8:	9201      	str	r2, [sp, #4]
 8000eca:	685a      	ldr	r2, [r3, #4]
 8000ecc:	9200      	str	r2, [sp, #0]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a39      	ldr	r2, [pc, #228]	; (8000fb8 <displayImage+0x458>)
 8000ed2:	2178      	movs	r1, #120	; 0x78
 8000ed4:	2000      	movs	r0, #0
 8000ed6:	f7ff fde5 	bl	8000aa4 <ILI9341_WriteString>
        f_close(&file);
 8000eda:	4842      	ldr	r0, [pc, #264]	; (8000fe4 <displayImage+0x484>)
 8000edc:	f005 fb99 	bl	8006612 <f_close>
        return -6;
 8000ee0:	f06f 0305 	mvn.w	r3, #5
 8000ee4:	e0fb      	b.n	80010de <displayImage+0x57e>
    }

    // row size is aligned to 4 bytes
    uint8_t imageRow[(imageWidth * 3 + 3) & ~3];
 8000ee6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000ee8:	1c5a      	adds	r2, r3, #1
 8000eea:	4613      	mov	r3, r2
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	4413      	add	r3, r2
 8000ef0:	f023 0603 	bic.w	r6, r3, #3
 8000ef4:	4633      	mov	r3, r6
 8000ef6:	3b01      	subs	r3, #1
 8000ef8:	643b      	str	r3, [r7, #64]	; 0x40
 8000efa:	2300      	movs	r3, #0
 8000efc:	46b0      	mov	r8, r6
 8000efe:	4699      	mov	r9, r3
 8000f00:	f04f 0200 	mov.w	r2, #0
 8000f04:	f04f 0300 	mov.w	r3, #0
 8000f08:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000f0c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000f10:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000f14:	2300      	movs	r3, #0
 8000f16:	4634      	mov	r4, r6
 8000f18:	461d      	mov	r5, r3
 8000f1a:	f04f 0200 	mov.w	r2, #0
 8000f1e:	f04f 0300 	mov.w	r3, #0
 8000f22:	00eb      	lsls	r3, r5, #3
 8000f24:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000f28:	00e2      	lsls	r2, r4, #3
 8000f2a:	1df3      	adds	r3, r6, #7
 8000f2c:	08db      	lsrs	r3, r3, #3
 8000f2e:	00db      	lsls	r3, r3, #3
 8000f30:	ebad 0d03 	sub.w	sp, sp, r3
 8000f34:	ab04      	add	r3, sp, #16
 8000f36:	3300      	adds	r3, #0
 8000f38:	63fb      	str	r3, [r7, #60]	; 0x3c
    for(uint32_t y = 0; y < imageHeight; y++) {
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000f3e:	e09f      	b.n	8001080 <displayImage+0x520>
        uint32_t rowIdx = 0;
 8000f40:	2300      	movs	r3, #0
 8000f42:	663b      	str	r3, [r7, #96]	; 0x60
        res = f_read(&file, imageRow, sizeof(imageRow), &bytesRead);
 8000f44:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f48:	4632      	mov	r2, r6
 8000f4a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000f4c:	4825      	ldr	r0, [pc, #148]	; (8000fe4 <displayImage+0x484>)
 8000f4e:	f005 f9a3 	bl	8006298 <f_read>
 8000f52:	4603      	mov	r3, r0
 8000f54:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
        if(res != FR_OK) {
 8000f58:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d021      	beq.n	8000fa4 <displayImage+0x444>
        	printf("f_read() failed, %i", res);
 8000f60:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8000f64:	4619      	mov	r1, r3
 8000f66:	4822      	ldr	r0, [pc, #136]	; (8000ff0 <displayImage+0x490>)
 8000f68:	f005 ff06 	bl	8006d78 <iprintf>
            snprintf(buff, sizeof(buff), "f_read() failed, res = %d\r\n", res);
 8000f6c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8000f70:	4a20      	ldr	r2, [pc, #128]	; (8000ff4 <displayImage+0x494>)
 8000f72:	2140      	movs	r1, #64	; 0x40
 8000f74:	4810      	ldr	r0, [pc, #64]	; (8000fb8 <displayImage+0x458>)
 8000f76:	f005 ff8d 	bl	8006e94 <sniprintf>
        	ILI9341_WriteString(0, 130, buff, Font_7x10, ILI9341_RED, ILI9341_WHITE);
 8000f7a:	4b10      	ldr	r3, [pc, #64]	; (8000fbc <displayImage+0x45c>)
 8000f7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f80:	9202      	str	r2, [sp, #8]
 8000f82:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000f86:	9201      	str	r2, [sp, #4]
 8000f88:	685a      	ldr	r2, [r3, #4]
 8000f8a:	9200      	str	r2, [sp, #0]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a0a      	ldr	r2, [pc, #40]	; (8000fb8 <displayImage+0x458>)
 8000f90:	2182      	movs	r1, #130	; 0x82
 8000f92:	2000      	movs	r0, #0
 8000f94:	f7ff fd86 	bl	8000aa4 <ILI9341_WriteString>
            f_close(&file);
 8000f98:	4812      	ldr	r0, [pc, #72]	; (8000fe4 <displayImage+0x484>)
 8000f9a:	f005 fb3a 	bl	8006612 <f_close>
            return -7;
 8000f9e:	f06f 0306 	mvn.w	r3, #6
 8000fa2:	e09c      	b.n	80010de <displayImage+0x57e>
        }

        for(uint32_t x = ILI9341_WIDTH - imageWidth; x < ILI9341_WIDTH; x++) {
 8000fa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000fa6:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8000faa:	667b      	str	r3, [r7, #100]	; 0x64
 8000fac:	e062      	b.n	8001074 <displayImage+0x514>
 8000fae:	bf00      	nop
 8000fb0:	08008274 	.word	0x08008274
 8000fb4:	0800828c 	.word	0x0800828c
 8000fb8:	200001a0 	.word	0x200001a0
 8000fbc:	20000000 	.word	0x20000000
 8000fc0:	080082a4 	.word	0x080082a4
 8000fc4:	080082b4 	.word	0x080082b4
 8000fc8:	080082c4 	.word	0x080082c4
 8000fcc:	080082d4 	.word	0x080082d4
 8000fd0:	080082e4 	.word	0x080082e4
 8000fd4:	080082fc 	.word	0x080082fc
 8000fd8:	08008314 	.word	0x08008314
 8000fdc:	08008328 	.word	0x08008328
 8000fe0:	0800833c 	.word	0x0800833c
 8000fe4:	200001e0 	.word	0x200001e0
 8000fe8:	08008358 	.word	0x08008358
 8000fec:	08008370 	.word	0x08008370
 8000ff0:	08008390 	.word	0x08008390
 8000ff4:	08008218 	.word	0x08008218
            uint8_t b = imageRow[rowIdx++];
 8000ff8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000ffa:	1c5a      	adds	r2, r3, #1
 8000ffc:	663a      	str	r2, [r7, #96]	; 0x60
 8000ffe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001000:	5cd3      	ldrb	r3, [r2, r3]
 8001002:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            uint8_t g = imageRow[rowIdx++];
 8001006:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001008:	1c5a      	adds	r2, r3, #1
 800100a:	663a      	str	r2, [r7, #96]	; 0x60
 800100c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800100e:	5cd3      	ldrb	r3, [r2, r3]
 8001010:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
            uint8_t r = imageRow[rowIdx++];
 8001014:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001016:	1c5a      	adds	r2, r3, #1
 8001018:	663a      	str	r2, [r7, #96]	; 0x60
 800101a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800101c:	5cd3      	ldrb	r3, [r2, r3]
 800101e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
            uint16_t color565 = ILI9341_COLOR565(r, g, b);
 8001022:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001026:	021b      	lsls	r3, r3, #8
 8001028:	b21b      	sxth	r3, r3
 800102a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800102e:	f023 0307 	bic.w	r3, r3, #7
 8001032:	b21a      	sxth	r2, r3
 8001034:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8001038:	00db      	lsls	r3, r3, #3
 800103a:	b21b      	sxth	r3, r3
 800103c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8001040:	b21b      	sxth	r3, r3
 8001042:	4313      	orrs	r3, r2
 8001044:	b21a      	sxth	r2, r3
 8001046:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800104a:	08db      	lsrs	r3, r3, #3
 800104c:	b2db      	uxtb	r3, r3
 800104e:	b21b      	sxth	r3, r3
 8001050:	4313      	orrs	r3, r2
 8001052:	b21b      	sxth	r3, r3
 8001054:	86fb      	strh	r3, [r7, #54]	; 0x36
            ILI9341_DrawPixel(x, ILI9341_HEIGHT - y - 1, color565);
 8001056:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001058:	b298      	uxth	r0, r3
 800105a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800105c:	b29b      	uxth	r3, r3
 800105e:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8001062:	3301      	adds	r3, #1
 8001064:	b29b      	uxth	r3, r3
 8001066:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001068:	4619      	mov	r1, r3
 800106a:	f7ff fc75 	bl	8000958 <ILI9341_DrawPixel>
        for(uint32_t x = ILI9341_WIDTH - imageWidth; x < ILI9341_WIDTH; x++) {
 800106e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001070:	3301      	adds	r3, #1
 8001072:	667b      	str	r3, [r7, #100]	; 0x64
 8001074:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001076:	2bef      	cmp	r3, #239	; 0xef
 8001078:	d9be      	bls.n	8000ff8 <displayImage+0x498>
    for(uint32_t y = 0; y < imageHeight; y++) {
 800107a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800107c:	3301      	adds	r3, #1
 800107e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001080:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001082:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001084:	429a      	cmp	r2, r3
 8001086:	f4ff af5b 	bcc.w	8000f40 <displayImage+0x3e0>
        }
    }

    res = f_close(&file);
 800108a:	4818      	ldr	r0, [pc, #96]	; (80010ec <displayImage+0x58c>)
 800108c:	f005 fac1 	bl	8006612 <f_close>
 8001090:	4603      	mov	r3, r0
 8001092:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    if(res != FR_OK) {
 8001096:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800109a:	2b00      	cmp	r3, #0
 800109c:	d01e      	beq.n	80010dc <displayImage+0x57c>
//        UART_Printf("f_close() failed, res = %d\r\n", res);
    	printf("f_close() failed %i", res);
 800109e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80010a2:	4619      	mov	r1, r3
 80010a4:	4812      	ldr	r0, [pc, #72]	; (80010f0 <displayImage+0x590>)
 80010a6:	f005 fe67 	bl	8006d78 <iprintf>
        snprintf(buff, sizeof(buff), "f_close() failed, res = %d\r\n", res);
 80010aa:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80010ae:	4a11      	ldr	r2, [pc, #68]	; (80010f4 <displayImage+0x594>)
 80010b0:	2140      	movs	r1, #64	; 0x40
 80010b2:	4811      	ldr	r0, [pc, #68]	; (80010f8 <displayImage+0x598>)
 80010b4:	f005 feee 	bl	8006e94 <sniprintf>
    	ILI9341_WriteString(0, 140, buff, Font_7x10, ILI9341_RED, ILI9341_WHITE);
 80010b8:	4b10      	ldr	r3, [pc, #64]	; (80010fc <displayImage+0x59c>)
 80010ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010be:	9202      	str	r2, [sp, #8]
 80010c0:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80010c4:	9201      	str	r2, [sp, #4]
 80010c6:	685a      	ldr	r2, [r3, #4]
 80010c8:	9200      	str	r2, [sp, #0]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a0a      	ldr	r2, [pc, #40]	; (80010f8 <displayImage+0x598>)
 80010ce:	218c      	movs	r1, #140	; 0x8c
 80010d0:	2000      	movs	r0, #0
 80010d2:	f7ff fce7 	bl	8000aa4 <ILI9341_WriteString>
        return -8;
 80010d6:	f06f 0307 	mvn.w	r3, #7
 80010da:	e000      	b.n	80010de <displayImage+0x57e>
    }

    return 0;
 80010dc:	2300      	movs	r3, #0
 80010de:	46d5      	mov	sp, sl
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3768      	adds	r7, #104	; 0x68
 80010e4:	46bd      	mov	sp, r7
 80010e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010ea:	bf00      	nop
 80010ec:	200001e0 	.word	0x200001e0
 80010f0:	080083a4 	.word	0x080083a4
 80010f4:	080083b8 	.word	0x080083b8
 80010f8:	200001a0 	.word	0x200001a0
 80010fc:	20000000 	.word	0x20000000

08001100 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	f5ad 6d93 	sub.w	sp, sp, #1176	; 0x498
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001108:	f000 fc90 	bl	8001a2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800110c:	f000 f8b4 	bl	8001278 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001110:	f000 f9b0 	bl	8001474 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001114:	f000 f984 	bl	8001420 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8001118:	f000 f916 	bl	8001348 <MX_SPI2_Init>
  MX_SPI3_Init();
 800111c:	f000 f94a 	bl	80013b4 <MX_SPI3_Init>
  MX_FATFS_Init();
 8001120:	f002 fc2a 	bl	8003978 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  ILI9341_Init();
 8001124:	f7ff faea 	bl	80006fc <ILI9341_Init>
//   printf("f_mount() done!\r\n");
//   ILI9341_WriteString(0, 160, "f_mount() done!\r\n", Font_7x10, ILI9341_RED, ILI9341_WHITE);

//  printf("\r\n~ SD card demo by kiwih ~\r\n\r\n");
//
  HAL_Delay(1000); //a short delay is important to let the SD card settle
 8001128:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800112c:	f000 fcf0 	bl	8001b10 <HAL_Delay>
  FATFS FatFs; 	//Fatfs handle
  FIL fil; 		//File handle
  FRESULT fres; //Result after operations

  //Open the file system
  fres = f_mount(&FatFs, "", 1); //1=mount now
 8001130:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8001134:	2201      	movs	r2, #1
 8001136:	4946      	ldr	r1, [pc, #280]	; (8001250 <main+0x150>)
 8001138:	4618      	mov	r0, r3
 800113a:	f004 fea9 	bl	8005e90 <f_mount>
 800113e:	4603      	mov	r3, r0
 8001140:	f887 3497 	strb.w	r3, [r7, #1175]	; 0x497
  if (fres != FR_OK) {
 8001144:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 8001148:	2b00      	cmp	r3, #0
 800114a:	d006      	beq.n	800115a <main+0x5a>
	printf("f_mount error (%i)\r\n", fres);
 800114c:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 8001150:	4619      	mov	r1, r3
 8001152:	4840      	ldr	r0, [pc, #256]	; (8001254 <main+0x154>)
 8001154:	f005 fe10 	bl	8006d78 <iprintf>
	while(1);
 8001158:	e7fe      	b.n	8001158 <main+0x58>
  //Let's get some statistics from the SD card
  DWORD free_clusters, free_sectors, total_sectors;

  FATFS* getFreeFs;

  fres = f_getfree("", &free_clusters, &getFreeFs);
 800115a:	f107 0220 	add.w	r2, r7, #32
 800115e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001162:	4619      	mov	r1, r3
 8001164:	483a      	ldr	r0, [pc, #232]	; (8001250 <main+0x150>)
 8001166:	f005 fc87 	bl	8006a78 <f_getfree>
 800116a:	4603      	mov	r3, r0
 800116c:	f887 3497 	strb.w	r3, [r7, #1175]	; 0x497
  if (fres != FR_OK) {
 8001170:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 8001174:	2b00      	cmp	r3, #0
 8001176:	d006      	beq.n	8001186 <main+0x86>
	printf("f_getfree error (%i)\r\n", fres);
 8001178:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 800117c:	4619      	mov	r1, r3
 800117e:	4836      	ldr	r0, [pc, #216]	; (8001258 <main+0x158>)
 8001180:	f005 fdfa 	bl	8006d78 <iprintf>
	while(1);
 8001184:	e7fe      	b.n	8001184 <main+0x84>
  }

  //Formula comes from ChaN's documentation
  total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 8001186:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 800118a:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	695b      	ldr	r3, [r3, #20]
 8001192:	3b02      	subs	r3, #2
 8001194:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8001198:	f5a2 628f 	sub.w	r2, r2, #1144	; 0x478
 800119c:	6812      	ldr	r2, [r2, #0]
 800119e:	8952      	ldrh	r2, [r2, #10]
 80011a0:	fb02 f303 	mul.w	r3, r2, r3
 80011a4:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490
  free_sectors = free_clusters * getFreeFs->csize;
 80011a8:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80011ac:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	895b      	ldrh	r3, [r3, #10]
 80011b4:	461a      	mov	r2, r3
 80011b6:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80011ba:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	fb02 f303 	mul.w	r3, r2, r3
 80011c4:	f8c7 348c 	str.w	r3, [r7, #1164]	; 0x48c

  printf("SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n", total_sectors / 2, free_sectors / 2);
 80011c8:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 80011cc:	0859      	lsrs	r1, r3, #1
 80011ce:	f8d7 348c 	ldr.w	r3, [r7, #1164]	; 0x48c
 80011d2:	085b      	lsrs	r3, r3, #1
 80011d4:	461a      	mov	r2, r3
 80011d6:	4821      	ldr	r0, [pc, #132]	; (800125c <main+0x15c>)
 80011d8:	f005 fdce 	bl	8006d78 <iprintf>

  //Now let's try to open file "test.txt"
  fres = f_open(&fil, "test.txt", FA_READ);
 80011dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011e0:	2201      	movs	r2, #1
 80011e2:	491f      	ldr	r1, [pc, #124]	; (8001260 <main+0x160>)
 80011e4:	4618      	mov	r0, r3
 80011e6:	f004 fe99 	bl	8005f1c <f_open>
 80011ea:	4603      	mov	r3, r0
 80011ec:	f887 3497 	strb.w	r3, [r7, #1175]	; 0x497
  if (fres != FR_OK) {
 80011f0:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d006      	beq.n	8001206 <main+0x106>
	printf("f_open error (%i)\r\n", fres);
 80011f8:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 80011fc:	4619      	mov	r1, r3
 80011fe:	4819      	ldr	r0, [pc, #100]	; (8001264 <main+0x164>)
 8001200:	f005 fdba 	bl	8006d78 <iprintf>
	while(1);
 8001204:	e7fe      	b.n	8001204 <main+0x104>
  }
  printf("I was able to open 'test.txt' for reading!\r\n");
 8001206:	4818      	ldr	r0, [pc, #96]	; (8001268 <main+0x168>)
 8001208:	f005 fe3c 	bl	8006e84 <puts>
  //Read 30 bytes from "test.txt" on the SD card
  BYTE readBuf[30];

  //We can either use f_read OR f_gets to get data out of files
  //f_gets is a wrapper on f_read that does some string formatting for us
  TCHAR* rres = f_gets((TCHAR*)readBuf, 30, &fil);
 800120c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001210:	463b      	mov	r3, r7
 8001212:	211e      	movs	r1, #30
 8001214:	4618      	mov	r0, r3
 8001216:	f005 fce4 	bl	8006be2 <f_gets>
 800121a:	f8c7 0488 	str.w	r0, [r7, #1160]	; 0x488
  if(rres != 0) {
 800121e:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 8001222:	2b00      	cmp	r3, #0
 8001224:	d005      	beq.n	8001232 <main+0x132>
	printf("Read string from 'test.txt' contents: %s\r\n", readBuf);
 8001226:	463b      	mov	r3, r7
 8001228:	4619      	mov	r1, r3
 800122a:	4810      	ldr	r0, [pc, #64]	; (800126c <main+0x16c>)
 800122c:	f005 fda4 	bl	8006d78 <iprintf>
 8001230:	e005      	b.n	800123e <main+0x13e>
  } else {
	printf("f_gets error (%i)\r\n", fres);
 8001232:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 8001236:	4619      	mov	r1, r3
 8001238:	480d      	ldr	r0, [pc, #52]	; (8001270 <main+0x170>)
 800123a:	f005 fd9d 	bl	8006d78 <iprintf>
  }

  //Be a tidy kiwi - don't forget to close your file!
  f_close(&fil);
 800123e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001242:	4618      	mov	r0, r3
 8001244:	f005 f9e5 	bl	8006612 <f_close>
//
//  //We're done, so de-mount the drive
//  f_mount(NULL, "", 0);
  displayImage("blue.bmp");
 8001248:	480a      	ldr	r0, [pc, #40]	; (8001274 <main+0x174>)
 800124a:	f7ff fc89 	bl	8000b60 <displayImage>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800124e:	e7fe      	b.n	800124e <main+0x14e>
 8001250:	080083d8 	.word	0x080083d8
 8001254:	080083dc 	.word	0x080083dc
 8001258:	080083f4 	.word	0x080083f4
 800125c:	0800840c 	.word	0x0800840c
 8001260:	08008454 	.word	0x08008454
 8001264:	08008460 	.word	0x08008460
 8001268:	08008474 	.word	0x08008474
 800126c:	080084a0 	.word	0x080084a0
 8001270:	080084cc 	.word	0x080084cc
 8001274:	080084e0 	.word	0x080084e0

08001278 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b094      	sub	sp, #80	; 0x50
 800127c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800127e:	f107 0320 	add.w	r3, r7, #32
 8001282:	2230      	movs	r2, #48	; 0x30
 8001284:	2100      	movs	r1, #0
 8001286:	4618      	mov	r0, r3
 8001288:	f005 fd6e 	bl	8006d68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800128c:	f107 030c 	add.w	r3, r7, #12
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800129c:	2300      	movs	r3, #0
 800129e:	60bb      	str	r3, [r7, #8]
 80012a0:	4b27      	ldr	r3, [pc, #156]	; (8001340 <SystemClock_Config+0xc8>)
 80012a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a4:	4a26      	ldr	r2, [pc, #152]	; (8001340 <SystemClock_Config+0xc8>)
 80012a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012aa:	6413      	str	r3, [r2, #64]	; 0x40
 80012ac:	4b24      	ldr	r3, [pc, #144]	; (8001340 <SystemClock_Config+0xc8>)
 80012ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b4:	60bb      	str	r3, [r7, #8]
 80012b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012b8:	2300      	movs	r3, #0
 80012ba:	607b      	str	r3, [r7, #4]
 80012bc:	4b21      	ldr	r3, [pc, #132]	; (8001344 <SystemClock_Config+0xcc>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a20      	ldr	r2, [pc, #128]	; (8001344 <SystemClock_Config+0xcc>)
 80012c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012c6:	6013      	str	r3, [r2, #0]
 80012c8:	4b1e      	ldr	r3, [pc, #120]	; (8001344 <SystemClock_Config+0xcc>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012d0:	607b      	str	r3, [r7, #4]
 80012d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012d4:	2302      	movs	r3, #2
 80012d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012d8:	2301      	movs	r3, #1
 80012da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012dc:	2310      	movs	r3, #16
 80012de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012e0:	2302      	movs	r3, #2
 80012e2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012e4:	2300      	movs	r3, #0
 80012e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012e8:	2308      	movs	r3, #8
 80012ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80012ec:	2360      	movs	r3, #96	; 0x60
 80012ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012f0:	2302      	movs	r3, #2
 80012f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012f4:	2304      	movs	r3, #4
 80012f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012f8:	f107 0320 	add.w	r3, r7, #32
 80012fc:	4618      	mov	r0, r3
 80012fe:	f000 feaf 	bl	8002060 <HAL_RCC_OscConfig>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001308:	f000 f980 	bl	800160c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800130c:	230f      	movs	r3, #15
 800130e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001310:	2302      	movs	r3, #2
 8001312:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001318:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800131c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800131e:	2300      	movs	r3, #0
 8001320:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001322:	f107 030c 	add.w	r3, r7, #12
 8001326:	2103      	movs	r1, #3
 8001328:	4618      	mov	r0, r3
 800132a:	f001 f911 	bl	8002550 <HAL_RCC_ClockConfig>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001334:	f000 f96a 	bl	800160c <Error_Handler>
  }
}
 8001338:	bf00      	nop
 800133a:	3750      	adds	r7, #80	; 0x50
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40023800 	.word	0x40023800
 8001344:	40007000 	.word	0x40007000

08001348 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800134c:	4b17      	ldr	r3, [pc, #92]	; (80013ac <MX_SPI2_Init+0x64>)
 800134e:	4a18      	ldr	r2, [pc, #96]	; (80013b0 <MX_SPI2_Init+0x68>)
 8001350:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001352:	4b16      	ldr	r3, [pc, #88]	; (80013ac <MX_SPI2_Init+0x64>)
 8001354:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001358:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800135a:	4b14      	ldr	r3, [pc, #80]	; (80013ac <MX_SPI2_Init+0x64>)
 800135c:	2200      	movs	r2, #0
 800135e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001360:	4b12      	ldr	r3, [pc, #72]	; (80013ac <MX_SPI2_Init+0x64>)
 8001362:	2200      	movs	r2, #0
 8001364:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001366:	4b11      	ldr	r3, [pc, #68]	; (80013ac <MX_SPI2_Init+0x64>)
 8001368:	2200      	movs	r2, #0
 800136a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800136c:	4b0f      	ldr	r3, [pc, #60]	; (80013ac <MX_SPI2_Init+0x64>)
 800136e:	2200      	movs	r2, #0
 8001370:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001372:	4b0e      	ldr	r3, [pc, #56]	; (80013ac <MX_SPI2_Init+0x64>)
 8001374:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001378:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800137a:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <MX_SPI2_Init+0x64>)
 800137c:	2230      	movs	r2, #48	; 0x30
 800137e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001380:	4b0a      	ldr	r3, [pc, #40]	; (80013ac <MX_SPI2_Init+0x64>)
 8001382:	2200      	movs	r2, #0
 8001384:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001386:	4b09      	ldr	r3, [pc, #36]	; (80013ac <MX_SPI2_Init+0x64>)
 8001388:	2200      	movs	r2, #0
 800138a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800138c:	4b07      	ldr	r3, [pc, #28]	; (80013ac <MX_SPI2_Init+0x64>)
 800138e:	2200      	movs	r2, #0
 8001390:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001392:	4b06      	ldr	r3, [pc, #24]	; (80013ac <MX_SPI2_Init+0x64>)
 8001394:	220a      	movs	r2, #10
 8001396:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001398:	4804      	ldr	r0, [pc, #16]	; (80013ac <MX_SPI2_Init+0x64>)
 800139a:	f001 faf9 	bl	8002990 <HAL_SPI_Init>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80013a4:	f000 f932 	bl	800160c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80013a8:	bf00      	nop
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	200000ac 	.word	0x200000ac
 80013b0:	40003800 	.word	0x40003800

080013b4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80013b8:	4b17      	ldr	r3, [pc, #92]	; (8001418 <MX_SPI3_Init+0x64>)
 80013ba:	4a18      	ldr	r2, [pc, #96]	; (800141c <MX_SPI3_Init+0x68>)
 80013bc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80013be:	4b16      	ldr	r3, [pc, #88]	; (8001418 <MX_SPI3_Init+0x64>)
 80013c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013c4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80013c6:	4b14      	ldr	r3, [pc, #80]	; (8001418 <MX_SPI3_Init+0x64>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80013cc:	4b12      	ldr	r3, [pc, #72]	; (8001418 <MX_SPI3_Init+0x64>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013d2:	4b11      	ldr	r3, [pc, #68]	; (8001418 <MX_SPI3_Init+0x64>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013d8:	4b0f      	ldr	r3, [pc, #60]	; (8001418 <MX_SPI3_Init+0x64>)
 80013da:	2200      	movs	r2, #0
 80013dc:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80013de:	4b0e      	ldr	r3, [pc, #56]	; (8001418 <MX_SPI3_Init+0x64>)
 80013e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013e4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80013e6:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <MX_SPI3_Init+0x64>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013ec:	4b0a      	ldr	r3, [pc, #40]	; (8001418 <MX_SPI3_Init+0x64>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80013f2:	4b09      	ldr	r3, [pc, #36]	; (8001418 <MX_SPI3_Init+0x64>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013f8:	4b07      	ldr	r3, [pc, #28]	; (8001418 <MX_SPI3_Init+0x64>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80013fe:	4b06      	ldr	r3, [pc, #24]	; (8001418 <MX_SPI3_Init+0x64>)
 8001400:	220a      	movs	r2, #10
 8001402:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001404:	4804      	ldr	r0, [pc, #16]	; (8001418 <MX_SPI3_Init+0x64>)
 8001406:	f001 fac3 	bl	8002990 <HAL_SPI_Init>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001410:	f000 f8fc 	bl	800160c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001414:	bf00      	nop
 8001416:	bd80      	pop	{r7, pc}
 8001418:	20000104 	.word	0x20000104
 800141c:	40003c00 	.word	0x40003c00

08001420 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001424:	4b11      	ldr	r3, [pc, #68]	; (800146c <MX_USART2_UART_Init+0x4c>)
 8001426:	4a12      	ldr	r2, [pc, #72]	; (8001470 <MX_USART2_UART_Init+0x50>)
 8001428:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800142a:	4b10      	ldr	r3, [pc, #64]	; (800146c <MX_USART2_UART_Init+0x4c>)
 800142c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001430:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001432:	4b0e      	ldr	r3, [pc, #56]	; (800146c <MX_USART2_UART_Init+0x4c>)
 8001434:	2200      	movs	r2, #0
 8001436:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001438:	4b0c      	ldr	r3, [pc, #48]	; (800146c <MX_USART2_UART_Init+0x4c>)
 800143a:	2200      	movs	r2, #0
 800143c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800143e:	4b0b      	ldr	r3, [pc, #44]	; (800146c <MX_USART2_UART_Init+0x4c>)
 8001440:	2200      	movs	r2, #0
 8001442:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001444:	4b09      	ldr	r3, [pc, #36]	; (800146c <MX_USART2_UART_Init+0x4c>)
 8001446:	220c      	movs	r2, #12
 8001448:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800144a:	4b08      	ldr	r3, [pc, #32]	; (800146c <MX_USART2_UART_Init+0x4c>)
 800144c:	2200      	movs	r2, #0
 800144e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001450:	4b06      	ldr	r3, [pc, #24]	; (800146c <MX_USART2_UART_Init+0x4c>)
 8001452:	2200      	movs	r2, #0
 8001454:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001456:	4805      	ldr	r0, [pc, #20]	; (800146c <MX_USART2_UART_Init+0x4c>)
 8001458:	f001 fecc 	bl	80031f4 <HAL_UART_Init>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001462:	f000 f8d3 	bl	800160c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	2000015c 	.word	0x2000015c
 8001470:	40004400 	.word	0x40004400

08001474 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b08a      	sub	sp, #40	; 0x28
 8001478:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147a:	f107 0314 	add.w	r3, r7, #20
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	605a      	str	r2, [r3, #4]
 8001484:	609a      	str	r2, [r3, #8]
 8001486:	60da      	str	r2, [r3, #12]
 8001488:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	613b      	str	r3, [r7, #16]
 800148e:	4b5a      	ldr	r3, [pc, #360]	; (80015f8 <MX_GPIO_Init+0x184>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	4a59      	ldr	r2, [pc, #356]	; (80015f8 <MX_GPIO_Init+0x184>)
 8001494:	f043 0304 	orr.w	r3, r3, #4
 8001498:	6313      	str	r3, [r2, #48]	; 0x30
 800149a:	4b57      	ldr	r3, [pc, #348]	; (80015f8 <MX_GPIO_Init+0x184>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	f003 0304 	and.w	r3, r3, #4
 80014a2:	613b      	str	r3, [r7, #16]
 80014a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	60fb      	str	r3, [r7, #12]
 80014aa:	4b53      	ldr	r3, [pc, #332]	; (80015f8 <MX_GPIO_Init+0x184>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	4a52      	ldr	r2, [pc, #328]	; (80015f8 <MX_GPIO_Init+0x184>)
 80014b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014b4:	6313      	str	r3, [r2, #48]	; 0x30
 80014b6:	4b50      	ldr	r3, [pc, #320]	; (80015f8 <MX_GPIO_Init+0x184>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	60bb      	str	r3, [r7, #8]
 80014c6:	4b4c      	ldr	r3, [pc, #304]	; (80015f8 <MX_GPIO_Init+0x184>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	4a4b      	ldr	r2, [pc, #300]	; (80015f8 <MX_GPIO_Init+0x184>)
 80014cc:	f043 0301 	orr.w	r3, r3, #1
 80014d0:	6313      	str	r3, [r2, #48]	; 0x30
 80014d2:	4b49      	ldr	r3, [pc, #292]	; (80015f8 <MX_GPIO_Init+0x184>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	60bb      	str	r3, [r7, #8]
 80014dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	607b      	str	r3, [r7, #4]
 80014e2:	4b45      	ldr	r3, [pc, #276]	; (80015f8 <MX_GPIO_Init+0x184>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	4a44      	ldr	r2, [pc, #272]	; (80015f8 <MX_GPIO_Init+0x184>)
 80014e8:	f043 0302 	orr.w	r3, r3, #2
 80014ec:	6313      	str	r3, [r2, #48]	; 0x30
 80014ee:	4b42      	ldr	r3, [pc, #264]	; (80015f8 <MX_GPIO_Init+0x184>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	f003 0302 	and.w	r3, r3, #2
 80014f6:	607b      	str	r3, [r7, #4]
 80014f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	603b      	str	r3, [r7, #0]
 80014fe:	4b3e      	ldr	r3, [pc, #248]	; (80015f8 <MX_GPIO_Init+0x184>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	4a3d      	ldr	r2, [pc, #244]	; (80015f8 <MX_GPIO_Init+0x184>)
 8001504:	f043 0308 	orr.w	r3, r3, #8
 8001508:	6313      	str	r3, [r2, #48]	; 0x30
 800150a:	4b3b      	ldr	r3, [pc, #236]	; (80015f8 <MX_GPIO_Init+0x184>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	f003 0308 	and.w	r3, r3, #8
 8001512:	603b      	str	r3, [r7, #0]
 8001514:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8001516:	2200      	movs	r2, #0
 8001518:	f248 0120 	movw	r1, #32800	; 0x8020
 800151c:	4837      	ldr	r0, [pc, #220]	; (80015fc <MX_GPIO_Init+0x188>)
 800151e:	f000 fd85 	bl	800202c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001522:	2200      	movs	r2, #0
 8001524:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001528:	4835      	ldr	r0, [pc, #212]	; (8001600 <MX_GPIO_Init+0x18c>)
 800152a:	f000 fd7f 	bl	800202c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 800152e:	2200      	movs	r2, #0
 8001530:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001534:	4833      	ldr	r0, [pc, #204]	; (8001604 <MX_GPIO_Init+0x190>)
 8001536:	f000 fd79 	bl	800202c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_Reset_GPIO_Port, LCD_Reset_Pin, GPIO_PIN_RESET);
 800153a:	2200      	movs	r2, #0
 800153c:	2104      	movs	r1, #4
 800153e:	4832      	ldr	r0, [pc, #200]	; (8001608 <MX_GPIO_Init+0x194>)
 8001540:	f000 fd74 	bl	800202c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001544:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001548:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800154a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800154e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001550:	2300      	movs	r3, #0
 8001552:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001554:	f107 0314 	add.w	r3, r7, #20
 8001558:	4619      	mov	r1, r3
 800155a:	482a      	ldr	r0, [pc, #168]	; (8001604 <MX_GPIO_Init+0x190>)
 800155c:	f000 fbe2 	bl	8001d24 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LCD_CS_Pin;
 8001560:	f248 0320 	movw	r3, #32800	; 0x8020
 8001564:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001566:	2301      	movs	r3, #1
 8001568:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156a:	2300      	movs	r3, #0
 800156c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156e:	2300      	movs	r3, #0
 8001570:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001572:	f107 0314 	add.w	r3, r7, #20
 8001576:	4619      	mov	r1, r3
 8001578:	4820      	ldr	r0, [pc, #128]	; (80015fc <MX_GPIO_Init+0x188>)
 800157a:	f000 fbd3 	bl	8001d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_Detect_Pin */
  GPIO_InitStruct.Pin = SD_Detect_Pin;
 800157e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001582:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001584:	2300      	movs	r3, #0
 8001586:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001588:	2301      	movs	r3, #1
 800158a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_Detect_GPIO_Port, &GPIO_InitStruct);
 800158c:	f107 0314 	add.w	r3, r7, #20
 8001590:	4619      	mov	r1, r3
 8001592:	481b      	ldr	r0, [pc, #108]	; (8001600 <MX_GPIO_Init+0x18c>)
 8001594:	f000 fbc6 	bl	8001d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8001598:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800159c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159e:	2301      	movs	r3, #1
 80015a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015a2:	2301      	movs	r3, #1
 80015a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a6:	2300      	movs	r3, #0
 80015a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80015aa:	f107 0314 	add.w	r3, r7, #20
 80015ae:	4619      	mov	r1, r3
 80015b0:	4813      	ldr	r0, [pc, #76]	; (8001600 <MX_GPIO_Init+0x18c>)
 80015b2:	f000 fbb7 	bl	8001d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 80015b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80015ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015bc:	2301      	movs	r3, #1
 80015be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c4:	2300      	movs	r3, #0
 80015c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 80015c8:	f107 0314 	add.w	r3, r7, #20
 80015cc:	4619      	mov	r1, r3
 80015ce:	480d      	ldr	r0, [pc, #52]	; (8001604 <MX_GPIO_Init+0x190>)
 80015d0:	f000 fba8 	bl	8001d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_Reset_Pin */
  GPIO_InitStruct.Pin = LCD_Reset_Pin;
 80015d4:	2304      	movs	r3, #4
 80015d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d8:	2301      	movs	r3, #1
 80015da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e0:	2300      	movs	r3, #0
 80015e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_Reset_GPIO_Port, &GPIO_InitStruct);
 80015e4:	f107 0314 	add.w	r3, r7, #20
 80015e8:	4619      	mov	r1, r3
 80015ea:	4807      	ldr	r0, [pc, #28]	; (8001608 <MX_GPIO_Init+0x194>)
 80015ec:	f000 fb9a 	bl	8001d24 <HAL_GPIO_Init>

}
 80015f0:	bf00      	nop
 80015f2:	3728      	adds	r7, #40	; 0x28
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	40023800 	.word	0x40023800
 80015fc:	40020000 	.word	0x40020000
 8001600:	40020400 	.word	0x40020400
 8001604:	40020800 	.word	0x40020800
 8001608:	40020c00 	.word	0x40020c00

0800160c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001610:	b672      	cpsid	i
}
 8001612:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001614:	e7fe      	b.n	8001614 <Error_Handler+0x8>
	...

08001618 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	607b      	str	r3, [r7, #4]
 8001622:	4b10      	ldr	r3, [pc, #64]	; (8001664 <HAL_MspInit+0x4c>)
 8001624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001626:	4a0f      	ldr	r2, [pc, #60]	; (8001664 <HAL_MspInit+0x4c>)
 8001628:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800162c:	6453      	str	r3, [r2, #68]	; 0x44
 800162e:	4b0d      	ldr	r3, [pc, #52]	; (8001664 <HAL_MspInit+0x4c>)
 8001630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001632:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001636:	607b      	str	r3, [r7, #4]
 8001638:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	603b      	str	r3, [r7, #0]
 800163e:	4b09      	ldr	r3, [pc, #36]	; (8001664 <HAL_MspInit+0x4c>)
 8001640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001642:	4a08      	ldr	r2, [pc, #32]	; (8001664 <HAL_MspInit+0x4c>)
 8001644:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001648:	6413      	str	r3, [r2, #64]	; 0x40
 800164a:	4b06      	ldr	r3, [pc, #24]	; (8001664 <HAL_MspInit+0x4c>)
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001652:	603b      	str	r3, [r7, #0]
 8001654:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001656:	2007      	movs	r0, #7
 8001658:	f000 fb30 	bl	8001cbc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800165c:	bf00      	nop
 800165e:	3708      	adds	r7, #8
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	40023800 	.word	0x40023800

08001668 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b08c      	sub	sp, #48	; 0x30
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001670:	f107 031c 	add.w	r3, r7, #28
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	60da      	str	r2, [r3, #12]
 800167e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a3b      	ldr	r2, [pc, #236]	; (8001774 <HAL_SPI_MspInit+0x10c>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d13e      	bne.n	8001708 <HAL_SPI_MspInit+0xa0>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	61bb      	str	r3, [r7, #24]
 800168e:	4b3a      	ldr	r3, [pc, #232]	; (8001778 <HAL_SPI_MspInit+0x110>)
 8001690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001692:	4a39      	ldr	r2, [pc, #228]	; (8001778 <HAL_SPI_MspInit+0x110>)
 8001694:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001698:	6413      	str	r3, [r2, #64]	; 0x40
 800169a:	4b37      	ldr	r3, [pc, #220]	; (8001778 <HAL_SPI_MspInit+0x110>)
 800169c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016a2:	61bb      	str	r3, [r7, #24]
 80016a4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	617b      	str	r3, [r7, #20]
 80016aa:	4b33      	ldr	r3, [pc, #204]	; (8001778 <HAL_SPI_MspInit+0x110>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	4a32      	ldr	r2, [pc, #200]	; (8001778 <HAL_SPI_MspInit+0x110>)
 80016b0:	f043 0302 	orr.w	r3, r3, #2
 80016b4:	6313      	str	r3, [r2, #48]	; 0x30
 80016b6:	4b30      	ldr	r3, [pc, #192]	; (8001778 <HAL_SPI_MspInit+0x110>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	617b      	str	r3, [r7, #20]
 80016c0:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SD_SCK_Pin;
 80016c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c8:	2302      	movs	r3, #2
 80016ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016cc:	2300      	movs	r3, #0
 80016ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d0:	2303      	movs	r3, #3
 80016d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016d4:	2305      	movs	r3, #5
 80016d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SD_SCK_GPIO_Port, &GPIO_InitStruct);
 80016d8:	f107 031c 	add.w	r3, r7, #28
 80016dc:	4619      	mov	r1, r3
 80016de:	4827      	ldr	r0, [pc, #156]	; (800177c <HAL_SPI_MspInit+0x114>)
 80016e0:	f000 fb20 	bl	8001d24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD_MISO_Pin|SD_MOSI_Pin;
 80016e4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80016e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ea:	2302      	movs	r3, #2
 80016ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016ee:	2301      	movs	r3, #1
 80016f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f2:	2303      	movs	r3, #3
 80016f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016f6:	2305      	movs	r3, #5
 80016f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016fa:	f107 031c 	add.w	r3, r7, #28
 80016fe:	4619      	mov	r1, r3
 8001700:	481e      	ldr	r0, [pc, #120]	; (800177c <HAL_SPI_MspInit+0x114>)
 8001702:	f000 fb0f 	bl	8001d24 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001706:	e031      	b.n	800176c <HAL_SPI_MspInit+0x104>
  else if(hspi->Instance==SPI3)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a1c      	ldr	r2, [pc, #112]	; (8001780 <HAL_SPI_MspInit+0x118>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d12c      	bne.n	800176c <HAL_SPI_MspInit+0x104>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	613b      	str	r3, [r7, #16]
 8001716:	4b18      	ldr	r3, [pc, #96]	; (8001778 <HAL_SPI_MspInit+0x110>)
 8001718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171a:	4a17      	ldr	r2, [pc, #92]	; (8001778 <HAL_SPI_MspInit+0x110>)
 800171c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001720:	6413      	str	r3, [r2, #64]	; 0x40
 8001722:	4b15      	ldr	r3, [pc, #84]	; (8001778 <HAL_SPI_MspInit+0x110>)
 8001724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001726:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800172a:	613b      	str	r3, [r7, #16]
 800172c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	60fb      	str	r3, [r7, #12]
 8001732:	4b11      	ldr	r3, [pc, #68]	; (8001778 <HAL_SPI_MspInit+0x110>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	4a10      	ldr	r2, [pc, #64]	; (8001778 <HAL_SPI_MspInit+0x110>)
 8001738:	f043 0304 	orr.w	r3, r3, #4
 800173c:	6313      	str	r3, [r2, #48]	; 0x30
 800173e:	4b0e      	ldr	r3, [pc, #56]	; (8001778 <HAL_SPI_MspInit+0x110>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	f003 0304 	and.w	r3, r3, #4
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MOSI_Pin;
 800174a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800174e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001750:	2302      	movs	r3, #2
 8001752:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	2300      	movs	r3, #0
 8001756:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001758:	2303      	movs	r3, #3
 800175a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800175c:	2306      	movs	r3, #6
 800175e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001760:	f107 031c 	add.w	r3, r7, #28
 8001764:	4619      	mov	r1, r3
 8001766:	4807      	ldr	r0, [pc, #28]	; (8001784 <HAL_SPI_MspInit+0x11c>)
 8001768:	f000 fadc 	bl	8001d24 <HAL_GPIO_Init>
}
 800176c:	bf00      	nop
 800176e:	3730      	adds	r7, #48	; 0x30
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	40003800 	.word	0x40003800
 8001778:	40023800 	.word	0x40023800
 800177c:	40020400 	.word	0x40020400
 8001780:	40003c00 	.word	0x40003c00
 8001784:	40020800 	.word	0x40020800

08001788 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b08a      	sub	sp, #40	; 0x28
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001790:	f107 0314 	add.w	r3, r7, #20
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	605a      	str	r2, [r3, #4]
 800179a:	609a      	str	r2, [r3, #8]
 800179c:	60da      	str	r2, [r3, #12]
 800179e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a19      	ldr	r2, [pc, #100]	; (800180c <HAL_UART_MspInit+0x84>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d12b      	bne.n	8001802 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	613b      	str	r3, [r7, #16]
 80017ae:	4b18      	ldr	r3, [pc, #96]	; (8001810 <HAL_UART_MspInit+0x88>)
 80017b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b2:	4a17      	ldr	r2, [pc, #92]	; (8001810 <HAL_UART_MspInit+0x88>)
 80017b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017b8:	6413      	str	r3, [r2, #64]	; 0x40
 80017ba:	4b15      	ldr	r3, [pc, #84]	; (8001810 <HAL_UART_MspInit+0x88>)
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c2:	613b      	str	r3, [r7, #16]
 80017c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	4b11      	ldr	r3, [pc, #68]	; (8001810 <HAL_UART_MspInit+0x88>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	4a10      	ldr	r2, [pc, #64]	; (8001810 <HAL_UART_MspInit+0x88>)
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	6313      	str	r3, [r2, #48]	; 0x30
 80017d6:	4b0e      	ldr	r3, [pc, #56]	; (8001810 <HAL_UART_MspInit+0x88>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80017e2:	230c      	movs	r3, #12
 80017e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e6:	2302      	movs	r3, #2
 80017e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ea:	2300      	movs	r3, #0
 80017ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ee:	2303      	movs	r3, #3
 80017f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017f2:	2307      	movs	r3, #7
 80017f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f6:	f107 0314 	add.w	r3, r7, #20
 80017fa:	4619      	mov	r1, r3
 80017fc:	4805      	ldr	r0, [pc, #20]	; (8001814 <HAL_UART_MspInit+0x8c>)
 80017fe:	f000 fa91 	bl	8001d24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001802:	bf00      	nop
 8001804:	3728      	adds	r7, #40	; 0x28
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40004400 	.word	0x40004400
 8001810:	40023800 	.word	0x40023800
 8001814:	40020000 	.word	0x40020000

08001818 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800181c:	e7fe      	b.n	800181c <NMI_Handler+0x4>

0800181e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800181e:	b480      	push	{r7}
 8001820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001822:	e7fe      	b.n	8001822 <HardFault_Handler+0x4>

08001824 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001828:	e7fe      	b.n	8001828 <MemManage_Handler+0x4>

0800182a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800182a:	b480      	push	{r7}
 800182c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800182e:	e7fe      	b.n	800182e <BusFault_Handler+0x4>

08001830 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001834:	e7fe      	b.n	8001834 <UsageFault_Handler+0x4>

08001836 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001836:	b480      	push	{r7}
 8001838:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001848:	bf00      	nop
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr

08001852 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001852:	b480      	push	{r7}
 8001854:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001856:	bf00      	nop
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001864:	f000 f934 	bl	8001ad0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001868:	bf00      	nop
 800186a:	bd80      	pop	{r7, pc}

0800186c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b086      	sub	sp, #24
 8001870:	af00      	add	r7, sp, #0
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	60b9      	str	r1, [r7, #8]
 8001876:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001878:	2300      	movs	r3, #0
 800187a:	617b      	str	r3, [r7, #20]
 800187c:	e00a      	b.n	8001894 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800187e:	f3af 8000 	nop.w
 8001882:	4601      	mov	r1, r0
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	1c5a      	adds	r2, r3, #1
 8001888:	60ba      	str	r2, [r7, #8]
 800188a:	b2ca      	uxtb	r2, r1
 800188c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	3301      	adds	r3, #1
 8001892:	617b      	str	r3, [r7, #20]
 8001894:	697a      	ldr	r2, [r7, #20]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	429a      	cmp	r2, r3
 800189a:	dbf0      	blt.n	800187e <_read+0x12>
  }

  return len;
 800189c:	687b      	ldr	r3, [r7, #4]
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3718      	adds	r7, #24
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b086      	sub	sp, #24
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	60f8      	str	r0, [r7, #12]
 80018ae:	60b9      	str	r1, [r7, #8]
 80018b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b2:	2300      	movs	r3, #0
 80018b4:	617b      	str	r3, [r7, #20]
 80018b6:	e009      	b.n	80018cc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	1c5a      	adds	r2, r3, #1
 80018bc:	60ba      	str	r2, [r7, #8]
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff f93b 	bl	8000b3c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	3301      	adds	r3, #1
 80018ca:	617b      	str	r3, [r7, #20]
 80018cc:	697a      	ldr	r2, [r7, #20]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	dbf1      	blt.n	80018b8 <_write+0x12>
  }
  return len;
 80018d4:	687b      	ldr	r3, [r7, #4]
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3718      	adds	r7, #24
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <_close>:

int _close(int file)
{
 80018de:	b480      	push	{r7}
 80018e0:	b083      	sub	sp, #12
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr

080018f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018f6:	b480      	push	{r7}
 80018f8:	b083      	sub	sp, #12
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
 80018fe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001906:	605a      	str	r2, [r3, #4]
  return 0;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr

08001916 <_isatty>:

int _isatty(int file)
{
 8001916:	b480      	push	{r7}
 8001918:	b083      	sub	sp, #12
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800191e:	2301      	movs	r3, #1
}
 8001920:	4618      	mov	r0, r3
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	3714      	adds	r7, #20
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
	...

08001948 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b086      	sub	sp, #24
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001950:	4a14      	ldr	r2, [pc, #80]	; (80019a4 <_sbrk+0x5c>)
 8001952:	4b15      	ldr	r3, [pc, #84]	; (80019a8 <_sbrk+0x60>)
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800195c:	4b13      	ldr	r3, [pc, #76]	; (80019ac <_sbrk+0x64>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d102      	bne.n	800196a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001964:	4b11      	ldr	r3, [pc, #68]	; (80019ac <_sbrk+0x64>)
 8001966:	4a12      	ldr	r2, [pc, #72]	; (80019b0 <_sbrk+0x68>)
 8001968:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800196a:	4b10      	ldr	r3, [pc, #64]	; (80019ac <_sbrk+0x64>)
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4413      	add	r3, r2
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	429a      	cmp	r2, r3
 8001976:	d207      	bcs.n	8001988 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001978:	f005 f9cc 	bl	8006d14 <__errno>
 800197c:	4603      	mov	r3, r0
 800197e:	220c      	movs	r2, #12
 8001980:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001982:	f04f 33ff 	mov.w	r3, #4294967295
 8001986:	e009      	b.n	800199c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001988:	4b08      	ldr	r3, [pc, #32]	; (80019ac <_sbrk+0x64>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800198e:	4b07      	ldr	r3, [pc, #28]	; (80019ac <_sbrk+0x64>)
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4413      	add	r3, r2
 8001996:	4a05      	ldr	r2, [pc, #20]	; (80019ac <_sbrk+0x64>)
 8001998:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800199a:	68fb      	ldr	r3, [r7, #12]
}
 800199c:	4618      	mov	r0, r3
 800199e:	3718      	adds	r7, #24
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	20020000 	.word	0x20020000
 80019a8:	00000400 	.word	0x00000400
 80019ac:	20000410 	.word	0x20000410
 80019b0:	20000470 	.word	0x20000470

080019b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019b8:	4b06      	ldr	r3, [pc, #24]	; (80019d4 <SystemInit+0x20>)
 80019ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019be:	4a05      	ldr	r2, [pc, #20]	; (80019d4 <SystemInit+0x20>)
 80019c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019c8:	bf00      	nop
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	e000ed00 	.word	0xe000ed00

080019d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80019d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a10 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019dc:	480d      	ldr	r0, [pc, #52]	; (8001a14 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019de:	490e      	ldr	r1, [pc, #56]	; (8001a18 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019e0:	4a0e      	ldr	r2, [pc, #56]	; (8001a1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019e4:	e002      	b.n	80019ec <LoopCopyDataInit>

080019e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ea:	3304      	adds	r3, #4

080019ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019f0:	d3f9      	bcc.n	80019e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019f2:	4a0b      	ldr	r2, [pc, #44]	; (8001a20 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019f4:	4c0b      	ldr	r4, [pc, #44]	; (8001a24 <LoopFillZerobss+0x26>)
  movs r3, #0
 80019f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019f8:	e001      	b.n	80019fe <LoopFillZerobss>

080019fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019fc:	3204      	adds	r2, #4

080019fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a00:	d3fb      	bcc.n	80019fa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a02:	f7ff ffd7 	bl	80019b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a06:	f005 f98b 	bl	8006d20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a0a:	f7ff fb79 	bl	8001100 <main>
  bx  lr    
 8001a0e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a18:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001a1c:	08008ddc 	.word	0x08008ddc
  ldr r2, =_sbss
 8001a20:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001a24:	20000470 	.word	0x20000470

08001a28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a28:	e7fe      	b.n	8001a28 <ADC_IRQHandler>
	...

08001a2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a30:	4b0e      	ldr	r3, [pc, #56]	; (8001a6c <HAL_Init+0x40>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a0d      	ldr	r2, [pc, #52]	; (8001a6c <HAL_Init+0x40>)
 8001a36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a3c:	4b0b      	ldr	r3, [pc, #44]	; (8001a6c <HAL_Init+0x40>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a0a      	ldr	r2, [pc, #40]	; (8001a6c <HAL_Init+0x40>)
 8001a42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a48:	4b08      	ldr	r3, [pc, #32]	; (8001a6c <HAL_Init+0x40>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a07      	ldr	r2, [pc, #28]	; (8001a6c <HAL_Init+0x40>)
 8001a4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a54:	2003      	movs	r0, #3
 8001a56:	f000 f931 	bl	8001cbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a5a:	2000      	movs	r0, #0
 8001a5c:	f000 f808 	bl	8001a70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a60:	f7ff fdda 	bl	8001618 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40023c00 	.word	0x40023c00

08001a70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a78:	4b12      	ldr	r3, [pc, #72]	; (8001ac4 <HAL_InitTick+0x54>)
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	4b12      	ldr	r3, [pc, #72]	; (8001ac8 <HAL_InitTick+0x58>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	4619      	mov	r1, r3
 8001a82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a86:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f000 f93b 	bl	8001d0a <HAL_SYSTICK_Config>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e00e      	b.n	8001abc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2b0f      	cmp	r3, #15
 8001aa2:	d80a      	bhi.n	8001aba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	6879      	ldr	r1, [r7, #4]
 8001aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8001aac:	f000 f911 	bl	8001cd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ab0:	4a06      	ldr	r2, [pc, #24]	; (8001acc <HAL_InitTick+0x5c>)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	e000      	b.n	8001abc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3708      	adds	r7, #8
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	20000008 	.word	0x20000008
 8001ac8:	20000010 	.word	0x20000010
 8001acc:	2000000c 	.word	0x2000000c

08001ad0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ad4:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <HAL_IncTick+0x20>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	461a      	mov	r2, r3
 8001ada:	4b06      	ldr	r3, [pc, #24]	; (8001af4 <HAL_IncTick+0x24>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4413      	add	r3, r2
 8001ae0:	4a04      	ldr	r2, [pc, #16]	; (8001af4 <HAL_IncTick+0x24>)
 8001ae2:	6013      	str	r3, [r2, #0]
}
 8001ae4:	bf00      	nop
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	20000010 	.word	0x20000010
 8001af4:	20000414 	.word	0x20000414

08001af8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  return uwTick;
 8001afc:	4b03      	ldr	r3, [pc, #12]	; (8001b0c <HAL_GetTick+0x14>)
 8001afe:	681b      	ldr	r3, [r3, #0]
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	20000414 	.word	0x20000414

08001b10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b18:	f7ff ffee 	bl	8001af8 <HAL_GetTick>
 8001b1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b28:	d005      	beq.n	8001b36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b2a:	4b0a      	ldr	r3, [pc, #40]	; (8001b54 <HAL_Delay+0x44>)
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	461a      	mov	r2, r3
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	4413      	add	r3, r2
 8001b34:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b36:	bf00      	nop
 8001b38:	f7ff ffde 	bl	8001af8 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	68fa      	ldr	r2, [r7, #12]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d8f7      	bhi.n	8001b38 <HAL_Delay+0x28>
  {
  }
}
 8001b48:	bf00      	nop
 8001b4a:	bf00      	nop
 8001b4c:	3710      	adds	r7, #16
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	20000010 	.word	0x20000010

08001b58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b68:	4b0c      	ldr	r3, [pc, #48]	; (8001b9c <__NVIC_SetPriorityGrouping+0x44>)
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b6e:	68ba      	ldr	r2, [r7, #8]
 8001b70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b74:	4013      	ands	r3, r2
 8001b76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b8a:	4a04      	ldr	r2, [pc, #16]	; (8001b9c <__NVIC_SetPriorityGrouping+0x44>)
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	60d3      	str	r3, [r2, #12]
}
 8001b90:	bf00      	nop
 8001b92:	3714      	adds	r7, #20
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr
 8001b9c:	e000ed00 	.word	0xe000ed00

08001ba0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ba4:	4b04      	ldr	r3, [pc, #16]	; (8001bb8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	0a1b      	lsrs	r3, r3, #8
 8001baa:	f003 0307 	and.w	r3, r3, #7
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr
 8001bb8:	e000ed00 	.word	0xe000ed00

08001bbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	6039      	str	r1, [r7, #0]
 8001bc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	db0a      	blt.n	8001be6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	b2da      	uxtb	r2, r3
 8001bd4:	490c      	ldr	r1, [pc, #48]	; (8001c08 <__NVIC_SetPriority+0x4c>)
 8001bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bda:	0112      	lsls	r2, r2, #4
 8001bdc:	b2d2      	uxtb	r2, r2
 8001bde:	440b      	add	r3, r1
 8001be0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001be4:	e00a      	b.n	8001bfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	b2da      	uxtb	r2, r3
 8001bea:	4908      	ldr	r1, [pc, #32]	; (8001c0c <__NVIC_SetPriority+0x50>)
 8001bec:	79fb      	ldrb	r3, [r7, #7]
 8001bee:	f003 030f 	and.w	r3, r3, #15
 8001bf2:	3b04      	subs	r3, #4
 8001bf4:	0112      	lsls	r2, r2, #4
 8001bf6:	b2d2      	uxtb	r2, r2
 8001bf8:	440b      	add	r3, r1
 8001bfa:	761a      	strb	r2, [r3, #24]
}
 8001bfc:	bf00      	nop
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr
 8001c08:	e000e100 	.word	0xe000e100
 8001c0c:	e000ed00 	.word	0xe000ed00

08001c10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b089      	sub	sp, #36	; 0x24
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	60b9      	str	r1, [r7, #8]
 8001c1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	f003 0307 	and.w	r3, r3, #7
 8001c22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	f1c3 0307 	rsb	r3, r3, #7
 8001c2a:	2b04      	cmp	r3, #4
 8001c2c:	bf28      	it	cs
 8001c2e:	2304      	movcs	r3, #4
 8001c30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	3304      	adds	r3, #4
 8001c36:	2b06      	cmp	r3, #6
 8001c38:	d902      	bls.n	8001c40 <NVIC_EncodePriority+0x30>
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	3b03      	subs	r3, #3
 8001c3e:	e000      	b.n	8001c42 <NVIC_EncodePriority+0x32>
 8001c40:	2300      	movs	r3, #0
 8001c42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c44:	f04f 32ff 	mov.w	r2, #4294967295
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	43da      	mvns	r2, r3
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	401a      	ands	r2, r3
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c58:	f04f 31ff 	mov.w	r1, #4294967295
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c62:	43d9      	mvns	r1, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c68:	4313      	orrs	r3, r2
         );
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3724      	adds	r7, #36	; 0x24
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
	...

08001c78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	3b01      	subs	r3, #1
 8001c84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c88:	d301      	bcc.n	8001c8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e00f      	b.n	8001cae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c8e:	4a0a      	ldr	r2, [pc, #40]	; (8001cb8 <SysTick_Config+0x40>)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	3b01      	subs	r3, #1
 8001c94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c96:	210f      	movs	r1, #15
 8001c98:	f04f 30ff 	mov.w	r0, #4294967295
 8001c9c:	f7ff ff8e 	bl	8001bbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ca0:	4b05      	ldr	r3, [pc, #20]	; (8001cb8 <SysTick_Config+0x40>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ca6:	4b04      	ldr	r3, [pc, #16]	; (8001cb8 <SysTick_Config+0x40>)
 8001ca8:	2207      	movs	r2, #7
 8001caa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	e000e010 	.word	0xe000e010

08001cbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f7ff ff47 	bl	8001b58 <__NVIC_SetPriorityGrouping>
}
 8001cca:	bf00      	nop
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b086      	sub	sp, #24
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	4603      	mov	r3, r0
 8001cda:	60b9      	str	r1, [r7, #8]
 8001cdc:	607a      	str	r2, [r7, #4]
 8001cde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ce4:	f7ff ff5c 	bl	8001ba0 <__NVIC_GetPriorityGrouping>
 8001ce8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	68b9      	ldr	r1, [r7, #8]
 8001cee:	6978      	ldr	r0, [r7, #20]
 8001cf0:	f7ff ff8e 	bl	8001c10 <NVIC_EncodePriority>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cfa:	4611      	mov	r1, r2
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7ff ff5d 	bl	8001bbc <__NVIC_SetPriority>
}
 8001d02:	bf00      	nop
 8001d04:	3718      	adds	r7, #24
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b082      	sub	sp, #8
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f7ff ffb0 	bl	8001c78 <SysTick_Config>
 8001d18:	4603      	mov	r3, r0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
	...

08001d24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b089      	sub	sp, #36	; 0x24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d32:	2300      	movs	r3, #0
 8001d34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d36:	2300      	movs	r3, #0
 8001d38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	61fb      	str	r3, [r7, #28]
 8001d3e:	e159      	b.n	8001ff4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d40:	2201      	movs	r2, #1
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	697a      	ldr	r2, [r7, #20]
 8001d50:	4013      	ands	r3, r2
 8001d52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d54:	693a      	ldr	r2, [r7, #16]
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	f040 8148 	bne.w	8001fee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f003 0303 	and.w	r3, r3, #3
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d005      	beq.n	8001d76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d130      	bne.n	8001dd8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	2203      	movs	r2, #3
 8001d82:	fa02 f303 	lsl.w	r3, r2, r3
 8001d86:	43db      	mvns	r3, r3
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	68da      	ldr	r2, [r3, #12]
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	69ba      	ldr	r2, [r7, #24]
 8001da4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dac:	2201      	movs	r2, #1
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	43db      	mvns	r3, r3
 8001db6:	69ba      	ldr	r2, [r7, #24]
 8001db8:	4013      	ands	r3, r2
 8001dba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	091b      	lsrs	r3, r3, #4
 8001dc2:	f003 0201 	and.w	r2, r3, #1
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f003 0303 	and.w	r3, r3, #3
 8001de0:	2b03      	cmp	r3, #3
 8001de2:	d017      	beq.n	8001e14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	2203      	movs	r2, #3
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	43db      	mvns	r3, r3
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	689a      	ldr	r2, [r3, #8]
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f003 0303 	and.w	r3, r3, #3
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d123      	bne.n	8001e68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	08da      	lsrs	r2, r3, #3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	3208      	adds	r2, #8
 8001e28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	f003 0307 	and.w	r3, r3, #7
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	220f      	movs	r2, #15
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	69ba      	ldr	r2, [r7, #24]
 8001e40:	4013      	ands	r3, r2
 8001e42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	691a      	ldr	r2, [r3, #16]
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	f003 0307 	and.w	r3, r3, #7
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	fa02 f303 	lsl.w	r3, r2, r3
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	08da      	lsrs	r2, r3, #3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	3208      	adds	r2, #8
 8001e62:	69b9      	ldr	r1, [r7, #24]
 8001e64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	2203      	movs	r2, #3
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f003 0203 	and.w	r2, r3, #3
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	f000 80a2 	beq.w	8001fee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eaa:	2300      	movs	r3, #0
 8001eac:	60fb      	str	r3, [r7, #12]
 8001eae:	4b57      	ldr	r3, [pc, #348]	; (800200c <HAL_GPIO_Init+0x2e8>)
 8001eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb2:	4a56      	ldr	r2, [pc, #344]	; (800200c <HAL_GPIO_Init+0x2e8>)
 8001eb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eb8:	6453      	str	r3, [r2, #68]	; 0x44
 8001eba:	4b54      	ldr	r3, [pc, #336]	; (800200c <HAL_GPIO_Init+0x2e8>)
 8001ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ebe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ec2:	60fb      	str	r3, [r7, #12]
 8001ec4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ec6:	4a52      	ldr	r2, [pc, #328]	; (8002010 <HAL_GPIO_Init+0x2ec>)
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	089b      	lsrs	r3, r3, #2
 8001ecc:	3302      	adds	r3, #2
 8001ece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	f003 0303 	and.w	r3, r3, #3
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	220f      	movs	r2, #15
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee2:	43db      	mvns	r3, r3
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a49      	ldr	r2, [pc, #292]	; (8002014 <HAL_GPIO_Init+0x2f0>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d019      	beq.n	8001f26 <HAL_GPIO_Init+0x202>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a48      	ldr	r2, [pc, #288]	; (8002018 <HAL_GPIO_Init+0x2f4>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d013      	beq.n	8001f22 <HAL_GPIO_Init+0x1fe>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a47      	ldr	r2, [pc, #284]	; (800201c <HAL_GPIO_Init+0x2f8>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d00d      	beq.n	8001f1e <HAL_GPIO_Init+0x1fa>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a46      	ldr	r2, [pc, #280]	; (8002020 <HAL_GPIO_Init+0x2fc>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d007      	beq.n	8001f1a <HAL_GPIO_Init+0x1f6>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a45      	ldr	r2, [pc, #276]	; (8002024 <HAL_GPIO_Init+0x300>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d101      	bne.n	8001f16 <HAL_GPIO_Init+0x1f2>
 8001f12:	2304      	movs	r3, #4
 8001f14:	e008      	b.n	8001f28 <HAL_GPIO_Init+0x204>
 8001f16:	2307      	movs	r3, #7
 8001f18:	e006      	b.n	8001f28 <HAL_GPIO_Init+0x204>
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e004      	b.n	8001f28 <HAL_GPIO_Init+0x204>
 8001f1e:	2302      	movs	r3, #2
 8001f20:	e002      	b.n	8001f28 <HAL_GPIO_Init+0x204>
 8001f22:	2301      	movs	r3, #1
 8001f24:	e000      	b.n	8001f28 <HAL_GPIO_Init+0x204>
 8001f26:	2300      	movs	r3, #0
 8001f28:	69fa      	ldr	r2, [r7, #28]
 8001f2a:	f002 0203 	and.w	r2, r2, #3
 8001f2e:	0092      	lsls	r2, r2, #2
 8001f30:	4093      	lsls	r3, r2
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f38:	4935      	ldr	r1, [pc, #212]	; (8002010 <HAL_GPIO_Init+0x2ec>)
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	089b      	lsrs	r3, r3, #2
 8001f3e:	3302      	adds	r3, #2
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f46:	4b38      	ldr	r3, [pc, #224]	; (8002028 <HAL_GPIO_Init+0x304>)
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	43db      	mvns	r3, r3
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	4013      	ands	r3, r2
 8001f54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d003      	beq.n	8001f6a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f6a:	4a2f      	ldr	r2, [pc, #188]	; (8002028 <HAL_GPIO_Init+0x304>)
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f70:	4b2d      	ldr	r3, [pc, #180]	; (8002028 <HAL_GPIO_Init+0x304>)
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d003      	beq.n	8001f94 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f94:	4a24      	ldr	r2, [pc, #144]	; (8002028 <HAL_GPIO_Init+0x304>)
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f9a:	4b23      	ldr	r3, [pc, #140]	; (8002028 <HAL_GPIO_Init+0x304>)
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	43db      	mvns	r3, r3
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d003      	beq.n	8001fbe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fbe:	4a1a      	ldr	r2, [pc, #104]	; (8002028 <HAL_GPIO_Init+0x304>)
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fc4:	4b18      	ldr	r3, [pc, #96]	; (8002028 <HAL_GPIO_Init+0x304>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d003      	beq.n	8001fe8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fe8:	4a0f      	ldr	r2, [pc, #60]	; (8002028 <HAL_GPIO_Init+0x304>)
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	61fb      	str	r3, [r7, #28]
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	2b0f      	cmp	r3, #15
 8001ff8:	f67f aea2 	bls.w	8001d40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ffc:	bf00      	nop
 8001ffe:	bf00      	nop
 8002000:	3724      	adds	r7, #36	; 0x24
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	40023800 	.word	0x40023800
 8002010:	40013800 	.word	0x40013800
 8002014:	40020000 	.word	0x40020000
 8002018:	40020400 	.word	0x40020400
 800201c:	40020800 	.word	0x40020800
 8002020:	40020c00 	.word	0x40020c00
 8002024:	40021000 	.word	0x40021000
 8002028:	40013c00 	.word	0x40013c00

0800202c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	460b      	mov	r3, r1
 8002036:	807b      	strh	r3, [r7, #2]
 8002038:	4613      	mov	r3, r2
 800203a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800203c:	787b      	ldrb	r3, [r7, #1]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d003      	beq.n	800204a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002042:	887a      	ldrh	r2, [r7, #2]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002048:	e003      	b.n	8002052 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800204a:	887b      	ldrh	r3, [r7, #2]
 800204c:	041a      	lsls	r2, r3, #16
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	619a      	str	r2, [r3, #24]
}
 8002052:	bf00      	nop
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
	...

08002060 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b086      	sub	sp, #24
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d101      	bne.n	8002072 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e267      	b.n	8002542 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	2b00      	cmp	r3, #0
 800207c:	d075      	beq.n	800216a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800207e:	4b88      	ldr	r3, [pc, #544]	; (80022a0 <HAL_RCC_OscConfig+0x240>)
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f003 030c 	and.w	r3, r3, #12
 8002086:	2b04      	cmp	r3, #4
 8002088:	d00c      	beq.n	80020a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800208a:	4b85      	ldr	r3, [pc, #532]	; (80022a0 <HAL_RCC_OscConfig+0x240>)
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002092:	2b08      	cmp	r3, #8
 8002094:	d112      	bne.n	80020bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002096:	4b82      	ldr	r3, [pc, #520]	; (80022a0 <HAL_RCC_OscConfig+0x240>)
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800209e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020a2:	d10b      	bne.n	80020bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020a4:	4b7e      	ldr	r3, [pc, #504]	; (80022a0 <HAL_RCC_OscConfig+0x240>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d05b      	beq.n	8002168 <HAL_RCC_OscConfig+0x108>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d157      	bne.n	8002168 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e242      	b.n	8002542 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020c4:	d106      	bne.n	80020d4 <HAL_RCC_OscConfig+0x74>
 80020c6:	4b76      	ldr	r3, [pc, #472]	; (80022a0 <HAL_RCC_OscConfig+0x240>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a75      	ldr	r2, [pc, #468]	; (80022a0 <HAL_RCC_OscConfig+0x240>)
 80020cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020d0:	6013      	str	r3, [r2, #0]
 80020d2:	e01d      	b.n	8002110 <HAL_RCC_OscConfig+0xb0>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020dc:	d10c      	bne.n	80020f8 <HAL_RCC_OscConfig+0x98>
 80020de:	4b70      	ldr	r3, [pc, #448]	; (80022a0 <HAL_RCC_OscConfig+0x240>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a6f      	ldr	r2, [pc, #444]	; (80022a0 <HAL_RCC_OscConfig+0x240>)
 80020e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020e8:	6013      	str	r3, [r2, #0]
 80020ea:	4b6d      	ldr	r3, [pc, #436]	; (80022a0 <HAL_RCC_OscConfig+0x240>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a6c      	ldr	r2, [pc, #432]	; (80022a0 <HAL_RCC_OscConfig+0x240>)
 80020f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020f4:	6013      	str	r3, [r2, #0]
 80020f6:	e00b      	b.n	8002110 <HAL_RCC_OscConfig+0xb0>
 80020f8:	4b69      	ldr	r3, [pc, #420]	; (80022a0 <HAL_RCC_OscConfig+0x240>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a68      	ldr	r2, [pc, #416]	; (80022a0 <HAL_RCC_OscConfig+0x240>)
 80020fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002102:	6013      	str	r3, [r2, #0]
 8002104:	4b66      	ldr	r3, [pc, #408]	; (80022a0 <HAL_RCC_OscConfig+0x240>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a65      	ldr	r2, [pc, #404]	; (80022a0 <HAL_RCC_OscConfig+0x240>)
 800210a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800210e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d013      	beq.n	8002140 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002118:	f7ff fcee 	bl	8001af8 <HAL_GetTick>
 800211c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800211e:	e008      	b.n	8002132 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002120:	f7ff fcea 	bl	8001af8 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b64      	cmp	r3, #100	; 0x64
 800212c:	d901      	bls.n	8002132 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e207      	b.n	8002542 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002132:	4b5b      	ldr	r3, [pc, #364]	; (80022a0 <HAL_RCC_OscConfig+0x240>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d0f0      	beq.n	8002120 <HAL_RCC_OscConfig+0xc0>
 800213e:	e014      	b.n	800216a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002140:	f7ff fcda 	bl	8001af8 <HAL_GetTick>
 8002144:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002146:	e008      	b.n	800215a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002148:	f7ff fcd6 	bl	8001af8 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b64      	cmp	r3, #100	; 0x64
 8002154:	d901      	bls.n	800215a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e1f3      	b.n	8002542 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800215a:	4b51      	ldr	r3, [pc, #324]	; (80022a0 <HAL_RCC_OscConfig+0x240>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d1f0      	bne.n	8002148 <HAL_RCC_OscConfig+0xe8>
 8002166:	e000      	b.n	800216a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002168:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	2b00      	cmp	r3, #0
 8002174:	d063      	beq.n	800223e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002176:	4b4a      	ldr	r3, [pc, #296]	; (80022a0 <HAL_RCC_OscConfig+0x240>)
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	f003 030c 	and.w	r3, r3, #12
 800217e:	2b00      	cmp	r3, #0
 8002180:	d00b      	beq.n	800219a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002182:	4b47      	ldr	r3, [pc, #284]	; (80022a0 <HAL_RCC_OscConfig+0x240>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800218a:	2b08      	cmp	r3, #8
 800218c:	d11c      	bne.n	80021c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800218e:	4b44      	ldr	r3, [pc, #272]	; (80022a0 <HAL_RCC_OscConfig+0x240>)
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d116      	bne.n	80021c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800219a:	4b41      	ldr	r3, [pc, #260]	; (80022a0 <HAL_RCC_OscConfig+0x240>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d005      	beq.n	80021b2 <HAL_RCC_OscConfig+0x152>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d001      	beq.n	80021b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e1c7      	b.n	8002542 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021b2:	4b3b      	ldr	r3, [pc, #236]	; (80022a0 <HAL_RCC_OscConfig+0x240>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	4937      	ldr	r1, [pc, #220]	; (80022a0 <HAL_RCC_OscConfig+0x240>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021c6:	e03a      	b.n	800223e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d020      	beq.n	8002212 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021d0:	4b34      	ldr	r3, [pc, #208]	; (80022a4 <HAL_RCC_OscConfig+0x244>)
 80021d2:	2201      	movs	r2, #1
 80021d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d6:	f7ff fc8f 	bl	8001af8 <HAL_GetTick>
 80021da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021dc:	e008      	b.n	80021f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021de:	f7ff fc8b 	bl	8001af8 <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d901      	bls.n	80021f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e1a8      	b.n	8002542 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021f0:	4b2b      	ldr	r3, [pc, #172]	; (80022a0 <HAL_RCC_OscConfig+0x240>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0302 	and.w	r3, r3, #2
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d0f0      	beq.n	80021de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021fc:	4b28      	ldr	r3, [pc, #160]	; (80022a0 <HAL_RCC_OscConfig+0x240>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	691b      	ldr	r3, [r3, #16]
 8002208:	00db      	lsls	r3, r3, #3
 800220a:	4925      	ldr	r1, [pc, #148]	; (80022a0 <HAL_RCC_OscConfig+0x240>)
 800220c:	4313      	orrs	r3, r2
 800220e:	600b      	str	r3, [r1, #0]
 8002210:	e015      	b.n	800223e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002212:	4b24      	ldr	r3, [pc, #144]	; (80022a4 <HAL_RCC_OscConfig+0x244>)
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002218:	f7ff fc6e 	bl	8001af8 <HAL_GetTick>
 800221c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800221e:	e008      	b.n	8002232 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002220:	f7ff fc6a 	bl	8001af8 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b02      	cmp	r3, #2
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e187      	b.n	8002542 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002232:	4b1b      	ldr	r3, [pc, #108]	; (80022a0 <HAL_RCC_OscConfig+0x240>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	2b00      	cmp	r3, #0
 800223c:	d1f0      	bne.n	8002220 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0308 	and.w	r3, r3, #8
 8002246:	2b00      	cmp	r3, #0
 8002248:	d036      	beq.n	80022b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	695b      	ldr	r3, [r3, #20]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d016      	beq.n	8002280 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002252:	4b15      	ldr	r3, [pc, #84]	; (80022a8 <HAL_RCC_OscConfig+0x248>)
 8002254:	2201      	movs	r2, #1
 8002256:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002258:	f7ff fc4e 	bl	8001af8 <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002260:	f7ff fc4a 	bl	8001af8 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e167      	b.n	8002542 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002272:	4b0b      	ldr	r3, [pc, #44]	; (80022a0 <HAL_RCC_OscConfig+0x240>)
 8002274:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d0f0      	beq.n	8002260 <HAL_RCC_OscConfig+0x200>
 800227e:	e01b      	b.n	80022b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002280:	4b09      	ldr	r3, [pc, #36]	; (80022a8 <HAL_RCC_OscConfig+0x248>)
 8002282:	2200      	movs	r2, #0
 8002284:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002286:	f7ff fc37 	bl	8001af8 <HAL_GetTick>
 800228a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800228c:	e00e      	b.n	80022ac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800228e:	f7ff fc33 	bl	8001af8 <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	2b02      	cmp	r3, #2
 800229a:	d907      	bls.n	80022ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e150      	b.n	8002542 <HAL_RCC_OscConfig+0x4e2>
 80022a0:	40023800 	.word	0x40023800
 80022a4:	42470000 	.word	0x42470000
 80022a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022ac:	4b88      	ldr	r3, [pc, #544]	; (80024d0 <HAL_RCC_OscConfig+0x470>)
 80022ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022b0:	f003 0302 	and.w	r3, r3, #2
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d1ea      	bne.n	800228e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0304 	and.w	r3, r3, #4
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	f000 8097 	beq.w	80023f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022c6:	2300      	movs	r3, #0
 80022c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022ca:	4b81      	ldr	r3, [pc, #516]	; (80024d0 <HAL_RCC_OscConfig+0x470>)
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d10f      	bne.n	80022f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022d6:	2300      	movs	r3, #0
 80022d8:	60bb      	str	r3, [r7, #8]
 80022da:	4b7d      	ldr	r3, [pc, #500]	; (80024d0 <HAL_RCC_OscConfig+0x470>)
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	4a7c      	ldr	r2, [pc, #496]	; (80024d0 <HAL_RCC_OscConfig+0x470>)
 80022e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022e4:	6413      	str	r3, [r2, #64]	; 0x40
 80022e6:	4b7a      	ldr	r3, [pc, #488]	; (80024d0 <HAL_RCC_OscConfig+0x470>)
 80022e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ee:	60bb      	str	r3, [r7, #8]
 80022f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022f2:	2301      	movs	r3, #1
 80022f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022f6:	4b77      	ldr	r3, [pc, #476]	; (80024d4 <HAL_RCC_OscConfig+0x474>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d118      	bne.n	8002334 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002302:	4b74      	ldr	r3, [pc, #464]	; (80024d4 <HAL_RCC_OscConfig+0x474>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a73      	ldr	r2, [pc, #460]	; (80024d4 <HAL_RCC_OscConfig+0x474>)
 8002308:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800230c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800230e:	f7ff fbf3 	bl	8001af8 <HAL_GetTick>
 8002312:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002314:	e008      	b.n	8002328 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002316:	f7ff fbef 	bl	8001af8 <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	2b02      	cmp	r3, #2
 8002322:	d901      	bls.n	8002328 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e10c      	b.n	8002542 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002328:	4b6a      	ldr	r3, [pc, #424]	; (80024d4 <HAL_RCC_OscConfig+0x474>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002330:	2b00      	cmp	r3, #0
 8002332:	d0f0      	beq.n	8002316 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	2b01      	cmp	r3, #1
 800233a:	d106      	bne.n	800234a <HAL_RCC_OscConfig+0x2ea>
 800233c:	4b64      	ldr	r3, [pc, #400]	; (80024d0 <HAL_RCC_OscConfig+0x470>)
 800233e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002340:	4a63      	ldr	r2, [pc, #396]	; (80024d0 <HAL_RCC_OscConfig+0x470>)
 8002342:	f043 0301 	orr.w	r3, r3, #1
 8002346:	6713      	str	r3, [r2, #112]	; 0x70
 8002348:	e01c      	b.n	8002384 <HAL_RCC_OscConfig+0x324>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	2b05      	cmp	r3, #5
 8002350:	d10c      	bne.n	800236c <HAL_RCC_OscConfig+0x30c>
 8002352:	4b5f      	ldr	r3, [pc, #380]	; (80024d0 <HAL_RCC_OscConfig+0x470>)
 8002354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002356:	4a5e      	ldr	r2, [pc, #376]	; (80024d0 <HAL_RCC_OscConfig+0x470>)
 8002358:	f043 0304 	orr.w	r3, r3, #4
 800235c:	6713      	str	r3, [r2, #112]	; 0x70
 800235e:	4b5c      	ldr	r3, [pc, #368]	; (80024d0 <HAL_RCC_OscConfig+0x470>)
 8002360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002362:	4a5b      	ldr	r2, [pc, #364]	; (80024d0 <HAL_RCC_OscConfig+0x470>)
 8002364:	f043 0301 	orr.w	r3, r3, #1
 8002368:	6713      	str	r3, [r2, #112]	; 0x70
 800236a:	e00b      	b.n	8002384 <HAL_RCC_OscConfig+0x324>
 800236c:	4b58      	ldr	r3, [pc, #352]	; (80024d0 <HAL_RCC_OscConfig+0x470>)
 800236e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002370:	4a57      	ldr	r2, [pc, #348]	; (80024d0 <HAL_RCC_OscConfig+0x470>)
 8002372:	f023 0301 	bic.w	r3, r3, #1
 8002376:	6713      	str	r3, [r2, #112]	; 0x70
 8002378:	4b55      	ldr	r3, [pc, #340]	; (80024d0 <HAL_RCC_OscConfig+0x470>)
 800237a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800237c:	4a54      	ldr	r2, [pc, #336]	; (80024d0 <HAL_RCC_OscConfig+0x470>)
 800237e:	f023 0304 	bic.w	r3, r3, #4
 8002382:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d015      	beq.n	80023b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800238c:	f7ff fbb4 	bl	8001af8 <HAL_GetTick>
 8002390:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002392:	e00a      	b.n	80023aa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002394:	f7ff fbb0 	bl	8001af8 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	f241 3288 	movw	r2, #5000	; 0x1388
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e0cb      	b.n	8002542 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023aa:	4b49      	ldr	r3, [pc, #292]	; (80024d0 <HAL_RCC_OscConfig+0x470>)
 80023ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ae:	f003 0302 	and.w	r3, r3, #2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d0ee      	beq.n	8002394 <HAL_RCC_OscConfig+0x334>
 80023b6:	e014      	b.n	80023e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023b8:	f7ff fb9e 	bl	8001af8 <HAL_GetTick>
 80023bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023be:	e00a      	b.n	80023d6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023c0:	f7ff fb9a 	bl	8001af8 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d901      	bls.n	80023d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e0b5      	b.n	8002542 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023d6:	4b3e      	ldr	r3, [pc, #248]	; (80024d0 <HAL_RCC_OscConfig+0x470>)
 80023d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d1ee      	bne.n	80023c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023e2:	7dfb      	ldrb	r3, [r7, #23]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d105      	bne.n	80023f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023e8:	4b39      	ldr	r3, [pc, #228]	; (80024d0 <HAL_RCC_OscConfig+0x470>)
 80023ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ec:	4a38      	ldr	r2, [pc, #224]	; (80024d0 <HAL_RCC_OscConfig+0x470>)
 80023ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023f2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	699b      	ldr	r3, [r3, #24]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	f000 80a1 	beq.w	8002540 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023fe:	4b34      	ldr	r3, [pc, #208]	; (80024d0 <HAL_RCC_OscConfig+0x470>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f003 030c 	and.w	r3, r3, #12
 8002406:	2b08      	cmp	r3, #8
 8002408:	d05c      	beq.n	80024c4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	699b      	ldr	r3, [r3, #24]
 800240e:	2b02      	cmp	r3, #2
 8002410:	d141      	bne.n	8002496 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002412:	4b31      	ldr	r3, [pc, #196]	; (80024d8 <HAL_RCC_OscConfig+0x478>)
 8002414:	2200      	movs	r2, #0
 8002416:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002418:	f7ff fb6e 	bl	8001af8 <HAL_GetTick>
 800241c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002420:	f7ff fb6a 	bl	8001af8 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b02      	cmp	r3, #2
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e087      	b.n	8002542 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002432:	4b27      	ldr	r3, [pc, #156]	; (80024d0 <HAL_RCC_OscConfig+0x470>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1f0      	bne.n	8002420 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	69da      	ldr	r2, [r3, #28]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a1b      	ldr	r3, [r3, #32]
 8002446:	431a      	orrs	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244c:	019b      	lsls	r3, r3, #6
 800244e:	431a      	orrs	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002454:	085b      	lsrs	r3, r3, #1
 8002456:	3b01      	subs	r3, #1
 8002458:	041b      	lsls	r3, r3, #16
 800245a:	431a      	orrs	r2, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002460:	061b      	lsls	r3, r3, #24
 8002462:	491b      	ldr	r1, [pc, #108]	; (80024d0 <HAL_RCC_OscConfig+0x470>)
 8002464:	4313      	orrs	r3, r2
 8002466:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002468:	4b1b      	ldr	r3, [pc, #108]	; (80024d8 <HAL_RCC_OscConfig+0x478>)
 800246a:	2201      	movs	r2, #1
 800246c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800246e:	f7ff fb43 	bl	8001af8 <HAL_GetTick>
 8002472:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002474:	e008      	b.n	8002488 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002476:	f7ff fb3f 	bl	8001af8 <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	2b02      	cmp	r3, #2
 8002482:	d901      	bls.n	8002488 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e05c      	b.n	8002542 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002488:	4b11      	ldr	r3, [pc, #68]	; (80024d0 <HAL_RCC_OscConfig+0x470>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d0f0      	beq.n	8002476 <HAL_RCC_OscConfig+0x416>
 8002494:	e054      	b.n	8002540 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002496:	4b10      	ldr	r3, [pc, #64]	; (80024d8 <HAL_RCC_OscConfig+0x478>)
 8002498:	2200      	movs	r2, #0
 800249a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800249c:	f7ff fb2c 	bl	8001af8 <HAL_GetTick>
 80024a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024a2:	e008      	b.n	80024b6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024a4:	f7ff fb28 	bl	8001af8 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e045      	b.n	8002542 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024b6:	4b06      	ldr	r3, [pc, #24]	; (80024d0 <HAL_RCC_OscConfig+0x470>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1f0      	bne.n	80024a4 <HAL_RCC_OscConfig+0x444>
 80024c2:	e03d      	b.n	8002540 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d107      	bne.n	80024dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e038      	b.n	8002542 <HAL_RCC_OscConfig+0x4e2>
 80024d0:	40023800 	.word	0x40023800
 80024d4:	40007000 	.word	0x40007000
 80024d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80024dc:	4b1b      	ldr	r3, [pc, #108]	; (800254c <HAL_RCC_OscConfig+0x4ec>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d028      	beq.n	800253c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d121      	bne.n	800253c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002502:	429a      	cmp	r2, r3
 8002504:	d11a      	bne.n	800253c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002506:	68fa      	ldr	r2, [r7, #12]
 8002508:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800250c:	4013      	ands	r3, r2
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002512:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002514:	4293      	cmp	r3, r2
 8002516:	d111      	bne.n	800253c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002522:	085b      	lsrs	r3, r3, #1
 8002524:	3b01      	subs	r3, #1
 8002526:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002528:	429a      	cmp	r2, r3
 800252a:	d107      	bne.n	800253c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002536:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002538:	429a      	cmp	r2, r3
 800253a:	d001      	beq.n	8002540 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e000      	b.n	8002542 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3718      	adds	r7, #24
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	40023800 	.word	0x40023800

08002550 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d101      	bne.n	8002564 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e0cc      	b.n	80026fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002564:	4b68      	ldr	r3, [pc, #416]	; (8002708 <HAL_RCC_ClockConfig+0x1b8>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0307 	and.w	r3, r3, #7
 800256c:	683a      	ldr	r2, [r7, #0]
 800256e:	429a      	cmp	r2, r3
 8002570:	d90c      	bls.n	800258c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002572:	4b65      	ldr	r3, [pc, #404]	; (8002708 <HAL_RCC_ClockConfig+0x1b8>)
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	b2d2      	uxtb	r2, r2
 8002578:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800257a:	4b63      	ldr	r3, [pc, #396]	; (8002708 <HAL_RCC_ClockConfig+0x1b8>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0307 	and.w	r3, r3, #7
 8002582:	683a      	ldr	r2, [r7, #0]
 8002584:	429a      	cmp	r2, r3
 8002586:	d001      	beq.n	800258c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e0b8      	b.n	80026fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0302 	and.w	r3, r3, #2
 8002594:	2b00      	cmp	r3, #0
 8002596:	d020      	beq.n	80025da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0304 	and.w	r3, r3, #4
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d005      	beq.n	80025b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025a4:	4b59      	ldr	r3, [pc, #356]	; (800270c <HAL_RCC_ClockConfig+0x1bc>)
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	4a58      	ldr	r2, [pc, #352]	; (800270c <HAL_RCC_ClockConfig+0x1bc>)
 80025aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80025ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0308 	and.w	r3, r3, #8
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d005      	beq.n	80025c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025bc:	4b53      	ldr	r3, [pc, #332]	; (800270c <HAL_RCC_ClockConfig+0x1bc>)
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	4a52      	ldr	r2, [pc, #328]	; (800270c <HAL_RCC_ClockConfig+0x1bc>)
 80025c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80025c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025c8:	4b50      	ldr	r3, [pc, #320]	; (800270c <HAL_RCC_ClockConfig+0x1bc>)
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	494d      	ldr	r1, [pc, #308]	; (800270c <HAL_RCC_ClockConfig+0x1bc>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d044      	beq.n	8002670 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d107      	bne.n	80025fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ee:	4b47      	ldr	r3, [pc, #284]	; (800270c <HAL_RCC_ClockConfig+0x1bc>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d119      	bne.n	800262e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e07f      	b.n	80026fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	2b02      	cmp	r3, #2
 8002604:	d003      	beq.n	800260e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800260a:	2b03      	cmp	r3, #3
 800260c:	d107      	bne.n	800261e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800260e:	4b3f      	ldr	r3, [pc, #252]	; (800270c <HAL_RCC_ClockConfig+0x1bc>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d109      	bne.n	800262e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e06f      	b.n	80026fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800261e:	4b3b      	ldr	r3, [pc, #236]	; (800270c <HAL_RCC_ClockConfig+0x1bc>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	2b00      	cmp	r3, #0
 8002628:	d101      	bne.n	800262e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e067      	b.n	80026fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800262e:	4b37      	ldr	r3, [pc, #220]	; (800270c <HAL_RCC_ClockConfig+0x1bc>)
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f023 0203 	bic.w	r2, r3, #3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	4934      	ldr	r1, [pc, #208]	; (800270c <HAL_RCC_ClockConfig+0x1bc>)
 800263c:	4313      	orrs	r3, r2
 800263e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002640:	f7ff fa5a 	bl	8001af8 <HAL_GetTick>
 8002644:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002646:	e00a      	b.n	800265e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002648:	f7ff fa56 	bl	8001af8 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	f241 3288 	movw	r2, #5000	; 0x1388
 8002656:	4293      	cmp	r3, r2
 8002658:	d901      	bls.n	800265e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e04f      	b.n	80026fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800265e:	4b2b      	ldr	r3, [pc, #172]	; (800270c <HAL_RCC_ClockConfig+0x1bc>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f003 020c 	and.w	r2, r3, #12
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	429a      	cmp	r2, r3
 800266e:	d1eb      	bne.n	8002648 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002670:	4b25      	ldr	r3, [pc, #148]	; (8002708 <HAL_RCC_ClockConfig+0x1b8>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0307 	and.w	r3, r3, #7
 8002678:	683a      	ldr	r2, [r7, #0]
 800267a:	429a      	cmp	r2, r3
 800267c:	d20c      	bcs.n	8002698 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800267e:	4b22      	ldr	r3, [pc, #136]	; (8002708 <HAL_RCC_ClockConfig+0x1b8>)
 8002680:	683a      	ldr	r2, [r7, #0]
 8002682:	b2d2      	uxtb	r2, r2
 8002684:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002686:	4b20      	ldr	r3, [pc, #128]	; (8002708 <HAL_RCC_ClockConfig+0x1b8>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0307 	and.w	r3, r3, #7
 800268e:	683a      	ldr	r2, [r7, #0]
 8002690:	429a      	cmp	r2, r3
 8002692:	d001      	beq.n	8002698 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e032      	b.n	80026fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0304 	and.w	r3, r3, #4
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d008      	beq.n	80026b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026a4:	4b19      	ldr	r3, [pc, #100]	; (800270c <HAL_RCC_ClockConfig+0x1bc>)
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	4916      	ldr	r1, [pc, #88]	; (800270c <HAL_RCC_ClockConfig+0x1bc>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0308 	and.w	r3, r3, #8
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d009      	beq.n	80026d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026c2:	4b12      	ldr	r3, [pc, #72]	; (800270c <HAL_RCC_ClockConfig+0x1bc>)
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	00db      	lsls	r3, r3, #3
 80026d0:	490e      	ldr	r1, [pc, #56]	; (800270c <HAL_RCC_ClockConfig+0x1bc>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026d6:	f000 f821 	bl	800271c <HAL_RCC_GetSysClockFreq>
 80026da:	4602      	mov	r2, r0
 80026dc:	4b0b      	ldr	r3, [pc, #44]	; (800270c <HAL_RCC_ClockConfig+0x1bc>)
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	091b      	lsrs	r3, r3, #4
 80026e2:	f003 030f 	and.w	r3, r3, #15
 80026e6:	490a      	ldr	r1, [pc, #40]	; (8002710 <HAL_RCC_ClockConfig+0x1c0>)
 80026e8:	5ccb      	ldrb	r3, [r1, r3]
 80026ea:	fa22 f303 	lsr.w	r3, r2, r3
 80026ee:	4a09      	ldr	r2, [pc, #36]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 80026f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80026f2:	4b09      	ldr	r3, [pc, #36]	; (8002718 <HAL_RCC_ClockConfig+0x1c8>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7ff f9ba 	bl	8001a70 <HAL_InitTick>

  return HAL_OK;
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3710      	adds	r7, #16
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	40023c00 	.word	0x40023c00
 800270c:	40023800 	.word	0x40023800
 8002710:	08008c9c 	.word	0x08008c9c
 8002714:	20000008 	.word	0x20000008
 8002718:	2000000c 	.word	0x2000000c

0800271c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800271c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002720:	b094      	sub	sp, #80	; 0x50
 8002722:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002724:	2300      	movs	r3, #0
 8002726:	647b      	str	r3, [r7, #68]	; 0x44
 8002728:	2300      	movs	r3, #0
 800272a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800272c:	2300      	movs	r3, #0
 800272e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002730:	2300      	movs	r3, #0
 8002732:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002734:	4b79      	ldr	r3, [pc, #484]	; (800291c <HAL_RCC_GetSysClockFreq+0x200>)
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f003 030c 	and.w	r3, r3, #12
 800273c:	2b08      	cmp	r3, #8
 800273e:	d00d      	beq.n	800275c <HAL_RCC_GetSysClockFreq+0x40>
 8002740:	2b08      	cmp	r3, #8
 8002742:	f200 80e1 	bhi.w	8002908 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002746:	2b00      	cmp	r3, #0
 8002748:	d002      	beq.n	8002750 <HAL_RCC_GetSysClockFreq+0x34>
 800274a:	2b04      	cmp	r3, #4
 800274c:	d003      	beq.n	8002756 <HAL_RCC_GetSysClockFreq+0x3a>
 800274e:	e0db      	b.n	8002908 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002750:	4b73      	ldr	r3, [pc, #460]	; (8002920 <HAL_RCC_GetSysClockFreq+0x204>)
 8002752:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002754:	e0db      	b.n	800290e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002756:	4b73      	ldr	r3, [pc, #460]	; (8002924 <HAL_RCC_GetSysClockFreq+0x208>)
 8002758:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800275a:	e0d8      	b.n	800290e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800275c:	4b6f      	ldr	r3, [pc, #444]	; (800291c <HAL_RCC_GetSysClockFreq+0x200>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002764:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002766:	4b6d      	ldr	r3, [pc, #436]	; (800291c <HAL_RCC_GetSysClockFreq+0x200>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d063      	beq.n	800283a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002772:	4b6a      	ldr	r3, [pc, #424]	; (800291c <HAL_RCC_GetSysClockFreq+0x200>)
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	099b      	lsrs	r3, r3, #6
 8002778:	2200      	movs	r2, #0
 800277a:	63bb      	str	r3, [r7, #56]	; 0x38
 800277c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800277e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002780:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002784:	633b      	str	r3, [r7, #48]	; 0x30
 8002786:	2300      	movs	r3, #0
 8002788:	637b      	str	r3, [r7, #52]	; 0x34
 800278a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800278e:	4622      	mov	r2, r4
 8002790:	462b      	mov	r3, r5
 8002792:	f04f 0000 	mov.w	r0, #0
 8002796:	f04f 0100 	mov.w	r1, #0
 800279a:	0159      	lsls	r1, r3, #5
 800279c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027a0:	0150      	lsls	r0, r2, #5
 80027a2:	4602      	mov	r2, r0
 80027a4:	460b      	mov	r3, r1
 80027a6:	4621      	mov	r1, r4
 80027a8:	1a51      	subs	r1, r2, r1
 80027aa:	6139      	str	r1, [r7, #16]
 80027ac:	4629      	mov	r1, r5
 80027ae:	eb63 0301 	sbc.w	r3, r3, r1
 80027b2:	617b      	str	r3, [r7, #20]
 80027b4:	f04f 0200 	mov.w	r2, #0
 80027b8:	f04f 0300 	mov.w	r3, #0
 80027bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80027c0:	4659      	mov	r1, fp
 80027c2:	018b      	lsls	r3, r1, #6
 80027c4:	4651      	mov	r1, sl
 80027c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027ca:	4651      	mov	r1, sl
 80027cc:	018a      	lsls	r2, r1, #6
 80027ce:	4651      	mov	r1, sl
 80027d0:	ebb2 0801 	subs.w	r8, r2, r1
 80027d4:	4659      	mov	r1, fp
 80027d6:	eb63 0901 	sbc.w	r9, r3, r1
 80027da:	f04f 0200 	mov.w	r2, #0
 80027de:	f04f 0300 	mov.w	r3, #0
 80027e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027ee:	4690      	mov	r8, r2
 80027f0:	4699      	mov	r9, r3
 80027f2:	4623      	mov	r3, r4
 80027f4:	eb18 0303 	adds.w	r3, r8, r3
 80027f8:	60bb      	str	r3, [r7, #8]
 80027fa:	462b      	mov	r3, r5
 80027fc:	eb49 0303 	adc.w	r3, r9, r3
 8002800:	60fb      	str	r3, [r7, #12]
 8002802:	f04f 0200 	mov.w	r2, #0
 8002806:	f04f 0300 	mov.w	r3, #0
 800280a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800280e:	4629      	mov	r1, r5
 8002810:	024b      	lsls	r3, r1, #9
 8002812:	4621      	mov	r1, r4
 8002814:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002818:	4621      	mov	r1, r4
 800281a:	024a      	lsls	r2, r1, #9
 800281c:	4610      	mov	r0, r2
 800281e:	4619      	mov	r1, r3
 8002820:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002822:	2200      	movs	r2, #0
 8002824:	62bb      	str	r3, [r7, #40]	; 0x28
 8002826:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002828:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800282c:	f7fd fd28 	bl	8000280 <__aeabi_uldivmod>
 8002830:	4602      	mov	r2, r0
 8002832:	460b      	mov	r3, r1
 8002834:	4613      	mov	r3, r2
 8002836:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002838:	e058      	b.n	80028ec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800283a:	4b38      	ldr	r3, [pc, #224]	; (800291c <HAL_RCC_GetSysClockFreq+0x200>)
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	099b      	lsrs	r3, r3, #6
 8002840:	2200      	movs	r2, #0
 8002842:	4618      	mov	r0, r3
 8002844:	4611      	mov	r1, r2
 8002846:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800284a:	623b      	str	r3, [r7, #32]
 800284c:	2300      	movs	r3, #0
 800284e:	627b      	str	r3, [r7, #36]	; 0x24
 8002850:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002854:	4642      	mov	r2, r8
 8002856:	464b      	mov	r3, r9
 8002858:	f04f 0000 	mov.w	r0, #0
 800285c:	f04f 0100 	mov.w	r1, #0
 8002860:	0159      	lsls	r1, r3, #5
 8002862:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002866:	0150      	lsls	r0, r2, #5
 8002868:	4602      	mov	r2, r0
 800286a:	460b      	mov	r3, r1
 800286c:	4641      	mov	r1, r8
 800286e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002872:	4649      	mov	r1, r9
 8002874:	eb63 0b01 	sbc.w	fp, r3, r1
 8002878:	f04f 0200 	mov.w	r2, #0
 800287c:	f04f 0300 	mov.w	r3, #0
 8002880:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002884:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002888:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800288c:	ebb2 040a 	subs.w	r4, r2, sl
 8002890:	eb63 050b 	sbc.w	r5, r3, fp
 8002894:	f04f 0200 	mov.w	r2, #0
 8002898:	f04f 0300 	mov.w	r3, #0
 800289c:	00eb      	lsls	r3, r5, #3
 800289e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028a2:	00e2      	lsls	r2, r4, #3
 80028a4:	4614      	mov	r4, r2
 80028a6:	461d      	mov	r5, r3
 80028a8:	4643      	mov	r3, r8
 80028aa:	18e3      	adds	r3, r4, r3
 80028ac:	603b      	str	r3, [r7, #0]
 80028ae:	464b      	mov	r3, r9
 80028b0:	eb45 0303 	adc.w	r3, r5, r3
 80028b4:	607b      	str	r3, [r7, #4]
 80028b6:	f04f 0200 	mov.w	r2, #0
 80028ba:	f04f 0300 	mov.w	r3, #0
 80028be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028c2:	4629      	mov	r1, r5
 80028c4:	028b      	lsls	r3, r1, #10
 80028c6:	4621      	mov	r1, r4
 80028c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028cc:	4621      	mov	r1, r4
 80028ce:	028a      	lsls	r2, r1, #10
 80028d0:	4610      	mov	r0, r2
 80028d2:	4619      	mov	r1, r3
 80028d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028d6:	2200      	movs	r2, #0
 80028d8:	61bb      	str	r3, [r7, #24]
 80028da:	61fa      	str	r2, [r7, #28]
 80028dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028e0:	f7fd fcce 	bl	8000280 <__aeabi_uldivmod>
 80028e4:	4602      	mov	r2, r0
 80028e6:	460b      	mov	r3, r1
 80028e8:	4613      	mov	r3, r2
 80028ea:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80028ec:	4b0b      	ldr	r3, [pc, #44]	; (800291c <HAL_RCC_GetSysClockFreq+0x200>)
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	0c1b      	lsrs	r3, r3, #16
 80028f2:	f003 0303 	and.w	r3, r3, #3
 80028f6:	3301      	adds	r3, #1
 80028f8:	005b      	lsls	r3, r3, #1
 80028fa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80028fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80028fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002900:	fbb2 f3f3 	udiv	r3, r2, r3
 8002904:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002906:	e002      	b.n	800290e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002908:	4b05      	ldr	r3, [pc, #20]	; (8002920 <HAL_RCC_GetSysClockFreq+0x204>)
 800290a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800290c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800290e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002910:	4618      	mov	r0, r3
 8002912:	3750      	adds	r7, #80	; 0x50
 8002914:	46bd      	mov	sp, r7
 8002916:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800291a:	bf00      	nop
 800291c:	40023800 	.word	0x40023800
 8002920:	00f42400 	.word	0x00f42400
 8002924:	007a1200 	.word	0x007a1200

08002928 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800292c:	4b03      	ldr	r3, [pc, #12]	; (800293c <HAL_RCC_GetHCLKFreq+0x14>)
 800292e:	681b      	ldr	r3, [r3, #0]
}
 8002930:	4618      	mov	r0, r3
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	20000008 	.word	0x20000008

08002940 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002944:	f7ff fff0 	bl	8002928 <HAL_RCC_GetHCLKFreq>
 8002948:	4602      	mov	r2, r0
 800294a:	4b05      	ldr	r3, [pc, #20]	; (8002960 <HAL_RCC_GetPCLK1Freq+0x20>)
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	0a9b      	lsrs	r3, r3, #10
 8002950:	f003 0307 	and.w	r3, r3, #7
 8002954:	4903      	ldr	r1, [pc, #12]	; (8002964 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002956:	5ccb      	ldrb	r3, [r1, r3]
 8002958:	fa22 f303 	lsr.w	r3, r2, r3
}
 800295c:	4618      	mov	r0, r3
 800295e:	bd80      	pop	{r7, pc}
 8002960:	40023800 	.word	0x40023800
 8002964:	08008cac 	.word	0x08008cac

08002968 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800296c:	f7ff ffdc 	bl	8002928 <HAL_RCC_GetHCLKFreq>
 8002970:	4602      	mov	r2, r0
 8002972:	4b05      	ldr	r3, [pc, #20]	; (8002988 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	0b5b      	lsrs	r3, r3, #13
 8002978:	f003 0307 	and.w	r3, r3, #7
 800297c:	4903      	ldr	r1, [pc, #12]	; (800298c <HAL_RCC_GetPCLK2Freq+0x24>)
 800297e:	5ccb      	ldrb	r3, [r1, r3]
 8002980:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002984:	4618      	mov	r0, r3
 8002986:	bd80      	pop	{r7, pc}
 8002988:	40023800 	.word	0x40023800
 800298c:	08008cac 	.word	0x08008cac

08002990 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e07b      	b.n	8002a9a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d108      	bne.n	80029bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029b2:	d009      	beq.n	80029c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	61da      	str	r2, [r3, #28]
 80029ba:	e005      	b.n	80029c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d106      	bne.n	80029e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f7fe fe40 	bl	8001668 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2202      	movs	r2, #2
 80029ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029fe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002a10:	431a      	orrs	r2, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	691b      	ldr	r3, [r3, #16]
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	431a      	orrs	r2, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	695b      	ldr	r3, [r3, #20]
 8002a2a:	f003 0301 	and.w	r3, r3, #1
 8002a2e:	431a      	orrs	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	699b      	ldr	r3, [r3, #24]
 8002a34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a38:	431a      	orrs	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	69db      	ldr	r3, [r3, #28]
 8002a3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a42:	431a      	orrs	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6a1b      	ldr	r3, [r3, #32]
 8002a48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a4c:	ea42 0103 	orr.w	r1, r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a54:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	699b      	ldr	r3, [r3, #24]
 8002a64:	0c1b      	lsrs	r3, r3, #16
 8002a66:	f003 0104 	and.w	r1, r3, #4
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6e:	f003 0210 	and.w	r2, r3, #16
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	430a      	orrs	r2, r1
 8002a78:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	69da      	ldr	r2, [r3, #28]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a88:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3708      	adds	r7, #8
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b088      	sub	sp, #32
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	60f8      	str	r0, [r7, #12]
 8002aaa:	60b9      	str	r1, [r7, #8]
 8002aac:	603b      	str	r3, [r7, #0]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d101      	bne.n	8002ac4 <HAL_SPI_Transmit+0x22>
 8002ac0:	2302      	movs	r3, #2
 8002ac2:	e126      	b.n	8002d12 <HAL_SPI_Transmit+0x270>
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002acc:	f7ff f814 	bl	8001af8 <HAL_GetTick>
 8002ad0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002ad2:	88fb      	ldrh	r3, [r7, #6]
 8002ad4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d002      	beq.n	8002ae8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ae6:	e10b      	b.n	8002d00 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d002      	beq.n	8002af4 <HAL_SPI_Transmit+0x52>
 8002aee:	88fb      	ldrh	r3, [r7, #6]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d102      	bne.n	8002afa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002af8:	e102      	b.n	8002d00 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2203      	movs	r2, #3
 8002afe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2200      	movs	r2, #0
 8002b06:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	68ba      	ldr	r2, [r7, #8]
 8002b0c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	88fa      	ldrh	r2, [r7, #6]
 8002b12:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	88fa      	ldrh	r2, [r7, #6]
 8002b18:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2200      	movs	r2, #0
 8002b24:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2200      	movs	r2, #0
 8002b36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b40:	d10f      	bne.n	8002b62 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b50:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b60:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b6c:	2b40      	cmp	r3, #64	; 0x40
 8002b6e:	d007      	beq.n	8002b80 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b7e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b88:	d14b      	bne.n	8002c22 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d002      	beq.n	8002b98 <HAL_SPI_Transmit+0xf6>
 8002b92:	8afb      	ldrh	r3, [r7, #22]
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d13e      	bne.n	8002c16 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9c:	881a      	ldrh	r2, [r3, #0]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba8:	1c9a      	adds	r2, r3, #2
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	b29a      	uxth	r2, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002bbc:	e02b      	b.n	8002c16 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f003 0302 	and.w	r3, r3, #2
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d112      	bne.n	8002bf2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd0:	881a      	ldrh	r2, [r3, #0]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bdc:	1c9a      	adds	r2, r3, #2
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	3b01      	subs	r3, #1
 8002bea:	b29a      	uxth	r2, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	86da      	strh	r2, [r3, #54]	; 0x36
 8002bf0:	e011      	b.n	8002c16 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002bf2:	f7fe ff81 	bl	8001af8 <HAL_GetTick>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	683a      	ldr	r2, [r7, #0]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d803      	bhi.n	8002c0a <HAL_SPI_Transmit+0x168>
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c08:	d102      	bne.n	8002c10 <HAL_SPI_Transmit+0x16e>
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d102      	bne.n	8002c16 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002c14:	e074      	b.n	8002d00 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d1ce      	bne.n	8002bbe <HAL_SPI_Transmit+0x11c>
 8002c20:	e04c      	b.n	8002cbc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d002      	beq.n	8002c30 <HAL_SPI_Transmit+0x18e>
 8002c2a:	8afb      	ldrh	r3, [r7, #22]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d140      	bne.n	8002cb2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	330c      	adds	r3, #12
 8002c3a:	7812      	ldrb	r2, [r2, #0]
 8002c3c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c42:	1c5a      	adds	r2, r3, #1
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	b29a      	uxth	r2, r3
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002c56:	e02c      	b.n	8002cb2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d113      	bne.n	8002c8e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	330c      	adds	r3, #12
 8002c70:	7812      	ldrb	r2, [r2, #0]
 8002c72:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c78:	1c5a      	adds	r2, r3, #1
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	3b01      	subs	r3, #1
 8002c86:	b29a      	uxth	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	86da      	strh	r2, [r3, #54]	; 0x36
 8002c8c:	e011      	b.n	8002cb2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c8e:	f7fe ff33 	bl	8001af8 <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	683a      	ldr	r2, [r7, #0]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d803      	bhi.n	8002ca6 <HAL_SPI_Transmit+0x204>
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ca4:	d102      	bne.n	8002cac <HAL_SPI_Transmit+0x20a>
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d102      	bne.n	8002cb2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002cb0:	e026      	b.n	8002d00 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d1cd      	bne.n	8002c58 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	6839      	ldr	r1, [r7, #0]
 8002cc0:	68f8      	ldr	r0, [r7, #12]
 8002cc2:	f000 fa55 	bl	8003170 <SPI_EndRxTxTransaction>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d002      	beq.n	8002cd2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2220      	movs	r2, #32
 8002cd0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d10a      	bne.n	8002cf0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002cda:	2300      	movs	r3, #0
 8002cdc:	613b      	str	r3, [r7, #16]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	613b      	str	r3, [r7, #16]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	613b      	str	r3, [r7, #16]
 8002cee:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d002      	beq.n	8002cfe <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	77fb      	strb	r3, [r7, #31]
 8002cfc:	e000      	b.n	8002d00 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002cfe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002d10:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3720      	adds	r7, #32
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b08c      	sub	sp, #48	; 0x30
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	60f8      	str	r0, [r7, #12]
 8002d22:	60b9      	str	r1, [r7, #8]
 8002d24:	607a      	str	r2, [r7, #4]
 8002d26:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d101      	bne.n	8002d40 <HAL_SPI_TransmitReceive+0x26>
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	e18a      	b.n	8003056 <HAL_SPI_TransmitReceive+0x33c>
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d48:	f7fe fed6 	bl	8001af8 <HAL_GetTick>
 8002d4c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002d5e:	887b      	ldrh	r3, [r7, #2]
 8002d60:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002d62:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d00f      	beq.n	8002d8a <HAL_SPI_TransmitReceive+0x70>
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d70:	d107      	bne.n	8002d82 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d103      	bne.n	8002d82 <HAL_SPI_TransmitReceive+0x68>
 8002d7a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002d7e:	2b04      	cmp	r3, #4
 8002d80:	d003      	beq.n	8002d8a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002d82:	2302      	movs	r3, #2
 8002d84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002d88:	e15b      	b.n	8003042 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d005      	beq.n	8002d9c <HAL_SPI_TransmitReceive+0x82>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d002      	beq.n	8002d9c <HAL_SPI_TransmitReceive+0x82>
 8002d96:	887b      	ldrh	r3, [r7, #2]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d103      	bne.n	8002da4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002da2:	e14e      	b.n	8003042 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	2b04      	cmp	r3, #4
 8002dae:	d003      	beq.n	8002db8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2205      	movs	r2, #5
 8002db4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	887a      	ldrh	r2, [r7, #2]
 8002dc8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	887a      	ldrh	r2, [r7, #2]
 8002dce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	68ba      	ldr	r2, [r7, #8]
 8002dd4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	887a      	ldrh	r2, [r7, #2]
 8002dda:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	887a      	ldrh	r2, [r7, #2]
 8002de0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2200      	movs	r2, #0
 8002de6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2200      	movs	r2, #0
 8002dec:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002df8:	2b40      	cmp	r3, #64	; 0x40
 8002dfa:	d007      	beq.n	8002e0c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e0a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e14:	d178      	bne.n	8002f08 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d002      	beq.n	8002e24 <HAL_SPI_TransmitReceive+0x10a>
 8002e1e:	8b7b      	ldrh	r3, [r7, #26]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d166      	bne.n	8002ef2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e28:	881a      	ldrh	r2, [r3, #0]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e34:	1c9a      	adds	r2, r3, #2
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	3b01      	subs	r3, #1
 8002e42:	b29a      	uxth	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e48:	e053      	b.n	8002ef2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f003 0302 	and.w	r3, r3, #2
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d11b      	bne.n	8002e90 <HAL_SPI_TransmitReceive+0x176>
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d016      	beq.n	8002e90 <HAL_SPI_TransmitReceive+0x176>
 8002e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d113      	bne.n	8002e90 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6c:	881a      	ldrh	r2, [r3, #0]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e78:	1c9a      	adds	r2, r3, #2
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	3b01      	subs	r3, #1
 8002e86:	b29a      	uxth	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f003 0301 	and.w	r3, r3, #1
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d119      	bne.n	8002ed2 <HAL_SPI_TransmitReceive+0x1b8>
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d014      	beq.n	8002ed2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68da      	ldr	r2, [r3, #12]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb2:	b292      	uxth	r2, r2
 8002eb4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eba:	1c9a      	adds	r2, r3, #2
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	b29a      	uxth	r2, r3
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002ed2:	f7fe fe11 	bl	8001af8 <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d807      	bhi.n	8002ef2 <HAL_SPI_TransmitReceive+0x1d8>
 8002ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee8:	d003      	beq.n	8002ef2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002ef0:	e0a7      	b.n	8003042 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d1a6      	bne.n	8002e4a <HAL_SPI_TransmitReceive+0x130>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d1a1      	bne.n	8002e4a <HAL_SPI_TransmitReceive+0x130>
 8002f06:	e07c      	b.n	8003002 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d002      	beq.n	8002f16 <HAL_SPI_TransmitReceive+0x1fc>
 8002f10:	8b7b      	ldrh	r3, [r7, #26]
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d16b      	bne.n	8002fee <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	330c      	adds	r3, #12
 8002f20:	7812      	ldrb	r2, [r2, #0]
 8002f22:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f28:	1c5a      	adds	r2, r3, #1
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	3b01      	subs	r3, #1
 8002f36:	b29a      	uxth	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f3c:	e057      	b.n	8002fee <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	f003 0302 	and.w	r3, r3, #2
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d11c      	bne.n	8002f86 <HAL_SPI_TransmitReceive+0x26c>
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d017      	beq.n	8002f86 <HAL_SPI_TransmitReceive+0x26c>
 8002f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d114      	bne.n	8002f86 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	330c      	adds	r3, #12
 8002f66:	7812      	ldrb	r2, [r2, #0]
 8002f68:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6e:	1c5a      	adds	r2, r3, #1
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	b29a      	uxth	r2, r3
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f82:	2300      	movs	r3, #0
 8002f84:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f003 0301 	and.w	r3, r3, #1
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d119      	bne.n	8002fc8 <HAL_SPI_TransmitReceive+0x2ae>
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d014      	beq.n	8002fc8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68da      	ldr	r2, [r3, #12]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa8:	b2d2      	uxtb	r2, r2
 8002faa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb0:	1c5a      	adds	r2, r3, #1
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	b29a      	uxth	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002fc8:	f7fe fd96 	bl	8001af8 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d803      	bhi.n	8002fe0 <HAL_SPI_TransmitReceive+0x2c6>
 8002fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fde:	d102      	bne.n	8002fe6 <HAL_SPI_TransmitReceive+0x2cc>
 8002fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d103      	bne.n	8002fee <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002fec:	e029      	b.n	8003042 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d1a2      	bne.n	8002f3e <HAL_SPI_TransmitReceive+0x224>
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d19d      	bne.n	8002f3e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003002:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003004:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003006:	68f8      	ldr	r0, [r7, #12]
 8003008:	f000 f8b2 	bl	8003170 <SPI_EndRxTxTransaction>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d006      	beq.n	8003020 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2220      	movs	r2, #32
 800301c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800301e:	e010      	b.n	8003042 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d10b      	bne.n	8003040 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003028:	2300      	movs	r3, #0
 800302a:	617b      	str	r3, [r7, #20]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	617b      	str	r3, [r7, #20]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	617b      	str	r3, [r7, #20]
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	e000      	b.n	8003042 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003040:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2201      	movs	r2, #1
 8003046:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003052:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003056:	4618      	mov	r0, r3
 8003058:	3730      	adds	r7, #48	; 0x30
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
	...

08003060 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b088      	sub	sp, #32
 8003064:	af00      	add	r7, sp, #0
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	603b      	str	r3, [r7, #0]
 800306c:	4613      	mov	r3, r2
 800306e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003070:	f7fe fd42 	bl	8001af8 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003078:	1a9b      	subs	r3, r3, r2
 800307a:	683a      	ldr	r2, [r7, #0]
 800307c:	4413      	add	r3, r2
 800307e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003080:	f7fe fd3a 	bl	8001af8 <HAL_GetTick>
 8003084:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003086:	4b39      	ldr	r3, [pc, #228]	; (800316c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	015b      	lsls	r3, r3, #5
 800308c:	0d1b      	lsrs	r3, r3, #20
 800308e:	69fa      	ldr	r2, [r7, #28]
 8003090:	fb02 f303 	mul.w	r3, r2, r3
 8003094:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003096:	e054      	b.n	8003142 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800309e:	d050      	beq.n	8003142 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80030a0:	f7fe fd2a 	bl	8001af8 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	69fa      	ldr	r2, [r7, #28]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d902      	bls.n	80030b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d13d      	bne.n	8003132 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	685a      	ldr	r2, [r3, #4]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80030c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030ce:	d111      	bne.n	80030f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030d8:	d004      	beq.n	80030e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030e2:	d107      	bne.n	80030f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030fc:	d10f      	bne.n	800311e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800310c:	601a      	str	r2, [r3, #0]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800311c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2201      	movs	r2, #1
 8003122:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e017      	b.n	8003162 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d101      	bne.n	800313c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003138:	2300      	movs	r3, #0
 800313a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	3b01      	subs	r3, #1
 8003140:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	689a      	ldr	r2, [r3, #8]
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	4013      	ands	r3, r2
 800314c:	68ba      	ldr	r2, [r7, #8]
 800314e:	429a      	cmp	r2, r3
 8003150:	bf0c      	ite	eq
 8003152:	2301      	moveq	r3, #1
 8003154:	2300      	movne	r3, #0
 8003156:	b2db      	uxtb	r3, r3
 8003158:	461a      	mov	r2, r3
 800315a:	79fb      	ldrb	r3, [r7, #7]
 800315c:	429a      	cmp	r2, r3
 800315e:	d19b      	bne.n	8003098 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3720      	adds	r7, #32
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	20000008 	.word	0x20000008

08003170 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b088      	sub	sp, #32
 8003174:	af02      	add	r7, sp, #8
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	60b9      	str	r1, [r7, #8]
 800317a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800317c:	4b1b      	ldr	r3, [pc, #108]	; (80031ec <SPI_EndRxTxTransaction+0x7c>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a1b      	ldr	r2, [pc, #108]	; (80031f0 <SPI_EndRxTxTransaction+0x80>)
 8003182:	fba2 2303 	umull	r2, r3, r2, r3
 8003186:	0d5b      	lsrs	r3, r3, #21
 8003188:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800318c:	fb02 f303 	mul.w	r3, r2, r3
 8003190:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800319a:	d112      	bne.n	80031c2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	9300      	str	r3, [sp, #0]
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	2200      	movs	r2, #0
 80031a4:	2180      	movs	r1, #128	; 0x80
 80031a6:	68f8      	ldr	r0, [r7, #12]
 80031a8:	f7ff ff5a 	bl	8003060 <SPI_WaitFlagStateUntilTimeout>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d016      	beq.n	80031e0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031b6:	f043 0220 	orr.w	r2, r3, #32
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e00f      	b.n	80031e2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d00a      	beq.n	80031de <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	3b01      	subs	r3, #1
 80031cc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031d8:	2b80      	cmp	r3, #128	; 0x80
 80031da:	d0f2      	beq.n	80031c2 <SPI_EndRxTxTransaction+0x52>
 80031dc:	e000      	b.n	80031e0 <SPI_EndRxTxTransaction+0x70>
        break;
 80031de:	bf00      	nop
  }

  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3718      	adds	r7, #24
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	20000008 	.word	0x20000008
 80031f0:	165e9f81 	.word	0x165e9f81

080031f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d101      	bne.n	8003206 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e03f      	b.n	8003286 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800320c:	b2db      	uxtb	r3, r3
 800320e:	2b00      	cmp	r3, #0
 8003210:	d106      	bne.n	8003220 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f7fe fab4 	bl	8001788 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2224      	movs	r2, #36	; 0x24
 8003224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	68da      	ldr	r2, [r3, #12]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003236:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f000 f929 	bl	8003490 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	691a      	ldr	r2, [r3, #16]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800324c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	695a      	ldr	r2, [r3, #20]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800325c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	68da      	ldr	r2, [r3, #12]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800326c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2220      	movs	r2, #32
 8003278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2220      	movs	r2, #32
 8003280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3708      	adds	r7, #8
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800328e:	b580      	push	{r7, lr}
 8003290:	b08a      	sub	sp, #40	; 0x28
 8003292:	af02      	add	r7, sp, #8
 8003294:	60f8      	str	r0, [r7, #12]
 8003296:	60b9      	str	r1, [r7, #8]
 8003298:	603b      	str	r3, [r7, #0]
 800329a:	4613      	mov	r3, r2
 800329c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800329e:	2300      	movs	r3, #0
 80032a0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	2b20      	cmp	r3, #32
 80032ac:	d17c      	bne.n	80033a8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d002      	beq.n	80032ba <HAL_UART_Transmit+0x2c>
 80032b4:	88fb      	ldrh	r3, [r7, #6]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d101      	bne.n	80032be <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e075      	b.n	80033aa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d101      	bne.n	80032cc <HAL_UART_Transmit+0x3e>
 80032c8:	2302      	movs	r3, #2
 80032ca:	e06e      	b.n	80033aa <HAL_UART_Transmit+0x11c>
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2200      	movs	r2, #0
 80032d8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2221      	movs	r2, #33	; 0x21
 80032de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80032e2:	f7fe fc09 	bl	8001af8 <HAL_GetTick>
 80032e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	88fa      	ldrh	r2, [r7, #6]
 80032ec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	88fa      	ldrh	r2, [r7, #6]
 80032f2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032fc:	d108      	bne.n	8003310 <HAL_UART_Transmit+0x82>
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d104      	bne.n	8003310 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003306:	2300      	movs	r3, #0
 8003308:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	61bb      	str	r3, [r7, #24]
 800330e:	e003      	b.n	8003318 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003314:	2300      	movs	r3, #0
 8003316:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003320:	e02a      	b.n	8003378 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	9300      	str	r3, [sp, #0]
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	2200      	movs	r2, #0
 800332a:	2180      	movs	r1, #128	; 0x80
 800332c:	68f8      	ldr	r0, [r7, #12]
 800332e:	f000 f840 	bl	80033b2 <UART_WaitOnFlagUntilTimeout>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d001      	beq.n	800333c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003338:	2303      	movs	r3, #3
 800333a:	e036      	b.n	80033aa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d10b      	bne.n	800335a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	881b      	ldrh	r3, [r3, #0]
 8003346:	461a      	mov	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003350:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	3302      	adds	r3, #2
 8003356:	61bb      	str	r3, [r7, #24]
 8003358:	e007      	b.n	800336a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	781a      	ldrb	r2, [r3, #0]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	3301      	adds	r3, #1
 8003368:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800336e:	b29b      	uxth	r3, r3
 8003370:	3b01      	subs	r3, #1
 8003372:	b29a      	uxth	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800337c:	b29b      	uxth	r3, r3
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1cf      	bne.n	8003322 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	9300      	str	r3, [sp, #0]
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	2200      	movs	r2, #0
 800338a:	2140      	movs	r1, #64	; 0x40
 800338c:	68f8      	ldr	r0, [r7, #12]
 800338e:	f000 f810 	bl	80033b2 <UART_WaitOnFlagUntilTimeout>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d001      	beq.n	800339c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e006      	b.n	80033aa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2220      	movs	r2, #32
 80033a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80033a4:	2300      	movs	r3, #0
 80033a6:	e000      	b.n	80033aa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80033a8:	2302      	movs	r3, #2
  }
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3720      	adds	r7, #32
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80033b2:	b580      	push	{r7, lr}
 80033b4:	b090      	sub	sp, #64	; 0x40
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	60f8      	str	r0, [r7, #12]
 80033ba:	60b9      	str	r1, [r7, #8]
 80033bc:	603b      	str	r3, [r7, #0]
 80033be:	4613      	mov	r3, r2
 80033c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033c2:	e050      	b.n	8003466 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ca:	d04c      	beq.n	8003466 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80033cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d007      	beq.n	80033e2 <UART_WaitOnFlagUntilTimeout+0x30>
 80033d2:	f7fe fb91 	bl	8001af8 <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80033de:	429a      	cmp	r2, r3
 80033e0:	d241      	bcs.n	8003466 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	330c      	adds	r3, #12
 80033e8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ec:	e853 3f00 	ldrex	r3, [r3]
 80033f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80033f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80033f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	330c      	adds	r3, #12
 8003400:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003402:	637a      	str	r2, [r7, #52]	; 0x34
 8003404:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003406:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003408:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800340a:	e841 2300 	strex	r3, r2, [r1]
 800340e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003412:	2b00      	cmp	r3, #0
 8003414:	d1e5      	bne.n	80033e2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	3314      	adds	r3, #20
 800341c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	e853 3f00 	ldrex	r3, [r3]
 8003424:	613b      	str	r3, [r7, #16]
   return(result);
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	f023 0301 	bic.w	r3, r3, #1
 800342c:	63bb      	str	r3, [r7, #56]	; 0x38
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	3314      	adds	r3, #20
 8003434:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003436:	623a      	str	r2, [r7, #32]
 8003438:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800343a:	69f9      	ldr	r1, [r7, #28]
 800343c:	6a3a      	ldr	r2, [r7, #32]
 800343e:	e841 2300 	strex	r3, r2, [r1]
 8003442:	61bb      	str	r3, [r7, #24]
   return(result);
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d1e5      	bne.n	8003416 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2220      	movs	r2, #32
 800344e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2220      	movs	r2, #32
 8003456:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e00f      	b.n	8003486 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	4013      	ands	r3, r2
 8003470:	68ba      	ldr	r2, [r7, #8]
 8003472:	429a      	cmp	r2, r3
 8003474:	bf0c      	ite	eq
 8003476:	2301      	moveq	r3, #1
 8003478:	2300      	movne	r3, #0
 800347a:	b2db      	uxtb	r3, r3
 800347c:	461a      	mov	r2, r3
 800347e:	79fb      	ldrb	r3, [r7, #7]
 8003480:	429a      	cmp	r2, r3
 8003482:	d09f      	beq.n	80033c4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3740      	adds	r7, #64	; 0x40
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
	...

08003490 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003490:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003494:	b0c0      	sub	sp, #256	; 0x100
 8003496:	af00      	add	r7, sp, #0
 8003498:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800349c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	691b      	ldr	r3, [r3, #16]
 80034a4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80034a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ac:	68d9      	ldr	r1, [r3, #12]
 80034ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	ea40 0301 	orr.w	r3, r0, r1
 80034b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80034ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034be:	689a      	ldr	r2, [r3, #8]
 80034c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	431a      	orrs	r2, r3
 80034c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	431a      	orrs	r2, r3
 80034d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034d4:	69db      	ldr	r3, [r3, #28]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80034dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80034e8:	f021 010c 	bic.w	r1, r1, #12
 80034ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80034f6:	430b      	orrs	r3, r1
 80034f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	695b      	ldr	r3, [r3, #20]
 8003502:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800350a:	6999      	ldr	r1, [r3, #24]
 800350c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	ea40 0301 	orr.w	r3, r0, r1
 8003516:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	4b8f      	ldr	r3, [pc, #572]	; (800375c <UART_SetConfig+0x2cc>)
 8003520:	429a      	cmp	r2, r3
 8003522:	d005      	beq.n	8003530 <UART_SetConfig+0xa0>
 8003524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	4b8d      	ldr	r3, [pc, #564]	; (8003760 <UART_SetConfig+0x2d0>)
 800352c:	429a      	cmp	r2, r3
 800352e:	d104      	bne.n	800353a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003530:	f7ff fa1a 	bl	8002968 <HAL_RCC_GetPCLK2Freq>
 8003534:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003538:	e003      	b.n	8003542 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800353a:	f7ff fa01 	bl	8002940 <HAL_RCC_GetPCLK1Freq>
 800353e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003546:	69db      	ldr	r3, [r3, #28]
 8003548:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800354c:	f040 810c 	bne.w	8003768 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003550:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003554:	2200      	movs	r2, #0
 8003556:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800355a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800355e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003562:	4622      	mov	r2, r4
 8003564:	462b      	mov	r3, r5
 8003566:	1891      	adds	r1, r2, r2
 8003568:	65b9      	str	r1, [r7, #88]	; 0x58
 800356a:	415b      	adcs	r3, r3
 800356c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800356e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003572:	4621      	mov	r1, r4
 8003574:	eb12 0801 	adds.w	r8, r2, r1
 8003578:	4629      	mov	r1, r5
 800357a:	eb43 0901 	adc.w	r9, r3, r1
 800357e:	f04f 0200 	mov.w	r2, #0
 8003582:	f04f 0300 	mov.w	r3, #0
 8003586:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800358a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800358e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003592:	4690      	mov	r8, r2
 8003594:	4699      	mov	r9, r3
 8003596:	4623      	mov	r3, r4
 8003598:	eb18 0303 	adds.w	r3, r8, r3
 800359c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80035a0:	462b      	mov	r3, r5
 80035a2:	eb49 0303 	adc.w	r3, r9, r3
 80035a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80035aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80035b6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80035ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80035be:	460b      	mov	r3, r1
 80035c0:	18db      	adds	r3, r3, r3
 80035c2:	653b      	str	r3, [r7, #80]	; 0x50
 80035c4:	4613      	mov	r3, r2
 80035c6:	eb42 0303 	adc.w	r3, r2, r3
 80035ca:	657b      	str	r3, [r7, #84]	; 0x54
 80035cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80035d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80035d4:	f7fc fe54 	bl	8000280 <__aeabi_uldivmod>
 80035d8:	4602      	mov	r2, r0
 80035da:	460b      	mov	r3, r1
 80035dc:	4b61      	ldr	r3, [pc, #388]	; (8003764 <UART_SetConfig+0x2d4>)
 80035de:	fba3 2302 	umull	r2, r3, r3, r2
 80035e2:	095b      	lsrs	r3, r3, #5
 80035e4:	011c      	lsls	r4, r3, #4
 80035e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035ea:	2200      	movs	r2, #0
 80035ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80035f0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80035f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80035f8:	4642      	mov	r2, r8
 80035fa:	464b      	mov	r3, r9
 80035fc:	1891      	adds	r1, r2, r2
 80035fe:	64b9      	str	r1, [r7, #72]	; 0x48
 8003600:	415b      	adcs	r3, r3
 8003602:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003604:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003608:	4641      	mov	r1, r8
 800360a:	eb12 0a01 	adds.w	sl, r2, r1
 800360e:	4649      	mov	r1, r9
 8003610:	eb43 0b01 	adc.w	fp, r3, r1
 8003614:	f04f 0200 	mov.w	r2, #0
 8003618:	f04f 0300 	mov.w	r3, #0
 800361c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003620:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003624:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003628:	4692      	mov	sl, r2
 800362a:	469b      	mov	fp, r3
 800362c:	4643      	mov	r3, r8
 800362e:	eb1a 0303 	adds.w	r3, sl, r3
 8003632:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003636:	464b      	mov	r3, r9
 8003638:	eb4b 0303 	adc.w	r3, fp, r3
 800363c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800364c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003650:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003654:	460b      	mov	r3, r1
 8003656:	18db      	adds	r3, r3, r3
 8003658:	643b      	str	r3, [r7, #64]	; 0x40
 800365a:	4613      	mov	r3, r2
 800365c:	eb42 0303 	adc.w	r3, r2, r3
 8003660:	647b      	str	r3, [r7, #68]	; 0x44
 8003662:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003666:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800366a:	f7fc fe09 	bl	8000280 <__aeabi_uldivmod>
 800366e:	4602      	mov	r2, r0
 8003670:	460b      	mov	r3, r1
 8003672:	4611      	mov	r1, r2
 8003674:	4b3b      	ldr	r3, [pc, #236]	; (8003764 <UART_SetConfig+0x2d4>)
 8003676:	fba3 2301 	umull	r2, r3, r3, r1
 800367a:	095b      	lsrs	r3, r3, #5
 800367c:	2264      	movs	r2, #100	; 0x64
 800367e:	fb02 f303 	mul.w	r3, r2, r3
 8003682:	1acb      	subs	r3, r1, r3
 8003684:	00db      	lsls	r3, r3, #3
 8003686:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800368a:	4b36      	ldr	r3, [pc, #216]	; (8003764 <UART_SetConfig+0x2d4>)
 800368c:	fba3 2302 	umull	r2, r3, r3, r2
 8003690:	095b      	lsrs	r3, r3, #5
 8003692:	005b      	lsls	r3, r3, #1
 8003694:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003698:	441c      	add	r4, r3
 800369a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800369e:	2200      	movs	r2, #0
 80036a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80036a4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80036a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80036ac:	4642      	mov	r2, r8
 80036ae:	464b      	mov	r3, r9
 80036b0:	1891      	adds	r1, r2, r2
 80036b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80036b4:	415b      	adcs	r3, r3
 80036b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80036bc:	4641      	mov	r1, r8
 80036be:	1851      	adds	r1, r2, r1
 80036c0:	6339      	str	r1, [r7, #48]	; 0x30
 80036c2:	4649      	mov	r1, r9
 80036c4:	414b      	adcs	r3, r1
 80036c6:	637b      	str	r3, [r7, #52]	; 0x34
 80036c8:	f04f 0200 	mov.w	r2, #0
 80036cc:	f04f 0300 	mov.w	r3, #0
 80036d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80036d4:	4659      	mov	r1, fp
 80036d6:	00cb      	lsls	r3, r1, #3
 80036d8:	4651      	mov	r1, sl
 80036da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036de:	4651      	mov	r1, sl
 80036e0:	00ca      	lsls	r2, r1, #3
 80036e2:	4610      	mov	r0, r2
 80036e4:	4619      	mov	r1, r3
 80036e6:	4603      	mov	r3, r0
 80036e8:	4642      	mov	r2, r8
 80036ea:	189b      	adds	r3, r3, r2
 80036ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80036f0:	464b      	mov	r3, r9
 80036f2:	460a      	mov	r2, r1
 80036f4:	eb42 0303 	adc.w	r3, r2, r3
 80036f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80036fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003708:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800370c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003710:	460b      	mov	r3, r1
 8003712:	18db      	adds	r3, r3, r3
 8003714:	62bb      	str	r3, [r7, #40]	; 0x28
 8003716:	4613      	mov	r3, r2
 8003718:	eb42 0303 	adc.w	r3, r2, r3
 800371c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800371e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003722:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003726:	f7fc fdab 	bl	8000280 <__aeabi_uldivmod>
 800372a:	4602      	mov	r2, r0
 800372c:	460b      	mov	r3, r1
 800372e:	4b0d      	ldr	r3, [pc, #52]	; (8003764 <UART_SetConfig+0x2d4>)
 8003730:	fba3 1302 	umull	r1, r3, r3, r2
 8003734:	095b      	lsrs	r3, r3, #5
 8003736:	2164      	movs	r1, #100	; 0x64
 8003738:	fb01 f303 	mul.w	r3, r1, r3
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	00db      	lsls	r3, r3, #3
 8003740:	3332      	adds	r3, #50	; 0x32
 8003742:	4a08      	ldr	r2, [pc, #32]	; (8003764 <UART_SetConfig+0x2d4>)
 8003744:	fba2 2303 	umull	r2, r3, r2, r3
 8003748:	095b      	lsrs	r3, r3, #5
 800374a:	f003 0207 	and.w	r2, r3, #7
 800374e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4422      	add	r2, r4
 8003756:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003758:	e105      	b.n	8003966 <UART_SetConfig+0x4d6>
 800375a:	bf00      	nop
 800375c:	40011000 	.word	0x40011000
 8003760:	40011400 	.word	0x40011400
 8003764:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003768:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800376c:	2200      	movs	r2, #0
 800376e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003772:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003776:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800377a:	4642      	mov	r2, r8
 800377c:	464b      	mov	r3, r9
 800377e:	1891      	adds	r1, r2, r2
 8003780:	6239      	str	r1, [r7, #32]
 8003782:	415b      	adcs	r3, r3
 8003784:	627b      	str	r3, [r7, #36]	; 0x24
 8003786:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800378a:	4641      	mov	r1, r8
 800378c:	1854      	adds	r4, r2, r1
 800378e:	4649      	mov	r1, r9
 8003790:	eb43 0501 	adc.w	r5, r3, r1
 8003794:	f04f 0200 	mov.w	r2, #0
 8003798:	f04f 0300 	mov.w	r3, #0
 800379c:	00eb      	lsls	r3, r5, #3
 800379e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037a2:	00e2      	lsls	r2, r4, #3
 80037a4:	4614      	mov	r4, r2
 80037a6:	461d      	mov	r5, r3
 80037a8:	4643      	mov	r3, r8
 80037aa:	18e3      	adds	r3, r4, r3
 80037ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80037b0:	464b      	mov	r3, r9
 80037b2:	eb45 0303 	adc.w	r3, r5, r3
 80037b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80037ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80037c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80037ca:	f04f 0200 	mov.w	r2, #0
 80037ce:	f04f 0300 	mov.w	r3, #0
 80037d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80037d6:	4629      	mov	r1, r5
 80037d8:	008b      	lsls	r3, r1, #2
 80037da:	4621      	mov	r1, r4
 80037dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037e0:	4621      	mov	r1, r4
 80037e2:	008a      	lsls	r2, r1, #2
 80037e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80037e8:	f7fc fd4a 	bl	8000280 <__aeabi_uldivmod>
 80037ec:	4602      	mov	r2, r0
 80037ee:	460b      	mov	r3, r1
 80037f0:	4b60      	ldr	r3, [pc, #384]	; (8003974 <UART_SetConfig+0x4e4>)
 80037f2:	fba3 2302 	umull	r2, r3, r3, r2
 80037f6:	095b      	lsrs	r3, r3, #5
 80037f8:	011c      	lsls	r4, r3, #4
 80037fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037fe:	2200      	movs	r2, #0
 8003800:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003804:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003808:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800380c:	4642      	mov	r2, r8
 800380e:	464b      	mov	r3, r9
 8003810:	1891      	adds	r1, r2, r2
 8003812:	61b9      	str	r1, [r7, #24]
 8003814:	415b      	adcs	r3, r3
 8003816:	61fb      	str	r3, [r7, #28]
 8003818:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800381c:	4641      	mov	r1, r8
 800381e:	1851      	adds	r1, r2, r1
 8003820:	6139      	str	r1, [r7, #16]
 8003822:	4649      	mov	r1, r9
 8003824:	414b      	adcs	r3, r1
 8003826:	617b      	str	r3, [r7, #20]
 8003828:	f04f 0200 	mov.w	r2, #0
 800382c:	f04f 0300 	mov.w	r3, #0
 8003830:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003834:	4659      	mov	r1, fp
 8003836:	00cb      	lsls	r3, r1, #3
 8003838:	4651      	mov	r1, sl
 800383a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800383e:	4651      	mov	r1, sl
 8003840:	00ca      	lsls	r2, r1, #3
 8003842:	4610      	mov	r0, r2
 8003844:	4619      	mov	r1, r3
 8003846:	4603      	mov	r3, r0
 8003848:	4642      	mov	r2, r8
 800384a:	189b      	adds	r3, r3, r2
 800384c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003850:	464b      	mov	r3, r9
 8003852:	460a      	mov	r2, r1
 8003854:	eb42 0303 	adc.w	r3, r2, r3
 8003858:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800385c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	67bb      	str	r3, [r7, #120]	; 0x78
 8003866:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003868:	f04f 0200 	mov.w	r2, #0
 800386c:	f04f 0300 	mov.w	r3, #0
 8003870:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003874:	4649      	mov	r1, r9
 8003876:	008b      	lsls	r3, r1, #2
 8003878:	4641      	mov	r1, r8
 800387a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800387e:	4641      	mov	r1, r8
 8003880:	008a      	lsls	r2, r1, #2
 8003882:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003886:	f7fc fcfb 	bl	8000280 <__aeabi_uldivmod>
 800388a:	4602      	mov	r2, r0
 800388c:	460b      	mov	r3, r1
 800388e:	4b39      	ldr	r3, [pc, #228]	; (8003974 <UART_SetConfig+0x4e4>)
 8003890:	fba3 1302 	umull	r1, r3, r3, r2
 8003894:	095b      	lsrs	r3, r3, #5
 8003896:	2164      	movs	r1, #100	; 0x64
 8003898:	fb01 f303 	mul.w	r3, r1, r3
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	011b      	lsls	r3, r3, #4
 80038a0:	3332      	adds	r3, #50	; 0x32
 80038a2:	4a34      	ldr	r2, [pc, #208]	; (8003974 <UART_SetConfig+0x4e4>)
 80038a4:	fba2 2303 	umull	r2, r3, r2, r3
 80038a8:	095b      	lsrs	r3, r3, #5
 80038aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038ae:	441c      	add	r4, r3
 80038b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038b4:	2200      	movs	r2, #0
 80038b6:	673b      	str	r3, [r7, #112]	; 0x70
 80038b8:	677a      	str	r2, [r7, #116]	; 0x74
 80038ba:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80038be:	4642      	mov	r2, r8
 80038c0:	464b      	mov	r3, r9
 80038c2:	1891      	adds	r1, r2, r2
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	415b      	adcs	r3, r3
 80038c8:	60fb      	str	r3, [r7, #12]
 80038ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038ce:	4641      	mov	r1, r8
 80038d0:	1851      	adds	r1, r2, r1
 80038d2:	6039      	str	r1, [r7, #0]
 80038d4:	4649      	mov	r1, r9
 80038d6:	414b      	adcs	r3, r1
 80038d8:	607b      	str	r3, [r7, #4]
 80038da:	f04f 0200 	mov.w	r2, #0
 80038de:	f04f 0300 	mov.w	r3, #0
 80038e2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80038e6:	4659      	mov	r1, fp
 80038e8:	00cb      	lsls	r3, r1, #3
 80038ea:	4651      	mov	r1, sl
 80038ec:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038f0:	4651      	mov	r1, sl
 80038f2:	00ca      	lsls	r2, r1, #3
 80038f4:	4610      	mov	r0, r2
 80038f6:	4619      	mov	r1, r3
 80038f8:	4603      	mov	r3, r0
 80038fa:	4642      	mov	r2, r8
 80038fc:	189b      	adds	r3, r3, r2
 80038fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8003900:	464b      	mov	r3, r9
 8003902:	460a      	mov	r2, r1
 8003904:	eb42 0303 	adc.w	r3, r2, r3
 8003908:	66fb      	str	r3, [r7, #108]	; 0x6c
 800390a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	663b      	str	r3, [r7, #96]	; 0x60
 8003914:	667a      	str	r2, [r7, #100]	; 0x64
 8003916:	f04f 0200 	mov.w	r2, #0
 800391a:	f04f 0300 	mov.w	r3, #0
 800391e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003922:	4649      	mov	r1, r9
 8003924:	008b      	lsls	r3, r1, #2
 8003926:	4641      	mov	r1, r8
 8003928:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800392c:	4641      	mov	r1, r8
 800392e:	008a      	lsls	r2, r1, #2
 8003930:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003934:	f7fc fca4 	bl	8000280 <__aeabi_uldivmod>
 8003938:	4602      	mov	r2, r0
 800393a:	460b      	mov	r3, r1
 800393c:	4b0d      	ldr	r3, [pc, #52]	; (8003974 <UART_SetConfig+0x4e4>)
 800393e:	fba3 1302 	umull	r1, r3, r3, r2
 8003942:	095b      	lsrs	r3, r3, #5
 8003944:	2164      	movs	r1, #100	; 0x64
 8003946:	fb01 f303 	mul.w	r3, r1, r3
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	011b      	lsls	r3, r3, #4
 800394e:	3332      	adds	r3, #50	; 0x32
 8003950:	4a08      	ldr	r2, [pc, #32]	; (8003974 <UART_SetConfig+0x4e4>)
 8003952:	fba2 2303 	umull	r2, r3, r2, r3
 8003956:	095b      	lsrs	r3, r3, #5
 8003958:	f003 020f 	and.w	r2, r3, #15
 800395c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4422      	add	r2, r4
 8003964:	609a      	str	r2, [r3, #8]
}
 8003966:	bf00      	nop
 8003968:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800396c:	46bd      	mov	sp, r7
 800396e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003972:	bf00      	nop
 8003974:	51eb851f 	.word	0x51eb851f

08003978 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800397c:	4904      	ldr	r1, [pc, #16]	; (8003990 <MX_FATFS_Init+0x18>)
 800397e:	4805      	ldr	r0, [pc, #20]	; (8003994 <MX_FATFS_Init+0x1c>)
 8003980:	f003 f9b8 	bl	8006cf4 <FATFS_LinkDriver>
 8003984:	4603      	mov	r3, r0
 8003986:	461a      	mov	r2, r3
 8003988:	4b03      	ldr	r3, [pc, #12]	; (8003998 <MX_FATFS_Init+0x20>)
 800398a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800398c:	bf00      	nop
 800398e:	bd80      	pop	{r7, pc}
 8003990:	2000041c 	.word	0x2000041c
 8003994:	20000014 	.word	0x20000014
 8003998:	20000418 	.word	0x20000418

0800399c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800399c:	b480      	push	{r7}
 800399e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80039a0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	4603      	mov	r3, r0
 80039b4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 80039b6:	79fb      	ldrb	r3, [r7, #7]
 80039b8:	4618      	mov	r0, r3
 80039ba:	f000 f9d7 	bl	8003d6c <USER_SPI_initialize>
 80039be:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3708      	adds	r7, #8
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	4603      	mov	r3, r0
 80039d0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return USER_SPI_status(pdrv);
 80039d2:	79fb      	ldrb	r3, [r7, #7]
 80039d4:	4618      	mov	r0, r3
 80039d6:	f000 fab5 	bl	8003f44 <USER_SPI_status>
 80039da:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3708      	adds	r7, #8
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	60b9      	str	r1, [r7, #8]
 80039ec:	607a      	str	r2, [r7, #4]
 80039ee:	603b      	str	r3, [r7, #0]
 80039f0:	4603      	mov	r3, r0
 80039f2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return USER_SPI_read(pdrv, buff, sector, count);
 80039f4:	7bf8      	ldrb	r0, [r7, #15]
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	68b9      	ldr	r1, [r7, #8]
 80039fc:	f000 fab8 	bl	8003f70 <USER_SPI_read>
 8003a00:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3710      	adds	r7, #16
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	b084      	sub	sp, #16
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	607a      	str	r2, [r7, #4]
 8003a14:	603b      	str	r3, [r7, #0]
 8003a16:	4603      	mov	r3, r0
 8003a18:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return USER_SPI_write(pdrv, buff, sector, count);
 8003a1a:	7bf8      	ldrb	r0, [r7, #15]
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	68b9      	ldr	r1, [r7, #8]
 8003a22:	f000 fb0b 	bl	800403c <USER_SPI_write>
 8003a26:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3710      	adds	r7, #16
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	4603      	mov	r3, r0
 8003a38:	603a      	str	r2, [r7, #0]
 8003a3a:	71fb      	strb	r3, [r7, #7]
 8003a3c:	460b      	mov	r3, r1
 8003a3e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return USER_SPI_ioctl(pdrv, cmd, buff);
 8003a40:	79b9      	ldrb	r1, [r7, #6]
 8003a42:	79fb      	ldrb	r3, [r7, #7]
 8003a44:	683a      	ldr	r2, [r7, #0]
 8003a46:	4618      	mov	r0, r3
 8003a48:	f000 fb74 	bl	8004134 <USER_SPI_ioctl>
 8003a4c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3708      	adds	r7, #8
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
	...

08003a58 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8003a60:	f7fe f84a 	bl	8001af8 <HAL_GetTick>
 8003a64:	4603      	mov	r3, r0
 8003a66:	4a04      	ldr	r2, [pc, #16]	; (8003a78 <SPI_Timer_On+0x20>)
 8003a68:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8003a6a:	4a04      	ldr	r2, [pc, #16]	; (8003a7c <SPI_Timer_On+0x24>)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6013      	str	r3, [r2, #0]
}
 8003a70:	bf00      	nop
 8003a72:	3708      	adds	r7, #8
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	20000424 	.word	0x20000424
 8003a7c:	20000428 	.word	0x20000428

08003a80 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8003a80:	b580      	push	{r7, lr}
 8003a82:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8003a84:	f7fe f838 	bl	8001af8 <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	4b06      	ldr	r3, [pc, #24]	; (8003aa4 <SPI_Timer_Status+0x24>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	1ad2      	subs	r2, r2, r3
 8003a90:	4b05      	ldr	r3, [pc, #20]	; (8003aa8 <SPI_Timer_Status+0x28>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	bf34      	ite	cc
 8003a98:	2301      	movcc	r3, #1
 8003a9a:	2300      	movcs	r3, #0
 8003a9c:	b2db      	uxtb	r3, r3
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	20000424 	.word	0x20000424
 8003aa8:	20000428 	.word	0x20000428

08003aac <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b086      	sub	sp, #24
 8003ab0:	af02      	add	r7, sp, #8
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8003ab6:	f107 020f 	add.w	r2, r7, #15
 8003aba:	1df9      	adds	r1, r7, #7
 8003abc:	2332      	movs	r3, #50	; 0x32
 8003abe:	9300      	str	r3, [sp, #0]
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	4804      	ldr	r0, [pc, #16]	; (8003ad4 <xchg_spi+0x28>)
 8003ac4:	f7ff f929 	bl	8002d1a <HAL_SPI_TransmitReceive>
    return rxDat;
 8003ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3710      	adds	r7, #16
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	200000ac 	.word	0x200000ac

08003ad8 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8003ad8:	b590      	push	{r4, r7, lr}
 8003ada:	b085      	sub	sp, #20
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	60fb      	str	r3, [r7, #12]
 8003ae6:	e00a      	b.n	8003afe <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	18d4      	adds	r4, r2, r3
 8003aee:	20ff      	movs	r0, #255	; 0xff
 8003af0:	f7ff ffdc 	bl	8003aac <xchg_spi>
 8003af4:	4603      	mov	r3, r0
 8003af6:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	3301      	adds	r3, #1
 8003afc:	60fb      	str	r3, [r7, #12]
 8003afe:	68fa      	ldr	r2, [r7, #12]
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d3f0      	bcc.n	8003ae8 <rcvr_spi_multi+0x10>
	}
}
 8003b06:	bf00      	nop
 8003b08:	bf00      	nop
 8003b0a:	3714      	adds	r7, #20
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd90      	pop	{r4, r7, pc}

08003b10 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	b29a      	uxth	r2, r3
 8003b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b22:	6879      	ldr	r1, [r7, #4]
 8003b24:	4803      	ldr	r0, [pc, #12]	; (8003b34 <xmit_spi_multi+0x24>)
 8003b26:	f7fe ffbc 	bl	8002aa2 <HAL_SPI_Transmit>
}
 8003b2a:	bf00      	nop
 8003b2c:	3708      	adds	r7, #8
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	200000ac 	.word	0x200000ac

08003b38 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b086      	sub	sp, #24
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8003b40:	f7fd ffda 	bl	8001af8 <HAL_GetTick>
 8003b44:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8003b4a:	20ff      	movs	r0, #255	; 0xff
 8003b4c:	f7ff ffae 	bl	8003aac <xchg_spi>
 8003b50:	4603      	mov	r3, r0
 8003b52:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8003b54:	7bfb      	ldrb	r3, [r7, #15]
 8003b56:	2bff      	cmp	r3, #255	; 0xff
 8003b58:	d007      	beq.n	8003b6a <wait_ready+0x32>
 8003b5a:	f7fd ffcd 	bl	8001af8 <HAL_GetTick>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	693a      	ldr	r2, [r7, #16]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d8ef      	bhi.n	8003b4a <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8003b6a:	7bfb      	ldrb	r3, [r7, #15]
 8003b6c:	2bff      	cmp	r3, #255	; 0xff
 8003b6e:	bf0c      	ite	eq
 8003b70:	2301      	moveq	r3, #1
 8003b72:	2300      	movne	r3, #0
 8003b74:	b2db      	uxtb	r3, r3
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3718      	adds	r7, #24
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
	...

08003b80 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8003b84:	2201      	movs	r2, #1
 8003b86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b8a:	4804      	ldr	r0, [pc, #16]	; (8003b9c <despiselect+0x1c>)
 8003b8c:	f7fe fa4e 	bl	800202c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8003b90:	20ff      	movs	r0, #255	; 0xff
 8003b92:	f7ff ff8b 	bl	8003aac <xchg_spi>

}
 8003b96:	bf00      	nop
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	40020400 	.word	0x40020400

08003ba0 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003baa:	480a      	ldr	r0, [pc, #40]	; (8003bd4 <spiselect+0x34>)
 8003bac:	f7fe fa3e 	bl	800202c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8003bb0:	20ff      	movs	r0, #255	; 0xff
 8003bb2:	f7ff ff7b 	bl	8003aac <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8003bb6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003bba:	f7ff ffbd 	bl	8003b38 <wait_ready>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d001      	beq.n	8003bc8 <spiselect+0x28>
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e002      	b.n	8003bce <spiselect+0x2e>

	despiselect();
 8003bc8:	f7ff ffda 	bl	8003b80 <despiselect>
	return 0;	/* Timeout */
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	40020400 	.word	0x40020400

08003bd8 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8003be2:	20c8      	movs	r0, #200	; 0xc8
 8003be4:	f7ff ff38 	bl	8003a58 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8003be8:	20ff      	movs	r0, #255	; 0xff
 8003bea:	f7ff ff5f 	bl	8003aac <xchg_spi>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8003bf2:	7bfb      	ldrb	r3, [r7, #15]
 8003bf4:	2bff      	cmp	r3, #255	; 0xff
 8003bf6:	d104      	bne.n	8003c02 <rcvr_datablock+0x2a>
 8003bf8:	f7ff ff42 	bl	8003a80 <SPI_Timer_Status>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d1f2      	bne.n	8003be8 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8003c02:	7bfb      	ldrb	r3, [r7, #15]
 8003c04:	2bfe      	cmp	r3, #254	; 0xfe
 8003c06:	d001      	beq.n	8003c0c <rcvr_datablock+0x34>
 8003c08:	2300      	movs	r3, #0
 8003c0a:	e00a      	b.n	8003c22 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8003c0c:	6839      	ldr	r1, [r7, #0]
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f7ff ff62 	bl	8003ad8 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8003c14:	20ff      	movs	r0, #255	; 0xff
 8003c16:	f7ff ff49 	bl	8003aac <xchg_spi>
 8003c1a:	20ff      	movs	r0, #255	; 0xff
 8003c1c:	f7ff ff46 	bl	8003aac <xchg_spi>

	return 1;						/* Function succeeded */
 8003c20:	2301      	movs	r3, #1
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3710      	adds	r7, #16
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}

08003c2a <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8003c2a:	b580      	push	{r7, lr}
 8003c2c:	b084      	sub	sp, #16
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
 8003c32:	460b      	mov	r3, r1
 8003c34:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8003c36:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003c3a:	f7ff ff7d 	bl	8003b38 <wait_ready>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d101      	bne.n	8003c48 <xmit_datablock+0x1e>
 8003c44:	2300      	movs	r3, #0
 8003c46:	e01e      	b.n	8003c86 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8003c48:	78fb      	ldrb	r3, [r7, #3]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f7ff ff2e 	bl	8003aac <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8003c50:	78fb      	ldrb	r3, [r7, #3]
 8003c52:	2bfd      	cmp	r3, #253	; 0xfd
 8003c54:	d016      	beq.n	8003c84 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8003c56:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f7ff ff58 	bl	8003b10 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8003c60:	20ff      	movs	r0, #255	; 0xff
 8003c62:	f7ff ff23 	bl	8003aac <xchg_spi>
 8003c66:	20ff      	movs	r0, #255	; 0xff
 8003c68:	f7ff ff20 	bl	8003aac <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8003c6c:	20ff      	movs	r0, #255	; 0xff
 8003c6e:	f7ff ff1d 	bl	8003aac <xchg_spi>
 8003c72:	4603      	mov	r3, r0
 8003c74:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8003c76:	7bfb      	ldrb	r3, [r7, #15]
 8003c78:	f003 031f 	and.w	r3, r3, #31
 8003c7c:	2b05      	cmp	r3, #5
 8003c7e:	d001      	beq.n	8003c84 <xmit_datablock+0x5a>
 8003c80:	2300      	movs	r3, #0
 8003c82:	e000      	b.n	8003c86 <xmit_datablock+0x5c>
	}
	return 1;
 8003c84:	2301      	movs	r3, #1
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3710      	adds	r7, #16
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}

08003c8e <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8003c8e:	b580      	push	{r7, lr}
 8003c90:	b084      	sub	sp, #16
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	4603      	mov	r3, r0
 8003c96:	6039      	str	r1, [r7, #0]
 8003c98:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8003c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	da0e      	bge.n	8003cc0 <send_cmd+0x32>
		cmd &= 0x7F;
 8003ca2:	79fb      	ldrb	r3, [r7, #7]
 8003ca4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ca8:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8003caa:	2100      	movs	r1, #0
 8003cac:	2037      	movs	r0, #55	; 0x37
 8003cae:	f7ff ffee 	bl	8003c8e <send_cmd>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8003cb6:	7bbb      	ldrb	r3, [r7, #14]
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d901      	bls.n	8003cc0 <send_cmd+0x32>
 8003cbc:	7bbb      	ldrb	r3, [r7, #14]
 8003cbe:	e051      	b.n	8003d64 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8003cc0:	79fb      	ldrb	r3, [r7, #7]
 8003cc2:	2b0c      	cmp	r3, #12
 8003cc4:	d008      	beq.n	8003cd8 <send_cmd+0x4a>
		despiselect();
 8003cc6:	f7ff ff5b 	bl	8003b80 <despiselect>
		if (!spiselect()) return 0xFF;
 8003cca:	f7ff ff69 	bl	8003ba0 <spiselect>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d101      	bne.n	8003cd8 <send_cmd+0x4a>
 8003cd4:	23ff      	movs	r3, #255	; 0xff
 8003cd6:	e045      	b.n	8003d64 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8003cd8:	79fb      	ldrb	r3, [r7, #7]
 8003cda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7ff fee3 	bl	8003aac <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	0e1b      	lsrs	r3, r3, #24
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	4618      	mov	r0, r3
 8003cee:	f7ff fedd 	bl	8003aac <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	0c1b      	lsrs	r3, r3, #16
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f7ff fed7 	bl	8003aac <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	0a1b      	lsrs	r3, r3, #8
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	4618      	mov	r0, r3
 8003d06:	f7ff fed1 	bl	8003aac <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f7ff fecc 	bl	8003aac <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8003d14:	2301      	movs	r3, #1
 8003d16:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8003d18:	79fb      	ldrb	r3, [r7, #7]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d101      	bne.n	8003d22 <send_cmd+0x94>
 8003d1e:	2395      	movs	r3, #149	; 0x95
 8003d20:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8003d22:	79fb      	ldrb	r3, [r7, #7]
 8003d24:	2b08      	cmp	r3, #8
 8003d26:	d101      	bne.n	8003d2c <send_cmd+0x9e>
 8003d28:	2387      	movs	r3, #135	; 0x87
 8003d2a:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8003d2c:	7bfb      	ldrb	r3, [r7, #15]
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7ff febc 	bl	8003aac <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8003d34:	79fb      	ldrb	r3, [r7, #7]
 8003d36:	2b0c      	cmp	r3, #12
 8003d38:	d102      	bne.n	8003d40 <send_cmd+0xb2>
 8003d3a:	20ff      	movs	r0, #255	; 0xff
 8003d3c:	f7ff feb6 	bl	8003aac <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8003d40:	230a      	movs	r3, #10
 8003d42:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8003d44:	20ff      	movs	r0, #255	; 0xff
 8003d46:	f7ff feb1 	bl	8003aac <xchg_spi>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8003d4e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	da05      	bge.n	8003d62 <send_cmd+0xd4>
 8003d56:	7bfb      	ldrb	r3, [r7, #15]
 8003d58:	3b01      	subs	r3, #1
 8003d5a:	73fb      	strb	r3, [r7, #15]
 8003d5c:	7bfb      	ldrb	r3, [r7, #15]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1f0      	bne.n	8003d44 <send_cmd+0xb6>

	return res;							/* Return received response */
 8003d62:	7bbb      	ldrb	r3, [r7, #14]
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3710      	adds	r7, #16
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8003d6c:	b590      	push	{r4, r7, lr}
 8003d6e:	b085      	sub	sp, #20
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	4603      	mov	r3, r0
 8003d74:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8003d76:	79fb      	ldrb	r3, [r7, #7]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d001      	beq.n	8003d80 <USER_SPI_initialize+0x14>
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e0d6      	b.n	8003f2e <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8003d80:	4b6d      	ldr	r3, [pc, #436]	; (8003f38 <USER_SPI_initialize+0x1cc>)
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d003      	beq.n	8003d96 <USER_SPI_initialize+0x2a>
 8003d8e:	4b6a      	ldr	r3, [pc, #424]	; (8003f38 <USER_SPI_initialize+0x1cc>)
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	e0cb      	b.n	8003f2e <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8003d96:	4b69      	ldr	r3, [pc, #420]	; (8003f3c <USER_SPI_initialize+0x1d0>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003da0:	4b66      	ldr	r3, [pc, #408]	; (8003f3c <USER_SPI_initialize+0x1d0>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8003da8:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8003daa:	230a      	movs	r3, #10
 8003dac:	73fb      	strb	r3, [r7, #15]
 8003dae:	e005      	b.n	8003dbc <USER_SPI_initialize+0x50>
 8003db0:	20ff      	movs	r0, #255	; 0xff
 8003db2:	f7ff fe7b 	bl	8003aac <xchg_spi>
 8003db6:	7bfb      	ldrb	r3, [r7, #15]
 8003db8:	3b01      	subs	r3, #1
 8003dba:	73fb      	strb	r3, [r7, #15]
 8003dbc:	7bfb      	ldrb	r3, [r7, #15]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d1f6      	bne.n	8003db0 <USER_SPI_initialize+0x44>

	ty = 0;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8003dc6:	2100      	movs	r1, #0
 8003dc8:	2000      	movs	r0, #0
 8003dca:	f7ff ff60 	bl	8003c8e <send_cmd>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	f040 808b 	bne.w	8003eec <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8003dd6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003dda:	f7ff fe3d 	bl	8003a58 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8003dde:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003de2:	2008      	movs	r0, #8
 8003de4:	f7ff ff53 	bl	8003c8e <send_cmd>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d151      	bne.n	8003e92 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8003dee:	2300      	movs	r3, #0
 8003df0:	73fb      	strb	r3, [r7, #15]
 8003df2:	e00d      	b.n	8003e10 <USER_SPI_initialize+0xa4>
 8003df4:	7bfc      	ldrb	r4, [r7, #15]
 8003df6:	20ff      	movs	r0, #255	; 0xff
 8003df8:	f7ff fe58 	bl	8003aac <xchg_spi>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	461a      	mov	r2, r3
 8003e00:	f104 0310 	add.w	r3, r4, #16
 8003e04:	443b      	add	r3, r7
 8003e06:	f803 2c08 	strb.w	r2, [r3, #-8]
 8003e0a:	7bfb      	ldrb	r3, [r7, #15]
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	73fb      	strb	r3, [r7, #15]
 8003e10:	7bfb      	ldrb	r3, [r7, #15]
 8003e12:	2b03      	cmp	r3, #3
 8003e14:	d9ee      	bls.n	8003df4 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8003e16:	7abb      	ldrb	r3, [r7, #10]
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d167      	bne.n	8003eec <USER_SPI_initialize+0x180>
 8003e1c:	7afb      	ldrb	r3, [r7, #11]
 8003e1e:	2baa      	cmp	r3, #170	; 0xaa
 8003e20:	d164      	bne.n	8003eec <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8003e22:	bf00      	nop
 8003e24:	f7ff fe2c 	bl	8003a80 <SPI_Timer_Status>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d007      	beq.n	8003e3e <USER_SPI_initialize+0xd2>
 8003e2e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003e32:	20a9      	movs	r0, #169	; 0xa9
 8003e34:	f7ff ff2b 	bl	8003c8e <send_cmd>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d1f2      	bne.n	8003e24 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8003e3e:	f7ff fe1f 	bl	8003a80 <SPI_Timer_Status>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d051      	beq.n	8003eec <USER_SPI_initialize+0x180>
 8003e48:	2100      	movs	r1, #0
 8003e4a:	203a      	movs	r0, #58	; 0x3a
 8003e4c:	f7ff ff1f 	bl	8003c8e <send_cmd>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d14a      	bne.n	8003eec <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8003e56:	2300      	movs	r3, #0
 8003e58:	73fb      	strb	r3, [r7, #15]
 8003e5a:	e00d      	b.n	8003e78 <USER_SPI_initialize+0x10c>
 8003e5c:	7bfc      	ldrb	r4, [r7, #15]
 8003e5e:	20ff      	movs	r0, #255	; 0xff
 8003e60:	f7ff fe24 	bl	8003aac <xchg_spi>
 8003e64:	4603      	mov	r3, r0
 8003e66:	461a      	mov	r2, r3
 8003e68:	f104 0310 	add.w	r3, r4, #16
 8003e6c:	443b      	add	r3, r7
 8003e6e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8003e72:	7bfb      	ldrb	r3, [r7, #15]
 8003e74:	3301      	adds	r3, #1
 8003e76:	73fb      	strb	r3, [r7, #15]
 8003e78:	7bfb      	ldrb	r3, [r7, #15]
 8003e7a:	2b03      	cmp	r3, #3
 8003e7c:	d9ee      	bls.n	8003e5c <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8003e7e:	7a3b      	ldrb	r3, [r7, #8]
 8003e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d001      	beq.n	8003e8c <USER_SPI_initialize+0x120>
 8003e88:	230c      	movs	r3, #12
 8003e8a:	e000      	b.n	8003e8e <USER_SPI_initialize+0x122>
 8003e8c:	2304      	movs	r3, #4
 8003e8e:	737b      	strb	r3, [r7, #13]
 8003e90:	e02c      	b.n	8003eec <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8003e92:	2100      	movs	r1, #0
 8003e94:	20a9      	movs	r0, #169	; 0xa9
 8003e96:	f7ff fefa 	bl	8003c8e <send_cmd>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d804      	bhi.n	8003eaa <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	737b      	strb	r3, [r7, #13]
 8003ea4:	23a9      	movs	r3, #169	; 0xa9
 8003ea6:	73bb      	strb	r3, [r7, #14]
 8003ea8:	e003      	b.n	8003eb2 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8003eaa:	2301      	movs	r3, #1
 8003eac:	737b      	strb	r3, [r7, #13]
 8003eae:	2301      	movs	r3, #1
 8003eb0:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8003eb2:	bf00      	nop
 8003eb4:	f7ff fde4 	bl	8003a80 <SPI_Timer_Status>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d007      	beq.n	8003ece <USER_SPI_initialize+0x162>
 8003ebe:	7bbb      	ldrb	r3, [r7, #14]
 8003ec0:	2100      	movs	r1, #0
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f7ff fee3 	bl	8003c8e <send_cmd>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d1f2      	bne.n	8003eb4 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8003ece:	f7ff fdd7 	bl	8003a80 <SPI_Timer_Status>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d007      	beq.n	8003ee8 <USER_SPI_initialize+0x17c>
 8003ed8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003edc:	2010      	movs	r0, #16
 8003ede:	f7ff fed6 	bl	8003c8e <send_cmd>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d001      	beq.n	8003eec <USER_SPI_initialize+0x180>
				ty = 0;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8003eec:	4a14      	ldr	r2, [pc, #80]	; (8003f40 <USER_SPI_initialize+0x1d4>)
 8003eee:	7b7b      	ldrb	r3, [r7, #13]
 8003ef0:	7013      	strb	r3, [r2, #0]
	despiselect();
 8003ef2:	f7ff fe45 	bl	8003b80 <despiselect>

	if (ty) {			/* OK */
 8003ef6:	7b7b      	ldrb	r3, [r7, #13]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d012      	beq.n	8003f22 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8003efc:	4b0f      	ldr	r3, [pc, #60]	; (8003f3c <USER_SPI_initialize+0x1d0>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003f06:	4b0d      	ldr	r3, [pc, #52]	; (8003f3c <USER_SPI_initialize+0x1d0>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f042 0210 	orr.w	r2, r2, #16
 8003f0e:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8003f10:	4b09      	ldr	r3, [pc, #36]	; (8003f38 <USER_SPI_initialize+0x1cc>)
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	f023 0301 	bic.w	r3, r3, #1
 8003f1a:	b2da      	uxtb	r2, r3
 8003f1c:	4b06      	ldr	r3, [pc, #24]	; (8003f38 <USER_SPI_initialize+0x1cc>)
 8003f1e:	701a      	strb	r2, [r3, #0]
 8003f20:	e002      	b.n	8003f28 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8003f22:	4b05      	ldr	r3, [pc, #20]	; (8003f38 <USER_SPI_initialize+0x1cc>)
 8003f24:	2201      	movs	r2, #1
 8003f26:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8003f28:	4b03      	ldr	r3, [pc, #12]	; (8003f38 <USER_SPI_initialize+0x1cc>)
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	b2db      	uxtb	r3, r3
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3714      	adds	r7, #20
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd90      	pop	{r4, r7, pc}
 8003f36:	bf00      	nop
 8003f38:	20000028 	.word	0x20000028
 8003f3c:	200000ac 	.word	0x200000ac
 8003f40:	20000420 	.word	0x20000420

08003f44 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8003f4e:	79fb      	ldrb	r3, [r7, #7]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d001      	beq.n	8003f58 <USER_SPI_status+0x14>
 8003f54:	2301      	movs	r3, #1
 8003f56:	e002      	b.n	8003f5e <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8003f58:	4b04      	ldr	r3, [pc, #16]	; (8003f6c <USER_SPI_status+0x28>)
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	b2db      	uxtb	r3, r3
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	370c      	adds	r7, #12
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr
 8003f6a:	bf00      	nop
 8003f6c:	20000028 	.word	0x20000028

08003f70 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	60b9      	str	r1, [r7, #8]
 8003f78:	607a      	str	r2, [r7, #4]
 8003f7a:	603b      	str	r3, [r7, #0]
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8003f80:	7bfb      	ldrb	r3, [r7, #15]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d102      	bne.n	8003f8c <USER_SPI_read+0x1c>
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d101      	bne.n	8003f90 <USER_SPI_read+0x20>
 8003f8c:	2304      	movs	r3, #4
 8003f8e:	e04d      	b.n	800402c <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8003f90:	4b28      	ldr	r3, [pc, #160]	; (8004034 <USER_SPI_read+0xc4>)
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	f003 0301 	and.w	r3, r3, #1
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d001      	beq.n	8003fa2 <USER_SPI_read+0x32>
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e044      	b.n	800402c <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8003fa2:	4b25      	ldr	r3, [pc, #148]	; (8004038 <USER_SPI_read+0xc8>)
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	f003 0308 	and.w	r3, r3, #8
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d102      	bne.n	8003fb4 <USER_SPI_read+0x44>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	025b      	lsls	r3, r3, #9
 8003fb2:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d111      	bne.n	8003fde <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8003fba:	6879      	ldr	r1, [r7, #4]
 8003fbc:	2011      	movs	r0, #17
 8003fbe:	f7ff fe66 	bl	8003c8e <send_cmd>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d129      	bne.n	800401c <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8003fc8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003fcc:	68b8      	ldr	r0, [r7, #8]
 8003fce:	f7ff fe03 	bl	8003bd8 <rcvr_datablock>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d021      	beq.n	800401c <USER_SPI_read+0xac>
			count = 0;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	603b      	str	r3, [r7, #0]
 8003fdc:	e01e      	b.n	800401c <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8003fde:	6879      	ldr	r1, [r7, #4]
 8003fe0:	2012      	movs	r0, #18
 8003fe2:	f7ff fe54 	bl	8003c8e <send_cmd>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d117      	bne.n	800401c <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8003fec:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003ff0:	68b8      	ldr	r0, [r7, #8]
 8003ff2:	f7ff fdf1 	bl	8003bd8 <rcvr_datablock>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d00a      	beq.n	8004012 <USER_SPI_read+0xa2>
				buff += 512;
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004002:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	3b01      	subs	r3, #1
 8004008:	603b      	str	r3, [r7, #0]
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d1ed      	bne.n	8003fec <USER_SPI_read+0x7c>
 8004010:	e000      	b.n	8004014 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8004012:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8004014:	2100      	movs	r1, #0
 8004016:	200c      	movs	r0, #12
 8004018:	f7ff fe39 	bl	8003c8e <send_cmd>
		}
	}
	despiselect();
 800401c:	f7ff fdb0 	bl	8003b80 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	2b00      	cmp	r3, #0
 8004024:	bf14      	ite	ne
 8004026:	2301      	movne	r3, #1
 8004028:	2300      	moveq	r3, #0
 800402a:	b2db      	uxtb	r3, r3
}
 800402c:	4618      	mov	r0, r3
 800402e:	3710      	adds	r7, #16
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}
 8004034:	20000028 	.word	0x20000028
 8004038:	20000420 	.word	0x20000420

0800403c <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	60b9      	str	r1, [r7, #8]
 8004044:	607a      	str	r2, [r7, #4]
 8004046:	603b      	str	r3, [r7, #0]
 8004048:	4603      	mov	r3, r0
 800404a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800404c:	7bfb      	ldrb	r3, [r7, #15]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d102      	bne.n	8004058 <USER_SPI_write+0x1c>
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d101      	bne.n	800405c <USER_SPI_write+0x20>
 8004058:	2304      	movs	r3, #4
 800405a:	e063      	b.n	8004124 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800405c:	4b33      	ldr	r3, [pc, #204]	; (800412c <USER_SPI_write+0xf0>)
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	b2db      	uxtb	r3, r3
 8004062:	f003 0301 	and.w	r3, r3, #1
 8004066:	2b00      	cmp	r3, #0
 8004068:	d001      	beq.n	800406e <USER_SPI_write+0x32>
 800406a:	2303      	movs	r3, #3
 800406c:	e05a      	b.n	8004124 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800406e:	4b2f      	ldr	r3, [pc, #188]	; (800412c <USER_SPI_write+0xf0>)
 8004070:	781b      	ldrb	r3, [r3, #0]
 8004072:	b2db      	uxtb	r3, r3
 8004074:	f003 0304 	and.w	r3, r3, #4
 8004078:	2b00      	cmp	r3, #0
 800407a:	d001      	beq.n	8004080 <USER_SPI_write+0x44>
 800407c:	2302      	movs	r3, #2
 800407e:	e051      	b.n	8004124 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8004080:	4b2b      	ldr	r3, [pc, #172]	; (8004130 <USER_SPI_write+0xf4>)
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	f003 0308 	and.w	r3, r3, #8
 8004088:	2b00      	cmp	r3, #0
 800408a:	d102      	bne.n	8004092 <USER_SPI_write+0x56>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	025b      	lsls	r3, r3, #9
 8004090:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	2b01      	cmp	r3, #1
 8004096:	d110      	bne.n	80040ba <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8004098:	6879      	ldr	r1, [r7, #4]
 800409a:	2018      	movs	r0, #24
 800409c:	f7ff fdf7 	bl	8003c8e <send_cmd>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d136      	bne.n	8004114 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 80040a6:	21fe      	movs	r1, #254	; 0xfe
 80040a8:	68b8      	ldr	r0, [r7, #8]
 80040aa:	f7ff fdbe 	bl	8003c2a <xmit_datablock>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d02f      	beq.n	8004114 <USER_SPI_write+0xd8>
			count = 0;
 80040b4:	2300      	movs	r3, #0
 80040b6:	603b      	str	r3, [r7, #0]
 80040b8:	e02c      	b.n	8004114 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 80040ba:	4b1d      	ldr	r3, [pc, #116]	; (8004130 <USER_SPI_write+0xf4>)
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	f003 0306 	and.w	r3, r3, #6
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d003      	beq.n	80040ce <USER_SPI_write+0x92>
 80040c6:	6839      	ldr	r1, [r7, #0]
 80040c8:	2097      	movs	r0, #151	; 0x97
 80040ca:	f7ff fde0 	bl	8003c8e <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 80040ce:	6879      	ldr	r1, [r7, #4]
 80040d0:	2019      	movs	r0, #25
 80040d2:	f7ff fddc 	bl	8003c8e <send_cmd>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d11b      	bne.n	8004114 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 80040dc:	21fc      	movs	r1, #252	; 0xfc
 80040de:	68b8      	ldr	r0, [r7, #8]
 80040e0:	f7ff fda3 	bl	8003c2a <xmit_datablock>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00a      	beq.n	8004100 <USER_SPI_write+0xc4>
				buff += 512;
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80040f0:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	3b01      	subs	r3, #1
 80040f6:	603b      	str	r3, [r7, #0]
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d1ee      	bne.n	80040dc <USER_SPI_write+0xa0>
 80040fe:	e000      	b.n	8004102 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8004100:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8004102:	21fd      	movs	r1, #253	; 0xfd
 8004104:	2000      	movs	r0, #0
 8004106:	f7ff fd90 	bl	8003c2a <xmit_datablock>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d101      	bne.n	8004114 <USER_SPI_write+0xd8>
 8004110:	2301      	movs	r3, #1
 8004112:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8004114:	f7ff fd34 	bl	8003b80 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	2b00      	cmp	r3, #0
 800411c:	bf14      	ite	ne
 800411e:	2301      	movne	r3, #1
 8004120:	2300      	moveq	r3, #0
 8004122:	b2db      	uxtb	r3, r3
}
 8004124:	4618      	mov	r0, r3
 8004126:	3710      	adds	r7, #16
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}
 800412c:	20000028 	.word	0x20000028
 8004130:	20000420 	.word	0x20000420

08004134 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b08c      	sub	sp, #48	; 0x30
 8004138:	af00      	add	r7, sp, #0
 800413a:	4603      	mov	r3, r0
 800413c:	603a      	str	r2, [r7, #0]
 800413e:	71fb      	strb	r3, [r7, #7]
 8004140:	460b      	mov	r3, r1
 8004142:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8004144:	79fb      	ldrb	r3, [r7, #7]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d001      	beq.n	800414e <USER_SPI_ioctl+0x1a>
 800414a:	2304      	movs	r3, #4
 800414c:	e15a      	b.n	8004404 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800414e:	4baf      	ldr	r3, [pc, #700]	; (800440c <USER_SPI_ioctl+0x2d8>)
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	b2db      	uxtb	r3, r3
 8004154:	f003 0301 	and.w	r3, r3, #1
 8004158:	2b00      	cmp	r3, #0
 800415a:	d001      	beq.n	8004160 <USER_SPI_ioctl+0x2c>
 800415c:	2303      	movs	r3, #3
 800415e:	e151      	b.n	8004404 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8004166:	79bb      	ldrb	r3, [r7, #6]
 8004168:	2b04      	cmp	r3, #4
 800416a:	f200 8136 	bhi.w	80043da <USER_SPI_ioctl+0x2a6>
 800416e:	a201      	add	r2, pc, #4	; (adr r2, 8004174 <USER_SPI_ioctl+0x40>)
 8004170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004174:	08004189 	.word	0x08004189
 8004178:	0800419d 	.word	0x0800419d
 800417c:	080043db 	.word	0x080043db
 8004180:	08004249 	.word	0x08004249
 8004184:	0800433f 	.word	0x0800433f
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8004188:	f7ff fd0a 	bl	8003ba0 <spiselect>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	f000 8127 	beq.w	80043e2 <USER_SPI_ioctl+0x2ae>
 8004194:	2300      	movs	r3, #0
 8004196:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800419a:	e122      	b.n	80043e2 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800419c:	2100      	movs	r1, #0
 800419e:	2009      	movs	r0, #9
 80041a0:	f7ff fd75 	bl	8003c8e <send_cmd>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	f040 811d 	bne.w	80043e6 <USER_SPI_ioctl+0x2b2>
 80041ac:	f107 030c 	add.w	r3, r7, #12
 80041b0:	2110      	movs	r1, #16
 80041b2:	4618      	mov	r0, r3
 80041b4:	f7ff fd10 	bl	8003bd8 <rcvr_datablock>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	f000 8113 	beq.w	80043e6 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 80041c0:	7b3b      	ldrb	r3, [r7, #12]
 80041c2:	099b      	lsrs	r3, r3, #6
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d111      	bne.n	80041ee <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 80041ca:	7d7b      	ldrb	r3, [r7, #21]
 80041cc:	461a      	mov	r2, r3
 80041ce:	7d3b      	ldrb	r3, [r7, #20]
 80041d0:	021b      	lsls	r3, r3, #8
 80041d2:	4413      	add	r3, r2
 80041d4:	461a      	mov	r2, r3
 80041d6:	7cfb      	ldrb	r3, [r7, #19]
 80041d8:	041b      	lsls	r3, r3, #16
 80041da:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80041de:	4413      	add	r3, r2
 80041e0:	3301      	adds	r3, #1
 80041e2:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	029a      	lsls	r2, r3, #10
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	601a      	str	r2, [r3, #0]
 80041ec:	e028      	b.n	8004240 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80041ee:	7c7b      	ldrb	r3, [r7, #17]
 80041f0:	f003 030f 	and.w	r3, r3, #15
 80041f4:	b2da      	uxtb	r2, r3
 80041f6:	7dbb      	ldrb	r3, [r7, #22]
 80041f8:	09db      	lsrs	r3, r3, #7
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	4413      	add	r3, r2
 80041fe:	b2da      	uxtb	r2, r3
 8004200:	7d7b      	ldrb	r3, [r7, #21]
 8004202:	005b      	lsls	r3, r3, #1
 8004204:	b2db      	uxtb	r3, r3
 8004206:	f003 0306 	and.w	r3, r3, #6
 800420a:	b2db      	uxtb	r3, r3
 800420c:	4413      	add	r3, r2
 800420e:	b2db      	uxtb	r3, r3
 8004210:	3302      	adds	r3, #2
 8004212:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8004216:	7d3b      	ldrb	r3, [r7, #20]
 8004218:	099b      	lsrs	r3, r3, #6
 800421a:	b2db      	uxtb	r3, r3
 800421c:	461a      	mov	r2, r3
 800421e:	7cfb      	ldrb	r3, [r7, #19]
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	441a      	add	r2, r3
 8004224:	7cbb      	ldrb	r3, [r7, #18]
 8004226:	029b      	lsls	r3, r3, #10
 8004228:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800422c:	4413      	add	r3, r2
 800422e:	3301      	adds	r3, #1
 8004230:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8004232:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004236:	3b09      	subs	r3, #9
 8004238:	69fa      	ldr	r2, [r7, #28]
 800423a:	409a      	lsls	r2, r3
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8004240:	2300      	movs	r3, #0
 8004242:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8004246:	e0ce      	b.n	80043e6 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8004248:	4b71      	ldr	r3, [pc, #452]	; (8004410 <USER_SPI_ioctl+0x2dc>)
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	f003 0304 	and.w	r3, r3, #4
 8004250:	2b00      	cmp	r3, #0
 8004252:	d031      	beq.n	80042b8 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8004254:	2100      	movs	r1, #0
 8004256:	208d      	movs	r0, #141	; 0x8d
 8004258:	f7ff fd19 	bl	8003c8e <send_cmd>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	f040 80c3 	bne.w	80043ea <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8004264:	20ff      	movs	r0, #255	; 0xff
 8004266:	f7ff fc21 	bl	8003aac <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800426a:	f107 030c 	add.w	r3, r7, #12
 800426e:	2110      	movs	r1, #16
 8004270:	4618      	mov	r0, r3
 8004272:	f7ff fcb1 	bl	8003bd8 <rcvr_datablock>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	f000 80b6 	beq.w	80043ea <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800427e:	2330      	movs	r3, #48	; 0x30
 8004280:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8004284:	e007      	b.n	8004296 <USER_SPI_ioctl+0x162>
 8004286:	20ff      	movs	r0, #255	; 0xff
 8004288:	f7ff fc10 	bl	8003aac <xchg_spi>
 800428c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004290:	3b01      	subs	r3, #1
 8004292:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8004296:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800429a:	2b00      	cmp	r3, #0
 800429c:	d1f3      	bne.n	8004286 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800429e:	7dbb      	ldrb	r3, [r7, #22]
 80042a0:	091b      	lsrs	r3, r3, #4
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	461a      	mov	r2, r3
 80042a6:	2310      	movs	r3, #16
 80042a8:	fa03 f202 	lsl.w	r2, r3, r2
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80042b0:	2300      	movs	r3, #0
 80042b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80042b6:	e098      	b.n	80043ea <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80042b8:	2100      	movs	r1, #0
 80042ba:	2009      	movs	r0, #9
 80042bc:	f7ff fce7 	bl	8003c8e <send_cmd>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	f040 8091 	bne.w	80043ea <USER_SPI_ioctl+0x2b6>
 80042c8:	f107 030c 	add.w	r3, r7, #12
 80042cc:	2110      	movs	r1, #16
 80042ce:	4618      	mov	r0, r3
 80042d0:	f7ff fc82 	bl	8003bd8 <rcvr_datablock>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	f000 8087 	beq.w	80043ea <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 80042dc:	4b4c      	ldr	r3, [pc, #304]	; (8004410 <USER_SPI_ioctl+0x2dc>)
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	f003 0302 	and.w	r3, r3, #2
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d012      	beq.n	800430e <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80042e8:	7dbb      	ldrb	r3, [r7, #22]
 80042ea:	005b      	lsls	r3, r3, #1
 80042ec:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80042f0:	7dfa      	ldrb	r2, [r7, #23]
 80042f2:	09d2      	lsrs	r2, r2, #7
 80042f4:	b2d2      	uxtb	r2, r2
 80042f6:	4413      	add	r3, r2
 80042f8:	1c5a      	adds	r2, r3, #1
 80042fa:	7e7b      	ldrb	r3, [r7, #25]
 80042fc:	099b      	lsrs	r3, r3, #6
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	3b01      	subs	r3, #1
 8004302:	fa02 f303 	lsl.w	r3, r2, r3
 8004306:	461a      	mov	r2, r3
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	601a      	str	r2, [r3, #0]
 800430c:	e013      	b.n	8004336 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800430e:	7dbb      	ldrb	r3, [r7, #22]
 8004310:	109b      	asrs	r3, r3, #2
 8004312:	b29b      	uxth	r3, r3
 8004314:	f003 031f 	and.w	r3, r3, #31
 8004318:	3301      	adds	r3, #1
 800431a:	7dfa      	ldrb	r2, [r7, #23]
 800431c:	00d2      	lsls	r2, r2, #3
 800431e:	f002 0218 	and.w	r2, r2, #24
 8004322:	7df9      	ldrb	r1, [r7, #23]
 8004324:	0949      	lsrs	r1, r1, #5
 8004326:	b2c9      	uxtb	r1, r1
 8004328:	440a      	add	r2, r1
 800432a:	3201      	adds	r2, #1
 800432c:	fb02 f303 	mul.w	r3, r2, r3
 8004330:	461a      	mov	r2, r3
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8004336:	2300      	movs	r3, #0
 8004338:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800433c:	e055      	b.n	80043ea <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800433e:	4b34      	ldr	r3, [pc, #208]	; (8004410 <USER_SPI_ioctl+0x2dc>)
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	f003 0306 	and.w	r3, r3, #6
 8004346:	2b00      	cmp	r3, #0
 8004348:	d051      	beq.n	80043ee <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800434a:	f107 020c 	add.w	r2, r7, #12
 800434e:	79fb      	ldrb	r3, [r7, #7]
 8004350:	210b      	movs	r1, #11
 8004352:	4618      	mov	r0, r3
 8004354:	f7ff feee 	bl	8004134 <USER_SPI_ioctl>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d149      	bne.n	80043f2 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800435e:	7b3b      	ldrb	r3, [r7, #12]
 8004360:	099b      	lsrs	r3, r3, #6
 8004362:	b2db      	uxtb	r3, r3
 8004364:	2b00      	cmp	r3, #0
 8004366:	d104      	bne.n	8004372 <USER_SPI_ioctl+0x23e>
 8004368:	7dbb      	ldrb	r3, [r7, #22]
 800436a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800436e:	2b00      	cmp	r3, #0
 8004370:	d041      	beq.n	80043f6 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	623b      	str	r3, [r7, #32]
 8004376:	6a3b      	ldr	r3, [r7, #32]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	62bb      	str	r3, [r7, #40]	; 0x28
 800437c:	6a3b      	ldr	r3, [r7, #32]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8004382:	4b23      	ldr	r3, [pc, #140]	; (8004410 <USER_SPI_ioctl+0x2dc>)
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	f003 0308 	and.w	r3, r3, #8
 800438a:	2b00      	cmp	r3, #0
 800438c:	d105      	bne.n	800439a <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800438e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004390:	025b      	lsls	r3, r3, #9
 8004392:	62bb      	str	r3, [r7, #40]	; 0x28
 8004394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004396:	025b      	lsls	r3, r3, #9
 8004398:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800439a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800439c:	2020      	movs	r0, #32
 800439e:	f7ff fc76 	bl	8003c8e <send_cmd>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d128      	bne.n	80043fa <USER_SPI_ioctl+0x2c6>
 80043a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80043aa:	2021      	movs	r0, #33	; 0x21
 80043ac:	f7ff fc6f 	bl	8003c8e <send_cmd>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d121      	bne.n	80043fa <USER_SPI_ioctl+0x2c6>
 80043b6:	2100      	movs	r1, #0
 80043b8:	2026      	movs	r0, #38	; 0x26
 80043ba:	f7ff fc68 	bl	8003c8e <send_cmd>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d11a      	bne.n	80043fa <USER_SPI_ioctl+0x2c6>
 80043c4:	f247 5030 	movw	r0, #30000	; 0x7530
 80043c8:	f7ff fbb6 	bl	8003b38 <wait_ready>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d013      	beq.n	80043fa <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 80043d2:	2300      	movs	r3, #0
 80043d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80043d8:	e00f      	b.n	80043fa <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 80043da:	2304      	movs	r3, #4
 80043dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80043e0:	e00c      	b.n	80043fc <USER_SPI_ioctl+0x2c8>
		break;
 80043e2:	bf00      	nop
 80043e4:	e00a      	b.n	80043fc <USER_SPI_ioctl+0x2c8>
		break;
 80043e6:	bf00      	nop
 80043e8:	e008      	b.n	80043fc <USER_SPI_ioctl+0x2c8>
		break;
 80043ea:	bf00      	nop
 80043ec:	e006      	b.n	80043fc <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80043ee:	bf00      	nop
 80043f0:	e004      	b.n	80043fc <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80043f2:	bf00      	nop
 80043f4:	e002      	b.n	80043fc <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80043f6:	bf00      	nop
 80043f8:	e000      	b.n	80043fc <USER_SPI_ioctl+0x2c8>
		break;
 80043fa:	bf00      	nop
	}

	despiselect();
 80043fc:	f7ff fbc0 	bl	8003b80 <despiselect>

	return res;
 8004400:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004404:	4618      	mov	r0, r3
 8004406:	3730      	adds	r7, #48	; 0x30
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}
 800440c:	20000028 	.word	0x20000028
 8004410:	20000420 	.word	0x20000420

08004414 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	4603      	mov	r3, r0
 800441c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800441e:	79fb      	ldrb	r3, [r7, #7]
 8004420:	4a08      	ldr	r2, [pc, #32]	; (8004444 <disk_status+0x30>)
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	4413      	add	r3, r2
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	79fa      	ldrb	r2, [r7, #7]
 800442c:	4905      	ldr	r1, [pc, #20]	; (8004444 <disk_status+0x30>)
 800442e:	440a      	add	r2, r1
 8004430:	7a12      	ldrb	r2, [r2, #8]
 8004432:	4610      	mov	r0, r2
 8004434:	4798      	blx	r3
 8004436:	4603      	mov	r3, r0
 8004438:	73fb      	strb	r3, [r7, #15]
  return stat;
 800443a:	7bfb      	ldrb	r3, [r7, #15]
}
 800443c:	4618      	mov	r0, r3
 800443e:	3710      	adds	r7, #16
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}
 8004444:	20000454 	.word	0x20000454

08004448 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	4603      	mov	r3, r0
 8004450:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004452:	2300      	movs	r3, #0
 8004454:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8004456:	79fb      	ldrb	r3, [r7, #7]
 8004458:	4a0d      	ldr	r2, [pc, #52]	; (8004490 <disk_initialize+0x48>)
 800445a:	5cd3      	ldrb	r3, [r2, r3]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d111      	bne.n	8004484 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8004460:	79fb      	ldrb	r3, [r7, #7]
 8004462:	4a0b      	ldr	r2, [pc, #44]	; (8004490 <disk_initialize+0x48>)
 8004464:	2101      	movs	r1, #1
 8004466:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004468:	79fb      	ldrb	r3, [r7, #7]
 800446a:	4a09      	ldr	r2, [pc, #36]	; (8004490 <disk_initialize+0x48>)
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	4413      	add	r3, r2
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	79fa      	ldrb	r2, [r7, #7]
 8004476:	4906      	ldr	r1, [pc, #24]	; (8004490 <disk_initialize+0x48>)
 8004478:	440a      	add	r2, r1
 800447a:	7a12      	ldrb	r2, [r2, #8]
 800447c:	4610      	mov	r0, r2
 800447e:	4798      	blx	r3
 8004480:	4603      	mov	r3, r0
 8004482:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004484:	7bfb      	ldrb	r3, [r7, #15]
}
 8004486:	4618      	mov	r0, r3
 8004488:	3710      	adds	r7, #16
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	20000454 	.word	0x20000454

08004494 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004494:	b590      	push	{r4, r7, lr}
 8004496:	b087      	sub	sp, #28
 8004498:	af00      	add	r7, sp, #0
 800449a:	60b9      	str	r1, [r7, #8]
 800449c:	607a      	str	r2, [r7, #4]
 800449e:	603b      	str	r3, [r7, #0]
 80044a0:	4603      	mov	r3, r0
 80044a2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80044a4:	7bfb      	ldrb	r3, [r7, #15]
 80044a6:	4a0a      	ldr	r2, [pc, #40]	; (80044d0 <disk_read+0x3c>)
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	4413      	add	r3, r2
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	689c      	ldr	r4, [r3, #8]
 80044b0:	7bfb      	ldrb	r3, [r7, #15]
 80044b2:	4a07      	ldr	r2, [pc, #28]	; (80044d0 <disk_read+0x3c>)
 80044b4:	4413      	add	r3, r2
 80044b6:	7a18      	ldrb	r0, [r3, #8]
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	68b9      	ldr	r1, [r7, #8]
 80044be:	47a0      	blx	r4
 80044c0:	4603      	mov	r3, r0
 80044c2:	75fb      	strb	r3, [r7, #23]
  return res;
 80044c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	371c      	adds	r7, #28
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd90      	pop	{r4, r7, pc}
 80044ce:	bf00      	nop
 80044d0:	20000454 	.word	0x20000454

080044d4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80044d4:	b590      	push	{r4, r7, lr}
 80044d6:	b087      	sub	sp, #28
 80044d8:	af00      	add	r7, sp, #0
 80044da:	60b9      	str	r1, [r7, #8]
 80044dc:	607a      	str	r2, [r7, #4]
 80044de:	603b      	str	r3, [r7, #0]
 80044e0:	4603      	mov	r3, r0
 80044e2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80044e4:	7bfb      	ldrb	r3, [r7, #15]
 80044e6:	4a0a      	ldr	r2, [pc, #40]	; (8004510 <disk_write+0x3c>)
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	4413      	add	r3, r2
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	68dc      	ldr	r4, [r3, #12]
 80044f0:	7bfb      	ldrb	r3, [r7, #15]
 80044f2:	4a07      	ldr	r2, [pc, #28]	; (8004510 <disk_write+0x3c>)
 80044f4:	4413      	add	r3, r2
 80044f6:	7a18      	ldrb	r0, [r3, #8]
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	68b9      	ldr	r1, [r7, #8]
 80044fe:	47a0      	blx	r4
 8004500:	4603      	mov	r3, r0
 8004502:	75fb      	strb	r3, [r7, #23]
  return res;
 8004504:	7dfb      	ldrb	r3, [r7, #23]
}
 8004506:	4618      	mov	r0, r3
 8004508:	371c      	adds	r7, #28
 800450a:	46bd      	mov	sp, r7
 800450c:	bd90      	pop	{r4, r7, pc}
 800450e:	bf00      	nop
 8004510:	20000454 	.word	0x20000454

08004514 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	4603      	mov	r3, r0
 800451c:	603a      	str	r2, [r7, #0]
 800451e:	71fb      	strb	r3, [r7, #7]
 8004520:	460b      	mov	r3, r1
 8004522:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004524:	79fb      	ldrb	r3, [r7, #7]
 8004526:	4a09      	ldr	r2, [pc, #36]	; (800454c <disk_ioctl+0x38>)
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	4413      	add	r3, r2
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	691b      	ldr	r3, [r3, #16]
 8004530:	79fa      	ldrb	r2, [r7, #7]
 8004532:	4906      	ldr	r1, [pc, #24]	; (800454c <disk_ioctl+0x38>)
 8004534:	440a      	add	r2, r1
 8004536:	7a10      	ldrb	r0, [r2, #8]
 8004538:	79b9      	ldrb	r1, [r7, #6]
 800453a:	683a      	ldr	r2, [r7, #0]
 800453c:	4798      	blx	r3
 800453e:	4603      	mov	r3, r0
 8004540:	73fb      	strb	r3, [r7, #15]
  return res;
 8004542:	7bfb      	ldrb	r3, [r7, #15]
}
 8004544:	4618      	mov	r0, r3
 8004546:	3710      	adds	r7, #16
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}
 800454c:	20000454 	.word	0x20000454

08004550 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004550:	b480      	push	{r7}
 8004552:	b085      	sub	sp, #20
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	3301      	adds	r3, #1
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004560:	89fb      	ldrh	r3, [r7, #14]
 8004562:	021b      	lsls	r3, r3, #8
 8004564:	b21a      	sxth	r2, r3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	b21b      	sxth	r3, r3
 800456c:	4313      	orrs	r3, r2
 800456e:	b21b      	sxth	r3, r3
 8004570:	81fb      	strh	r3, [r7, #14]
	return rv;
 8004572:	89fb      	ldrh	r3, [r7, #14]
}
 8004574:	4618      	mov	r0, r3
 8004576:	3714      	adds	r7, #20
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr

08004580 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004580:	b480      	push	{r7}
 8004582:	b085      	sub	sp, #20
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	3303      	adds	r3, #3
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	021b      	lsls	r3, r3, #8
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	3202      	adds	r2, #2
 8004598:	7812      	ldrb	r2, [r2, #0]
 800459a:	4313      	orrs	r3, r2
 800459c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	021b      	lsls	r3, r3, #8
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	3201      	adds	r2, #1
 80045a6:	7812      	ldrb	r2, [r2, #0]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	021b      	lsls	r3, r3, #8
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	7812      	ldrb	r2, [r2, #0]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	60fb      	str	r3, [r7, #12]
	return rv;
 80045b8:	68fb      	ldr	r3, [r7, #12]
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3714      	adds	r7, #20
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr

080045c6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80045c6:	b480      	push	{r7}
 80045c8:	b083      	sub	sp, #12
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
 80045ce:	460b      	mov	r3, r1
 80045d0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	1c5a      	adds	r2, r3, #1
 80045d6:	607a      	str	r2, [r7, #4]
 80045d8:	887a      	ldrh	r2, [r7, #2]
 80045da:	b2d2      	uxtb	r2, r2
 80045dc:	701a      	strb	r2, [r3, #0]
 80045de:	887b      	ldrh	r3, [r7, #2]
 80045e0:	0a1b      	lsrs	r3, r3, #8
 80045e2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	1c5a      	adds	r2, r3, #1
 80045e8:	607a      	str	r2, [r7, #4]
 80045ea:	887a      	ldrh	r2, [r7, #2]
 80045ec:	b2d2      	uxtb	r2, r2
 80045ee:	701a      	strb	r2, [r3, #0]
}
 80045f0:	bf00      	nop
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr

080045fc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	1c5a      	adds	r2, r3, #1
 800460a:	607a      	str	r2, [r7, #4]
 800460c:	683a      	ldr	r2, [r7, #0]
 800460e:	b2d2      	uxtb	r2, r2
 8004610:	701a      	strb	r2, [r3, #0]
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	0a1b      	lsrs	r3, r3, #8
 8004616:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	1c5a      	adds	r2, r3, #1
 800461c:	607a      	str	r2, [r7, #4]
 800461e:	683a      	ldr	r2, [r7, #0]
 8004620:	b2d2      	uxtb	r2, r2
 8004622:	701a      	strb	r2, [r3, #0]
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	0a1b      	lsrs	r3, r3, #8
 8004628:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	1c5a      	adds	r2, r3, #1
 800462e:	607a      	str	r2, [r7, #4]
 8004630:	683a      	ldr	r2, [r7, #0]
 8004632:	b2d2      	uxtb	r2, r2
 8004634:	701a      	strb	r2, [r3, #0]
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	0a1b      	lsrs	r3, r3, #8
 800463a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	1c5a      	adds	r2, r3, #1
 8004640:	607a      	str	r2, [r7, #4]
 8004642:	683a      	ldr	r2, [r7, #0]
 8004644:	b2d2      	uxtb	r2, r2
 8004646:	701a      	strb	r2, [r3, #0]
}
 8004648:	bf00      	nop
 800464a:	370c      	adds	r7, #12
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004654:	b480      	push	{r7}
 8004656:	b087      	sub	sp, #28
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d00d      	beq.n	800468a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800466e:	693a      	ldr	r2, [r7, #16]
 8004670:	1c53      	adds	r3, r2, #1
 8004672:	613b      	str	r3, [r7, #16]
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	1c59      	adds	r1, r3, #1
 8004678:	6179      	str	r1, [r7, #20]
 800467a:	7812      	ldrb	r2, [r2, #0]
 800467c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	3b01      	subs	r3, #1
 8004682:	607b      	str	r3, [r7, #4]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d1f1      	bne.n	800466e <mem_cpy+0x1a>
	}
}
 800468a:	bf00      	nop
 800468c:	371c      	adds	r7, #28
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr

08004696 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004696:	b480      	push	{r7}
 8004698:	b087      	sub	sp, #28
 800469a:	af00      	add	r7, sp, #0
 800469c:	60f8      	str	r0, [r7, #12]
 800469e:	60b9      	str	r1, [r7, #8]
 80046a0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	1c5a      	adds	r2, r3, #1
 80046aa:	617a      	str	r2, [r7, #20]
 80046ac:	68ba      	ldr	r2, [r7, #8]
 80046ae:	b2d2      	uxtb	r2, r2
 80046b0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	3b01      	subs	r3, #1
 80046b6:	607b      	str	r3, [r7, #4]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d1f3      	bne.n	80046a6 <mem_set+0x10>
}
 80046be:	bf00      	nop
 80046c0:	bf00      	nop
 80046c2:	371c      	adds	r7, #28
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80046cc:	b480      	push	{r7}
 80046ce:	b089      	sub	sp, #36	; 0x24
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	61fb      	str	r3, [r7, #28]
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80046e0:	2300      	movs	r3, #0
 80046e2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	1c5a      	adds	r2, r3, #1
 80046e8:	61fa      	str	r2, [r7, #28]
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	4619      	mov	r1, r3
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	1c5a      	adds	r2, r3, #1
 80046f2:	61ba      	str	r2, [r7, #24]
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	1acb      	subs	r3, r1, r3
 80046f8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	3b01      	subs	r3, #1
 80046fe:	607b      	str	r3, [r7, #4]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d002      	beq.n	800470c <mem_cmp+0x40>
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d0eb      	beq.n	80046e4 <mem_cmp+0x18>

	return r;
 800470c:	697b      	ldr	r3, [r7, #20]
}
 800470e:	4618      	mov	r0, r3
 8004710:	3724      	adds	r7, #36	; 0x24
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr

0800471a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800471a:	b480      	push	{r7}
 800471c:	b083      	sub	sp, #12
 800471e:	af00      	add	r7, sp, #0
 8004720:	6078      	str	r0, [r7, #4]
 8004722:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004724:	e002      	b.n	800472c <chk_chr+0x12>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	3301      	adds	r3, #1
 800472a:	607b      	str	r3, [r7, #4]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d005      	beq.n	8004740 <chk_chr+0x26>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	461a      	mov	r2, r3
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	4293      	cmp	r3, r2
 800473e:	d1f2      	bne.n	8004726 <chk_chr+0xc>
	return *str;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	781b      	ldrb	r3, [r3, #0]
}
 8004744:	4618      	mov	r0, r3
 8004746:	370c      	adds	r7, #12
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004750:	b480      	push	{r7}
 8004752:	b085      	sub	sp, #20
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800475a:	2300      	movs	r3, #0
 800475c:	60bb      	str	r3, [r7, #8]
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	60fb      	str	r3, [r7, #12]
 8004762:	e029      	b.n	80047b8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004764:	4a27      	ldr	r2, [pc, #156]	; (8004804 <chk_lock+0xb4>)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	011b      	lsls	r3, r3, #4
 800476a:	4413      	add	r3, r2
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d01d      	beq.n	80047ae <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004772:	4a24      	ldr	r2, [pc, #144]	; (8004804 <chk_lock+0xb4>)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	011b      	lsls	r3, r3, #4
 8004778:	4413      	add	r3, r2
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	429a      	cmp	r2, r3
 8004782:	d116      	bne.n	80047b2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004784:	4a1f      	ldr	r2, [pc, #124]	; (8004804 <chk_lock+0xb4>)
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	011b      	lsls	r3, r3, #4
 800478a:	4413      	add	r3, r2
 800478c:	3304      	adds	r3, #4
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004794:	429a      	cmp	r2, r3
 8004796:	d10c      	bne.n	80047b2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004798:	4a1a      	ldr	r2, [pc, #104]	; (8004804 <chk_lock+0xb4>)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	011b      	lsls	r3, r3, #4
 800479e:	4413      	add	r3, r2
 80047a0:	3308      	adds	r3, #8
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d102      	bne.n	80047b2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80047ac:	e007      	b.n	80047be <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80047ae:	2301      	movs	r3, #1
 80047b0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	3301      	adds	r3, #1
 80047b6:	60fb      	str	r3, [r7, #12]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d9d2      	bls.n	8004764 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d109      	bne.n	80047d8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d102      	bne.n	80047d0 <chk_lock+0x80>
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	2b02      	cmp	r3, #2
 80047ce:	d101      	bne.n	80047d4 <chk_lock+0x84>
 80047d0:	2300      	movs	r3, #0
 80047d2:	e010      	b.n	80047f6 <chk_lock+0xa6>
 80047d4:	2312      	movs	r3, #18
 80047d6:	e00e      	b.n	80047f6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d108      	bne.n	80047f0 <chk_lock+0xa0>
 80047de:	4a09      	ldr	r2, [pc, #36]	; (8004804 <chk_lock+0xb4>)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	011b      	lsls	r3, r3, #4
 80047e4:	4413      	add	r3, r2
 80047e6:	330c      	adds	r3, #12
 80047e8:	881b      	ldrh	r3, [r3, #0]
 80047ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047ee:	d101      	bne.n	80047f4 <chk_lock+0xa4>
 80047f0:	2310      	movs	r3, #16
 80047f2:	e000      	b.n	80047f6 <chk_lock+0xa6>
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3714      	adds	r7, #20
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr
 8004802:	bf00      	nop
 8004804:	20000434 	.word	0x20000434

08004808 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004808:	b480      	push	{r7}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800480e:	2300      	movs	r3, #0
 8004810:	607b      	str	r3, [r7, #4]
 8004812:	e002      	b.n	800481a <enq_lock+0x12>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	3301      	adds	r3, #1
 8004818:	607b      	str	r3, [r7, #4]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2b01      	cmp	r3, #1
 800481e:	d806      	bhi.n	800482e <enq_lock+0x26>
 8004820:	4a09      	ldr	r2, [pc, #36]	; (8004848 <enq_lock+0x40>)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	011b      	lsls	r3, r3, #4
 8004826:	4413      	add	r3, r2
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d1f2      	bne.n	8004814 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2b02      	cmp	r3, #2
 8004832:	bf14      	ite	ne
 8004834:	2301      	movne	r3, #1
 8004836:	2300      	moveq	r3, #0
 8004838:	b2db      	uxtb	r3, r3
}
 800483a:	4618      	mov	r0, r3
 800483c:	370c      	adds	r7, #12
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop
 8004848:	20000434 	.word	0x20000434

0800484c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800484c:	b480      	push	{r7}
 800484e:	b085      	sub	sp, #20
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004856:	2300      	movs	r3, #0
 8004858:	60fb      	str	r3, [r7, #12]
 800485a:	e01f      	b.n	800489c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800485c:	4a41      	ldr	r2, [pc, #260]	; (8004964 <inc_lock+0x118>)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	011b      	lsls	r3, r3, #4
 8004862:	4413      	add	r3, r2
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	429a      	cmp	r2, r3
 800486c:	d113      	bne.n	8004896 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800486e:	4a3d      	ldr	r2, [pc, #244]	; (8004964 <inc_lock+0x118>)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	011b      	lsls	r3, r3, #4
 8004874:	4413      	add	r3, r2
 8004876:	3304      	adds	r3, #4
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800487e:	429a      	cmp	r2, r3
 8004880:	d109      	bne.n	8004896 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8004882:	4a38      	ldr	r2, [pc, #224]	; (8004964 <inc_lock+0x118>)
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	011b      	lsls	r3, r3, #4
 8004888:	4413      	add	r3, r2
 800488a:	3308      	adds	r3, #8
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8004892:	429a      	cmp	r2, r3
 8004894:	d006      	beq.n	80048a4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	3301      	adds	r3, #1
 800489a:	60fb      	str	r3, [r7, #12]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d9dc      	bls.n	800485c <inc_lock+0x10>
 80048a2:	e000      	b.n	80048a6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80048a4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d132      	bne.n	8004912 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80048ac:	2300      	movs	r3, #0
 80048ae:	60fb      	str	r3, [r7, #12]
 80048b0:	e002      	b.n	80048b8 <inc_lock+0x6c>
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	3301      	adds	r3, #1
 80048b6:	60fb      	str	r3, [r7, #12]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d806      	bhi.n	80048cc <inc_lock+0x80>
 80048be:	4a29      	ldr	r2, [pc, #164]	; (8004964 <inc_lock+0x118>)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	011b      	lsls	r3, r3, #4
 80048c4:	4413      	add	r3, r2
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d1f2      	bne.n	80048b2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d101      	bne.n	80048d6 <inc_lock+0x8a>
 80048d2:	2300      	movs	r3, #0
 80048d4:	e040      	b.n	8004958 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	4922      	ldr	r1, [pc, #136]	; (8004964 <inc_lock+0x118>)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	011b      	lsls	r3, r3, #4
 80048e0:	440b      	add	r3, r1
 80048e2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	689a      	ldr	r2, [r3, #8]
 80048e8:	491e      	ldr	r1, [pc, #120]	; (8004964 <inc_lock+0x118>)
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	011b      	lsls	r3, r3, #4
 80048ee:	440b      	add	r3, r1
 80048f0:	3304      	adds	r3, #4
 80048f2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	695a      	ldr	r2, [r3, #20]
 80048f8:	491a      	ldr	r1, [pc, #104]	; (8004964 <inc_lock+0x118>)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	011b      	lsls	r3, r3, #4
 80048fe:	440b      	add	r3, r1
 8004900:	3308      	adds	r3, #8
 8004902:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8004904:	4a17      	ldr	r2, [pc, #92]	; (8004964 <inc_lock+0x118>)
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	011b      	lsls	r3, r3, #4
 800490a:	4413      	add	r3, r2
 800490c:	330c      	adds	r3, #12
 800490e:	2200      	movs	r2, #0
 8004910:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d009      	beq.n	800492c <inc_lock+0xe0>
 8004918:	4a12      	ldr	r2, [pc, #72]	; (8004964 <inc_lock+0x118>)
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	011b      	lsls	r3, r3, #4
 800491e:	4413      	add	r3, r2
 8004920:	330c      	adds	r3, #12
 8004922:	881b      	ldrh	r3, [r3, #0]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d001      	beq.n	800492c <inc_lock+0xe0>
 8004928:	2300      	movs	r3, #0
 800492a:	e015      	b.n	8004958 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d108      	bne.n	8004944 <inc_lock+0xf8>
 8004932:	4a0c      	ldr	r2, [pc, #48]	; (8004964 <inc_lock+0x118>)
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	011b      	lsls	r3, r3, #4
 8004938:	4413      	add	r3, r2
 800493a:	330c      	adds	r3, #12
 800493c:	881b      	ldrh	r3, [r3, #0]
 800493e:	3301      	adds	r3, #1
 8004940:	b29a      	uxth	r2, r3
 8004942:	e001      	b.n	8004948 <inc_lock+0xfc>
 8004944:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004948:	4906      	ldr	r1, [pc, #24]	; (8004964 <inc_lock+0x118>)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	011b      	lsls	r3, r3, #4
 800494e:	440b      	add	r3, r1
 8004950:	330c      	adds	r3, #12
 8004952:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	3301      	adds	r3, #1
}
 8004958:	4618      	mov	r0, r3
 800495a:	3714      	adds	r7, #20
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr
 8004964:	20000434 	.word	0x20000434

08004968 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004968:	b480      	push	{r7}
 800496a:	b085      	sub	sp, #20
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	3b01      	subs	r3, #1
 8004974:	607b      	str	r3, [r7, #4]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2b01      	cmp	r3, #1
 800497a:	d825      	bhi.n	80049c8 <dec_lock+0x60>
		n = Files[i].ctr;
 800497c:	4a17      	ldr	r2, [pc, #92]	; (80049dc <dec_lock+0x74>)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	011b      	lsls	r3, r3, #4
 8004982:	4413      	add	r3, r2
 8004984:	330c      	adds	r3, #12
 8004986:	881b      	ldrh	r3, [r3, #0]
 8004988:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800498a:	89fb      	ldrh	r3, [r7, #14]
 800498c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004990:	d101      	bne.n	8004996 <dec_lock+0x2e>
 8004992:	2300      	movs	r3, #0
 8004994:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8004996:	89fb      	ldrh	r3, [r7, #14]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d002      	beq.n	80049a2 <dec_lock+0x3a>
 800499c:	89fb      	ldrh	r3, [r7, #14]
 800499e:	3b01      	subs	r3, #1
 80049a0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80049a2:	4a0e      	ldr	r2, [pc, #56]	; (80049dc <dec_lock+0x74>)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	011b      	lsls	r3, r3, #4
 80049a8:	4413      	add	r3, r2
 80049aa:	330c      	adds	r3, #12
 80049ac:	89fa      	ldrh	r2, [r7, #14]
 80049ae:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80049b0:	89fb      	ldrh	r3, [r7, #14]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d105      	bne.n	80049c2 <dec_lock+0x5a>
 80049b6:	4a09      	ldr	r2, [pc, #36]	; (80049dc <dec_lock+0x74>)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	011b      	lsls	r3, r3, #4
 80049bc:	4413      	add	r3, r2
 80049be:	2200      	movs	r2, #0
 80049c0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80049c2:	2300      	movs	r3, #0
 80049c4:	737b      	strb	r3, [r7, #13]
 80049c6:	e001      	b.n	80049cc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80049c8:	2302      	movs	r3, #2
 80049ca:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80049cc:	7b7b      	ldrb	r3, [r7, #13]
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3714      	adds	r7, #20
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop
 80049dc:	20000434 	.word	0x20000434

080049e0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b085      	sub	sp, #20
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80049e8:	2300      	movs	r3, #0
 80049ea:	60fb      	str	r3, [r7, #12]
 80049ec:	e010      	b.n	8004a10 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80049ee:	4a0d      	ldr	r2, [pc, #52]	; (8004a24 <clear_lock+0x44>)
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	011b      	lsls	r3, r3, #4
 80049f4:	4413      	add	r3, r2
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d105      	bne.n	8004a0a <clear_lock+0x2a>
 80049fe:	4a09      	ldr	r2, [pc, #36]	; (8004a24 <clear_lock+0x44>)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	011b      	lsls	r3, r3, #4
 8004a04:	4413      	add	r3, r2
 8004a06:	2200      	movs	r2, #0
 8004a08:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	60fb      	str	r3, [r7, #12]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d9eb      	bls.n	80049ee <clear_lock+0xe>
	}
}
 8004a16:	bf00      	nop
 8004a18:	bf00      	nop
 8004a1a:	3714      	adds	r7, #20
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr
 8004a24:	20000434 	.word	0x20000434

08004a28 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b086      	sub	sp, #24
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004a30:	2300      	movs	r3, #0
 8004a32:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	78db      	ldrb	r3, [r3, #3]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d034      	beq.n	8004aa6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a40:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	7858      	ldrb	r0, [r3, #1]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	697a      	ldr	r2, [r7, #20]
 8004a50:	f7ff fd40 	bl	80044d4 <disk_write>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d002      	beq.n	8004a60 <sync_window+0x38>
			res = FR_DISK_ERR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	73fb      	strb	r3, [r7, #15]
 8004a5e:	e022      	b.n	8004aa6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a1b      	ldr	r3, [r3, #32]
 8004a6a:	697a      	ldr	r2, [r7, #20]
 8004a6c:	1ad2      	subs	r2, r2, r3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	699b      	ldr	r3, [r3, #24]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d217      	bcs.n	8004aa6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	789b      	ldrb	r3, [r3, #2]
 8004a7a:	613b      	str	r3, [r7, #16]
 8004a7c:	e010      	b.n	8004aa0 <sync_window+0x78>
					wsect += fs->fsize;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	699b      	ldr	r3, [r3, #24]
 8004a82:	697a      	ldr	r2, [r7, #20]
 8004a84:	4413      	add	r3, r2
 8004a86:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	7858      	ldrb	r0, [r3, #1]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004a92:	2301      	movs	r3, #1
 8004a94:	697a      	ldr	r2, [r7, #20]
 8004a96:	f7ff fd1d 	bl	80044d4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	3b01      	subs	r3, #1
 8004a9e:	613b      	str	r3, [r7, #16]
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d8eb      	bhi.n	8004a7e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8004aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3718      	adds	r7, #24
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8004aba:	2300      	movs	r3, #0
 8004abc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac2:	683a      	ldr	r2, [r7, #0]
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d01b      	beq.n	8004b00 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f7ff ffad 	bl	8004a28 <sync_window>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004ad2:	7bfb      	ldrb	r3, [r7, #15]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d113      	bne.n	8004b00 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	7858      	ldrb	r0, [r3, #1]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	683a      	ldr	r2, [r7, #0]
 8004ae6:	f7ff fcd5 	bl	8004494 <disk_read>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d004      	beq.n	8004afa <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004af0:	f04f 33ff 	mov.w	r3, #4294967295
 8004af4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	683a      	ldr	r2, [r7, #0]
 8004afe:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8004b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3710      	adds	r7, #16
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
	...

08004b0c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f7ff ff87 	bl	8004a28 <sync_window>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004b1e:	7bfb      	ldrb	r3, [r7, #15]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d158      	bne.n	8004bd6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	2b03      	cmp	r3, #3
 8004b2a:	d148      	bne.n	8004bbe <sync_fs+0xb2>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	791b      	ldrb	r3, [r3, #4]
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d144      	bne.n	8004bbe <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	3330      	adds	r3, #48	; 0x30
 8004b38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b3c:	2100      	movs	r1, #0
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f7ff fda9 	bl	8004696 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	3330      	adds	r3, #48	; 0x30
 8004b48:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004b4c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8004b50:	4618      	mov	r0, r3
 8004b52:	f7ff fd38 	bl	80045c6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	3330      	adds	r3, #48	; 0x30
 8004b5a:	4921      	ldr	r1, [pc, #132]	; (8004be0 <sync_fs+0xd4>)
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f7ff fd4d 	bl	80045fc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	3330      	adds	r3, #48	; 0x30
 8004b66:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004b6a:	491e      	ldr	r1, [pc, #120]	; (8004be4 <sync_fs+0xd8>)
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f7ff fd45 	bl	80045fc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	3330      	adds	r3, #48	; 0x30
 8004b76:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	4619      	mov	r1, r3
 8004b80:	4610      	mov	r0, r2
 8004b82:	f7ff fd3b 	bl	80045fc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	3330      	adds	r3, #48	; 0x30
 8004b8a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	4619      	mov	r1, r3
 8004b94:	4610      	mov	r0, r2
 8004b96:	f7ff fd31 	bl	80045fc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	69db      	ldr	r3, [r3, #28]
 8004b9e:	1c5a      	adds	r2, r3, #1
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	7858      	ldrb	r0, [r3, #1]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	f7ff fc8e 	bl	80044d4 <disk_write>
			fs->fsi_flag = 0;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	785b      	ldrb	r3, [r3, #1]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	2100      	movs	r1, #0
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f7ff fca4 	bl	8004514 <disk_ioctl>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d001      	beq.n	8004bd6 <sync_fs+0xca>
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8004bd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3710      	adds	r7, #16
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	41615252 	.word	0x41615252
 8004be4:	61417272 	.word	0x61417272

08004be8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	3b02      	subs	r3, #2
 8004bf6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	695b      	ldr	r3, [r3, #20]
 8004bfc:	3b02      	subs	r3, #2
 8004bfe:	683a      	ldr	r2, [r7, #0]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d301      	bcc.n	8004c08 <clust2sect+0x20>
 8004c04:	2300      	movs	r3, #0
 8004c06:	e008      	b.n	8004c1a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	895b      	ldrh	r3, [r3, #10]
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	fb03 f202 	mul.w	r2, r3, r2
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c18:	4413      	add	r3, r2
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	370c      	adds	r7, #12
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr

08004c26 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8004c26:	b580      	push	{r7, lr}
 8004c28:	b086      	sub	sp, #24
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
 8004c2e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d904      	bls.n	8004c46 <get_fat+0x20>
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	695b      	ldr	r3, [r3, #20]
 8004c40:	683a      	ldr	r2, [r7, #0]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d302      	bcc.n	8004c4c <get_fat+0x26>
		val = 1;	/* Internal error */
 8004c46:	2301      	movs	r3, #1
 8004c48:	617b      	str	r3, [r7, #20]
 8004c4a:	e08f      	b.n	8004d6c <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004c4c:	f04f 33ff 	mov.w	r3, #4294967295
 8004c50:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	2b03      	cmp	r3, #3
 8004c58:	d062      	beq.n	8004d20 <get_fat+0xfa>
 8004c5a:	2b03      	cmp	r3, #3
 8004c5c:	dc7c      	bgt.n	8004d58 <get_fat+0x132>
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d002      	beq.n	8004c68 <get_fat+0x42>
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d042      	beq.n	8004cec <get_fat+0xc6>
 8004c66:	e077      	b.n	8004d58 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	60fb      	str	r3, [r7, #12]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	085b      	lsrs	r3, r3, #1
 8004c70:	68fa      	ldr	r2, [r7, #12]
 8004c72:	4413      	add	r3, r2
 8004c74:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	6a1a      	ldr	r2, [r3, #32]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	0a5b      	lsrs	r3, r3, #9
 8004c7e:	4413      	add	r3, r2
 8004c80:	4619      	mov	r1, r3
 8004c82:	6938      	ldr	r0, [r7, #16]
 8004c84:	f7ff ff14 	bl	8004ab0 <move_window>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d167      	bne.n	8004d5e <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	1c5a      	adds	r2, r3, #1
 8004c92:	60fa      	str	r2, [r7, #12]
 8004c94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c98:	693a      	ldr	r2, [r7, #16]
 8004c9a:	4413      	add	r3, r2
 8004c9c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004ca0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	6a1a      	ldr	r2, [r3, #32]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	0a5b      	lsrs	r3, r3, #9
 8004caa:	4413      	add	r3, r2
 8004cac:	4619      	mov	r1, r3
 8004cae:	6938      	ldr	r0, [r7, #16]
 8004cb0:	f7ff fefe 	bl	8004ab0 <move_window>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d153      	bne.n	8004d62 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cc0:	693a      	ldr	r2, [r7, #16]
 8004cc2:	4413      	add	r3, r2
 8004cc4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004cc8:	021b      	lsls	r3, r3, #8
 8004cca:	461a      	mov	r2, r3
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	f003 0301 	and.w	r3, r3, #1
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d002      	beq.n	8004ce2 <get_fat+0xbc>
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	091b      	lsrs	r3, r3, #4
 8004ce0:	e002      	b.n	8004ce8 <get_fat+0xc2>
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ce8:	617b      	str	r3, [r7, #20]
			break;
 8004cea:	e03f      	b.n	8004d6c <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	6a1a      	ldr	r2, [r3, #32]
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	0a1b      	lsrs	r3, r3, #8
 8004cf4:	4413      	add	r3, r2
 8004cf6:	4619      	mov	r1, r3
 8004cf8:	6938      	ldr	r0, [r7, #16]
 8004cfa:	f7ff fed9 	bl	8004ab0 <move_window>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d130      	bne.n	8004d66 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	005b      	lsls	r3, r3, #1
 8004d0e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8004d12:	4413      	add	r3, r2
 8004d14:	4618      	mov	r0, r3
 8004d16:	f7ff fc1b 	bl	8004550 <ld_word>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	617b      	str	r3, [r7, #20]
			break;
 8004d1e:	e025      	b.n	8004d6c <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	6a1a      	ldr	r2, [r3, #32]
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	09db      	lsrs	r3, r3, #7
 8004d28:	4413      	add	r3, r2
 8004d2a:	4619      	mov	r1, r3
 8004d2c:	6938      	ldr	r0, [r7, #16]
 8004d2e:	f7ff febf 	bl	8004ab0 <move_window>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d118      	bne.n	8004d6a <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004d46:	4413      	add	r3, r2
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f7ff fc19 	bl	8004580 <ld_dword>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004d54:	617b      	str	r3, [r7, #20]
			break;
 8004d56:	e009      	b.n	8004d6c <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8004d58:	2301      	movs	r3, #1
 8004d5a:	617b      	str	r3, [r7, #20]
 8004d5c:	e006      	b.n	8004d6c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004d5e:	bf00      	nop
 8004d60:	e004      	b.n	8004d6c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004d62:	bf00      	nop
 8004d64:	e002      	b.n	8004d6c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004d66:	bf00      	nop
 8004d68:	e000      	b.n	8004d6c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004d6a:	bf00      	nop
		}
	}

	return val;
 8004d6c:	697b      	ldr	r3, [r7, #20]
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3718      	adds	r7, #24
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}

08004d76 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8004d76:	b590      	push	{r4, r7, lr}
 8004d78:	b089      	sub	sp, #36	; 0x24
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	60f8      	str	r0, [r7, #12]
 8004d7e:	60b9      	str	r1, [r7, #8]
 8004d80:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8004d82:	2302      	movs	r3, #2
 8004d84:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	f240 80d2 	bls.w	8004f32 <put_fat+0x1bc>
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	695b      	ldr	r3, [r3, #20]
 8004d92:	68ba      	ldr	r2, [r7, #8]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	f080 80cc 	bcs.w	8004f32 <put_fat+0x1bc>
		switch (fs->fs_type) {
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	781b      	ldrb	r3, [r3, #0]
 8004d9e:	2b03      	cmp	r3, #3
 8004da0:	f000 8096 	beq.w	8004ed0 <put_fat+0x15a>
 8004da4:	2b03      	cmp	r3, #3
 8004da6:	f300 80cd 	bgt.w	8004f44 <put_fat+0x1ce>
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d002      	beq.n	8004db4 <put_fat+0x3e>
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d06e      	beq.n	8004e90 <put_fat+0x11a>
 8004db2:	e0c7      	b.n	8004f44 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	61bb      	str	r3, [r7, #24]
 8004db8:	69bb      	ldr	r3, [r7, #24]
 8004dba:	085b      	lsrs	r3, r3, #1
 8004dbc:	69ba      	ldr	r2, [r7, #24]
 8004dbe:	4413      	add	r3, r2
 8004dc0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6a1a      	ldr	r2, [r3, #32]
 8004dc6:	69bb      	ldr	r3, [r7, #24]
 8004dc8:	0a5b      	lsrs	r3, r3, #9
 8004dca:	4413      	add	r3, r2
 8004dcc:	4619      	mov	r1, r3
 8004dce:	68f8      	ldr	r0, [r7, #12]
 8004dd0:	f7ff fe6e 	bl	8004ab0 <move_window>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004dd8:	7ffb      	ldrb	r3, [r7, #31]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	f040 80ab 	bne.w	8004f36 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	1c59      	adds	r1, r3, #1
 8004dea:	61b9      	str	r1, [r7, #24]
 8004dec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004df0:	4413      	add	r3, r2
 8004df2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	f003 0301 	and.w	r3, r3, #1
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d00d      	beq.n	8004e1a <put_fat+0xa4>
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	b25b      	sxtb	r3, r3
 8004e04:	f003 030f 	and.w	r3, r3, #15
 8004e08:	b25a      	sxtb	r2, r3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	011b      	lsls	r3, r3, #4
 8004e10:	b25b      	sxtb	r3, r3
 8004e12:	4313      	orrs	r3, r2
 8004e14:	b25b      	sxtb	r3, r3
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	e001      	b.n	8004e1e <put_fat+0xa8>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	697a      	ldr	r2, [r7, #20]
 8004e20:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2201      	movs	r2, #1
 8004e26:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6a1a      	ldr	r2, [r3, #32]
 8004e2c:	69bb      	ldr	r3, [r7, #24]
 8004e2e:	0a5b      	lsrs	r3, r3, #9
 8004e30:	4413      	add	r3, r2
 8004e32:	4619      	mov	r1, r3
 8004e34:	68f8      	ldr	r0, [r7, #12]
 8004e36:	f7ff fe3b 	bl	8004ab0 <move_window>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004e3e:	7ffb      	ldrb	r3, [r7, #31]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d17a      	bne.n	8004f3a <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e50:	4413      	add	r3, r2
 8004e52:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	f003 0301 	and.w	r3, r3, #1
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d003      	beq.n	8004e66 <put_fat+0xf0>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	091b      	lsrs	r3, r3, #4
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	e00e      	b.n	8004e84 <put_fat+0x10e>
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	b25b      	sxtb	r3, r3
 8004e6c:	f023 030f 	bic.w	r3, r3, #15
 8004e70:	b25a      	sxtb	r2, r3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	0a1b      	lsrs	r3, r3, #8
 8004e76:	b25b      	sxtb	r3, r3
 8004e78:	f003 030f 	and.w	r3, r3, #15
 8004e7c:	b25b      	sxtb	r3, r3
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	b25b      	sxtb	r3, r3
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	697a      	ldr	r2, [r7, #20]
 8004e86:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	70da      	strb	r2, [r3, #3]
			break;
 8004e8e:	e059      	b.n	8004f44 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6a1a      	ldr	r2, [r3, #32]
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	0a1b      	lsrs	r3, r3, #8
 8004e98:	4413      	add	r3, r2
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	68f8      	ldr	r0, [r7, #12]
 8004e9e:	f7ff fe07 	bl	8004ab0 <move_window>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004ea6:	7ffb      	ldrb	r3, [r7, #31]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d148      	bne.n	8004f3e <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	005b      	lsls	r3, r3, #1
 8004eb6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8004eba:	4413      	add	r3, r2
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	b292      	uxth	r2, r2
 8004ec0:	4611      	mov	r1, r2
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f7ff fb7f 	bl	80045c6 <st_word>
			fs->wflag = 1;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	70da      	strb	r2, [r3, #3]
			break;
 8004ece:	e039      	b.n	8004f44 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6a1a      	ldr	r2, [r3, #32]
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	09db      	lsrs	r3, r3, #7
 8004ed8:	4413      	add	r3, r2
 8004eda:	4619      	mov	r1, r3
 8004edc:	68f8      	ldr	r0, [r7, #12]
 8004ede:	f7ff fde7 	bl	8004ab0 <move_window>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004ee6:	7ffb      	ldrb	r3, [r7, #31]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d12a      	bne.n	8004f42 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004f00:	4413      	add	r3, r2
 8004f02:	4618      	mov	r0, r3
 8004f04:	f7ff fb3c 	bl	8004580 <ld_dword>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004f0e:	4323      	orrs	r3, r4
 8004f10:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004f20:	4413      	add	r3, r2
 8004f22:	6879      	ldr	r1, [r7, #4]
 8004f24:	4618      	mov	r0, r3
 8004f26:	f7ff fb69 	bl	80045fc <st_dword>
			fs->wflag = 1;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	70da      	strb	r2, [r3, #3]
			break;
 8004f30:	e008      	b.n	8004f44 <put_fat+0x1ce>
		}
	}
 8004f32:	bf00      	nop
 8004f34:	e006      	b.n	8004f44 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8004f36:	bf00      	nop
 8004f38:	e004      	b.n	8004f44 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8004f3a:	bf00      	nop
 8004f3c:	e002      	b.n	8004f44 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8004f3e:	bf00      	nop
 8004f40:	e000      	b.n	8004f44 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8004f42:	bf00      	nop
	return res;
 8004f44:	7ffb      	ldrb	r3, [r7, #31]
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3724      	adds	r7, #36	; 0x24
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd90      	pop	{r4, r7, pc}

08004f4e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8004f4e:	b580      	push	{r7, lr}
 8004f50:	b088      	sub	sp, #32
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	60f8      	str	r0, [r7, #12]
 8004f56:	60b9      	str	r1, [r7, #8]
 8004f58:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d904      	bls.n	8004f74 <remove_chain+0x26>
 8004f6a:	69bb      	ldr	r3, [r7, #24]
 8004f6c:	695b      	ldr	r3, [r3, #20]
 8004f6e:	68ba      	ldr	r2, [r7, #8]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d301      	bcc.n	8004f78 <remove_chain+0x2a>
 8004f74:	2302      	movs	r3, #2
 8004f76:	e04b      	b.n	8005010 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d00c      	beq.n	8004f98 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8004f7e:	f04f 32ff 	mov.w	r2, #4294967295
 8004f82:	6879      	ldr	r1, [r7, #4]
 8004f84:	69b8      	ldr	r0, [r7, #24]
 8004f86:	f7ff fef6 	bl	8004d76 <put_fat>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8004f8e:	7ffb      	ldrb	r3, [r7, #31]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d001      	beq.n	8004f98 <remove_chain+0x4a>
 8004f94:	7ffb      	ldrb	r3, [r7, #31]
 8004f96:	e03b      	b.n	8005010 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8004f98:	68b9      	ldr	r1, [r7, #8]
 8004f9a:	68f8      	ldr	r0, [r7, #12]
 8004f9c:	f7ff fe43 	bl	8004c26 <get_fat>
 8004fa0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d031      	beq.n	800500c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d101      	bne.n	8004fb2 <remove_chain+0x64>
 8004fae:	2302      	movs	r3, #2
 8004fb0:	e02e      	b.n	8005010 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fb8:	d101      	bne.n	8004fbe <remove_chain+0x70>
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e028      	b.n	8005010 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	68b9      	ldr	r1, [r7, #8]
 8004fc2:	69b8      	ldr	r0, [r7, #24]
 8004fc4:	f7ff fed7 	bl	8004d76 <put_fat>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8004fcc:	7ffb      	ldrb	r3, [r7, #31]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d001      	beq.n	8004fd6 <remove_chain+0x88>
 8004fd2:	7ffb      	ldrb	r3, [r7, #31]
 8004fd4:	e01c      	b.n	8005010 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8004fd6:	69bb      	ldr	r3, [r7, #24]
 8004fd8:	691a      	ldr	r2, [r3, #16]
 8004fda:	69bb      	ldr	r3, [r7, #24]
 8004fdc:	695b      	ldr	r3, [r3, #20]
 8004fde:	3b02      	subs	r3, #2
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d20b      	bcs.n	8004ffc <remove_chain+0xae>
			fs->free_clst++;
 8004fe4:	69bb      	ldr	r3, [r7, #24]
 8004fe6:	691b      	ldr	r3, [r3, #16]
 8004fe8:	1c5a      	adds	r2, r3, #1
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8004fee:	69bb      	ldr	r3, [r7, #24]
 8004ff0:	791b      	ldrb	r3, [r3, #4]
 8004ff2:	f043 0301 	orr.w	r3, r3, #1
 8004ff6:	b2da      	uxtb	r2, r3
 8004ff8:	69bb      	ldr	r3, [r7, #24]
 8004ffa:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005000:	69bb      	ldr	r3, [r7, #24]
 8005002:	695b      	ldr	r3, [r3, #20]
 8005004:	68ba      	ldr	r2, [r7, #8]
 8005006:	429a      	cmp	r2, r3
 8005008:	d3c6      	bcc.n	8004f98 <remove_chain+0x4a>
 800500a:	e000      	b.n	800500e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800500c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800500e:	2300      	movs	r3, #0
}
 8005010:	4618      	mov	r0, r3
 8005012:	3720      	adds	r7, #32
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b088      	sub	sp, #32
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d10d      	bne.n	800504a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005034:	69bb      	ldr	r3, [r7, #24]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d004      	beq.n	8005044 <create_chain+0x2c>
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	695b      	ldr	r3, [r3, #20]
 800503e:	69ba      	ldr	r2, [r7, #24]
 8005040:	429a      	cmp	r2, r3
 8005042:	d31b      	bcc.n	800507c <create_chain+0x64>
 8005044:	2301      	movs	r3, #1
 8005046:	61bb      	str	r3, [r7, #24]
 8005048:	e018      	b.n	800507c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800504a:	6839      	ldr	r1, [r7, #0]
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f7ff fdea 	bl	8004c26 <get_fat>
 8005052:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2b01      	cmp	r3, #1
 8005058:	d801      	bhi.n	800505e <create_chain+0x46>
 800505a:	2301      	movs	r3, #1
 800505c:	e070      	b.n	8005140 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005064:	d101      	bne.n	800506a <create_chain+0x52>
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	e06a      	b.n	8005140 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	695b      	ldr	r3, [r3, #20]
 800506e:	68fa      	ldr	r2, [r7, #12]
 8005070:	429a      	cmp	r2, r3
 8005072:	d201      	bcs.n	8005078 <create_chain+0x60>
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	e063      	b.n	8005140 <create_chain+0x128>
		scl = clst;
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800507c:	69bb      	ldr	r3, [r7, #24]
 800507e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	3301      	adds	r3, #1
 8005084:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	695b      	ldr	r3, [r3, #20]
 800508a:	69fa      	ldr	r2, [r7, #28]
 800508c:	429a      	cmp	r2, r3
 800508e:	d307      	bcc.n	80050a0 <create_chain+0x88>
				ncl = 2;
 8005090:	2302      	movs	r3, #2
 8005092:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8005094:	69fa      	ldr	r2, [r7, #28]
 8005096:	69bb      	ldr	r3, [r7, #24]
 8005098:	429a      	cmp	r2, r3
 800509a:	d901      	bls.n	80050a0 <create_chain+0x88>
 800509c:	2300      	movs	r3, #0
 800509e:	e04f      	b.n	8005140 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80050a0:	69f9      	ldr	r1, [r7, #28]
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f7ff fdbf 	bl	8004c26 <get_fat>
 80050a8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d00e      	beq.n	80050ce <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d003      	beq.n	80050be <create_chain+0xa6>
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050bc:	d101      	bne.n	80050c2 <create_chain+0xaa>
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	e03e      	b.n	8005140 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80050c2:	69fa      	ldr	r2, [r7, #28]
 80050c4:	69bb      	ldr	r3, [r7, #24]
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d1da      	bne.n	8005080 <create_chain+0x68>
 80050ca:	2300      	movs	r3, #0
 80050cc:	e038      	b.n	8005140 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80050ce:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80050d0:	f04f 32ff 	mov.w	r2, #4294967295
 80050d4:	69f9      	ldr	r1, [r7, #28]
 80050d6:	6938      	ldr	r0, [r7, #16]
 80050d8:	f7ff fe4d 	bl	8004d76 <put_fat>
 80050dc:	4603      	mov	r3, r0
 80050de:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80050e0:	7dfb      	ldrb	r3, [r7, #23]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d109      	bne.n	80050fa <create_chain+0xe2>
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d006      	beq.n	80050fa <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80050ec:	69fa      	ldr	r2, [r7, #28]
 80050ee:	6839      	ldr	r1, [r7, #0]
 80050f0:	6938      	ldr	r0, [r7, #16]
 80050f2:	f7ff fe40 	bl	8004d76 <put_fat>
 80050f6:	4603      	mov	r3, r0
 80050f8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80050fa:	7dfb      	ldrb	r3, [r7, #23]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d116      	bne.n	800512e <create_chain+0x116>
		fs->last_clst = ncl;
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	69fa      	ldr	r2, [r7, #28]
 8005104:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	691a      	ldr	r2, [r3, #16]
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	695b      	ldr	r3, [r3, #20]
 800510e:	3b02      	subs	r3, #2
 8005110:	429a      	cmp	r2, r3
 8005112:	d804      	bhi.n	800511e <create_chain+0x106>
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	691b      	ldr	r3, [r3, #16]
 8005118:	1e5a      	subs	r2, r3, #1
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	791b      	ldrb	r3, [r3, #4]
 8005122:	f043 0301 	orr.w	r3, r3, #1
 8005126:	b2da      	uxtb	r2, r3
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	711a      	strb	r2, [r3, #4]
 800512c:	e007      	b.n	800513e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800512e:	7dfb      	ldrb	r3, [r7, #23]
 8005130:	2b01      	cmp	r3, #1
 8005132:	d102      	bne.n	800513a <create_chain+0x122>
 8005134:	f04f 33ff 	mov.w	r3, #4294967295
 8005138:	e000      	b.n	800513c <create_chain+0x124>
 800513a:	2301      	movs	r3, #1
 800513c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800513e:	69fb      	ldr	r3, [r7, #28]
}
 8005140:	4618      	mov	r0, r3
 8005142:	3720      	adds	r7, #32
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005148:	b480      	push	{r7}
 800514a:	b087      	sub	sp, #28
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800515c:	3304      	adds	r3, #4
 800515e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	0a5b      	lsrs	r3, r3, #9
 8005164:	68fa      	ldr	r2, [r7, #12]
 8005166:	8952      	ldrh	r2, [r2, #10]
 8005168:	fbb3 f3f2 	udiv	r3, r3, r2
 800516c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	1d1a      	adds	r2, r3, #4
 8005172:	613a      	str	r2, [r7, #16]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d101      	bne.n	8005182 <clmt_clust+0x3a>
 800517e:	2300      	movs	r3, #0
 8005180:	e010      	b.n	80051a4 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8005182:	697a      	ldr	r2, [r7, #20]
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	429a      	cmp	r2, r3
 8005188:	d307      	bcc.n	800519a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800518a:	697a      	ldr	r2, [r7, #20]
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	1ad3      	subs	r3, r2, r3
 8005190:	617b      	str	r3, [r7, #20]
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	3304      	adds	r3, #4
 8005196:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005198:	e7e9      	b.n	800516e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800519a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	4413      	add	r3, r2
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	371c      	adds	r7, #28
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr

080051b0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b086      	sub	sp, #24
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80051c6:	d204      	bcs.n	80051d2 <dir_sdi+0x22>
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	f003 031f 	and.w	r3, r3, #31
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d001      	beq.n	80051d6 <dir_sdi+0x26>
		return FR_INT_ERR;
 80051d2:	2302      	movs	r3, #2
 80051d4:	e063      	b.n	800529e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	683a      	ldr	r2, [r7, #0]
 80051da:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d106      	bne.n	80051f6 <dir_sdi+0x46>
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	2b02      	cmp	r3, #2
 80051ee:	d902      	bls.n	80051f6 <dir_sdi+0x46>
		clst = fs->dirbase;
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d10c      	bne.n	8005216 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	095b      	lsrs	r3, r3, #5
 8005200:	693a      	ldr	r2, [r7, #16]
 8005202:	8912      	ldrh	r2, [r2, #8]
 8005204:	4293      	cmp	r3, r2
 8005206:	d301      	bcc.n	800520c <dir_sdi+0x5c>
 8005208:	2302      	movs	r3, #2
 800520a:	e048      	b.n	800529e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	61da      	str	r2, [r3, #28]
 8005214:	e029      	b.n	800526a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	895b      	ldrh	r3, [r3, #10]
 800521a:	025b      	lsls	r3, r3, #9
 800521c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800521e:	e019      	b.n	8005254 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6979      	ldr	r1, [r7, #20]
 8005224:	4618      	mov	r0, r3
 8005226:	f7ff fcfe 	bl	8004c26 <get_fat>
 800522a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005232:	d101      	bne.n	8005238 <dir_sdi+0x88>
 8005234:	2301      	movs	r3, #1
 8005236:	e032      	b.n	800529e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	2b01      	cmp	r3, #1
 800523c:	d904      	bls.n	8005248 <dir_sdi+0x98>
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	695b      	ldr	r3, [r3, #20]
 8005242:	697a      	ldr	r2, [r7, #20]
 8005244:	429a      	cmp	r2, r3
 8005246:	d301      	bcc.n	800524c <dir_sdi+0x9c>
 8005248:	2302      	movs	r3, #2
 800524a:	e028      	b.n	800529e <dir_sdi+0xee>
			ofs -= csz;
 800524c:	683a      	ldr	r2, [r7, #0]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	1ad3      	subs	r3, r2, r3
 8005252:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005254:	683a      	ldr	r2, [r7, #0]
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	429a      	cmp	r2, r3
 800525a:	d2e1      	bcs.n	8005220 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800525c:	6979      	ldr	r1, [r7, #20]
 800525e:	6938      	ldr	r0, [r7, #16]
 8005260:	f7ff fcc2 	bl	8004be8 <clust2sect>
 8005264:	4602      	mov	r2, r0
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	697a      	ldr	r2, [r7, #20]
 800526e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	69db      	ldr	r3, [r3, #28]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d101      	bne.n	800527c <dir_sdi+0xcc>
 8005278:	2302      	movs	r3, #2
 800527a:	e010      	b.n	800529e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	69da      	ldr	r2, [r3, #28]
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	0a5b      	lsrs	r3, r3, #9
 8005284:	441a      	add	r2, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005296:	441a      	add	r2, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800529c:	2300      	movs	r3, #0
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3718      	adds	r7, #24
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}

080052a6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80052a6:	b580      	push	{r7, lr}
 80052a8:	b086      	sub	sp, #24
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]
 80052ae:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	695b      	ldr	r3, [r3, #20]
 80052ba:	3320      	adds	r3, #32
 80052bc:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	69db      	ldr	r3, [r3, #28]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d003      	beq.n	80052ce <dir_next+0x28>
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80052cc:	d301      	bcc.n	80052d2 <dir_next+0x2c>
 80052ce:	2304      	movs	r3, #4
 80052d0:	e0aa      	b.n	8005428 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052d8:	2b00      	cmp	r3, #0
 80052da:	f040 8098 	bne.w	800540e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	69db      	ldr	r3, [r3, #28]
 80052e2:	1c5a      	adds	r2, r3, #1
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	699b      	ldr	r3, [r3, #24]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d10b      	bne.n	8005308 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	095b      	lsrs	r3, r3, #5
 80052f4:	68fa      	ldr	r2, [r7, #12]
 80052f6:	8912      	ldrh	r2, [r2, #8]
 80052f8:	4293      	cmp	r3, r2
 80052fa:	f0c0 8088 	bcc.w	800540e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	61da      	str	r2, [r3, #28]
 8005304:	2304      	movs	r3, #4
 8005306:	e08f      	b.n	8005428 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	0a5b      	lsrs	r3, r3, #9
 800530c:	68fa      	ldr	r2, [r7, #12]
 800530e:	8952      	ldrh	r2, [r2, #10]
 8005310:	3a01      	subs	r2, #1
 8005312:	4013      	ands	r3, r2
 8005314:	2b00      	cmp	r3, #0
 8005316:	d17a      	bne.n	800540e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	699b      	ldr	r3, [r3, #24]
 800531e:	4619      	mov	r1, r3
 8005320:	4610      	mov	r0, r2
 8005322:	f7ff fc80 	bl	8004c26 <get_fat>
 8005326:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	2b01      	cmp	r3, #1
 800532c:	d801      	bhi.n	8005332 <dir_next+0x8c>
 800532e:	2302      	movs	r3, #2
 8005330:	e07a      	b.n	8005428 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005338:	d101      	bne.n	800533e <dir_next+0x98>
 800533a:	2301      	movs	r3, #1
 800533c:	e074      	b.n	8005428 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	695b      	ldr	r3, [r3, #20]
 8005342:	697a      	ldr	r2, [r7, #20]
 8005344:	429a      	cmp	r2, r3
 8005346:	d358      	bcc.n	80053fa <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d104      	bne.n	8005358 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2200      	movs	r2, #0
 8005352:	61da      	str	r2, [r3, #28]
 8005354:	2304      	movs	r3, #4
 8005356:	e067      	b.n	8005428 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	699b      	ldr	r3, [r3, #24]
 800535e:	4619      	mov	r1, r3
 8005360:	4610      	mov	r0, r2
 8005362:	f7ff fe59 	bl	8005018 <create_chain>
 8005366:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d101      	bne.n	8005372 <dir_next+0xcc>
 800536e:	2307      	movs	r3, #7
 8005370:	e05a      	b.n	8005428 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	2b01      	cmp	r3, #1
 8005376:	d101      	bne.n	800537c <dir_next+0xd6>
 8005378:	2302      	movs	r3, #2
 800537a:	e055      	b.n	8005428 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005382:	d101      	bne.n	8005388 <dir_next+0xe2>
 8005384:	2301      	movs	r3, #1
 8005386:	e04f      	b.n	8005428 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005388:	68f8      	ldr	r0, [r7, #12]
 800538a:	f7ff fb4d 	bl	8004a28 <sync_window>
 800538e:	4603      	mov	r3, r0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d001      	beq.n	8005398 <dir_next+0xf2>
 8005394:	2301      	movs	r3, #1
 8005396:	e047      	b.n	8005428 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	3330      	adds	r3, #48	; 0x30
 800539c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053a0:	2100      	movs	r1, #0
 80053a2:	4618      	mov	r0, r3
 80053a4:	f7ff f977 	bl	8004696 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80053a8:	2300      	movs	r3, #0
 80053aa:	613b      	str	r3, [r7, #16]
 80053ac:	6979      	ldr	r1, [r7, #20]
 80053ae:	68f8      	ldr	r0, [r7, #12]
 80053b0:	f7ff fc1a 	bl	8004be8 <clust2sect>
 80053b4:	4602      	mov	r2, r0
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	62da      	str	r2, [r3, #44]	; 0x2c
 80053ba:	e012      	b.n	80053e2 <dir_next+0x13c>
						fs->wflag = 1;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2201      	movs	r2, #1
 80053c0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80053c2:	68f8      	ldr	r0, [r7, #12]
 80053c4:	f7ff fb30 	bl	8004a28 <sync_window>
 80053c8:	4603      	mov	r3, r0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d001      	beq.n	80053d2 <dir_next+0x12c>
 80053ce:	2301      	movs	r3, #1
 80053d0:	e02a      	b.n	8005428 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	3301      	adds	r3, #1
 80053d6:	613b      	str	r3, [r7, #16]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053dc:	1c5a      	adds	r2, r3, #1
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	895b      	ldrh	r3, [r3, #10]
 80053e6:	461a      	mov	r2, r3
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d3e6      	bcc.n	80053bc <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	1ad2      	subs	r2, r2, r3
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	697a      	ldr	r2, [r7, #20]
 80053fe:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8005400:	6979      	ldr	r1, [r7, #20]
 8005402:	68f8      	ldr	r0, [r7, #12]
 8005404:	f7ff fbf0 	bl	8004be8 <clust2sect>
 8005408:	4602      	mov	r2, r0
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	68ba      	ldr	r2, [r7, #8]
 8005412:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005420:	441a      	add	r2, r3
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005426:	2300      	movs	r3, #0
}
 8005428:	4618      	mov	r0, r3
 800542a:	3718      	adds	r7, #24
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}

08005430 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b086      	sub	sp, #24
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8005440:	2100      	movs	r1, #0
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f7ff feb4 	bl	80051b0 <dir_sdi>
 8005448:	4603      	mov	r3, r0
 800544a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800544c:	7dfb      	ldrb	r3, [r7, #23]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d12b      	bne.n	80054aa <dir_alloc+0x7a>
		n = 0;
 8005452:	2300      	movs	r3, #0
 8005454:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	69db      	ldr	r3, [r3, #28]
 800545a:	4619      	mov	r1, r3
 800545c:	68f8      	ldr	r0, [r7, #12]
 800545e:	f7ff fb27 	bl	8004ab0 <move_window>
 8005462:	4603      	mov	r3, r0
 8005464:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005466:	7dfb      	ldrb	r3, [r7, #23]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d11d      	bne.n	80054a8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6a1b      	ldr	r3, [r3, #32]
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	2be5      	cmp	r3, #229	; 0xe5
 8005474:	d004      	beq.n	8005480 <dir_alloc+0x50>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6a1b      	ldr	r3, [r3, #32]
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d107      	bne.n	8005490 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	3301      	adds	r3, #1
 8005484:	613b      	str	r3, [r7, #16]
 8005486:	693a      	ldr	r2, [r7, #16]
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	429a      	cmp	r2, r3
 800548c:	d102      	bne.n	8005494 <dir_alloc+0x64>
 800548e:	e00c      	b.n	80054aa <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005490:	2300      	movs	r3, #0
 8005492:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8005494:	2101      	movs	r1, #1
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f7ff ff05 	bl	80052a6 <dir_next>
 800549c:	4603      	mov	r3, r0
 800549e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80054a0:	7dfb      	ldrb	r3, [r7, #23]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d0d7      	beq.n	8005456 <dir_alloc+0x26>
 80054a6:	e000      	b.n	80054aa <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80054a8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80054aa:	7dfb      	ldrb	r3, [r7, #23]
 80054ac:	2b04      	cmp	r3, #4
 80054ae:	d101      	bne.n	80054b4 <dir_alloc+0x84>
 80054b0:	2307      	movs	r3, #7
 80054b2:	75fb      	strb	r3, [r7, #23]
	return res;
 80054b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3718      	adds	r7, #24
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}

080054be <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80054be:	b580      	push	{r7, lr}
 80054c0:	b084      	sub	sp, #16
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
 80054c6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	331a      	adds	r3, #26
 80054cc:	4618      	mov	r0, r3
 80054ce:	f7ff f83f 	bl	8004550 <ld_word>
 80054d2:	4603      	mov	r3, r0
 80054d4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	781b      	ldrb	r3, [r3, #0]
 80054da:	2b03      	cmp	r3, #3
 80054dc:	d109      	bne.n	80054f2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	3314      	adds	r3, #20
 80054e2:	4618      	mov	r0, r3
 80054e4:	f7ff f834 	bl	8004550 <ld_word>
 80054e8:	4603      	mov	r3, r0
 80054ea:	041b      	lsls	r3, r3, #16
 80054ec:	68fa      	ldr	r2, [r7, #12]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80054f2:	68fb      	ldr	r3, [r7, #12]
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3710      	adds	r7, #16
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}

080054fc <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b084      	sub	sp, #16
 8005500:	af00      	add	r7, sp, #0
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	60b9      	str	r1, [r7, #8]
 8005506:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	331a      	adds	r3, #26
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	b292      	uxth	r2, r2
 8005510:	4611      	mov	r1, r2
 8005512:	4618      	mov	r0, r3
 8005514:	f7ff f857 	bl	80045c6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	2b03      	cmp	r3, #3
 800551e:	d109      	bne.n	8005534 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	f103 0214 	add.w	r2, r3, #20
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	0c1b      	lsrs	r3, r3, #16
 800552a:	b29b      	uxth	r3, r3
 800552c:	4619      	mov	r1, r3
 800552e:	4610      	mov	r0, r2
 8005530:	f7ff f849 	bl	80045c6 <st_word>
	}
}
 8005534:	bf00      	nop
 8005536:	3710      	adds	r7, #16
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}

0800553c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b086      	sub	sp, #24
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800554a:	2100      	movs	r1, #0
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f7ff fe2f 	bl	80051b0 <dir_sdi>
 8005552:	4603      	mov	r3, r0
 8005554:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005556:	7dfb      	ldrb	r3, [r7, #23]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d001      	beq.n	8005560 <dir_find+0x24>
 800555c:	7dfb      	ldrb	r3, [r7, #23]
 800555e:	e03e      	b.n	80055de <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	69db      	ldr	r3, [r3, #28]
 8005564:	4619      	mov	r1, r3
 8005566:	6938      	ldr	r0, [r7, #16]
 8005568:	f7ff faa2 	bl	8004ab0 <move_window>
 800556c:	4603      	mov	r3, r0
 800556e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005570:	7dfb      	ldrb	r3, [r7, #23]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d12f      	bne.n	80055d6 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6a1b      	ldr	r3, [r3, #32]
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800557e:	7bfb      	ldrb	r3, [r7, #15]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d102      	bne.n	800558a <dir_find+0x4e>
 8005584:	2304      	movs	r3, #4
 8005586:	75fb      	strb	r3, [r7, #23]
 8005588:	e028      	b.n	80055dc <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a1b      	ldr	r3, [r3, #32]
 800558e:	330b      	adds	r3, #11
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005596:	b2da      	uxtb	r2, r3
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6a1b      	ldr	r3, [r3, #32]
 80055a0:	330b      	adds	r3, #11
 80055a2:	781b      	ldrb	r3, [r3, #0]
 80055a4:	f003 0308 	and.w	r3, r3, #8
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d10a      	bne.n	80055c2 <dir_find+0x86>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6a18      	ldr	r0, [r3, #32]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	3324      	adds	r3, #36	; 0x24
 80055b4:	220b      	movs	r2, #11
 80055b6:	4619      	mov	r1, r3
 80055b8:	f7ff f888 	bl	80046cc <mem_cmp>
 80055bc:	4603      	mov	r3, r0
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d00b      	beq.n	80055da <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80055c2:	2100      	movs	r1, #0
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f7ff fe6e 	bl	80052a6 <dir_next>
 80055ca:	4603      	mov	r3, r0
 80055cc:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80055ce:	7dfb      	ldrb	r3, [r7, #23]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d0c5      	beq.n	8005560 <dir_find+0x24>
 80055d4:	e002      	b.n	80055dc <dir_find+0xa0>
		if (res != FR_OK) break;
 80055d6:	bf00      	nop
 80055d8:	e000      	b.n	80055dc <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80055da:	bf00      	nop

	return res;
 80055dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3718      	adds	r7, #24
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}

080055e6 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80055e6:	b580      	push	{r7, lr}
 80055e8:	b084      	sub	sp, #16
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80055f4:	2101      	movs	r1, #1
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f7ff ff1a 	bl	8005430 <dir_alloc>
 80055fc:	4603      	mov	r3, r0
 80055fe:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8005600:	7bfb      	ldrb	r3, [r7, #15]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d11c      	bne.n	8005640 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	69db      	ldr	r3, [r3, #28]
 800560a:	4619      	mov	r1, r3
 800560c:	68b8      	ldr	r0, [r7, #8]
 800560e:	f7ff fa4f 	bl	8004ab0 <move_window>
 8005612:	4603      	mov	r3, r0
 8005614:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005616:	7bfb      	ldrb	r3, [r7, #15]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d111      	bne.n	8005640 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6a1b      	ldr	r3, [r3, #32]
 8005620:	2220      	movs	r2, #32
 8005622:	2100      	movs	r1, #0
 8005624:	4618      	mov	r0, r3
 8005626:	f7ff f836 	bl	8004696 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a18      	ldr	r0, [r3, #32]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	3324      	adds	r3, #36	; 0x24
 8005632:	220b      	movs	r2, #11
 8005634:	4619      	mov	r1, r3
 8005636:	f7ff f80d 	bl	8004654 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	2201      	movs	r2, #1
 800563e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8005640:	7bfb      	ldrb	r3, [r7, #15]
}
 8005642:	4618      	mov	r0, r3
 8005644:	3710      	adds	r7, #16
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
	...

0800564c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b088      	sub	sp, #32
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	60fb      	str	r3, [r7, #12]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	3324      	adds	r3, #36	; 0x24
 8005660:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8005662:	220b      	movs	r2, #11
 8005664:	2120      	movs	r1, #32
 8005666:	68b8      	ldr	r0, [r7, #8]
 8005668:	f7ff f815 	bl	8004696 <mem_set>
	si = i = 0; ni = 8;
 800566c:	2300      	movs	r3, #0
 800566e:	613b      	str	r3, [r7, #16]
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	61fb      	str	r3, [r7, #28]
 8005674:	2308      	movs	r3, #8
 8005676:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	1c5a      	adds	r2, r3, #1
 800567c:	61fa      	str	r2, [r7, #28]
 800567e:	68fa      	ldr	r2, [r7, #12]
 8005680:	4413      	add	r3, r2
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005686:	7efb      	ldrb	r3, [r7, #27]
 8005688:	2b20      	cmp	r3, #32
 800568a:	d94e      	bls.n	800572a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800568c:	7efb      	ldrb	r3, [r7, #27]
 800568e:	2b2f      	cmp	r3, #47	; 0x2f
 8005690:	d006      	beq.n	80056a0 <create_name+0x54>
 8005692:	7efb      	ldrb	r3, [r7, #27]
 8005694:	2b5c      	cmp	r3, #92	; 0x5c
 8005696:	d110      	bne.n	80056ba <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8005698:	e002      	b.n	80056a0 <create_name+0x54>
 800569a:	69fb      	ldr	r3, [r7, #28]
 800569c:	3301      	adds	r3, #1
 800569e:	61fb      	str	r3, [r7, #28]
 80056a0:	68fa      	ldr	r2, [r7, #12]
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	4413      	add	r3, r2
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	2b2f      	cmp	r3, #47	; 0x2f
 80056aa:	d0f6      	beq.n	800569a <create_name+0x4e>
 80056ac:	68fa      	ldr	r2, [r7, #12]
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	4413      	add	r3, r2
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	2b5c      	cmp	r3, #92	; 0x5c
 80056b6:	d0f0      	beq.n	800569a <create_name+0x4e>
			break;
 80056b8:	e038      	b.n	800572c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80056ba:	7efb      	ldrb	r3, [r7, #27]
 80056bc:	2b2e      	cmp	r3, #46	; 0x2e
 80056be:	d003      	beq.n	80056c8 <create_name+0x7c>
 80056c0:	693a      	ldr	r2, [r7, #16]
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d30c      	bcc.n	80056e2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	2b0b      	cmp	r3, #11
 80056cc:	d002      	beq.n	80056d4 <create_name+0x88>
 80056ce:	7efb      	ldrb	r3, [r7, #27]
 80056d0:	2b2e      	cmp	r3, #46	; 0x2e
 80056d2:	d001      	beq.n	80056d8 <create_name+0x8c>
 80056d4:	2306      	movs	r3, #6
 80056d6:	e044      	b.n	8005762 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80056d8:	2308      	movs	r3, #8
 80056da:	613b      	str	r3, [r7, #16]
 80056dc:	230b      	movs	r3, #11
 80056de:	617b      	str	r3, [r7, #20]
			continue;
 80056e0:	e022      	b.n	8005728 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80056e2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	da04      	bge.n	80056f4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80056ea:	7efb      	ldrb	r3, [r7, #27]
 80056ec:	3b80      	subs	r3, #128	; 0x80
 80056ee:	4a1f      	ldr	r2, [pc, #124]	; (800576c <create_name+0x120>)
 80056f0:	5cd3      	ldrb	r3, [r2, r3]
 80056f2:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80056f4:	7efb      	ldrb	r3, [r7, #27]
 80056f6:	4619      	mov	r1, r3
 80056f8:	481d      	ldr	r0, [pc, #116]	; (8005770 <create_name+0x124>)
 80056fa:	f7ff f80e 	bl	800471a <chk_chr>
 80056fe:	4603      	mov	r3, r0
 8005700:	2b00      	cmp	r3, #0
 8005702:	d001      	beq.n	8005708 <create_name+0xbc>
 8005704:	2306      	movs	r3, #6
 8005706:	e02c      	b.n	8005762 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8005708:	7efb      	ldrb	r3, [r7, #27]
 800570a:	2b60      	cmp	r3, #96	; 0x60
 800570c:	d905      	bls.n	800571a <create_name+0xce>
 800570e:	7efb      	ldrb	r3, [r7, #27]
 8005710:	2b7a      	cmp	r3, #122	; 0x7a
 8005712:	d802      	bhi.n	800571a <create_name+0xce>
 8005714:	7efb      	ldrb	r3, [r7, #27]
 8005716:	3b20      	subs	r3, #32
 8005718:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	1c5a      	adds	r2, r3, #1
 800571e:	613a      	str	r2, [r7, #16]
 8005720:	68ba      	ldr	r2, [r7, #8]
 8005722:	4413      	add	r3, r2
 8005724:	7efa      	ldrb	r2, [r7, #27]
 8005726:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8005728:	e7a6      	b.n	8005678 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800572a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800572c:	68fa      	ldr	r2, [r7, #12]
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	441a      	add	r2, r3
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d101      	bne.n	8005740 <create_name+0xf4>
 800573c:	2306      	movs	r3, #6
 800573e:	e010      	b.n	8005762 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	2be5      	cmp	r3, #229	; 0xe5
 8005746:	d102      	bne.n	800574e <create_name+0x102>
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	2205      	movs	r2, #5
 800574c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800574e:	7efb      	ldrb	r3, [r7, #27]
 8005750:	2b20      	cmp	r3, #32
 8005752:	d801      	bhi.n	8005758 <create_name+0x10c>
 8005754:	2204      	movs	r2, #4
 8005756:	e000      	b.n	800575a <create_name+0x10e>
 8005758:	2200      	movs	r2, #0
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	330b      	adds	r3, #11
 800575e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8005760:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8005762:	4618      	mov	r0, r3
 8005764:	3720      	adds	r7, #32
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
 800576a:	bf00      	nop
 800576c:	08008cb4 	.word	0x08008cb4
 8005770:	080084ec 	.word	0x080084ec

08005774 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b086      	sub	sp, #24
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8005788:	e002      	b.n	8005790 <follow_path+0x1c>
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	3301      	adds	r3, #1
 800578e:	603b      	str	r3, [r7, #0]
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	2b2f      	cmp	r3, #47	; 0x2f
 8005796:	d0f8      	beq.n	800578a <follow_path+0x16>
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	2b5c      	cmp	r3, #92	; 0x5c
 800579e:	d0f4      	beq.n	800578a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	2200      	movs	r2, #0
 80057a4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	2b1f      	cmp	r3, #31
 80057ac:	d80a      	bhi.n	80057c4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2280      	movs	r2, #128	; 0x80
 80057b2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80057b6:	2100      	movs	r1, #0
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f7ff fcf9 	bl	80051b0 <dir_sdi>
 80057be:	4603      	mov	r3, r0
 80057c0:	75fb      	strb	r3, [r7, #23]
 80057c2:	e043      	b.n	800584c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80057c4:	463b      	mov	r3, r7
 80057c6:	4619      	mov	r1, r3
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f7ff ff3f 	bl	800564c <create_name>
 80057ce:	4603      	mov	r3, r0
 80057d0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80057d2:	7dfb      	ldrb	r3, [r7, #23]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d134      	bne.n	8005842 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f7ff feaf 	bl	800553c <dir_find>
 80057de:	4603      	mov	r3, r0
 80057e0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80057e8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80057ea:	7dfb      	ldrb	r3, [r7, #23]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d00a      	beq.n	8005806 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80057f0:	7dfb      	ldrb	r3, [r7, #23]
 80057f2:	2b04      	cmp	r3, #4
 80057f4:	d127      	bne.n	8005846 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80057f6:	7afb      	ldrb	r3, [r7, #11]
 80057f8:	f003 0304 	and.w	r3, r3, #4
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d122      	bne.n	8005846 <follow_path+0xd2>
 8005800:	2305      	movs	r3, #5
 8005802:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8005804:	e01f      	b.n	8005846 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005806:	7afb      	ldrb	r3, [r7, #11]
 8005808:	f003 0304 	and.w	r3, r3, #4
 800580c:	2b00      	cmp	r3, #0
 800580e:	d11c      	bne.n	800584a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	799b      	ldrb	r3, [r3, #6]
 8005814:	f003 0310 	and.w	r3, r3, #16
 8005818:	2b00      	cmp	r3, #0
 800581a:	d102      	bne.n	8005822 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800581c:	2305      	movs	r3, #5
 800581e:	75fb      	strb	r3, [r7, #23]
 8005820:	e014      	b.n	800584c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	695b      	ldr	r3, [r3, #20]
 800582c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005830:	4413      	add	r3, r2
 8005832:	4619      	mov	r1, r3
 8005834:	68f8      	ldr	r0, [r7, #12]
 8005836:	f7ff fe42 	bl	80054be <ld_clust>
 800583a:	4602      	mov	r2, r0
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005840:	e7c0      	b.n	80057c4 <follow_path+0x50>
			if (res != FR_OK) break;
 8005842:	bf00      	nop
 8005844:	e002      	b.n	800584c <follow_path+0xd8>
				break;
 8005846:	bf00      	nop
 8005848:	e000      	b.n	800584c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800584a:	bf00      	nop
			}
		}
	}

	return res;
 800584c:	7dfb      	ldrb	r3, [r7, #23]
}
 800584e:	4618      	mov	r0, r3
 8005850:	3718      	adds	r7, #24
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}

08005856 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005856:	b480      	push	{r7}
 8005858:	b087      	sub	sp, #28
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800585e:	f04f 33ff 	mov.w	r3, #4294967295
 8005862:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d031      	beq.n	80058d0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	617b      	str	r3, [r7, #20]
 8005872:	e002      	b.n	800587a <get_ldnumber+0x24>
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	3301      	adds	r3, #1
 8005878:	617b      	str	r3, [r7, #20]
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	2b20      	cmp	r3, #32
 8005880:	d903      	bls.n	800588a <get_ldnumber+0x34>
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	2b3a      	cmp	r3, #58	; 0x3a
 8005888:	d1f4      	bne.n	8005874 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	2b3a      	cmp	r3, #58	; 0x3a
 8005890:	d11c      	bne.n	80058cc <get_ldnumber+0x76>
			tp = *path;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	1c5a      	adds	r2, r3, #1
 800589c:	60fa      	str	r2, [r7, #12]
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	3b30      	subs	r3, #48	; 0x30
 80058a2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	2b09      	cmp	r3, #9
 80058a8:	d80e      	bhi.n	80058c8 <get_ldnumber+0x72>
 80058aa:	68fa      	ldr	r2, [r7, #12]
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d10a      	bne.n	80058c8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d107      	bne.n	80058c8 <get_ldnumber+0x72>
					vol = (int)i;
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	3301      	adds	r3, #1
 80058c0:	617b      	str	r3, [r7, #20]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	697a      	ldr	r2, [r7, #20]
 80058c6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	e002      	b.n	80058d2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80058cc:	2300      	movs	r3, #0
 80058ce:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80058d0:	693b      	ldr	r3, [r7, #16]
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	371c      	adds	r7, #28
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr
	...

080058e0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b082      	sub	sp, #8
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2200      	movs	r2, #0
 80058ee:	70da      	strb	r2, [r3, #3]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f04f 32ff 	mov.w	r2, #4294967295
 80058f6:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80058f8:	6839      	ldr	r1, [r7, #0]
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f7ff f8d8 	bl	8004ab0 <move_window>
 8005900:	4603      	mov	r3, r0
 8005902:	2b00      	cmp	r3, #0
 8005904:	d001      	beq.n	800590a <check_fs+0x2a>
 8005906:	2304      	movs	r3, #4
 8005908:	e038      	b.n	800597c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	3330      	adds	r3, #48	; 0x30
 800590e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005912:	4618      	mov	r0, r3
 8005914:	f7fe fe1c 	bl	8004550 <ld_word>
 8005918:	4603      	mov	r3, r0
 800591a:	461a      	mov	r2, r3
 800591c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005920:	429a      	cmp	r2, r3
 8005922:	d001      	beq.n	8005928 <check_fs+0x48>
 8005924:	2303      	movs	r3, #3
 8005926:	e029      	b.n	800597c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800592e:	2be9      	cmp	r3, #233	; 0xe9
 8005930:	d009      	beq.n	8005946 <check_fs+0x66>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005938:	2beb      	cmp	r3, #235	; 0xeb
 800593a:	d11e      	bne.n	800597a <check_fs+0x9a>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005942:	2b90      	cmp	r3, #144	; 0x90
 8005944:	d119      	bne.n	800597a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	3330      	adds	r3, #48	; 0x30
 800594a:	3336      	adds	r3, #54	; 0x36
 800594c:	4618      	mov	r0, r3
 800594e:	f7fe fe17 	bl	8004580 <ld_dword>
 8005952:	4603      	mov	r3, r0
 8005954:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005958:	4a0a      	ldr	r2, [pc, #40]	; (8005984 <check_fs+0xa4>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d101      	bne.n	8005962 <check_fs+0x82>
 800595e:	2300      	movs	r3, #0
 8005960:	e00c      	b.n	800597c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	3330      	adds	r3, #48	; 0x30
 8005966:	3352      	adds	r3, #82	; 0x52
 8005968:	4618      	mov	r0, r3
 800596a:	f7fe fe09 	bl	8004580 <ld_dword>
 800596e:	4603      	mov	r3, r0
 8005970:	4a05      	ldr	r2, [pc, #20]	; (8005988 <check_fs+0xa8>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d101      	bne.n	800597a <check_fs+0x9a>
 8005976:	2300      	movs	r3, #0
 8005978:	e000      	b.n	800597c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800597a:	2302      	movs	r3, #2
}
 800597c:	4618      	mov	r0, r3
 800597e:	3708      	adds	r7, #8
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}
 8005984:	00544146 	.word	0x00544146
 8005988:	33544146 	.word	0x33544146

0800598c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b096      	sub	sp, #88	; 0x58
 8005990:	af00      	add	r7, sp, #0
 8005992:	60f8      	str	r0, [r7, #12]
 8005994:	60b9      	str	r1, [r7, #8]
 8005996:	4613      	mov	r3, r2
 8005998:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	2200      	movs	r2, #0
 800599e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80059a0:	68f8      	ldr	r0, [r7, #12]
 80059a2:	f7ff ff58 	bl	8005856 <get_ldnumber>
 80059a6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80059a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	da01      	bge.n	80059b2 <find_volume+0x26>
 80059ae:	230b      	movs	r3, #11
 80059b0:	e22d      	b.n	8005e0e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80059b2:	4aa1      	ldr	r2, [pc, #644]	; (8005c38 <find_volume+0x2ac>)
 80059b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059ba:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80059bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d101      	bne.n	80059c6 <find_volume+0x3a>
 80059c2:	230c      	movs	r3, #12
 80059c4:	e223      	b.n	8005e0e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80059ca:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80059cc:	79fb      	ldrb	r3, [r7, #7]
 80059ce:	f023 0301 	bic.w	r3, r3, #1
 80059d2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80059d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d01a      	beq.n	8005a12 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80059dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059de:	785b      	ldrb	r3, [r3, #1]
 80059e0:	4618      	mov	r0, r3
 80059e2:	f7fe fd17 	bl	8004414 <disk_status>
 80059e6:	4603      	mov	r3, r0
 80059e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80059ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80059f0:	f003 0301 	and.w	r3, r3, #1
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d10c      	bne.n	8005a12 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80059f8:	79fb      	ldrb	r3, [r7, #7]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d007      	beq.n	8005a0e <find_volume+0x82>
 80059fe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005a02:	f003 0304 	and.w	r3, r3, #4
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d001      	beq.n	8005a0e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8005a0a:	230a      	movs	r3, #10
 8005a0c:	e1ff      	b.n	8005e0e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8005a0e:	2300      	movs	r3, #0
 8005a10:	e1fd      	b.n	8005e0e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a14:	2200      	movs	r2, #0
 8005a16:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005a18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a1a:	b2da      	uxtb	r2, r3
 8005a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a1e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a22:	785b      	ldrb	r3, [r3, #1]
 8005a24:	4618      	mov	r0, r3
 8005a26:	f7fe fd0f 	bl	8004448 <disk_initialize>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005a30:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005a34:	f003 0301 	and.w	r3, r3, #1
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d001      	beq.n	8005a40 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005a3c:	2303      	movs	r3, #3
 8005a3e:	e1e6      	b.n	8005e0e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005a40:	79fb      	ldrb	r3, [r7, #7]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d007      	beq.n	8005a56 <find_volume+0xca>
 8005a46:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005a4a:	f003 0304 	and.w	r3, r3, #4
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d001      	beq.n	8005a56 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8005a52:	230a      	movs	r3, #10
 8005a54:	e1db      	b.n	8005e0e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8005a56:	2300      	movs	r3, #0
 8005a58:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8005a5a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005a5c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005a5e:	f7ff ff3f 	bl	80058e0 <check_fs>
 8005a62:	4603      	mov	r3, r0
 8005a64:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005a68:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005a6c:	2b02      	cmp	r3, #2
 8005a6e:	d149      	bne.n	8005b04 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005a70:	2300      	movs	r3, #0
 8005a72:	643b      	str	r3, [r7, #64]	; 0x40
 8005a74:	e01e      	b.n	8005ab4 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8005a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a78:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005a7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a7e:	011b      	lsls	r3, r3, #4
 8005a80:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8005a84:	4413      	add	r3, r2
 8005a86:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a8a:	3304      	adds	r3, #4
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d006      	beq.n	8005aa0 <find_volume+0x114>
 8005a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a94:	3308      	adds	r3, #8
 8005a96:	4618      	mov	r0, r3
 8005a98:	f7fe fd72 	bl	8004580 <ld_dword>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	e000      	b.n	8005aa2 <find_volume+0x116>
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	3358      	adds	r3, #88	; 0x58
 8005aa8:	443b      	add	r3, r7
 8005aaa:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005aae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ab0:	3301      	adds	r3, #1
 8005ab2:	643b      	str	r3, [r7, #64]	; 0x40
 8005ab4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ab6:	2b03      	cmp	r3, #3
 8005ab8:	d9dd      	bls.n	8005a76 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8005aba:	2300      	movs	r3, #0
 8005abc:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8005abe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d002      	beq.n	8005aca <find_volume+0x13e>
 8005ac4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ac6:	3b01      	subs	r3, #1
 8005ac8:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8005aca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	3358      	adds	r3, #88	; 0x58
 8005ad0:	443b      	add	r3, r7
 8005ad2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005ad6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005ad8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d005      	beq.n	8005aea <find_volume+0x15e>
 8005ade:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005ae0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005ae2:	f7ff fefd 	bl	80058e0 <check_fs>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	e000      	b.n	8005aec <find_volume+0x160>
 8005aea:	2303      	movs	r3, #3
 8005aec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005af0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d905      	bls.n	8005b04 <find_volume+0x178>
 8005af8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005afa:	3301      	adds	r3, #1
 8005afc:	643b      	str	r3, [r7, #64]	; 0x40
 8005afe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b00:	2b03      	cmp	r3, #3
 8005b02:	d9e2      	bls.n	8005aca <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005b04:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005b08:	2b04      	cmp	r3, #4
 8005b0a:	d101      	bne.n	8005b10 <find_volume+0x184>
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	e17e      	b.n	8005e0e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005b10:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d901      	bls.n	8005b1c <find_volume+0x190>
 8005b18:	230d      	movs	r3, #13
 8005b1a:	e178      	b.n	8005e0e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b1e:	3330      	adds	r3, #48	; 0x30
 8005b20:	330b      	adds	r3, #11
 8005b22:	4618      	mov	r0, r3
 8005b24:	f7fe fd14 	bl	8004550 <ld_word>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b2e:	d001      	beq.n	8005b34 <find_volume+0x1a8>
 8005b30:	230d      	movs	r3, #13
 8005b32:	e16c      	b.n	8005e0e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8005b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b36:	3330      	adds	r3, #48	; 0x30
 8005b38:	3316      	adds	r3, #22
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f7fe fd08 	bl	8004550 <ld_word>
 8005b40:	4603      	mov	r3, r0
 8005b42:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005b44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d106      	bne.n	8005b58 <find_volume+0x1cc>
 8005b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b4c:	3330      	adds	r3, #48	; 0x30
 8005b4e:	3324      	adds	r3, #36	; 0x24
 8005b50:	4618      	mov	r0, r3
 8005b52:	f7fe fd15 	bl	8004580 <ld_dword>
 8005b56:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8005b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b5a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b5c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8005b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b60:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8005b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b66:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b6a:	789b      	ldrb	r3, [r3, #2]
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d005      	beq.n	8005b7c <find_volume+0x1f0>
 8005b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b72:	789b      	ldrb	r3, [r3, #2]
 8005b74:	2b02      	cmp	r3, #2
 8005b76:	d001      	beq.n	8005b7c <find_volume+0x1f0>
 8005b78:	230d      	movs	r3, #13
 8005b7a:	e148      	b.n	8005e0e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8005b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b7e:	789b      	ldrb	r3, [r3, #2]
 8005b80:	461a      	mov	r2, r3
 8005b82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b84:	fb02 f303 	mul.w	r3, r2, r3
 8005b88:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8005b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b90:	b29a      	uxth	r2, r3
 8005b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b94:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8005b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b98:	895b      	ldrh	r3, [r3, #10]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d008      	beq.n	8005bb0 <find_volume+0x224>
 8005b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ba0:	895b      	ldrh	r3, [r3, #10]
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ba6:	895b      	ldrh	r3, [r3, #10]
 8005ba8:	3b01      	subs	r3, #1
 8005baa:	4013      	ands	r3, r2
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d001      	beq.n	8005bb4 <find_volume+0x228>
 8005bb0:	230d      	movs	r3, #13
 8005bb2:	e12c      	b.n	8005e0e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bb6:	3330      	adds	r3, #48	; 0x30
 8005bb8:	3311      	adds	r3, #17
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f7fe fcc8 	bl	8004550 <ld_word>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bc6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bca:	891b      	ldrh	r3, [r3, #8]
 8005bcc:	f003 030f 	and.w	r3, r3, #15
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d001      	beq.n	8005bda <find_volume+0x24e>
 8005bd6:	230d      	movs	r3, #13
 8005bd8:	e119      	b.n	8005e0e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8005bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bdc:	3330      	adds	r3, #48	; 0x30
 8005bde:	3313      	adds	r3, #19
 8005be0:	4618      	mov	r0, r3
 8005be2:	f7fe fcb5 	bl	8004550 <ld_word>
 8005be6:	4603      	mov	r3, r0
 8005be8:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8005bea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d106      	bne.n	8005bfe <find_volume+0x272>
 8005bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bf2:	3330      	adds	r3, #48	; 0x30
 8005bf4:	3320      	adds	r3, #32
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f7fe fcc2 	bl	8004580 <ld_dword>
 8005bfc:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8005bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c00:	3330      	adds	r3, #48	; 0x30
 8005c02:	330e      	adds	r3, #14
 8005c04:	4618      	mov	r0, r3
 8005c06:	f7fe fca3 	bl	8004550 <ld_word>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8005c0e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d101      	bne.n	8005c18 <find_volume+0x28c>
 8005c14:	230d      	movs	r3, #13
 8005c16:	e0fa      	b.n	8005e0e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8005c18:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005c1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c1c:	4413      	add	r3, r2
 8005c1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c20:	8912      	ldrh	r2, [r2, #8]
 8005c22:	0912      	lsrs	r2, r2, #4
 8005c24:	b292      	uxth	r2, r2
 8005c26:	4413      	add	r3, r2
 8005c28:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8005c2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d204      	bcs.n	8005c3c <find_volume+0x2b0>
 8005c32:	230d      	movs	r3, #13
 8005c34:	e0eb      	b.n	8005e0e <find_volume+0x482>
 8005c36:	bf00      	nop
 8005c38:	2000042c 	.word	0x2000042c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8005c3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c40:	1ad3      	subs	r3, r2, r3
 8005c42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c44:	8952      	ldrh	r2, [r2, #10]
 8005c46:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c4a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d101      	bne.n	8005c56 <find_volume+0x2ca>
 8005c52:	230d      	movs	r3, #13
 8005c54:	e0db      	b.n	8005e0e <find_volume+0x482>
		fmt = FS_FAT32;
 8005c56:	2303      	movs	r3, #3
 8005c58:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8005c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d802      	bhi.n	8005c6c <find_volume+0x2e0>
 8005c66:	2302      	movs	r3, #2
 8005c68:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8005c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6e:	f640 72f5 	movw	r2, #4085	; 0xff5
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d802      	bhi.n	8005c7c <find_volume+0x2f0>
 8005c76:	2301      	movs	r3, #1
 8005c78:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8005c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7e:	1c9a      	adds	r2, r3, #2
 8005c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c82:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8005c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c86:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005c88:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005c8a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005c8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c8e:	441a      	add	r2, r3
 8005c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c92:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8005c94:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c98:	441a      	add	r2, r3
 8005c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c9c:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8005c9e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ca2:	2b03      	cmp	r3, #3
 8005ca4:	d11e      	bne.n	8005ce4 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8005ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ca8:	3330      	adds	r3, #48	; 0x30
 8005caa:	332a      	adds	r3, #42	; 0x2a
 8005cac:	4618      	mov	r0, r3
 8005cae:	f7fe fc4f 	bl	8004550 <ld_word>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d001      	beq.n	8005cbc <find_volume+0x330>
 8005cb8:	230d      	movs	r3, #13
 8005cba:	e0a8      	b.n	8005e0e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8005cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cbe:	891b      	ldrh	r3, [r3, #8]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d001      	beq.n	8005cc8 <find_volume+0x33c>
 8005cc4:	230d      	movs	r3, #13
 8005cc6:	e0a2      	b.n	8005e0e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8005cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cca:	3330      	adds	r3, #48	; 0x30
 8005ccc:	332c      	adds	r3, #44	; 0x2c
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f7fe fc56 	bl	8004580 <ld_dword>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd8:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8005cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cdc:	695b      	ldr	r3, [r3, #20]
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	647b      	str	r3, [r7, #68]	; 0x44
 8005ce2:	e01f      	b.n	8005d24 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8005ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ce6:	891b      	ldrh	r3, [r3, #8]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d101      	bne.n	8005cf0 <find_volume+0x364>
 8005cec:	230d      	movs	r3, #13
 8005cee:	e08e      	b.n	8005e0e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8005cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cf2:	6a1a      	ldr	r2, [r3, #32]
 8005cf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cf6:	441a      	add	r2, r3
 8005cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cfa:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005cfc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d00:	2b02      	cmp	r3, #2
 8005d02:	d103      	bne.n	8005d0c <find_volume+0x380>
 8005d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d06:	695b      	ldr	r3, [r3, #20]
 8005d08:	005b      	lsls	r3, r3, #1
 8005d0a:	e00a      	b.n	8005d22 <find_volume+0x396>
 8005d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d0e:	695a      	ldr	r2, [r3, #20]
 8005d10:	4613      	mov	r3, r2
 8005d12:	005b      	lsls	r3, r3, #1
 8005d14:	4413      	add	r3, r2
 8005d16:	085a      	lsrs	r2, r3, #1
 8005d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d1a:	695b      	ldr	r3, [r3, #20]
 8005d1c:	f003 0301 	and.w	r3, r3, #1
 8005d20:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8005d22:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d26:	699a      	ldr	r2, [r3, #24]
 8005d28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d2a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005d2e:	0a5b      	lsrs	r3, r3, #9
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d201      	bcs.n	8005d38 <find_volume+0x3ac>
 8005d34:	230d      	movs	r3, #13
 8005d36:	e06a      	b.n	8005e0e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d3a:	f04f 32ff 	mov.w	r2, #4294967295
 8005d3e:	611a      	str	r2, [r3, #16]
 8005d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d42:	691a      	ldr	r2, [r3, #16]
 8005d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d46:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8005d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d4a:	2280      	movs	r2, #128	; 0x80
 8005d4c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8005d4e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d52:	2b03      	cmp	r3, #3
 8005d54:	d149      	bne.n	8005dea <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8005d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d58:	3330      	adds	r3, #48	; 0x30
 8005d5a:	3330      	adds	r3, #48	; 0x30
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f7fe fbf7 	bl	8004550 <ld_word>
 8005d62:	4603      	mov	r3, r0
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d140      	bne.n	8005dea <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8005d68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005d70:	f7fe fe9e 	bl	8004ab0 <move_window>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d137      	bne.n	8005dea <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8005d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d82:	3330      	adds	r3, #48	; 0x30
 8005d84:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f7fe fbe1 	bl	8004550 <ld_word>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	461a      	mov	r2, r3
 8005d92:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d127      	bne.n	8005dea <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8005d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d9c:	3330      	adds	r3, #48	; 0x30
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f7fe fbee 	bl	8004580 <ld_dword>
 8005da4:	4603      	mov	r3, r0
 8005da6:	4a1c      	ldr	r2, [pc, #112]	; (8005e18 <find_volume+0x48c>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d11e      	bne.n	8005dea <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8005dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dae:	3330      	adds	r3, #48	; 0x30
 8005db0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005db4:	4618      	mov	r0, r3
 8005db6:	f7fe fbe3 	bl	8004580 <ld_dword>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	4a17      	ldr	r2, [pc, #92]	; (8005e1c <find_volume+0x490>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d113      	bne.n	8005dea <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8005dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dc4:	3330      	adds	r3, #48	; 0x30
 8005dc6:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f7fe fbd8 	bl	8004580 <ld_dword>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd4:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8005dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd8:	3330      	adds	r3, #48	; 0x30
 8005dda:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8005dde:	4618      	mov	r0, r3
 8005de0:	f7fe fbce 	bl	8004580 <ld_dword>
 8005de4:	4602      	mov	r2, r0
 8005de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de8:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8005dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dec:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005df0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8005df2:	4b0b      	ldr	r3, [pc, #44]	; (8005e20 <find_volume+0x494>)
 8005df4:	881b      	ldrh	r3, [r3, #0]
 8005df6:	3301      	adds	r3, #1
 8005df8:	b29a      	uxth	r2, r3
 8005dfa:	4b09      	ldr	r3, [pc, #36]	; (8005e20 <find_volume+0x494>)
 8005dfc:	801a      	strh	r2, [r3, #0]
 8005dfe:	4b08      	ldr	r3, [pc, #32]	; (8005e20 <find_volume+0x494>)
 8005e00:	881a      	ldrh	r2, [r3, #0]
 8005e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e04:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8005e06:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005e08:	f7fe fdea 	bl	80049e0 <clear_lock>
#endif
	return FR_OK;
 8005e0c:	2300      	movs	r3, #0
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3758      	adds	r7, #88	; 0x58
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}
 8005e16:	bf00      	nop
 8005e18:	41615252 	.word	0x41615252
 8005e1c:	61417272 	.word	0x61417272
 8005e20:	20000430 	.word	0x20000430

08005e24 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b084      	sub	sp, #16
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8005e2e:	2309      	movs	r3, #9
 8005e30:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d01c      	beq.n	8005e72 <validate+0x4e>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d018      	beq.n	8005e72 <validate+0x4e>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d013      	beq.n	8005e72 <validate+0x4e>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	889a      	ldrh	r2, [r3, #4]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	88db      	ldrh	r3, [r3, #6]
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d10c      	bne.n	8005e72 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	785b      	ldrb	r3, [r3, #1]
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f7fe fad8 	bl	8004414 <disk_status>
 8005e64:	4603      	mov	r3, r0
 8005e66:	f003 0301 	and.w	r3, r3, #1
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d101      	bne.n	8005e72 <validate+0x4e>
			res = FR_OK;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8005e72:	7bfb      	ldrb	r3, [r7, #15]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d102      	bne.n	8005e7e <validate+0x5a>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	e000      	b.n	8005e80 <validate+0x5c>
 8005e7e:	2300      	movs	r3, #0
 8005e80:	683a      	ldr	r2, [r7, #0]
 8005e82:	6013      	str	r3, [r2, #0]
	return res;
 8005e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3710      	adds	r7, #16
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
	...

08005e90 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b088      	sub	sp, #32
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	4613      	mov	r3, r2
 8005e9c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8005ea2:	f107 0310 	add.w	r3, r7, #16
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f7ff fcd5 	bl	8005856 <get_ldnumber>
 8005eac:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005eae:	69fb      	ldr	r3, [r7, #28]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	da01      	bge.n	8005eb8 <f_mount+0x28>
 8005eb4:	230b      	movs	r3, #11
 8005eb6:	e02b      	b.n	8005f10 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005eb8:	4a17      	ldr	r2, [pc, #92]	; (8005f18 <f_mount+0x88>)
 8005eba:	69fb      	ldr	r3, [r7, #28]
 8005ebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ec0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005ec2:	69bb      	ldr	r3, [r7, #24]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d005      	beq.n	8005ed4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8005ec8:	69b8      	ldr	r0, [r7, #24]
 8005eca:	f7fe fd89 	bl	80049e0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005ece:	69bb      	ldr	r3, [r7, #24]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d002      	beq.n	8005ee0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2200      	movs	r2, #0
 8005ede:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005ee0:	68fa      	ldr	r2, [r7, #12]
 8005ee2:	490d      	ldr	r1, [pc, #52]	; (8005f18 <f_mount+0x88>)
 8005ee4:	69fb      	ldr	r3, [r7, #28]
 8005ee6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d002      	beq.n	8005ef6 <f_mount+0x66>
 8005ef0:	79fb      	ldrb	r3, [r7, #7]
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d001      	beq.n	8005efa <f_mount+0x6a>
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	e00a      	b.n	8005f10 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8005efa:	f107 010c 	add.w	r1, r7, #12
 8005efe:	f107 0308 	add.w	r3, r7, #8
 8005f02:	2200      	movs	r2, #0
 8005f04:	4618      	mov	r0, r3
 8005f06:	f7ff fd41 	bl	800598c <find_volume>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8005f0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3720      	adds	r7, #32
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}
 8005f18:	2000042c 	.word	0x2000042c

08005f1c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b098      	sub	sp, #96	; 0x60
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	60f8      	str	r0, [r7, #12]
 8005f24:	60b9      	str	r1, [r7, #8]
 8005f26:	4613      	mov	r3, r2
 8005f28:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d101      	bne.n	8005f34 <f_open+0x18>
 8005f30:	2309      	movs	r3, #9
 8005f32:	e1ad      	b.n	8006290 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8005f34:	79fb      	ldrb	r3, [r7, #7]
 8005f36:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f3a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8005f3c:	79fa      	ldrb	r2, [r7, #7]
 8005f3e:	f107 0110 	add.w	r1, r7, #16
 8005f42:	f107 0308 	add.w	r3, r7, #8
 8005f46:	4618      	mov	r0, r3
 8005f48:	f7ff fd20 	bl	800598c <find_volume>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8005f52:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	f040 8191 	bne.w	800627e <f_open+0x362>
		dj.obj.fs = fs;
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8005f60:	68ba      	ldr	r2, [r7, #8]
 8005f62:	f107 0314 	add.w	r3, r7, #20
 8005f66:	4611      	mov	r1, r2
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f7ff fc03 	bl	8005774 <follow_path>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8005f74:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d11a      	bne.n	8005fb2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8005f7c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005f80:	b25b      	sxtb	r3, r3
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	da03      	bge.n	8005f8e <f_open+0x72>
				res = FR_INVALID_NAME;
 8005f86:	2306      	movs	r3, #6
 8005f88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005f8c:	e011      	b.n	8005fb2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005f8e:	79fb      	ldrb	r3, [r7, #7]
 8005f90:	f023 0301 	bic.w	r3, r3, #1
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	bf14      	ite	ne
 8005f98:	2301      	movne	r3, #1
 8005f9a:	2300      	moveq	r3, #0
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	f107 0314 	add.w	r3, r7, #20
 8005fa4:	4611      	mov	r1, r2
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f7fe fbd2 	bl	8004750 <chk_lock>
 8005fac:	4603      	mov	r3, r0
 8005fae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8005fb2:	79fb      	ldrb	r3, [r7, #7]
 8005fb4:	f003 031c 	and.w	r3, r3, #28
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d07f      	beq.n	80060bc <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8005fbc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d017      	beq.n	8005ff4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8005fc4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005fc8:	2b04      	cmp	r3, #4
 8005fca:	d10e      	bne.n	8005fea <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005fcc:	f7fe fc1c 	bl	8004808 <enq_lock>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d006      	beq.n	8005fe4 <f_open+0xc8>
 8005fd6:	f107 0314 	add.w	r3, r7, #20
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f7ff fb03 	bl	80055e6 <dir_register>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	e000      	b.n	8005fe6 <f_open+0xca>
 8005fe4:	2312      	movs	r3, #18
 8005fe6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8005fea:	79fb      	ldrb	r3, [r7, #7]
 8005fec:	f043 0308 	orr.w	r3, r3, #8
 8005ff0:	71fb      	strb	r3, [r7, #7]
 8005ff2:	e010      	b.n	8006016 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005ff4:	7ebb      	ldrb	r3, [r7, #26]
 8005ff6:	f003 0311 	and.w	r3, r3, #17
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d003      	beq.n	8006006 <f_open+0xea>
					res = FR_DENIED;
 8005ffe:	2307      	movs	r3, #7
 8006000:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006004:	e007      	b.n	8006016 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006006:	79fb      	ldrb	r3, [r7, #7]
 8006008:	f003 0304 	and.w	r3, r3, #4
 800600c:	2b00      	cmp	r3, #0
 800600e:	d002      	beq.n	8006016 <f_open+0xfa>
 8006010:	2308      	movs	r3, #8
 8006012:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006016:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800601a:	2b00      	cmp	r3, #0
 800601c:	d168      	bne.n	80060f0 <f_open+0x1d4>
 800601e:	79fb      	ldrb	r3, [r7, #7]
 8006020:	f003 0308 	and.w	r3, r3, #8
 8006024:	2b00      	cmp	r3, #0
 8006026:	d063      	beq.n	80060f0 <f_open+0x1d4>
				dw = GET_FATTIME();
 8006028:	f7fd fcb8 	bl	800399c <get_fattime>
 800602c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800602e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006030:	330e      	adds	r3, #14
 8006032:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006034:	4618      	mov	r0, r3
 8006036:	f7fe fae1 	bl	80045fc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800603a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800603c:	3316      	adds	r3, #22
 800603e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006040:	4618      	mov	r0, r3
 8006042:	f7fe fadb 	bl	80045fc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006048:	330b      	adds	r3, #11
 800604a:	2220      	movs	r2, #32
 800604c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006052:	4611      	mov	r1, r2
 8006054:	4618      	mov	r0, r3
 8006056:	f7ff fa32 	bl	80054be <ld_clust>
 800605a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006060:	2200      	movs	r2, #0
 8006062:	4618      	mov	r0, r3
 8006064:	f7ff fa4a 	bl	80054fc <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800606a:	331c      	adds	r3, #28
 800606c:	2100      	movs	r1, #0
 800606e:	4618      	mov	r0, r3
 8006070:	f7fe fac4 	bl	80045fc <st_dword>
					fs->wflag = 1;
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	2201      	movs	r2, #1
 8006078:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800607a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800607c:	2b00      	cmp	r3, #0
 800607e:	d037      	beq.n	80060f0 <f_open+0x1d4>
						dw = fs->winsect;
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006084:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8006086:	f107 0314 	add.w	r3, r7, #20
 800608a:	2200      	movs	r2, #0
 800608c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800608e:	4618      	mov	r0, r3
 8006090:	f7fe ff5d 	bl	8004f4e <remove_chain>
 8006094:	4603      	mov	r3, r0
 8006096:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800609a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d126      	bne.n	80060f0 <f_open+0x1d4>
							res = move_window(fs, dw);
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80060a6:	4618      	mov	r0, r3
 80060a8:	f7fe fd02 	bl	8004ab0 <move_window>
 80060ac:	4603      	mov	r3, r0
 80060ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80060b6:	3a01      	subs	r2, #1
 80060b8:	60da      	str	r2, [r3, #12]
 80060ba:	e019      	b.n	80060f0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80060bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d115      	bne.n	80060f0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80060c4:	7ebb      	ldrb	r3, [r7, #26]
 80060c6:	f003 0310 	and.w	r3, r3, #16
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d003      	beq.n	80060d6 <f_open+0x1ba>
					res = FR_NO_FILE;
 80060ce:	2304      	movs	r3, #4
 80060d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80060d4:	e00c      	b.n	80060f0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80060d6:	79fb      	ldrb	r3, [r7, #7]
 80060d8:	f003 0302 	and.w	r3, r3, #2
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d007      	beq.n	80060f0 <f_open+0x1d4>
 80060e0:	7ebb      	ldrb	r3, [r7, #26]
 80060e2:	f003 0301 	and.w	r3, r3, #1
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d002      	beq.n	80060f0 <f_open+0x1d4>
						res = FR_DENIED;
 80060ea:	2307      	movs	r3, #7
 80060ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80060f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d128      	bne.n	800614a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80060f8:	79fb      	ldrb	r3, [r7, #7]
 80060fa:	f003 0308 	and.w	r3, r3, #8
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d003      	beq.n	800610a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8006102:	79fb      	ldrb	r3, [r7, #7]
 8006104:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006108:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8006112:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006118:	79fb      	ldrb	r3, [r7, #7]
 800611a:	f023 0301 	bic.w	r3, r3, #1
 800611e:	2b00      	cmp	r3, #0
 8006120:	bf14      	ite	ne
 8006122:	2301      	movne	r3, #1
 8006124:	2300      	moveq	r3, #0
 8006126:	b2db      	uxtb	r3, r3
 8006128:	461a      	mov	r2, r3
 800612a:	f107 0314 	add.w	r3, r7, #20
 800612e:	4611      	mov	r1, r2
 8006130:	4618      	mov	r0, r3
 8006132:	f7fe fb8b 	bl	800484c <inc_lock>
 8006136:	4602      	mov	r2, r0
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	691b      	ldr	r3, [r3, #16]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d102      	bne.n	800614a <f_open+0x22e>
 8006144:	2302      	movs	r3, #2
 8006146:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800614a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800614e:	2b00      	cmp	r3, #0
 8006150:	f040 8095 	bne.w	800627e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006158:	4611      	mov	r1, r2
 800615a:	4618      	mov	r0, r3
 800615c:	f7ff f9af 	bl	80054be <ld_clust>
 8006160:	4602      	mov	r2, r0
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8006166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006168:	331c      	adds	r3, #28
 800616a:	4618      	mov	r0, r3
 800616c:	f7fe fa08 	bl	8004580 <ld_dword>
 8006170:	4602      	mov	r2, r0
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2200      	movs	r2, #0
 800617a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800617c:	693a      	ldr	r2, [r7, #16]
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	88da      	ldrh	r2, [r3, #6]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	79fa      	ldrb	r2, [r7, #7]
 800618e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2200      	movs	r2, #0
 8006194:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2200      	movs	r2, #0
 800619a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2200      	movs	r2, #0
 80061a0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	3330      	adds	r3, #48	; 0x30
 80061a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061aa:	2100      	movs	r1, #0
 80061ac:	4618      	mov	r0, r3
 80061ae:	f7fe fa72 	bl	8004696 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80061b2:	79fb      	ldrb	r3, [r7, #7]
 80061b4:	f003 0320 	and.w	r3, r3, #32
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d060      	beq.n	800627e <f_open+0x362>
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d05c      	beq.n	800627e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	68da      	ldr	r2, [r3, #12]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	895b      	ldrh	r3, [r3, #10]
 80061d0:	025b      	lsls	r3, r3, #9
 80061d2:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	68db      	ldr	r3, [r3, #12]
 80061de:	657b      	str	r3, [r7, #84]	; 0x54
 80061e0:	e016      	b.n	8006210 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80061e6:	4618      	mov	r0, r3
 80061e8:	f7fe fd1d 	bl	8004c26 <get_fat>
 80061ec:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80061ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d802      	bhi.n	80061fa <f_open+0x2de>
 80061f4:	2302      	movs	r3, #2
 80061f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80061fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006200:	d102      	bne.n	8006208 <f_open+0x2ec>
 8006202:	2301      	movs	r3, #1
 8006204:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006208:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800620a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800620c:	1ad3      	subs	r3, r2, r3
 800620e:	657b      	str	r3, [r7, #84]	; 0x54
 8006210:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006214:	2b00      	cmp	r3, #0
 8006216:	d103      	bne.n	8006220 <f_open+0x304>
 8006218:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800621a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800621c:	429a      	cmp	r2, r3
 800621e:	d8e0      	bhi.n	80061e2 <f_open+0x2c6>
				}
				fp->clust = clst;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006224:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006226:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800622a:	2b00      	cmp	r3, #0
 800622c:	d127      	bne.n	800627e <f_open+0x362>
 800622e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006230:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006234:	2b00      	cmp	r3, #0
 8006236:	d022      	beq.n	800627e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800623c:	4618      	mov	r0, r3
 800623e:	f7fe fcd3 	bl	8004be8 <clust2sect>
 8006242:	6478      	str	r0, [r7, #68]	; 0x44
 8006244:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006246:	2b00      	cmp	r3, #0
 8006248:	d103      	bne.n	8006252 <f_open+0x336>
						res = FR_INT_ERR;
 800624a:	2302      	movs	r3, #2
 800624c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006250:	e015      	b.n	800627e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8006252:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006254:	0a5a      	lsrs	r2, r3, #9
 8006256:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006258:	441a      	add	r2, r3
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	7858      	ldrb	r0, [r3, #1]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	6a1a      	ldr	r2, [r3, #32]
 800626c:	2301      	movs	r3, #1
 800626e:	f7fe f911 	bl	8004494 <disk_read>
 8006272:	4603      	mov	r3, r0
 8006274:	2b00      	cmp	r3, #0
 8006276:	d002      	beq.n	800627e <f_open+0x362>
 8006278:	2301      	movs	r3, #1
 800627a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800627e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006282:	2b00      	cmp	r3, #0
 8006284:	d002      	beq.n	800628c <f_open+0x370>
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2200      	movs	r2, #0
 800628a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800628c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8006290:	4618      	mov	r0, r3
 8006292:	3760      	adds	r7, #96	; 0x60
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}

08006298 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b08e      	sub	sp, #56	; 0x38
 800629c:	af00      	add	r7, sp, #0
 800629e:	60f8      	str	r0, [r7, #12]
 80062a0:	60b9      	str	r1, [r7, #8]
 80062a2:	607a      	str	r2, [r7, #4]
 80062a4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	2200      	movs	r2, #0
 80062ae:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f107 0214 	add.w	r2, r7, #20
 80062b6:	4611      	mov	r1, r2
 80062b8:	4618      	mov	r0, r3
 80062ba:	f7ff fdb3 	bl	8005e24 <validate>
 80062be:	4603      	mov	r3, r0
 80062c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80062c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d107      	bne.n	80062dc <f_read+0x44>
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	7d5b      	ldrb	r3, [r3, #21]
 80062d0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80062d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d002      	beq.n	80062e2 <f_read+0x4a>
 80062dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80062e0:	e115      	b.n	800650e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	7d1b      	ldrb	r3, [r3, #20]
 80062e6:	f003 0301 	and.w	r3, r3, #1
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d101      	bne.n	80062f2 <f_read+0x5a>
 80062ee:	2307      	movs	r3, #7
 80062f0:	e10d      	b.n	800650e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	68da      	ldr	r2, [r3, #12]
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	699b      	ldr	r3, [r3, #24]
 80062fa:	1ad3      	subs	r3, r2, r3
 80062fc:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80062fe:	687a      	ldr	r2, [r7, #4]
 8006300:	6a3b      	ldr	r3, [r7, #32]
 8006302:	429a      	cmp	r2, r3
 8006304:	f240 80fe 	bls.w	8006504 <f_read+0x26c>
 8006308:	6a3b      	ldr	r3, [r7, #32]
 800630a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800630c:	e0fa      	b.n	8006504 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	699b      	ldr	r3, [r3, #24]
 8006312:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006316:	2b00      	cmp	r3, #0
 8006318:	f040 80c6 	bne.w	80064a8 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	699b      	ldr	r3, [r3, #24]
 8006320:	0a5b      	lsrs	r3, r3, #9
 8006322:	697a      	ldr	r2, [r7, #20]
 8006324:	8952      	ldrh	r2, [r2, #10]
 8006326:	3a01      	subs	r2, #1
 8006328:	4013      	ands	r3, r2
 800632a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d12f      	bne.n	8006392 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	699b      	ldr	r3, [r3, #24]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d103      	bne.n	8006342 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	633b      	str	r3, [r7, #48]	; 0x30
 8006340:	e013      	b.n	800636a <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006346:	2b00      	cmp	r3, #0
 8006348:	d007      	beq.n	800635a <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	699b      	ldr	r3, [r3, #24]
 800634e:	4619      	mov	r1, r3
 8006350:	68f8      	ldr	r0, [r7, #12]
 8006352:	f7fe fef9 	bl	8005148 <clmt_clust>
 8006356:	6338      	str	r0, [r7, #48]	; 0x30
 8006358:	e007      	b.n	800636a <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800635a:	68fa      	ldr	r2, [r7, #12]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	69db      	ldr	r3, [r3, #28]
 8006360:	4619      	mov	r1, r3
 8006362:	4610      	mov	r0, r2
 8006364:	f7fe fc5f 	bl	8004c26 <get_fat>
 8006368:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800636a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800636c:	2b01      	cmp	r3, #1
 800636e:	d804      	bhi.n	800637a <f_read+0xe2>
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2202      	movs	r2, #2
 8006374:	755a      	strb	r2, [r3, #21]
 8006376:	2302      	movs	r3, #2
 8006378:	e0c9      	b.n	800650e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800637a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800637c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006380:	d104      	bne.n	800638c <f_read+0xf4>
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2201      	movs	r2, #1
 8006386:	755a      	strb	r2, [r3, #21]
 8006388:	2301      	movs	r3, #1
 800638a:	e0c0      	b.n	800650e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006390:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006392:	697a      	ldr	r2, [r7, #20]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	69db      	ldr	r3, [r3, #28]
 8006398:	4619      	mov	r1, r3
 800639a:	4610      	mov	r0, r2
 800639c:	f7fe fc24 	bl	8004be8 <clust2sect>
 80063a0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80063a2:	69bb      	ldr	r3, [r7, #24]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d104      	bne.n	80063b2 <f_read+0x11a>
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2202      	movs	r2, #2
 80063ac:	755a      	strb	r2, [r3, #21]
 80063ae:	2302      	movs	r3, #2
 80063b0:	e0ad      	b.n	800650e <f_read+0x276>
			sect += csect;
 80063b2:	69ba      	ldr	r2, [r7, #24]
 80063b4:	69fb      	ldr	r3, [r7, #28]
 80063b6:	4413      	add	r3, r2
 80063b8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	0a5b      	lsrs	r3, r3, #9
 80063be:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80063c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d039      	beq.n	800643a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80063c6:	69fa      	ldr	r2, [r7, #28]
 80063c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ca:	4413      	add	r3, r2
 80063cc:	697a      	ldr	r2, [r7, #20]
 80063ce:	8952      	ldrh	r2, [r2, #10]
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d905      	bls.n	80063e0 <f_read+0x148>
					cc = fs->csize - csect;
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	895b      	ldrh	r3, [r3, #10]
 80063d8:	461a      	mov	r2, r3
 80063da:	69fb      	ldr	r3, [r7, #28]
 80063dc:	1ad3      	subs	r3, r2, r3
 80063de:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	7858      	ldrb	r0, [r3, #1]
 80063e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063e6:	69ba      	ldr	r2, [r7, #24]
 80063e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80063ea:	f7fe f853 	bl	8004494 <disk_read>
 80063ee:	4603      	mov	r3, r0
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d004      	beq.n	80063fe <f_read+0x166>
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2201      	movs	r2, #1
 80063f8:	755a      	strb	r2, [r3, #21]
 80063fa:	2301      	movs	r3, #1
 80063fc:	e087      	b.n	800650e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	7d1b      	ldrb	r3, [r3, #20]
 8006402:	b25b      	sxtb	r3, r3
 8006404:	2b00      	cmp	r3, #0
 8006406:	da14      	bge.n	8006432 <f_read+0x19a>
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6a1a      	ldr	r2, [r3, #32]
 800640c:	69bb      	ldr	r3, [r7, #24]
 800640e:	1ad3      	subs	r3, r2, r3
 8006410:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006412:	429a      	cmp	r2, r3
 8006414:	d90d      	bls.n	8006432 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	6a1a      	ldr	r2, [r3, #32]
 800641a:	69bb      	ldr	r3, [r7, #24]
 800641c:	1ad3      	subs	r3, r2, r3
 800641e:	025b      	lsls	r3, r3, #9
 8006420:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006422:	18d0      	adds	r0, r2, r3
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	3330      	adds	r3, #48	; 0x30
 8006428:	f44f 7200 	mov.w	r2, #512	; 0x200
 800642c:	4619      	mov	r1, r3
 800642e:	f7fe f911 	bl	8004654 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8006432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006434:	025b      	lsls	r3, r3, #9
 8006436:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8006438:	e050      	b.n	80064dc <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	6a1b      	ldr	r3, [r3, #32]
 800643e:	69ba      	ldr	r2, [r7, #24]
 8006440:	429a      	cmp	r2, r3
 8006442:	d02e      	beq.n	80064a2 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	7d1b      	ldrb	r3, [r3, #20]
 8006448:	b25b      	sxtb	r3, r3
 800644a:	2b00      	cmp	r3, #0
 800644c:	da18      	bge.n	8006480 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	7858      	ldrb	r0, [r3, #1]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	6a1a      	ldr	r2, [r3, #32]
 800645c:	2301      	movs	r3, #1
 800645e:	f7fe f839 	bl	80044d4 <disk_write>
 8006462:	4603      	mov	r3, r0
 8006464:	2b00      	cmp	r3, #0
 8006466:	d004      	beq.n	8006472 <f_read+0x1da>
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2201      	movs	r2, #1
 800646c:	755a      	strb	r2, [r3, #21]
 800646e:	2301      	movs	r3, #1
 8006470:	e04d      	b.n	800650e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	7d1b      	ldrb	r3, [r3, #20]
 8006476:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800647a:	b2da      	uxtb	r2, r3
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	7858      	ldrb	r0, [r3, #1]
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800648a:	2301      	movs	r3, #1
 800648c:	69ba      	ldr	r2, [r7, #24]
 800648e:	f7fe f801 	bl	8004494 <disk_read>
 8006492:	4603      	mov	r3, r0
 8006494:	2b00      	cmp	r3, #0
 8006496:	d004      	beq.n	80064a2 <f_read+0x20a>
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2201      	movs	r2, #1
 800649c:	755a      	strb	r2, [r3, #21]
 800649e:	2301      	movs	r3, #1
 80064a0:	e035      	b.n	800650e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	69ba      	ldr	r2, [r7, #24]
 80064a6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	699b      	ldr	r3, [r3, #24]
 80064ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064b0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80064b4:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80064b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	429a      	cmp	r2, r3
 80064bc:	d901      	bls.n	80064c2 <f_read+0x22a>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	699b      	ldr	r3, [r3, #24]
 80064cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064d0:	4413      	add	r3, r2
 80064d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064d4:	4619      	mov	r1, r3
 80064d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80064d8:	f7fe f8bc 	bl	8004654 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80064dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064e0:	4413      	add	r3, r2
 80064e2:	627b      	str	r3, [r7, #36]	; 0x24
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	699a      	ldr	r2, [r3, #24]
 80064e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ea:	441a      	add	r2, r3
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	619a      	str	r2, [r3, #24]
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064f6:	441a      	add	r2, r3
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	601a      	str	r2, [r3, #0]
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006500:	1ad3      	subs	r3, r2, r3
 8006502:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2b00      	cmp	r3, #0
 8006508:	f47f af01 	bne.w	800630e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800650c:	2300      	movs	r3, #0
}
 800650e:	4618      	mov	r0, r3
 8006510:	3738      	adds	r7, #56	; 0x38
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}

08006516 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8006516:	b580      	push	{r7, lr}
 8006518:	b086      	sub	sp, #24
 800651a:	af00      	add	r7, sp, #0
 800651c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f107 0208 	add.w	r2, r7, #8
 8006524:	4611      	mov	r1, r2
 8006526:	4618      	mov	r0, r3
 8006528:	f7ff fc7c 	bl	8005e24 <validate>
 800652c:	4603      	mov	r3, r0
 800652e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006530:	7dfb      	ldrb	r3, [r7, #23]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d168      	bne.n	8006608 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	7d1b      	ldrb	r3, [r3, #20]
 800653a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800653e:	2b00      	cmp	r3, #0
 8006540:	d062      	beq.n	8006608 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	7d1b      	ldrb	r3, [r3, #20]
 8006546:	b25b      	sxtb	r3, r3
 8006548:	2b00      	cmp	r3, #0
 800654a:	da15      	bge.n	8006578 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	7858      	ldrb	r0, [r3, #1]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6a1a      	ldr	r2, [r3, #32]
 800655a:	2301      	movs	r3, #1
 800655c:	f7fd ffba 	bl	80044d4 <disk_write>
 8006560:	4603      	mov	r3, r0
 8006562:	2b00      	cmp	r3, #0
 8006564:	d001      	beq.n	800656a <f_sync+0x54>
 8006566:	2301      	movs	r3, #1
 8006568:	e04f      	b.n	800660a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	7d1b      	ldrb	r3, [r3, #20]
 800656e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006572:	b2da      	uxtb	r2, r3
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8006578:	f7fd fa10 	bl	800399c <get_fattime>
 800657c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800657e:	68ba      	ldr	r2, [r7, #8]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006584:	4619      	mov	r1, r3
 8006586:	4610      	mov	r0, r2
 8006588:	f7fe fa92 	bl	8004ab0 <move_window>
 800658c:	4603      	mov	r3, r0
 800658e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8006590:	7dfb      	ldrb	r3, [r7, #23]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d138      	bne.n	8006608 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800659a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	330b      	adds	r3, #11
 80065a0:	781a      	ldrb	r2, [r3, #0]
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	330b      	adds	r3, #11
 80065a6:	f042 0220 	orr.w	r2, r2, #32
 80065aa:	b2d2      	uxtb	r2, r2
 80065ac:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6818      	ldr	r0, [r3, #0]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	461a      	mov	r2, r3
 80065b8:	68f9      	ldr	r1, [r7, #12]
 80065ba:	f7fe ff9f 	bl	80054fc <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	f103 021c 	add.w	r2, r3, #28
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	68db      	ldr	r3, [r3, #12]
 80065c8:	4619      	mov	r1, r3
 80065ca:	4610      	mov	r0, r2
 80065cc:	f7fe f816 	bl	80045fc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	3316      	adds	r3, #22
 80065d4:	6939      	ldr	r1, [r7, #16]
 80065d6:	4618      	mov	r0, r3
 80065d8:	f7fe f810 	bl	80045fc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	3312      	adds	r3, #18
 80065e0:	2100      	movs	r1, #0
 80065e2:	4618      	mov	r0, r3
 80065e4:	f7fd ffef 	bl	80045c6 <st_word>
					fs->wflag = 1;
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	2201      	movs	r2, #1
 80065ec:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	4618      	mov	r0, r3
 80065f2:	f7fe fa8b 	bl	8004b0c <sync_fs>
 80065f6:	4603      	mov	r3, r0
 80065f8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	7d1b      	ldrb	r3, [r3, #20]
 80065fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006602:	b2da      	uxtb	r2, r3
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8006608:	7dfb      	ldrb	r3, [r7, #23]
}
 800660a:	4618      	mov	r0, r3
 800660c:	3718      	adds	r7, #24
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}

08006612 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8006612:	b580      	push	{r7, lr}
 8006614:	b084      	sub	sp, #16
 8006616:	af00      	add	r7, sp, #0
 8006618:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f7ff ff7b 	bl	8006516 <f_sync>
 8006620:	4603      	mov	r3, r0
 8006622:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8006624:	7bfb      	ldrb	r3, [r7, #15]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d118      	bne.n	800665c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f107 0208 	add.w	r2, r7, #8
 8006630:	4611      	mov	r1, r2
 8006632:	4618      	mov	r0, r3
 8006634:	f7ff fbf6 	bl	8005e24 <validate>
 8006638:	4603      	mov	r3, r0
 800663a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800663c:	7bfb      	ldrb	r3, [r7, #15]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d10c      	bne.n	800665c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	691b      	ldr	r3, [r3, #16]
 8006646:	4618      	mov	r0, r3
 8006648:	f7fe f98e 	bl	8004968 <dec_lock>
 800664c:	4603      	mov	r3, r0
 800664e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8006650:	7bfb      	ldrb	r3, [r7, #15]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d102      	bne.n	800665c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2200      	movs	r2, #0
 800665a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800665c:	7bfb      	ldrb	r3, [r7, #15]
}
 800665e:	4618      	mov	r0, r3
 8006660:	3710      	adds	r7, #16
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}

08006666 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8006666:	b580      	push	{r7, lr}
 8006668:	b090      	sub	sp, #64	; 0x40
 800666a:	af00      	add	r7, sp, #0
 800666c:	6078      	str	r0, [r7, #4]
 800666e:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f107 0208 	add.w	r2, r7, #8
 8006676:	4611      	mov	r1, r2
 8006678:	4618      	mov	r0, r3
 800667a:	f7ff fbd3 	bl	8005e24 <validate>
 800667e:	4603      	mov	r3, r0
 8006680:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8006684:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006688:	2b00      	cmp	r3, #0
 800668a:	d103      	bne.n	8006694 <f_lseek+0x2e>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	7d5b      	ldrb	r3, [r3, #21]
 8006690:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8006694:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006698:	2b00      	cmp	r3, #0
 800669a:	d002      	beq.n	80066a2 <f_lseek+0x3c>
 800669c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80066a0:	e1e6      	b.n	8006a70 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	f000 80d1 	beq.w	800684e <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066b2:	d15a      	bne.n	800676a <f_lseek+0x104>
			tbl = fp->cltbl;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b8:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80066ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066bc:	1d1a      	adds	r2, r3, #4
 80066be:	627a      	str	r2, [r7, #36]	; 0x24
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	617b      	str	r3, [r7, #20]
 80066c4:	2302      	movs	r3, #2
 80066c6:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 80066ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d03a      	beq.n	800674a <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80066d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d6:	613b      	str	r3, [r7, #16]
 80066d8:	2300      	movs	r3, #0
 80066da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066de:	3302      	adds	r3, #2
 80066e0:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 80066e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e4:	60fb      	str	r3, [r7, #12]
 80066e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e8:	3301      	adds	r3, #1
 80066ea:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80066f0:	4618      	mov	r0, r3
 80066f2:	f7fe fa98 	bl	8004c26 <get_fat>
 80066f6:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80066f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	d804      	bhi.n	8006708 <f_lseek+0xa2>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2202      	movs	r2, #2
 8006702:	755a      	strb	r2, [r3, #21]
 8006704:	2302      	movs	r3, #2
 8006706:	e1b3      	b.n	8006a70 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800670a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800670e:	d104      	bne.n	800671a <f_lseek+0xb4>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2201      	movs	r2, #1
 8006714:	755a      	strb	r2, [r3, #21]
 8006716:	2301      	movs	r3, #1
 8006718:	e1aa      	b.n	8006a70 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	3301      	adds	r3, #1
 800671e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006720:	429a      	cmp	r2, r3
 8006722:	d0de      	beq.n	80066e2 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8006724:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	429a      	cmp	r2, r3
 800672a:	d809      	bhi.n	8006740 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800672c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672e:	1d1a      	adds	r2, r3, #4
 8006730:	627a      	str	r2, [r7, #36]	; 0x24
 8006732:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006734:	601a      	str	r2, [r3, #0]
 8006736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006738:	1d1a      	adds	r2, r3, #4
 800673a:	627a      	str	r2, [r7, #36]	; 0x24
 800673c:	693a      	ldr	r2, [r7, #16]
 800673e:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	695b      	ldr	r3, [r3, #20]
 8006744:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006746:	429a      	cmp	r2, r3
 8006748:	d3c4      	bcc.n	80066d4 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800674e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006750:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8006752:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	429a      	cmp	r2, r3
 8006758:	d803      	bhi.n	8006762 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800675a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675c:	2200      	movs	r2, #0
 800675e:	601a      	str	r2, [r3, #0]
 8006760:	e184      	b.n	8006a6c <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8006762:	2311      	movs	r3, #17
 8006764:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8006768:	e180      	b.n	8006a6c <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	68db      	ldr	r3, [r3, #12]
 800676e:	683a      	ldr	r2, [r7, #0]
 8006770:	429a      	cmp	r2, r3
 8006772:	d902      	bls.n	800677a <f_lseek+0x114>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	68db      	ldr	r3, [r3, #12]
 8006778:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	683a      	ldr	r2, [r7, #0]
 800677e:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	2b00      	cmp	r3, #0
 8006784:	f000 8172 	beq.w	8006a6c <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	3b01      	subs	r3, #1
 800678c:	4619      	mov	r1, r3
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f7fe fcda 	bl	8005148 <clmt_clust>
 8006794:	4602      	mov	r2, r0
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800679a:	68ba      	ldr	r2, [r7, #8]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	69db      	ldr	r3, [r3, #28]
 80067a0:	4619      	mov	r1, r3
 80067a2:	4610      	mov	r0, r2
 80067a4:	f7fe fa20 	bl	8004be8 <clust2sect>
 80067a8:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80067aa:	69bb      	ldr	r3, [r7, #24]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d104      	bne.n	80067ba <f_lseek+0x154>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2202      	movs	r2, #2
 80067b4:	755a      	strb	r2, [r3, #21]
 80067b6:	2302      	movs	r3, #2
 80067b8:	e15a      	b.n	8006a70 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	3b01      	subs	r3, #1
 80067be:	0a5b      	lsrs	r3, r3, #9
 80067c0:	68ba      	ldr	r2, [r7, #8]
 80067c2:	8952      	ldrh	r2, [r2, #10]
 80067c4:	3a01      	subs	r2, #1
 80067c6:	4013      	ands	r3, r2
 80067c8:	69ba      	ldr	r2, [r7, #24]
 80067ca:	4413      	add	r3, r2
 80067cc:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	699b      	ldr	r3, [r3, #24]
 80067d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	f000 8148 	beq.w	8006a6c <f_lseek+0x406>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6a1b      	ldr	r3, [r3, #32]
 80067e0:	69ba      	ldr	r2, [r7, #24]
 80067e2:	429a      	cmp	r2, r3
 80067e4:	f000 8142 	beq.w	8006a6c <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	7d1b      	ldrb	r3, [r3, #20]
 80067ec:	b25b      	sxtb	r3, r3
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	da18      	bge.n	8006824 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	7858      	ldrb	r0, [r3, #1]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6a1a      	ldr	r2, [r3, #32]
 8006800:	2301      	movs	r3, #1
 8006802:	f7fd fe67 	bl	80044d4 <disk_write>
 8006806:	4603      	mov	r3, r0
 8006808:	2b00      	cmp	r3, #0
 800680a:	d004      	beq.n	8006816 <f_lseek+0x1b0>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2201      	movs	r2, #1
 8006810:	755a      	strb	r2, [r3, #21]
 8006812:	2301      	movs	r3, #1
 8006814:	e12c      	b.n	8006a70 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	7d1b      	ldrb	r3, [r3, #20]
 800681a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800681e:	b2da      	uxtb	r2, r3
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	7858      	ldrb	r0, [r3, #1]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800682e:	2301      	movs	r3, #1
 8006830:	69ba      	ldr	r2, [r7, #24]
 8006832:	f7fd fe2f 	bl	8004494 <disk_read>
 8006836:	4603      	mov	r3, r0
 8006838:	2b00      	cmp	r3, #0
 800683a:	d004      	beq.n	8006846 <f_lseek+0x1e0>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2201      	movs	r2, #1
 8006840:	755a      	strb	r2, [r3, #21]
 8006842:	2301      	movs	r3, #1
 8006844:	e114      	b.n	8006a70 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	69ba      	ldr	r2, [r7, #24]
 800684a:	621a      	str	r2, [r3, #32]
 800684c:	e10e      	b.n	8006a6c <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	68db      	ldr	r3, [r3, #12]
 8006852:	683a      	ldr	r2, [r7, #0]
 8006854:	429a      	cmp	r2, r3
 8006856:	d908      	bls.n	800686a <f_lseek+0x204>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	7d1b      	ldrb	r3, [r3, #20]
 800685c:	f003 0302 	and.w	r3, r3, #2
 8006860:	2b00      	cmp	r3, #0
 8006862:	d102      	bne.n	800686a <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	699b      	ldr	r3, [r3, #24]
 800686e:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8006870:	2300      	movs	r3, #0
 8006872:	637b      	str	r3, [r7, #52]	; 0x34
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006878:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	2b00      	cmp	r3, #0
 800687e:	f000 80a7 	beq.w	80069d0 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	895b      	ldrh	r3, [r3, #10]
 8006886:	025b      	lsls	r3, r3, #9
 8006888:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800688a:	6a3b      	ldr	r3, [r7, #32]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d01b      	beq.n	80068c8 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	1e5a      	subs	r2, r3, #1
 8006894:	69fb      	ldr	r3, [r7, #28]
 8006896:	fbb2 f2f3 	udiv	r2, r2, r3
 800689a:	6a3b      	ldr	r3, [r7, #32]
 800689c:	1e59      	subs	r1, r3, #1
 800689e:	69fb      	ldr	r3, [r7, #28]
 80068a0:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d30f      	bcc.n	80068c8 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80068a8:	6a3b      	ldr	r3, [r7, #32]
 80068aa:	1e5a      	subs	r2, r3, #1
 80068ac:	69fb      	ldr	r3, [r7, #28]
 80068ae:	425b      	negs	r3, r3
 80068b0:	401a      	ands	r2, r3
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	699b      	ldr	r3, [r3, #24]
 80068ba:	683a      	ldr	r2, [r7, #0]
 80068bc:	1ad3      	subs	r3, r2, r3
 80068be:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	69db      	ldr	r3, [r3, #28]
 80068c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80068c6:	e022      	b.n	800690e <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80068ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d119      	bne.n	8006908 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2100      	movs	r1, #0
 80068d8:	4618      	mov	r0, r3
 80068da:	f7fe fb9d 	bl	8005018 <create_chain>
 80068de:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80068e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068e2:	2b01      	cmp	r3, #1
 80068e4:	d104      	bne.n	80068f0 <f_lseek+0x28a>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2202      	movs	r2, #2
 80068ea:	755a      	strb	r2, [r3, #21]
 80068ec:	2302      	movs	r3, #2
 80068ee:	e0bf      	b.n	8006a70 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80068f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068f6:	d104      	bne.n	8006902 <f_lseek+0x29c>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2201      	movs	r2, #1
 80068fc:	755a      	strb	r2, [r3, #21]
 80068fe:	2301      	movs	r3, #1
 8006900:	e0b6      	b.n	8006a70 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006906:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800690c:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800690e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006910:	2b00      	cmp	r3, #0
 8006912:	d05d      	beq.n	80069d0 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 8006914:	e03a      	b.n	800698c <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 8006916:	683a      	ldr	r2, [r7, #0]
 8006918:	69fb      	ldr	r3, [r7, #28]
 800691a:	1ad3      	subs	r3, r2, r3
 800691c:	603b      	str	r3, [r7, #0]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	699a      	ldr	r2, [r3, #24]
 8006922:	69fb      	ldr	r3, [r7, #28]
 8006924:	441a      	add	r2, r3
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	7d1b      	ldrb	r3, [r3, #20]
 800692e:	f003 0302 	and.w	r3, r3, #2
 8006932:	2b00      	cmp	r3, #0
 8006934:	d00b      	beq.n	800694e <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800693a:	4618      	mov	r0, r3
 800693c:	f7fe fb6c 	bl	8005018 <create_chain>
 8006940:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8006942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006944:	2b00      	cmp	r3, #0
 8006946:	d108      	bne.n	800695a <f_lseek+0x2f4>
							ofs = 0; break;
 8006948:	2300      	movs	r3, #0
 800694a:	603b      	str	r3, [r7, #0]
 800694c:	e022      	b.n	8006994 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006952:	4618      	mov	r0, r3
 8006954:	f7fe f967 	bl	8004c26 <get_fat>
 8006958:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800695a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800695c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006960:	d104      	bne.n	800696c <f_lseek+0x306>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2201      	movs	r2, #1
 8006966:	755a      	strb	r2, [r3, #21]
 8006968:	2301      	movs	r3, #1
 800696a:	e081      	b.n	8006a70 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800696c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800696e:	2b01      	cmp	r3, #1
 8006970:	d904      	bls.n	800697c <f_lseek+0x316>
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	695b      	ldr	r3, [r3, #20]
 8006976:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006978:	429a      	cmp	r2, r3
 800697a:	d304      	bcc.n	8006986 <f_lseek+0x320>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2202      	movs	r2, #2
 8006980:	755a      	strb	r2, [r3, #21]
 8006982:	2302      	movs	r3, #2
 8006984:	e074      	b.n	8006a70 <f_lseek+0x40a>
					fp->clust = clst;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800698a:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800698c:	683a      	ldr	r2, [r7, #0]
 800698e:	69fb      	ldr	r3, [r7, #28]
 8006990:	429a      	cmp	r2, r3
 8006992:	d8c0      	bhi.n	8006916 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	699a      	ldr	r2, [r3, #24]
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	441a      	add	r2, r3
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d012      	beq.n	80069d0 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80069ae:	4618      	mov	r0, r3
 80069b0:	f7fe f91a 	bl	8004be8 <clust2sect>
 80069b4:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80069b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d104      	bne.n	80069c6 <f_lseek+0x360>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2202      	movs	r2, #2
 80069c0:	755a      	strb	r2, [r3, #21]
 80069c2:	2302      	movs	r3, #2
 80069c4:	e054      	b.n	8006a70 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	0a5b      	lsrs	r3, r3, #9
 80069ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069cc:	4413      	add	r3, r2
 80069ce:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	699a      	ldr	r2, [r3, #24]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	68db      	ldr	r3, [r3, #12]
 80069d8:	429a      	cmp	r2, r3
 80069da:	d90a      	bls.n	80069f2 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	699a      	ldr	r2, [r3, #24]
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	7d1b      	ldrb	r3, [r3, #20]
 80069e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069ec:	b2da      	uxtb	r2, r3
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	699b      	ldr	r3, [r3, #24]
 80069f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d036      	beq.n	8006a6c <f_lseek+0x406>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6a1b      	ldr	r3, [r3, #32]
 8006a02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d031      	beq.n	8006a6c <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	7d1b      	ldrb	r3, [r3, #20]
 8006a0c:	b25b      	sxtb	r3, r3
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	da18      	bge.n	8006a44 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	7858      	ldrb	r0, [r3, #1]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6a1a      	ldr	r2, [r3, #32]
 8006a20:	2301      	movs	r3, #1
 8006a22:	f7fd fd57 	bl	80044d4 <disk_write>
 8006a26:	4603      	mov	r3, r0
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d004      	beq.n	8006a36 <f_lseek+0x3d0>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	755a      	strb	r2, [r3, #21]
 8006a32:	2301      	movs	r3, #1
 8006a34:	e01c      	b.n	8006a70 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	7d1b      	ldrb	r3, [r3, #20]
 8006a3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a3e:	b2da      	uxtb	r2, r3
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	7858      	ldrb	r0, [r3, #1]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006a4e:	2301      	movs	r3, #1
 8006a50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a52:	f7fd fd1f 	bl	8004494 <disk_read>
 8006a56:	4603      	mov	r3, r0
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d004      	beq.n	8006a66 <f_lseek+0x400>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2201      	movs	r2, #1
 8006a60:	755a      	strb	r2, [r3, #21]
 8006a62:	2301      	movs	r3, #1
 8006a64:	e004      	b.n	8006a70 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a6a:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8006a6c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3740      	adds	r7, #64	; 0x40
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}

08006a78 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b092      	sub	sp, #72	; 0x48
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	60f8      	str	r0, [r7, #12]
 8006a80:	60b9      	str	r1, [r7, #8]
 8006a82:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8006a84:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8006a88:	f107 030c 	add.w	r3, r7, #12
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f7fe ff7c 	bl	800598c <find_volume>
 8006a94:	4603      	mov	r3, r0
 8006a96:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8006a9a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	f040 8099 	bne.w	8006bd6 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8006aa4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8006aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aac:	691a      	ldr	r2, [r3, #16]
 8006aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab0:	695b      	ldr	r3, [r3, #20]
 8006ab2:	3b02      	subs	r3, #2
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d804      	bhi.n	8006ac2 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8006ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aba:	691a      	ldr	r2, [r3, #16]
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	601a      	str	r2, [r3, #0]
 8006ac0:	e089      	b.n	8006bd6 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8006ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac8:	781b      	ldrb	r3, [r3, #0]
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d128      	bne.n	8006b20 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8006ace:	2302      	movs	r3, #2
 8006ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ad4:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8006ad6:	f107 0314 	add.w	r3, r7, #20
 8006ada:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006adc:	4618      	mov	r0, r3
 8006ade:	f7fe f8a2 	bl	8004c26 <get_fat>
 8006ae2:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8006ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aea:	d103      	bne.n	8006af4 <f_getfree+0x7c>
 8006aec:	2301      	movs	r3, #1
 8006aee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006af2:	e063      	b.n	8006bbc <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8006af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006af6:	2b01      	cmp	r3, #1
 8006af8:	d103      	bne.n	8006b02 <f_getfree+0x8a>
 8006afa:	2302      	movs	r3, #2
 8006afc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006b00:	e05c      	b.n	8006bbc <f_getfree+0x144>
					if (stat == 0) nfree++;
 8006b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d102      	bne.n	8006b0e <f_getfree+0x96>
 8006b08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b0a:	3301      	adds	r3, #1
 8006b0c:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8006b0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b10:	3301      	adds	r3, #1
 8006b12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b16:	695b      	ldr	r3, [r3, #20]
 8006b18:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d3db      	bcc.n	8006ad6 <f_getfree+0x5e>
 8006b1e:	e04d      	b.n	8006bbc <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8006b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b22:	695b      	ldr	r3, [r3, #20]
 8006b24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b28:	6a1b      	ldr	r3, [r3, #32]
 8006b2a:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	637b      	str	r3, [r7, #52]	; 0x34
 8006b30:	2300      	movs	r3, #0
 8006b32:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8006b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d113      	bne.n	8006b62 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8006b3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b3e:	1c5a      	adds	r2, r3, #1
 8006b40:	63ba      	str	r2, [r7, #56]	; 0x38
 8006b42:	4619      	mov	r1, r3
 8006b44:	f7fd ffb4 	bl	8004ab0 <move_window>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8006b4e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d131      	bne.n	8006bba <f_getfree+0x142>
							p = fs->win;
 8006b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b58:	3330      	adds	r3, #48	; 0x30
 8006b5a:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8006b5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b60:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8006b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	2b02      	cmp	r3, #2
 8006b68:	d10f      	bne.n	8006b8a <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8006b6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b6c:	f7fd fcf0 	bl	8004550 <ld_word>
 8006b70:	4603      	mov	r3, r0
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d102      	bne.n	8006b7c <f_getfree+0x104>
 8006b76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b78:	3301      	adds	r3, #1
 8006b7a:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8006b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b7e:	3302      	adds	r3, #2
 8006b80:	633b      	str	r3, [r7, #48]	; 0x30
 8006b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b84:	3b02      	subs	r3, #2
 8006b86:	637b      	str	r3, [r7, #52]	; 0x34
 8006b88:	e010      	b.n	8006bac <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8006b8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b8c:	f7fd fcf8 	bl	8004580 <ld_dword>
 8006b90:	4603      	mov	r3, r0
 8006b92:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d102      	bne.n	8006ba0 <f_getfree+0x128>
 8006b9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b9c:	3301      	adds	r3, #1
 8006b9e:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8006ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba2:	3304      	adds	r3, #4
 8006ba4:	633b      	str	r3, [r7, #48]	; 0x30
 8006ba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ba8:	3b04      	subs	r3, #4
 8006baa:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8006bac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bae:	3b01      	subs	r3, #1
 8006bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d1bd      	bne.n	8006b34 <f_getfree+0xbc>
 8006bb8:	e000      	b.n	8006bbc <f_getfree+0x144>
							if (res != FR_OK) break;
 8006bba:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006bc0:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8006bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006bc6:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8006bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bca:	791a      	ldrb	r2, [r3, #4]
 8006bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bce:	f042 0201 	orr.w	r2, r2, #1
 8006bd2:	b2d2      	uxtb	r2, r2
 8006bd4:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8006bd6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3748      	adds	r7, #72	; 0x48
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}

08006be2 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8006be2:	b580      	push	{r7, lr}
 8006be4:	b088      	sub	sp, #32
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	60f8      	str	r0, [r7, #12]
 8006bea:	60b9      	str	r1, [r7, #8]
 8006bec:	607a      	str	r2, [r7, #4]
	int n = 0;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8006bf6:	e01b      	b.n	8006c30 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8006bf8:	f107 0310 	add.w	r3, r7, #16
 8006bfc:	f107 0114 	add.w	r1, r7, #20
 8006c00:	2201      	movs	r2, #1
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f7ff fb48 	bl	8006298 <f_read>
		if (rc != 1) break;
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	d116      	bne.n	8006c3c <f_gets+0x5a>
		c = s[0];
 8006c0e:	7d3b      	ldrb	r3, [r7, #20]
 8006c10:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8006c12:	7dfb      	ldrb	r3, [r7, #23]
 8006c14:	2b0d      	cmp	r3, #13
 8006c16:	d100      	bne.n	8006c1a <f_gets+0x38>
 8006c18:	e00a      	b.n	8006c30 <f_gets+0x4e>
		*p++ = c;
 8006c1a:	69bb      	ldr	r3, [r7, #24]
 8006c1c:	1c5a      	adds	r2, r3, #1
 8006c1e:	61ba      	str	r2, [r7, #24]
 8006c20:	7dfa      	ldrb	r2, [r7, #23]
 8006c22:	701a      	strb	r2, [r3, #0]
		n++;
 8006c24:	69fb      	ldr	r3, [r7, #28]
 8006c26:	3301      	adds	r3, #1
 8006c28:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8006c2a:	7dfb      	ldrb	r3, [r7, #23]
 8006c2c:	2b0a      	cmp	r3, #10
 8006c2e:	d007      	beq.n	8006c40 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	3b01      	subs	r3, #1
 8006c34:	69fa      	ldr	r2, [r7, #28]
 8006c36:	429a      	cmp	r2, r3
 8006c38:	dbde      	blt.n	8006bf8 <f_gets+0x16>
 8006c3a:	e002      	b.n	8006c42 <f_gets+0x60>
		if (rc != 1) break;
 8006c3c:	bf00      	nop
 8006c3e:	e000      	b.n	8006c42 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8006c40:	bf00      	nop
	}
	*p = 0;
 8006c42:	69bb      	ldr	r3, [r7, #24]
 8006c44:	2200      	movs	r2, #0
 8006c46:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8006c48:	69fb      	ldr	r3, [r7, #28]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d001      	beq.n	8006c52 <f_gets+0x70>
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	e000      	b.n	8006c54 <f_gets+0x72>
 8006c52:	2300      	movs	r3, #0
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3720      	adds	r7, #32
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}

08006c5c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b087      	sub	sp, #28
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	60f8      	str	r0, [r7, #12]
 8006c64:	60b9      	str	r1, [r7, #8]
 8006c66:	4613      	mov	r3, r2
 8006c68:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8006c72:	4b1f      	ldr	r3, [pc, #124]	; (8006cf0 <FATFS_LinkDriverEx+0x94>)
 8006c74:	7a5b      	ldrb	r3, [r3, #9]
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d131      	bne.n	8006ce0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006c7c:	4b1c      	ldr	r3, [pc, #112]	; (8006cf0 <FATFS_LinkDriverEx+0x94>)
 8006c7e:	7a5b      	ldrb	r3, [r3, #9]
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	461a      	mov	r2, r3
 8006c84:	4b1a      	ldr	r3, [pc, #104]	; (8006cf0 <FATFS_LinkDriverEx+0x94>)
 8006c86:	2100      	movs	r1, #0
 8006c88:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8006c8a:	4b19      	ldr	r3, [pc, #100]	; (8006cf0 <FATFS_LinkDriverEx+0x94>)
 8006c8c:	7a5b      	ldrb	r3, [r3, #9]
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	4a17      	ldr	r2, [pc, #92]	; (8006cf0 <FATFS_LinkDriverEx+0x94>)
 8006c92:	009b      	lsls	r3, r3, #2
 8006c94:	4413      	add	r3, r2
 8006c96:	68fa      	ldr	r2, [r7, #12]
 8006c98:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8006c9a:	4b15      	ldr	r3, [pc, #84]	; (8006cf0 <FATFS_LinkDriverEx+0x94>)
 8006c9c:	7a5b      	ldrb	r3, [r3, #9]
 8006c9e:	b2db      	uxtb	r3, r3
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	4b13      	ldr	r3, [pc, #76]	; (8006cf0 <FATFS_LinkDriverEx+0x94>)
 8006ca4:	4413      	add	r3, r2
 8006ca6:	79fa      	ldrb	r2, [r7, #7]
 8006ca8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006caa:	4b11      	ldr	r3, [pc, #68]	; (8006cf0 <FATFS_LinkDriverEx+0x94>)
 8006cac:	7a5b      	ldrb	r3, [r3, #9]
 8006cae:	b2db      	uxtb	r3, r3
 8006cb0:	1c5a      	adds	r2, r3, #1
 8006cb2:	b2d1      	uxtb	r1, r2
 8006cb4:	4a0e      	ldr	r2, [pc, #56]	; (8006cf0 <FATFS_LinkDriverEx+0x94>)
 8006cb6:	7251      	strb	r1, [r2, #9]
 8006cb8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006cba:	7dbb      	ldrb	r3, [r7, #22]
 8006cbc:	3330      	adds	r3, #48	; 0x30
 8006cbe:	b2da      	uxtb	r2, r3
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	223a      	movs	r2, #58	; 0x3a
 8006cca:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	3302      	adds	r3, #2
 8006cd0:	222f      	movs	r2, #47	; 0x2f
 8006cd2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	3303      	adds	r3, #3
 8006cd8:	2200      	movs	r2, #0
 8006cda:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006ce0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	371c      	adds	r7, #28
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr
 8006cee:	bf00      	nop
 8006cf0:	20000454 	.word	0x20000454

08006cf4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b082      	sub	sp, #8
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006cfe:	2200      	movs	r2, #0
 8006d00:	6839      	ldr	r1, [r7, #0]
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f7ff ffaa 	bl	8006c5c <FATFS_LinkDriverEx>
 8006d08:	4603      	mov	r3, r0
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3708      	adds	r7, #8
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
	...

08006d14 <__errno>:
 8006d14:	4b01      	ldr	r3, [pc, #4]	; (8006d1c <__errno+0x8>)
 8006d16:	6818      	ldr	r0, [r3, #0]
 8006d18:	4770      	bx	lr
 8006d1a:	bf00      	nop
 8006d1c:	2000002c 	.word	0x2000002c

08006d20 <__libc_init_array>:
 8006d20:	b570      	push	{r4, r5, r6, lr}
 8006d22:	4d0d      	ldr	r5, [pc, #52]	; (8006d58 <__libc_init_array+0x38>)
 8006d24:	4c0d      	ldr	r4, [pc, #52]	; (8006d5c <__libc_init_array+0x3c>)
 8006d26:	1b64      	subs	r4, r4, r5
 8006d28:	10a4      	asrs	r4, r4, #2
 8006d2a:	2600      	movs	r6, #0
 8006d2c:	42a6      	cmp	r6, r4
 8006d2e:	d109      	bne.n	8006d44 <__libc_init_array+0x24>
 8006d30:	4d0b      	ldr	r5, [pc, #44]	; (8006d60 <__libc_init_array+0x40>)
 8006d32:	4c0c      	ldr	r4, [pc, #48]	; (8006d64 <__libc_init_array+0x44>)
 8006d34:	f001 fa14 	bl	8008160 <_init>
 8006d38:	1b64      	subs	r4, r4, r5
 8006d3a:	10a4      	asrs	r4, r4, #2
 8006d3c:	2600      	movs	r6, #0
 8006d3e:	42a6      	cmp	r6, r4
 8006d40:	d105      	bne.n	8006d4e <__libc_init_array+0x2e>
 8006d42:	bd70      	pop	{r4, r5, r6, pc}
 8006d44:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d48:	4798      	blx	r3
 8006d4a:	3601      	adds	r6, #1
 8006d4c:	e7ee      	b.n	8006d2c <__libc_init_array+0xc>
 8006d4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d52:	4798      	blx	r3
 8006d54:	3601      	adds	r6, #1
 8006d56:	e7f2      	b.n	8006d3e <__libc_init_array+0x1e>
 8006d58:	08008dd4 	.word	0x08008dd4
 8006d5c:	08008dd4 	.word	0x08008dd4
 8006d60:	08008dd4 	.word	0x08008dd4
 8006d64:	08008dd8 	.word	0x08008dd8

08006d68 <memset>:
 8006d68:	4402      	add	r2, r0
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d100      	bne.n	8006d72 <memset+0xa>
 8006d70:	4770      	bx	lr
 8006d72:	f803 1b01 	strb.w	r1, [r3], #1
 8006d76:	e7f9      	b.n	8006d6c <memset+0x4>

08006d78 <iprintf>:
 8006d78:	b40f      	push	{r0, r1, r2, r3}
 8006d7a:	4b0a      	ldr	r3, [pc, #40]	; (8006da4 <iprintf+0x2c>)
 8006d7c:	b513      	push	{r0, r1, r4, lr}
 8006d7e:	681c      	ldr	r4, [r3, #0]
 8006d80:	b124      	cbz	r4, 8006d8c <iprintf+0x14>
 8006d82:	69a3      	ldr	r3, [r4, #24]
 8006d84:	b913      	cbnz	r3, 8006d8c <iprintf+0x14>
 8006d86:	4620      	mov	r0, r4
 8006d88:	f000 fa92 	bl	80072b0 <__sinit>
 8006d8c:	ab05      	add	r3, sp, #20
 8006d8e:	9a04      	ldr	r2, [sp, #16]
 8006d90:	68a1      	ldr	r1, [r4, #8]
 8006d92:	9301      	str	r3, [sp, #4]
 8006d94:	4620      	mov	r0, r4
 8006d96:	f000 fdf7 	bl	8007988 <_vfiprintf_r>
 8006d9a:	b002      	add	sp, #8
 8006d9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006da0:	b004      	add	sp, #16
 8006da2:	4770      	bx	lr
 8006da4:	2000002c 	.word	0x2000002c

08006da8 <_puts_r>:
 8006da8:	b570      	push	{r4, r5, r6, lr}
 8006daa:	460e      	mov	r6, r1
 8006dac:	4605      	mov	r5, r0
 8006dae:	b118      	cbz	r0, 8006db8 <_puts_r+0x10>
 8006db0:	6983      	ldr	r3, [r0, #24]
 8006db2:	b90b      	cbnz	r3, 8006db8 <_puts_r+0x10>
 8006db4:	f000 fa7c 	bl	80072b0 <__sinit>
 8006db8:	69ab      	ldr	r3, [r5, #24]
 8006dba:	68ac      	ldr	r4, [r5, #8]
 8006dbc:	b913      	cbnz	r3, 8006dc4 <_puts_r+0x1c>
 8006dbe:	4628      	mov	r0, r5
 8006dc0:	f000 fa76 	bl	80072b0 <__sinit>
 8006dc4:	4b2c      	ldr	r3, [pc, #176]	; (8006e78 <_puts_r+0xd0>)
 8006dc6:	429c      	cmp	r4, r3
 8006dc8:	d120      	bne.n	8006e0c <_puts_r+0x64>
 8006dca:	686c      	ldr	r4, [r5, #4]
 8006dcc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006dce:	07db      	lsls	r3, r3, #31
 8006dd0:	d405      	bmi.n	8006dde <_puts_r+0x36>
 8006dd2:	89a3      	ldrh	r3, [r4, #12]
 8006dd4:	0598      	lsls	r0, r3, #22
 8006dd6:	d402      	bmi.n	8006dde <_puts_r+0x36>
 8006dd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006dda:	f000 fb07 	bl	80073ec <__retarget_lock_acquire_recursive>
 8006dde:	89a3      	ldrh	r3, [r4, #12]
 8006de0:	0719      	lsls	r1, r3, #28
 8006de2:	d51d      	bpl.n	8006e20 <_puts_r+0x78>
 8006de4:	6923      	ldr	r3, [r4, #16]
 8006de6:	b1db      	cbz	r3, 8006e20 <_puts_r+0x78>
 8006de8:	3e01      	subs	r6, #1
 8006dea:	68a3      	ldr	r3, [r4, #8]
 8006dec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006df0:	3b01      	subs	r3, #1
 8006df2:	60a3      	str	r3, [r4, #8]
 8006df4:	bb39      	cbnz	r1, 8006e46 <_puts_r+0x9e>
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	da38      	bge.n	8006e6c <_puts_r+0xc4>
 8006dfa:	4622      	mov	r2, r4
 8006dfc:	210a      	movs	r1, #10
 8006dfe:	4628      	mov	r0, r5
 8006e00:	f000 f87c 	bl	8006efc <__swbuf_r>
 8006e04:	3001      	adds	r0, #1
 8006e06:	d011      	beq.n	8006e2c <_puts_r+0x84>
 8006e08:	250a      	movs	r5, #10
 8006e0a:	e011      	b.n	8006e30 <_puts_r+0x88>
 8006e0c:	4b1b      	ldr	r3, [pc, #108]	; (8006e7c <_puts_r+0xd4>)
 8006e0e:	429c      	cmp	r4, r3
 8006e10:	d101      	bne.n	8006e16 <_puts_r+0x6e>
 8006e12:	68ac      	ldr	r4, [r5, #8]
 8006e14:	e7da      	b.n	8006dcc <_puts_r+0x24>
 8006e16:	4b1a      	ldr	r3, [pc, #104]	; (8006e80 <_puts_r+0xd8>)
 8006e18:	429c      	cmp	r4, r3
 8006e1a:	bf08      	it	eq
 8006e1c:	68ec      	ldreq	r4, [r5, #12]
 8006e1e:	e7d5      	b.n	8006dcc <_puts_r+0x24>
 8006e20:	4621      	mov	r1, r4
 8006e22:	4628      	mov	r0, r5
 8006e24:	f000 f8bc 	bl	8006fa0 <__swsetup_r>
 8006e28:	2800      	cmp	r0, #0
 8006e2a:	d0dd      	beq.n	8006de8 <_puts_r+0x40>
 8006e2c:	f04f 35ff 	mov.w	r5, #4294967295
 8006e30:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e32:	07da      	lsls	r2, r3, #31
 8006e34:	d405      	bmi.n	8006e42 <_puts_r+0x9a>
 8006e36:	89a3      	ldrh	r3, [r4, #12]
 8006e38:	059b      	lsls	r3, r3, #22
 8006e3a:	d402      	bmi.n	8006e42 <_puts_r+0x9a>
 8006e3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e3e:	f000 fad6 	bl	80073ee <__retarget_lock_release_recursive>
 8006e42:	4628      	mov	r0, r5
 8006e44:	bd70      	pop	{r4, r5, r6, pc}
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	da04      	bge.n	8006e54 <_puts_r+0xac>
 8006e4a:	69a2      	ldr	r2, [r4, #24]
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	dc06      	bgt.n	8006e5e <_puts_r+0xb6>
 8006e50:	290a      	cmp	r1, #10
 8006e52:	d004      	beq.n	8006e5e <_puts_r+0xb6>
 8006e54:	6823      	ldr	r3, [r4, #0]
 8006e56:	1c5a      	adds	r2, r3, #1
 8006e58:	6022      	str	r2, [r4, #0]
 8006e5a:	7019      	strb	r1, [r3, #0]
 8006e5c:	e7c5      	b.n	8006dea <_puts_r+0x42>
 8006e5e:	4622      	mov	r2, r4
 8006e60:	4628      	mov	r0, r5
 8006e62:	f000 f84b 	bl	8006efc <__swbuf_r>
 8006e66:	3001      	adds	r0, #1
 8006e68:	d1bf      	bne.n	8006dea <_puts_r+0x42>
 8006e6a:	e7df      	b.n	8006e2c <_puts_r+0x84>
 8006e6c:	6823      	ldr	r3, [r4, #0]
 8006e6e:	250a      	movs	r5, #10
 8006e70:	1c5a      	adds	r2, r3, #1
 8006e72:	6022      	str	r2, [r4, #0]
 8006e74:	701d      	strb	r5, [r3, #0]
 8006e76:	e7db      	b.n	8006e30 <_puts_r+0x88>
 8006e78:	08008d58 	.word	0x08008d58
 8006e7c:	08008d78 	.word	0x08008d78
 8006e80:	08008d38 	.word	0x08008d38

08006e84 <puts>:
 8006e84:	4b02      	ldr	r3, [pc, #8]	; (8006e90 <puts+0xc>)
 8006e86:	4601      	mov	r1, r0
 8006e88:	6818      	ldr	r0, [r3, #0]
 8006e8a:	f7ff bf8d 	b.w	8006da8 <_puts_r>
 8006e8e:	bf00      	nop
 8006e90:	2000002c 	.word	0x2000002c

08006e94 <sniprintf>:
 8006e94:	b40c      	push	{r2, r3}
 8006e96:	b530      	push	{r4, r5, lr}
 8006e98:	4b17      	ldr	r3, [pc, #92]	; (8006ef8 <sniprintf+0x64>)
 8006e9a:	1e0c      	subs	r4, r1, #0
 8006e9c:	681d      	ldr	r5, [r3, #0]
 8006e9e:	b09d      	sub	sp, #116	; 0x74
 8006ea0:	da08      	bge.n	8006eb4 <sniprintf+0x20>
 8006ea2:	238b      	movs	r3, #139	; 0x8b
 8006ea4:	602b      	str	r3, [r5, #0]
 8006ea6:	f04f 30ff 	mov.w	r0, #4294967295
 8006eaa:	b01d      	add	sp, #116	; 0x74
 8006eac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006eb0:	b002      	add	sp, #8
 8006eb2:	4770      	bx	lr
 8006eb4:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006eb8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006ebc:	bf14      	ite	ne
 8006ebe:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006ec2:	4623      	moveq	r3, r4
 8006ec4:	9304      	str	r3, [sp, #16]
 8006ec6:	9307      	str	r3, [sp, #28]
 8006ec8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006ecc:	9002      	str	r0, [sp, #8]
 8006ece:	9006      	str	r0, [sp, #24]
 8006ed0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006ed4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006ed6:	ab21      	add	r3, sp, #132	; 0x84
 8006ed8:	a902      	add	r1, sp, #8
 8006eda:	4628      	mov	r0, r5
 8006edc:	9301      	str	r3, [sp, #4]
 8006ede:	f000 fc29 	bl	8007734 <_svfiprintf_r>
 8006ee2:	1c43      	adds	r3, r0, #1
 8006ee4:	bfbc      	itt	lt
 8006ee6:	238b      	movlt	r3, #139	; 0x8b
 8006ee8:	602b      	strlt	r3, [r5, #0]
 8006eea:	2c00      	cmp	r4, #0
 8006eec:	d0dd      	beq.n	8006eaa <sniprintf+0x16>
 8006eee:	9b02      	ldr	r3, [sp, #8]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	701a      	strb	r2, [r3, #0]
 8006ef4:	e7d9      	b.n	8006eaa <sniprintf+0x16>
 8006ef6:	bf00      	nop
 8006ef8:	2000002c 	.word	0x2000002c

08006efc <__swbuf_r>:
 8006efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006efe:	460e      	mov	r6, r1
 8006f00:	4614      	mov	r4, r2
 8006f02:	4605      	mov	r5, r0
 8006f04:	b118      	cbz	r0, 8006f0e <__swbuf_r+0x12>
 8006f06:	6983      	ldr	r3, [r0, #24]
 8006f08:	b90b      	cbnz	r3, 8006f0e <__swbuf_r+0x12>
 8006f0a:	f000 f9d1 	bl	80072b0 <__sinit>
 8006f0e:	4b21      	ldr	r3, [pc, #132]	; (8006f94 <__swbuf_r+0x98>)
 8006f10:	429c      	cmp	r4, r3
 8006f12:	d12b      	bne.n	8006f6c <__swbuf_r+0x70>
 8006f14:	686c      	ldr	r4, [r5, #4]
 8006f16:	69a3      	ldr	r3, [r4, #24]
 8006f18:	60a3      	str	r3, [r4, #8]
 8006f1a:	89a3      	ldrh	r3, [r4, #12]
 8006f1c:	071a      	lsls	r2, r3, #28
 8006f1e:	d52f      	bpl.n	8006f80 <__swbuf_r+0x84>
 8006f20:	6923      	ldr	r3, [r4, #16]
 8006f22:	b36b      	cbz	r3, 8006f80 <__swbuf_r+0x84>
 8006f24:	6923      	ldr	r3, [r4, #16]
 8006f26:	6820      	ldr	r0, [r4, #0]
 8006f28:	1ac0      	subs	r0, r0, r3
 8006f2a:	6963      	ldr	r3, [r4, #20]
 8006f2c:	b2f6      	uxtb	r6, r6
 8006f2e:	4283      	cmp	r3, r0
 8006f30:	4637      	mov	r7, r6
 8006f32:	dc04      	bgt.n	8006f3e <__swbuf_r+0x42>
 8006f34:	4621      	mov	r1, r4
 8006f36:	4628      	mov	r0, r5
 8006f38:	f000 f926 	bl	8007188 <_fflush_r>
 8006f3c:	bb30      	cbnz	r0, 8006f8c <__swbuf_r+0x90>
 8006f3e:	68a3      	ldr	r3, [r4, #8]
 8006f40:	3b01      	subs	r3, #1
 8006f42:	60a3      	str	r3, [r4, #8]
 8006f44:	6823      	ldr	r3, [r4, #0]
 8006f46:	1c5a      	adds	r2, r3, #1
 8006f48:	6022      	str	r2, [r4, #0]
 8006f4a:	701e      	strb	r6, [r3, #0]
 8006f4c:	6963      	ldr	r3, [r4, #20]
 8006f4e:	3001      	adds	r0, #1
 8006f50:	4283      	cmp	r3, r0
 8006f52:	d004      	beq.n	8006f5e <__swbuf_r+0x62>
 8006f54:	89a3      	ldrh	r3, [r4, #12]
 8006f56:	07db      	lsls	r3, r3, #31
 8006f58:	d506      	bpl.n	8006f68 <__swbuf_r+0x6c>
 8006f5a:	2e0a      	cmp	r6, #10
 8006f5c:	d104      	bne.n	8006f68 <__swbuf_r+0x6c>
 8006f5e:	4621      	mov	r1, r4
 8006f60:	4628      	mov	r0, r5
 8006f62:	f000 f911 	bl	8007188 <_fflush_r>
 8006f66:	b988      	cbnz	r0, 8006f8c <__swbuf_r+0x90>
 8006f68:	4638      	mov	r0, r7
 8006f6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f6c:	4b0a      	ldr	r3, [pc, #40]	; (8006f98 <__swbuf_r+0x9c>)
 8006f6e:	429c      	cmp	r4, r3
 8006f70:	d101      	bne.n	8006f76 <__swbuf_r+0x7a>
 8006f72:	68ac      	ldr	r4, [r5, #8]
 8006f74:	e7cf      	b.n	8006f16 <__swbuf_r+0x1a>
 8006f76:	4b09      	ldr	r3, [pc, #36]	; (8006f9c <__swbuf_r+0xa0>)
 8006f78:	429c      	cmp	r4, r3
 8006f7a:	bf08      	it	eq
 8006f7c:	68ec      	ldreq	r4, [r5, #12]
 8006f7e:	e7ca      	b.n	8006f16 <__swbuf_r+0x1a>
 8006f80:	4621      	mov	r1, r4
 8006f82:	4628      	mov	r0, r5
 8006f84:	f000 f80c 	bl	8006fa0 <__swsetup_r>
 8006f88:	2800      	cmp	r0, #0
 8006f8a:	d0cb      	beq.n	8006f24 <__swbuf_r+0x28>
 8006f8c:	f04f 37ff 	mov.w	r7, #4294967295
 8006f90:	e7ea      	b.n	8006f68 <__swbuf_r+0x6c>
 8006f92:	bf00      	nop
 8006f94:	08008d58 	.word	0x08008d58
 8006f98:	08008d78 	.word	0x08008d78
 8006f9c:	08008d38 	.word	0x08008d38

08006fa0 <__swsetup_r>:
 8006fa0:	4b32      	ldr	r3, [pc, #200]	; (800706c <__swsetup_r+0xcc>)
 8006fa2:	b570      	push	{r4, r5, r6, lr}
 8006fa4:	681d      	ldr	r5, [r3, #0]
 8006fa6:	4606      	mov	r6, r0
 8006fa8:	460c      	mov	r4, r1
 8006faa:	b125      	cbz	r5, 8006fb6 <__swsetup_r+0x16>
 8006fac:	69ab      	ldr	r3, [r5, #24]
 8006fae:	b913      	cbnz	r3, 8006fb6 <__swsetup_r+0x16>
 8006fb0:	4628      	mov	r0, r5
 8006fb2:	f000 f97d 	bl	80072b0 <__sinit>
 8006fb6:	4b2e      	ldr	r3, [pc, #184]	; (8007070 <__swsetup_r+0xd0>)
 8006fb8:	429c      	cmp	r4, r3
 8006fba:	d10f      	bne.n	8006fdc <__swsetup_r+0x3c>
 8006fbc:	686c      	ldr	r4, [r5, #4]
 8006fbe:	89a3      	ldrh	r3, [r4, #12]
 8006fc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006fc4:	0719      	lsls	r1, r3, #28
 8006fc6:	d42c      	bmi.n	8007022 <__swsetup_r+0x82>
 8006fc8:	06dd      	lsls	r5, r3, #27
 8006fca:	d411      	bmi.n	8006ff0 <__swsetup_r+0x50>
 8006fcc:	2309      	movs	r3, #9
 8006fce:	6033      	str	r3, [r6, #0]
 8006fd0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006fd4:	81a3      	strh	r3, [r4, #12]
 8006fd6:	f04f 30ff 	mov.w	r0, #4294967295
 8006fda:	e03e      	b.n	800705a <__swsetup_r+0xba>
 8006fdc:	4b25      	ldr	r3, [pc, #148]	; (8007074 <__swsetup_r+0xd4>)
 8006fde:	429c      	cmp	r4, r3
 8006fe0:	d101      	bne.n	8006fe6 <__swsetup_r+0x46>
 8006fe2:	68ac      	ldr	r4, [r5, #8]
 8006fe4:	e7eb      	b.n	8006fbe <__swsetup_r+0x1e>
 8006fe6:	4b24      	ldr	r3, [pc, #144]	; (8007078 <__swsetup_r+0xd8>)
 8006fe8:	429c      	cmp	r4, r3
 8006fea:	bf08      	it	eq
 8006fec:	68ec      	ldreq	r4, [r5, #12]
 8006fee:	e7e6      	b.n	8006fbe <__swsetup_r+0x1e>
 8006ff0:	0758      	lsls	r0, r3, #29
 8006ff2:	d512      	bpl.n	800701a <__swsetup_r+0x7a>
 8006ff4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ff6:	b141      	cbz	r1, 800700a <__swsetup_r+0x6a>
 8006ff8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ffc:	4299      	cmp	r1, r3
 8006ffe:	d002      	beq.n	8007006 <__swsetup_r+0x66>
 8007000:	4630      	mov	r0, r6
 8007002:	f000 fa5b 	bl	80074bc <_free_r>
 8007006:	2300      	movs	r3, #0
 8007008:	6363      	str	r3, [r4, #52]	; 0x34
 800700a:	89a3      	ldrh	r3, [r4, #12]
 800700c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007010:	81a3      	strh	r3, [r4, #12]
 8007012:	2300      	movs	r3, #0
 8007014:	6063      	str	r3, [r4, #4]
 8007016:	6923      	ldr	r3, [r4, #16]
 8007018:	6023      	str	r3, [r4, #0]
 800701a:	89a3      	ldrh	r3, [r4, #12]
 800701c:	f043 0308 	orr.w	r3, r3, #8
 8007020:	81a3      	strh	r3, [r4, #12]
 8007022:	6923      	ldr	r3, [r4, #16]
 8007024:	b94b      	cbnz	r3, 800703a <__swsetup_r+0x9a>
 8007026:	89a3      	ldrh	r3, [r4, #12]
 8007028:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800702c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007030:	d003      	beq.n	800703a <__swsetup_r+0x9a>
 8007032:	4621      	mov	r1, r4
 8007034:	4630      	mov	r0, r6
 8007036:	f000 fa01 	bl	800743c <__smakebuf_r>
 800703a:	89a0      	ldrh	r0, [r4, #12]
 800703c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007040:	f010 0301 	ands.w	r3, r0, #1
 8007044:	d00a      	beq.n	800705c <__swsetup_r+0xbc>
 8007046:	2300      	movs	r3, #0
 8007048:	60a3      	str	r3, [r4, #8]
 800704a:	6963      	ldr	r3, [r4, #20]
 800704c:	425b      	negs	r3, r3
 800704e:	61a3      	str	r3, [r4, #24]
 8007050:	6923      	ldr	r3, [r4, #16]
 8007052:	b943      	cbnz	r3, 8007066 <__swsetup_r+0xc6>
 8007054:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007058:	d1ba      	bne.n	8006fd0 <__swsetup_r+0x30>
 800705a:	bd70      	pop	{r4, r5, r6, pc}
 800705c:	0781      	lsls	r1, r0, #30
 800705e:	bf58      	it	pl
 8007060:	6963      	ldrpl	r3, [r4, #20]
 8007062:	60a3      	str	r3, [r4, #8]
 8007064:	e7f4      	b.n	8007050 <__swsetup_r+0xb0>
 8007066:	2000      	movs	r0, #0
 8007068:	e7f7      	b.n	800705a <__swsetup_r+0xba>
 800706a:	bf00      	nop
 800706c:	2000002c 	.word	0x2000002c
 8007070:	08008d58 	.word	0x08008d58
 8007074:	08008d78 	.word	0x08008d78
 8007078:	08008d38 	.word	0x08008d38

0800707c <__sflush_r>:
 800707c:	898a      	ldrh	r2, [r1, #12]
 800707e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007082:	4605      	mov	r5, r0
 8007084:	0710      	lsls	r0, r2, #28
 8007086:	460c      	mov	r4, r1
 8007088:	d458      	bmi.n	800713c <__sflush_r+0xc0>
 800708a:	684b      	ldr	r3, [r1, #4]
 800708c:	2b00      	cmp	r3, #0
 800708e:	dc05      	bgt.n	800709c <__sflush_r+0x20>
 8007090:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007092:	2b00      	cmp	r3, #0
 8007094:	dc02      	bgt.n	800709c <__sflush_r+0x20>
 8007096:	2000      	movs	r0, #0
 8007098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800709c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800709e:	2e00      	cmp	r6, #0
 80070a0:	d0f9      	beq.n	8007096 <__sflush_r+0x1a>
 80070a2:	2300      	movs	r3, #0
 80070a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80070a8:	682f      	ldr	r7, [r5, #0]
 80070aa:	602b      	str	r3, [r5, #0]
 80070ac:	d032      	beq.n	8007114 <__sflush_r+0x98>
 80070ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80070b0:	89a3      	ldrh	r3, [r4, #12]
 80070b2:	075a      	lsls	r2, r3, #29
 80070b4:	d505      	bpl.n	80070c2 <__sflush_r+0x46>
 80070b6:	6863      	ldr	r3, [r4, #4]
 80070b8:	1ac0      	subs	r0, r0, r3
 80070ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80070bc:	b10b      	cbz	r3, 80070c2 <__sflush_r+0x46>
 80070be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80070c0:	1ac0      	subs	r0, r0, r3
 80070c2:	2300      	movs	r3, #0
 80070c4:	4602      	mov	r2, r0
 80070c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80070c8:	6a21      	ldr	r1, [r4, #32]
 80070ca:	4628      	mov	r0, r5
 80070cc:	47b0      	blx	r6
 80070ce:	1c43      	adds	r3, r0, #1
 80070d0:	89a3      	ldrh	r3, [r4, #12]
 80070d2:	d106      	bne.n	80070e2 <__sflush_r+0x66>
 80070d4:	6829      	ldr	r1, [r5, #0]
 80070d6:	291d      	cmp	r1, #29
 80070d8:	d82c      	bhi.n	8007134 <__sflush_r+0xb8>
 80070da:	4a2a      	ldr	r2, [pc, #168]	; (8007184 <__sflush_r+0x108>)
 80070dc:	40ca      	lsrs	r2, r1
 80070de:	07d6      	lsls	r6, r2, #31
 80070e0:	d528      	bpl.n	8007134 <__sflush_r+0xb8>
 80070e2:	2200      	movs	r2, #0
 80070e4:	6062      	str	r2, [r4, #4]
 80070e6:	04d9      	lsls	r1, r3, #19
 80070e8:	6922      	ldr	r2, [r4, #16]
 80070ea:	6022      	str	r2, [r4, #0]
 80070ec:	d504      	bpl.n	80070f8 <__sflush_r+0x7c>
 80070ee:	1c42      	adds	r2, r0, #1
 80070f0:	d101      	bne.n	80070f6 <__sflush_r+0x7a>
 80070f2:	682b      	ldr	r3, [r5, #0]
 80070f4:	b903      	cbnz	r3, 80070f8 <__sflush_r+0x7c>
 80070f6:	6560      	str	r0, [r4, #84]	; 0x54
 80070f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80070fa:	602f      	str	r7, [r5, #0]
 80070fc:	2900      	cmp	r1, #0
 80070fe:	d0ca      	beq.n	8007096 <__sflush_r+0x1a>
 8007100:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007104:	4299      	cmp	r1, r3
 8007106:	d002      	beq.n	800710e <__sflush_r+0x92>
 8007108:	4628      	mov	r0, r5
 800710a:	f000 f9d7 	bl	80074bc <_free_r>
 800710e:	2000      	movs	r0, #0
 8007110:	6360      	str	r0, [r4, #52]	; 0x34
 8007112:	e7c1      	b.n	8007098 <__sflush_r+0x1c>
 8007114:	6a21      	ldr	r1, [r4, #32]
 8007116:	2301      	movs	r3, #1
 8007118:	4628      	mov	r0, r5
 800711a:	47b0      	blx	r6
 800711c:	1c41      	adds	r1, r0, #1
 800711e:	d1c7      	bne.n	80070b0 <__sflush_r+0x34>
 8007120:	682b      	ldr	r3, [r5, #0]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d0c4      	beq.n	80070b0 <__sflush_r+0x34>
 8007126:	2b1d      	cmp	r3, #29
 8007128:	d001      	beq.n	800712e <__sflush_r+0xb2>
 800712a:	2b16      	cmp	r3, #22
 800712c:	d101      	bne.n	8007132 <__sflush_r+0xb6>
 800712e:	602f      	str	r7, [r5, #0]
 8007130:	e7b1      	b.n	8007096 <__sflush_r+0x1a>
 8007132:	89a3      	ldrh	r3, [r4, #12]
 8007134:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007138:	81a3      	strh	r3, [r4, #12]
 800713a:	e7ad      	b.n	8007098 <__sflush_r+0x1c>
 800713c:	690f      	ldr	r7, [r1, #16]
 800713e:	2f00      	cmp	r7, #0
 8007140:	d0a9      	beq.n	8007096 <__sflush_r+0x1a>
 8007142:	0793      	lsls	r3, r2, #30
 8007144:	680e      	ldr	r6, [r1, #0]
 8007146:	bf08      	it	eq
 8007148:	694b      	ldreq	r3, [r1, #20]
 800714a:	600f      	str	r7, [r1, #0]
 800714c:	bf18      	it	ne
 800714e:	2300      	movne	r3, #0
 8007150:	eba6 0807 	sub.w	r8, r6, r7
 8007154:	608b      	str	r3, [r1, #8]
 8007156:	f1b8 0f00 	cmp.w	r8, #0
 800715a:	dd9c      	ble.n	8007096 <__sflush_r+0x1a>
 800715c:	6a21      	ldr	r1, [r4, #32]
 800715e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007160:	4643      	mov	r3, r8
 8007162:	463a      	mov	r2, r7
 8007164:	4628      	mov	r0, r5
 8007166:	47b0      	blx	r6
 8007168:	2800      	cmp	r0, #0
 800716a:	dc06      	bgt.n	800717a <__sflush_r+0xfe>
 800716c:	89a3      	ldrh	r3, [r4, #12]
 800716e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007172:	81a3      	strh	r3, [r4, #12]
 8007174:	f04f 30ff 	mov.w	r0, #4294967295
 8007178:	e78e      	b.n	8007098 <__sflush_r+0x1c>
 800717a:	4407      	add	r7, r0
 800717c:	eba8 0800 	sub.w	r8, r8, r0
 8007180:	e7e9      	b.n	8007156 <__sflush_r+0xda>
 8007182:	bf00      	nop
 8007184:	20400001 	.word	0x20400001

08007188 <_fflush_r>:
 8007188:	b538      	push	{r3, r4, r5, lr}
 800718a:	690b      	ldr	r3, [r1, #16]
 800718c:	4605      	mov	r5, r0
 800718e:	460c      	mov	r4, r1
 8007190:	b913      	cbnz	r3, 8007198 <_fflush_r+0x10>
 8007192:	2500      	movs	r5, #0
 8007194:	4628      	mov	r0, r5
 8007196:	bd38      	pop	{r3, r4, r5, pc}
 8007198:	b118      	cbz	r0, 80071a2 <_fflush_r+0x1a>
 800719a:	6983      	ldr	r3, [r0, #24]
 800719c:	b90b      	cbnz	r3, 80071a2 <_fflush_r+0x1a>
 800719e:	f000 f887 	bl	80072b0 <__sinit>
 80071a2:	4b14      	ldr	r3, [pc, #80]	; (80071f4 <_fflush_r+0x6c>)
 80071a4:	429c      	cmp	r4, r3
 80071a6:	d11b      	bne.n	80071e0 <_fflush_r+0x58>
 80071a8:	686c      	ldr	r4, [r5, #4]
 80071aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d0ef      	beq.n	8007192 <_fflush_r+0xa>
 80071b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80071b4:	07d0      	lsls	r0, r2, #31
 80071b6:	d404      	bmi.n	80071c2 <_fflush_r+0x3a>
 80071b8:	0599      	lsls	r1, r3, #22
 80071ba:	d402      	bmi.n	80071c2 <_fflush_r+0x3a>
 80071bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80071be:	f000 f915 	bl	80073ec <__retarget_lock_acquire_recursive>
 80071c2:	4628      	mov	r0, r5
 80071c4:	4621      	mov	r1, r4
 80071c6:	f7ff ff59 	bl	800707c <__sflush_r>
 80071ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80071cc:	07da      	lsls	r2, r3, #31
 80071ce:	4605      	mov	r5, r0
 80071d0:	d4e0      	bmi.n	8007194 <_fflush_r+0xc>
 80071d2:	89a3      	ldrh	r3, [r4, #12]
 80071d4:	059b      	lsls	r3, r3, #22
 80071d6:	d4dd      	bmi.n	8007194 <_fflush_r+0xc>
 80071d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80071da:	f000 f908 	bl	80073ee <__retarget_lock_release_recursive>
 80071de:	e7d9      	b.n	8007194 <_fflush_r+0xc>
 80071e0:	4b05      	ldr	r3, [pc, #20]	; (80071f8 <_fflush_r+0x70>)
 80071e2:	429c      	cmp	r4, r3
 80071e4:	d101      	bne.n	80071ea <_fflush_r+0x62>
 80071e6:	68ac      	ldr	r4, [r5, #8]
 80071e8:	e7df      	b.n	80071aa <_fflush_r+0x22>
 80071ea:	4b04      	ldr	r3, [pc, #16]	; (80071fc <_fflush_r+0x74>)
 80071ec:	429c      	cmp	r4, r3
 80071ee:	bf08      	it	eq
 80071f0:	68ec      	ldreq	r4, [r5, #12]
 80071f2:	e7da      	b.n	80071aa <_fflush_r+0x22>
 80071f4:	08008d58 	.word	0x08008d58
 80071f8:	08008d78 	.word	0x08008d78
 80071fc:	08008d38 	.word	0x08008d38

08007200 <std>:
 8007200:	2300      	movs	r3, #0
 8007202:	b510      	push	{r4, lr}
 8007204:	4604      	mov	r4, r0
 8007206:	e9c0 3300 	strd	r3, r3, [r0]
 800720a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800720e:	6083      	str	r3, [r0, #8]
 8007210:	8181      	strh	r1, [r0, #12]
 8007212:	6643      	str	r3, [r0, #100]	; 0x64
 8007214:	81c2      	strh	r2, [r0, #14]
 8007216:	6183      	str	r3, [r0, #24]
 8007218:	4619      	mov	r1, r3
 800721a:	2208      	movs	r2, #8
 800721c:	305c      	adds	r0, #92	; 0x5c
 800721e:	f7ff fda3 	bl	8006d68 <memset>
 8007222:	4b05      	ldr	r3, [pc, #20]	; (8007238 <std+0x38>)
 8007224:	6263      	str	r3, [r4, #36]	; 0x24
 8007226:	4b05      	ldr	r3, [pc, #20]	; (800723c <std+0x3c>)
 8007228:	62a3      	str	r3, [r4, #40]	; 0x28
 800722a:	4b05      	ldr	r3, [pc, #20]	; (8007240 <std+0x40>)
 800722c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800722e:	4b05      	ldr	r3, [pc, #20]	; (8007244 <std+0x44>)
 8007230:	6224      	str	r4, [r4, #32]
 8007232:	6323      	str	r3, [r4, #48]	; 0x30
 8007234:	bd10      	pop	{r4, pc}
 8007236:	bf00      	nop
 8007238:	08007f31 	.word	0x08007f31
 800723c:	08007f53 	.word	0x08007f53
 8007240:	08007f8b 	.word	0x08007f8b
 8007244:	08007faf 	.word	0x08007faf

08007248 <_cleanup_r>:
 8007248:	4901      	ldr	r1, [pc, #4]	; (8007250 <_cleanup_r+0x8>)
 800724a:	f000 b8af 	b.w	80073ac <_fwalk_reent>
 800724e:	bf00      	nop
 8007250:	08007189 	.word	0x08007189

08007254 <__sfmoreglue>:
 8007254:	b570      	push	{r4, r5, r6, lr}
 8007256:	2268      	movs	r2, #104	; 0x68
 8007258:	1e4d      	subs	r5, r1, #1
 800725a:	4355      	muls	r5, r2
 800725c:	460e      	mov	r6, r1
 800725e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007262:	f000 f997 	bl	8007594 <_malloc_r>
 8007266:	4604      	mov	r4, r0
 8007268:	b140      	cbz	r0, 800727c <__sfmoreglue+0x28>
 800726a:	2100      	movs	r1, #0
 800726c:	e9c0 1600 	strd	r1, r6, [r0]
 8007270:	300c      	adds	r0, #12
 8007272:	60a0      	str	r0, [r4, #8]
 8007274:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007278:	f7ff fd76 	bl	8006d68 <memset>
 800727c:	4620      	mov	r0, r4
 800727e:	bd70      	pop	{r4, r5, r6, pc}

08007280 <__sfp_lock_acquire>:
 8007280:	4801      	ldr	r0, [pc, #4]	; (8007288 <__sfp_lock_acquire+0x8>)
 8007282:	f000 b8b3 	b.w	80073ec <__retarget_lock_acquire_recursive>
 8007286:	bf00      	nop
 8007288:	20000461 	.word	0x20000461

0800728c <__sfp_lock_release>:
 800728c:	4801      	ldr	r0, [pc, #4]	; (8007294 <__sfp_lock_release+0x8>)
 800728e:	f000 b8ae 	b.w	80073ee <__retarget_lock_release_recursive>
 8007292:	bf00      	nop
 8007294:	20000461 	.word	0x20000461

08007298 <__sinit_lock_acquire>:
 8007298:	4801      	ldr	r0, [pc, #4]	; (80072a0 <__sinit_lock_acquire+0x8>)
 800729a:	f000 b8a7 	b.w	80073ec <__retarget_lock_acquire_recursive>
 800729e:	bf00      	nop
 80072a0:	20000462 	.word	0x20000462

080072a4 <__sinit_lock_release>:
 80072a4:	4801      	ldr	r0, [pc, #4]	; (80072ac <__sinit_lock_release+0x8>)
 80072a6:	f000 b8a2 	b.w	80073ee <__retarget_lock_release_recursive>
 80072aa:	bf00      	nop
 80072ac:	20000462 	.word	0x20000462

080072b0 <__sinit>:
 80072b0:	b510      	push	{r4, lr}
 80072b2:	4604      	mov	r4, r0
 80072b4:	f7ff fff0 	bl	8007298 <__sinit_lock_acquire>
 80072b8:	69a3      	ldr	r3, [r4, #24]
 80072ba:	b11b      	cbz	r3, 80072c4 <__sinit+0x14>
 80072bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072c0:	f7ff bff0 	b.w	80072a4 <__sinit_lock_release>
 80072c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80072c8:	6523      	str	r3, [r4, #80]	; 0x50
 80072ca:	4b13      	ldr	r3, [pc, #76]	; (8007318 <__sinit+0x68>)
 80072cc:	4a13      	ldr	r2, [pc, #76]	; (800731c <__sinit+0x6c>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	62a2      	str	r2, [r4, #40]	; 0x28
 80072d2:	42a3      	cmp	r3, r4
 80072d4:	bf04      	itt	eq
 80072d6:	2301      	moveq	r3, #1
 80072d8:	61a3      	streq	r3, [r4, #24]
 80072da:	4620      	mov	r0, r4
 80072dc:	f000 f820 	bl	8007320 <__sfp>
 80072e0:	6060      	str	r0, [r4, #4]
 80072e2:	4620      	mov	r0, r4
 80072e4:	f000 f81c 	bl	8007320 <__sfp>
 80072e8:	60a0      	str	r0, [r4, #8]
 80072ea:	4620      	mov	r0, r4
 80072ec:	f000 f818 	bl	8007320 <__sfp>
 80072f0:	2200      	movs	r2, #0
 80072f2:	60e0      	str	r0, [r4, #12]
 80072f4:	2104      	movs	r1, #4
 80072f6:	6860      	ldr	r0, [r4, #4]
 80072f8:	f7ff ff82 	bl	8007200 <std>
 80072fc:	68a0      	ldr	r0, [r4, #8]
 80072fe:	2201      	movs	r2, #1
 8007300:	2109      	movs	r1, #9
 8007302:	f7ff ff7d 	bl	8007200 <std>
 8007306:	68e0      	ldr	r0, [r4, #12]
 8007308:	2202      	movs	r2, #2
 800730a:	2112      	movs	r1, #18
 800730c:	f7ff ff78 	bl	8007200 <std>
 8007310:	2301      	movs	r3, #1
 8007312:	61a3      	str	r3, [r4, #24]
 8007314:	e7d2      	b.n	80072bc <__sinit+0xc>
 8007316:	bf00      	nop
 8007318:	08008d34 	.word	0x08008d34
 800731c:	08007249 	.word	0x08007249

08007320 <__sfp>:
 8007320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007322:	4607      	mov	r7, r0
 8007324:	f7ff ffac 	bl	8007280 <__sfp_lock_acquire>
 8007328:	4b1e      	ldr	r3, [pc, #120]	; (80073a4 <__sfp+0x84>)
 800732a:	681e      	ldr	r6, [r3, #0]
 800732c:	69b3      	ldr	r3, [r6, #24]
 800732e:	b913      	cbnz	r3, 8007336 <__sfp+0x16>
 8007330:	4630      	mov	r0, r6
 8007332:	f7ff ffbd 	bl	80072b0 <__sinit>
 8007336:	3648      	adds	r6, #72	; 0x48
 8007338:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800733c:	3b01      	subs	r3, #1
 800733e:	d503      	bpl.n	8007348 <__sfp+0x28>
 8007340:	6833      	ldr	r3, [r6, #0]
 8007342:	b30b      	cbz	r3, 8007388 <__sfp+0x68>
 8007344:	6836      	ldr	r6, [r6, #0]
 8007346:	e7f7      	b.n	8007338 <__sfp+0x18>
 8007348:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800734c:	b9d5      	cbnz	r5, 8007384 <__sfp+0x64>
 800734e:	4b16      	ldr	r3, [pc, #88]	; (80073a8 <__sfp+0x88>)
 8007350:	60e3      	str	r3, [r4, #12]
 8007352:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007356:	6665      	str	r5, [r4, #100]	; 0x64
 8007358:	f000 f847 	bl	80073ea <__retarget_lock_init_recursive>
 800735c:	f7ff ff96 	bl	800728c <__sfp_lock_release>
 8007360:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007364:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007368:	6025      	str	r5, [r4, #0]
 800736a:	61a5      	str	r5, [r4, #24]
 800736c:	2208      	movs	r2, #8
 800736e:	4629      	mov	r1, r5
 8007370:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007374:	f7ff fcf8 	bl	8006d68 <memset>
 8007378:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800737c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007380:	4620      	mov	r0, r4
 8007382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007384:	3468      	adds	r4, #104	; 0x68
 8007386:	e7d9      	b.n	800733c <__sfp+0x1c>
 8007388:	2104      	movs	r1, #4
 800738a:	4638      	mov	r0, r7
 800738c:	f7ff ff62 	bl	8007254 <__sfmoreglue>
 8007390:	4604      	mov	r4, r0
 8007392:	6030      	str	r0, [r6, #0]
 8007394:	2800      	cmp	r0, #0
 8007396:	d1d5      	bne.n	8007344 <__sfp+0x24>
 8007398:	f7ff ff78 	bl	800728c <__sfp_lock_release>
 800739c:	230c      	movs	r3, #12
 800739e:	603b      	str	r3, [r7, #0]
 80073a0:	e7ee      	b.n	8007380 <__sfp+0x60>
 80073a2:	bf00      	nop
 80073a4:	08008d34 	.word	0x08008d34
 80073a8:	ffff0001 	.word	0xffff0001

080073ac <_fwalk_reent>:
 80073ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073b0:	4606      	mov	r6, r0
 80073b2:	4688      	mov	r8, r1
 80073b4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80073b8:	2700      	movs	r7, #0
 80073ba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80073be:	f1b9 0901 	subs.w	r9, r9, #1
 80073c2:	d505      	bpl.n	80073d0 <_fwalk_reent+0x24>
 80073c4:	6824      	ldr	r4, [r4, #0]
 80073c6:	2c00      	cmp	r4, #0
 80073c8:	d1f7      	bne.n	80073ba <_fwalk_reent+0xe>
 80073ca:	4638      	mov	r0, r7
 80073cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073d0:	89ab      	ldrh	r3, [r5, #12]
 80073d2:	2b01      	cmp	r3, #1
 80073d4:	d907      	bls.n	80073e6 <_fwalk_reent+0x3a>
 80073d6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80073da:	3301      	adds	r3, #1
 80073dc:	d003      	beq.n	80073e6 <_fwalk_reent+0x3a>
 80073de:	4629      	mov	r1, r5
 80073e0:	4630      	mov	r0, r6
 80073e2:	47c0      	blx	r8
 80073e4:	4307      	orrs	r7, r0
 80073e6:	3568      	adds	r5, #104	; 0x68
 80073e8:	e7e9      	b.n	80073be <_fwalk_reent+0x12>

080073ea <__retarget_lock_init_recursive>:
 80073ea:	4770      	bx	lr

080073ec <__retarget_lock_acquire_recursive>:
 80073ec:	4770      	bx	lr

080073ee <__retarget_lock_release_recursive>:
 80073ee:	4770      	bx	lr

080073f0 <__swhatbuf_r>:
 80073f0:	b570      	push	{r4, r5, r6, lr}
 80073f2:	460e      	mov	r6, r1
 80073f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073f8:	2900      	cmp	r1, #0
 80073fa:	b096      	sub	sp, #88	; 0x58
 80073fc:	4614      	mov	r4, r2
 80073fe:	461d      	mov	r5, r3
 8007400:	da08      	bge.n	8007414 <__swhatbuf_r+0x24>
 8007402:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007406:	2200      	movs	r2, #0
 8007408:	602a      	str	r2, [r5, #0]
 800740a:	061a      	lsls	r2, r3, #24
 800740c:	d410      	bmi.n	8007430 <__swhatbuf_r+0x40>
 800740e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007412:	e00e      	b.n	8007432 <__swhatbuf_r+0x42>
 8007414:	466a      	mov	r2, sp
 8007416:	f000 fdf1 	bl	8007ffc <_fstat_r>
 800741a:	2800      	cmp	r0, #0
 800741c:	dbf1      	blt.n	8007402 <__swhatbuf_r+0x12>
 800741e:	9a01      	ldr	r2, [sp, #4]
 8007420:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007424:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007428:	425a      	negs	r2, r3
 800742a:	415a      	adcs	r2, r3
 800742c:	602a      	str	r2, [r5, #0]
 800742e:	e7ee      	b.n	800740e <__swhatbuf_r+0x1e>
 8007430:	2340      	movs	r3, #64	; 0x40
 8007432:	2000      	movs	r0, #0
 8007434:	6023      	str	r3, [r4, #0]
 8007436:	b016      	add	sp, #88	; 0x58
 8007438:	bd70      	pop	{r4, r5, r6, pc}
	...

0800743c <__smakebuf_r>:
 800743c:	898b      	ldrh	r3, [r1, #12]
 800743e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007440:	079d      	lsls	r5, r3, #30
 8007442:	4606      	mov	r6, r0
 8007444:	460c      	mov	r4, r1
 8007446:	d507      	bpl.n	8007458 <__smakebuf_r+0x1c>
 8007448:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800744c:	6023      	str	r3, [r4, #0]
 800744e:	6123      	str	r3, [r4, #16]
 8007450:	2301      	movs	r3, #1
 8007452:	6163      	str	r3, [r4, #20]
 8007454:	b002      	add	sp, #8
 8007456:	bd70      	pop	{r4, r5, r6, pc}
 8007458:	ab01      	add	r3, sp, #4
 800745a:	466a      	mov	r2, sp
 800745c:	f7ff ffc8 	bl	80073f0 <__swhatbuf_r>
 8007460:	9900      	ldr	r1, [sp, #0]
 8007462:	4605      	mov	r5, r0
 8007464:	4630      	mov	r0, r6
 8007466:	f000 f895 	bl	8007594 <_malloc_r>
 800746a:	b948      	cbnz	r0, 8007480 <__smakebuf_r+0x44>
 800746c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007470:	059a      	lsls	r2, r3, #22
 8007472:	d4ef      	bmi.n	8007454 <__smakebuf_r+0x18>
 8007474:	f023 0303 	bic.w	r3, r3, #3
 8007478:	f043 0302 	orr.w	r3, r3, #2
 800747c:	81a3      	strh	r3, [r4, #12]
 800747e:	e7e3      	b.n	8007448 <__smakebuf_r+0xc>
 8007480:	4b0d      	ldr	r3, [pc, #52]	; (80074b8 <__smakebuf_r+0x7c>)
 8007482:	62b3      	str	r3, [r6, #40]	; 0x28
 8007484:	89a3      	ldrh	r3, [r4, #12]
 8007486:	6020      	str	r0, [r4, #0]
 8007488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800748c:	81a3      	strh	r3, [r4, #12]
 800748e:	9b00      	ldr	r3, [sp, #0]
 8007490:	6163      	str	r3, [r4, #20]
 8007492:	9b01      	ldr	r3, [sp, #4]
 8007494:	6120      	str	r0, [r4, #16]
 8007496:	b15b      	cbz	r3, 80074b0 <__smakebuf_r+0x74>
 8007498:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800749c:	4630      	mov	r0, r6
 800749e:	f000 fdbf 	bl	8008020 <_isatty_r>
 80074a2:	b128      	cbz	r0, 80074b0 <__smakebuf_r+0x74>
 80074a4:	89a3      	ldrh	r3, [r4, #12]
 80074a6:	f023 0303 	bic.w	r3, r3, #3
 80074aa:	f043 0301 	orr.w	r3, r3, #1
 80074ae:	81a3      	strh	r3, [r4, #12]
 80074b0:	89a0      	ldrh	r0, [r4, #12]
 80074b2:	4305      	orrs	r5, r0
 80074b4:	81a5      	strh	r5, [r4, #12]
 80074b6:	e7cd      	b.n	8007454 <__smakebuf_r+0x18>
 80074b8:	08007249 	.word	0x08007249

080074bc <_free_r>:
 80074bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80074be:	2900      	cmp	r1, #0
 80074c0:	d044      	beq.n	800754c <_free_r+0x90>
 80074c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074c6:	9001      	str	r0, [sp, #4]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	f1a1 0404 	sub.w	r4, r1, #4
 80074ce:	bfb8      	it	lt
 80074d0:	18e4      	addlt	r4, r4, r3
 80074d2:	f000 fdef 	bl	80080b4 <__malloc_lock>
 80074d6:	4a1e      	ldr	r2, [pc, #120]	; (8007550 <_free_r+0x94>)
 80074d8:	9801      	ldr	r0, [sp, #4]
 80074da:	6813      	ldr	r3, [r2, #0]
 80074dc:	b933      	cbnz	r3, 80074ec <_free_r+0x30>
 80074de:	6063      	str	r3, [r4, #4]
 80074e0:	6014      	str	r4, [r2, #0]
 80074e2:	b003      	add	sp, #12
 80074e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80074e8:	f000 bdea 	b.w	80080c0 <__malloc_unlock>
 80074ec:	42a3      	cmp	r3, r4
 80074ee:	d908      	bls.n	8007502 <_free_r+0x46>
 80074f0:	6825      	ldr	r5, [r4, #0]
 80074f2:	1961      	adds	r1, r4, r5
 80074f4:	428b      	cmp	r3, r1
 80074f6:	bf01      	itttt	eq
 80074f8:	6819      	ldreq	r1, [r3, #0]
 80074fa:	685b      	ldreq	r3, [r3, #4]
 80074fc:	1949      	addeq	r1, r1, r5
 80074fe:	6021      	streq	r1, [r4, #0]
 8007500:	e7ed      	b.n	80074de <_free_r+0x22>
 8007502:	461a      	mov	r2, r3
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	b10b      	cbz	r3, 800750c <_free_r+0x50>
 8007508:	42a3      	cmp	r3, r4
 800750a:	d9fa      	bls.n	8007502 <_free_r+0x46>
 800750c:	6811      	ldr	r1, [r2, #0]
 800750e:	1855      	adds	r5, r2, r1
 8007510:	42a5      	cmp	r5, r4
 8007512:	d10b      	bne.n	800752c <_free_r+0x70>
 8007514:	6824      	ldr	r4, [r4, #0]
 8007516:	4421      	add	r1, r4
 8007518:	1854      	adds	r4, r2, r1
 800751a:	42a3      	cmp	r3, r4
 800751c:	6011      	str	r1, [r2, #0]
 800751e:	d1e0      	bne.n	80074e2 <_free_r+0x26>
 8007520:	681c      	ldr	r4, [r3, #0]
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	6053      	str	r3, [r2, #4]
 8007526:	4421      	add	r1, r4
 8007528:	6011      	str	r1, [r2, #0]
 800752a:	e7da      	b.n	80074e2 <_free_r+0x26>
 800752c:	d902      	bls.n	8007534 <_free_r+0x78>
 800752e:	230c      	movs	r3, #12
 8007530:	6003      	str	r3, [r0, #0]
 8007532:	e7d6      	b.n	80074e2 <_free_r+0x26>
 8007534:	6825      	ldr	r5, [r4, #0]
 8007536:	1961      	adds	r1, r4, r5
 8007538:	428b      	cmp	r3, r1
 800753a:	bf04      	itt	eq
 800753c:	6819      	ldreq	r1, [r3, #0]
 800753e:	685b      	ldreq	r3, [r3, #4]
 8007540:	6063      	str	r3, [r4, #4]
 8007542:	bf04      	itt	eq
 8007544:	1949      	addeq	r1, r1, r5
 8007546:	6021      	streq	r1, [r4, #0]
 8007548:	6054      	str	r4, [r2, #4]
 800754a:	e7ca      	b.n	80074e2 <_free_r+0x26>
 800754c:	b003      	add	sp, #12
 800754e:	bd30      	pop	{r4, r5, pc}
 8007550:	20000464 	.word	0x20000464

08007554 <sbrk_aligned>:
 8007554:	b570      	push	{r4, r5, r6, lr}
 8007556:	4e0e      	ldr	r6, [pc, #56]	; (8007590 <sbrk_aligned+0x3c>)
 8007558:	460c      	mov	r4, r1
 800755a:	6831      	ldr	r1, [r6, #0]
 800755c:	4605      	mov	r5, r0
 800755e:	b911      	cbnz	r1, 8007566 <sbrk_aligned+0x12>
 8007560:	f000 fcd6 	bl	8007f10 <_sbrk_r>
 8007564:	6030      	str	r0, [r6, #0]
 8007566:	4621      	mov	r1, r4
 8007568:	4628      	mov	r0, r5
 800756a:	f000 fcd1 	bl	8007f10 <_sbrk_r>
 800756e:	1c43      	adds	r3, r0, #1
 8007570:	d00a      	beq.n	8007588 <sbrk_aligned+0x34>
 8007572:	1cc4      	adds	r4, r0, #3
 8007574:	f024 0403 	bic.w	r4, r4, #3
 8007578:	42a0      	cmp	r0, r4
 800757a:	d007      	beq.n	800758c <sbrk_aligned+0x38>
 800757c:	1a21      	subs	r1, r4, r0
 800757e:	4628      	mov	r0, r5
 8007580:	f000 fcc6 	bl	8007f10 <_sbrk_r>
 8007584:	3001      	adds	r0, #1
 8007586:	d101      	bne.n	800758c <sbrk_aligned+0x38>
 8007588:	f04f 34ff 	mov.w	r4, #4294967295
 800758c:	4620      	mov	r0, r4
 800758e:	bd70      	pop	{r4, r5, r6, pc}
 8007590:	20000468 	.word	0x20000468

08007594 <_malloc_r>:
 8007594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007598:	1ccd      	adds	r5, r1, #3
 800759a:	f025 0503 	bic.w	r5, r5, #3
 800759e:	3508      	adds	r5, #8
 80075a0:	2d0c      	cmp	r5, #12
 80075a2:	bf38      	it	cc
 80075a4:	250c      	movcc	r5, #12
 80075a6:	2d00      	cmp	r5, #0
 80075a8:	4607      	mov	r7, r0
 80075aa:	db01      	blt.n	80075b0 <_malloc_r+0x1c>
 80075ac:	42a9      	cmp	r1, r5
 80075ae:	d905      	bls.n	80075bc <_malloc_r+0x28>
 80075b0:	230c      	movs	r3, #12
 80075b2:	603b      	str	r3, [r7, #0]
 80075b4:	2600      	movs	r6, #0
 80075b6:	4630      	mov	r0, r6
 80075b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075bc:	4e2e      	ldr	r6, [pc, #184]	; (8007678 <_malloc_r+0xe4>)
 80075be:	f000 fd79 	bl	80080b4 <__malloc_lock>
 80075c2:	6833      	ldr	r3, [r6, #0]
 80075c4:	461c      	mov	r4, r3
 80075c6:	bb34      	cbnz	r4, 8007616 <_malloc_r+0x82>
 80075c8:	4629      	mov	r1, r5
 80075ca:	4638      	mov	r0, r7
 80075cc:	f7ff ffc2 	bl	8007554 <sbrk_aligned>
 80075d0:	1c43      	adds	r3, r0, #1
 80075d2:	4604      	mov	r4, r0
 80075d4:	d14d      	bne.n	8007672 <_malloc_r+0xde>
 80075d6:	6834      	ldr	r4, [r6, #0]
 80075d8:	4626      	mov	r6, r4
 80075da:	2e00      	cmp	r6, #0
 80075dc:	d140      	bne.n	8007660 <_malloc_r+0xcc>
 80075de:	6823      	ldr	r3, [r4, #0]
 80075e0:	4631      	mov	r1, r6
 80075e2:	4638      	mov	r0, r7
 80075e4:	eb04 0803 	add.w	r8, r4, r3
 80075e8:	f000 fc92 	bl	8007f10 <_sbrk_r>
 80075ec:	4580      	cmp	r8, r0
 80075ee:	d13a      	bne.n	8007666 <_malloc_r+0xd2>
 80075f0:	6821      	ldr	r1, [r4, #0]
 80075f2:	3503      	adds	r5, #3
 80075f4:	1a6d      	subs	r5, r5, r1
 80075f6:	f025 0503 	bic.w	r5, r5, #3
 80075fa:	3508      	adds	r5, #8
 80075fc:	2d0c      	cmp	r5, #12
 80075fe:	bf38      	it	cc
 8007600:	250c      	movcc	r5, #12
 8007602:	4629      	mov	r1, r5
 8007604:	4638      	mov	r0, r7
 8007606:	f7ff ffa5 	bl	8007554 <sbrk_aligned>
 800760a:	3001      	adds	r0, #1
 800760c:	d02b      	beq.n	8007666 <_malloc_r+0xd2>
 800760e:	6823      	ldr	r3, [r4, #0]
 8007610:	442b      	add	r3, r5
 8007612:	6023      	str	r3, [r4, #0]
 8007614:	e00e      	b.n	8007634 <_malloc_r+0xa0>
 8007616:	6822      	ldr	r2, [r4, #0]
 8007618:	1b52      	subs	r2, r2, r5
 800761a:	d41e      	bmi.n	800765a <_malloc_r+0xc6>
 800761c:	2a0b      	cmp	r2, #11
 800761e:	d916      	bls.n	800764e <_malloc_r+0xba>
 8007620:	1961      	adds	r1, r4, r5
 8007622:	42a3      	cmp	r3, r4
 8007624:	6025      	str	r5, [r4, #0]
 8007626:	bf18      	it	ne
 8007628:	6059      	strne	r1, [r3, #4]
 800762a:	6863      	ldr	r3, [r4, #4]
 800762c:	bf08      	it	eq
 800762e:	6031      	streq	r1, [r6, #0]
 8007630:	5162      	str	r2, [r4, r5]
 8007632:	604b      	str	r3, [r1, #4]
 8007634:	4638      	mov	r0, r7
 8007636:	f104 060b 	add.w	r6, r4, #11
 800763a:	f000 fd41 	bl	80080c0 <__malloc_unlock>
 800763e:	f026 0607 	bic.w	r6, r6, #7
 8007642:	1d23      	adds	r3, r4, #4
 8007644:	1af2      	subs	r2, r6, r3
 8007646:	d0b6      	beq.n	80075b6 <_malloc_r+0x22>
 8007648:	1b9b      	subs	r3, r3, r6
 800764a:	50a3      	str	r3, [r4, r2]
 800764c:	e7b3      	b.n	80075b6 <_malloc_r+0x22>
 800764e:	6862      	ldr	r2, [r4, #4]
 8007650:	42a3      	cmp	r3, r4
 8007652:	bf0c      	ite	eq
 8007654:	6032      	streq	r2, [r6, #0]
 8007656:	605a      	strne	r2, [r3, #4]
 8007658:	e7ec      	b.n	8007634 <_malloc_r+0xa0>
 800765a:	4623      	mov	r3, r4
 800765c:	6864      	ldr	r4, [r4, #4]
 800765e:	e7b2      	b.n	80075c6 <_malloc_r+0x32>
 8007660:	4634      	mov	r4, r6
 8007662:	6876      	ldr	r6, [r6, #4]
 8007664:	e7b9      	b.n	80075da <_malloc_r+0x46>
 8007666:	230c      	movs	r3, #12
 8007668:	603b      	str	r3, [r7, #0]
 800766a:	4638      	mov	r0, r7
 800766c:	f000 fd28 	bl	80080c0 <__malloc_unlock>
 8007670:	e7a1      	b.n	80075b6 <_malloc_r+0x22>
 8007672:	6025      	str	r5, [r4, #0]
 8007674:	e7de      	b.n	8007634 <_malloc_r+0xa0>
 8007676:	bf00      	nop
 8007678:	20000464 	.word	0x20000464

0800767c <__ssputs_r>:
 800767c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007680:	688e      	ldr	r6, [r1, #8]
 8007682:	429e      	cmp	r6, r3
 8007684:	4682      	mov	sl, r0
 8007686:	460c      	mov	r4, r1
 8007688:	4690      	mov	r8, r2
 800768a:	461f      	mov	r7, r3
 800768c:	d838      	bhi.n	8007700 <__ssputs_r+0x84>
 800768e:	898a      	ldrh	r2, [r1, #12]
 8007690:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007694:	d032      	beq.n	80076fc <__ssputs_r+0x80>
 8007696:	6825      	ldr	r5, [r4, #0]
 8007698:	6909      	ldr	r1, [r1, #16]
 800769a:	eba5 0901 	sub.w	r9, r5, r1
 800769e:	6965      	ldr	r5, [r4, #20]
 80076a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80076a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80076a8:	3301      	adds	r3, #1
 80076aa:	444b      	add	r3, r9
 80076ac:	106d      	asrs	r5, r5, #1
 80076ae:	429d      	cmp	r5, r3
 80076b0:	bf38      	it	cc
 80076b2:	461d      	movcc	r5, r3
 80076b4:	0553      	lsls	r3, r2, #21
 80076b6:	d531      	bpl.n	800771c <__ssputs_r+0xa0>
 80076b8:	4629      	mov	r1, r5
 80076ba:	f7ff ff6b 	bl	8007594 <_malloc_r>
 80076be:	4606      	mov	r6, r0
 80076c0:	b950      	cbnz	r0, 80076d8 <__ssputs_r+0x5c>
 80076c2:	230c      	movs	r3, #12
 80076c4:	f8ca 3000 	str.w	r3, [sl]
 80076c8:	89a3      	ldrh	r3, [r4, #12]
 80076ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076ce:	81a3      	strh	r3, [r4, #12]
 80076d0:	f04f 30ff 	mov.w	r0, #4294967295
 80076d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076d8:	6921      	ldr	r1, [r4, #16]
 80076da:	464a      	mov	r2, r9
 80076dc:	f000 fcc2 	bl	8008064 <memcpy>
 80076e0:	89a3      	ldrh	r3, [r4, #12]
 80076e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80076e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076ea:	81a3      	strh	r3, [r4, #12]
 80076ec:	6126      	str	r6, [r4, #16]
 80076ee:	6165      	str	r5, [r4, #20]
 80076f0:	444e      	add	r6, r9
 80076f2:	eba5 0509 	sub.w	r5, r5, r9
 80076f6:	6026      	str	r6, [r4, #0]
 80076f8:	60a5      	str	r5, [r4, #8]
 80076fa:	463e      	mov	r6, r7
 80076fc:	42be      	cmp	r6, r7
 80076fe:	d900      	bls.n	8007702 <__ssputs_r+0x86>
 8007700:	463e      	mov	r6, r7
 8007702:	6820      	ldr	r0, [r4, #0]
 8007704:	4632      	mov	r2, r6
 8007706:	4641      	mov	r1, r8
 8007708:	f000 fcba 	bl	8008080 <memmove>
 800770c:	68a3      	ldr	r3, [r4, #8]
 800770e:	1b9b      	subs	r3, r3, r6
 8007710:	60a3      	str	r3, [r4, #8]
 8007712:	6823      	ldr	r3, [r4, #0]
 8007714:	4433      	add	r3, r6
 8007716:	6023      	str	r3, [r4, #0]
 8007718:	2000      	movs	r0, #0
 800771a:	e7db      	b.n	80076d4 <__ssputs_r+0x58>
 800771c:	462a      	mov	r2, r5
 800771e:	f000 fcd5 	bl	80080cc <_realloc_r>
 8007722:	4606      	mov	r6, r0
 8007724:	2800      	cmp	r0, #0
 8007726:	d1e1      	bne.n	80076ec <__ssputs_r+0x70>
 8007728:	6921      	ldr	r1, [r4, #16]
 800772a:	4650      	mov	r0, sl
 800772c:	f7ff fec6 	bl	80074bc <_free_r>
 8007730:	e7c7      	b.n	80076c2 <__ssputs_r+0x46>
	...

08007734 <_svfiprintf_r>:
 8007734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007738:	4698      	mov	r8, r3
 800773a:	898b      	ldrh	r3, [r1, #12]
 800773c:	061b      	lsls	r3, r3, #24
 800773e:	b09d      	sub	sp, #116	; 0x74
 8007740:	4607      	mov	r7, r0
 8007742:	460d      	mov	r5, r1
 8007744:	4614      	mov	r4, r2
 8007746:	d50e      	bpl.n	8007766 <_svfiprintf_r+0x32>
 8007748:	690b      	ldr	r3, [r1, #16]
 800774a:	b963      	cbnz	r3, 8007766 <_svfiprintf_r+0x32>
 800774c:	2140      	movs	r1, #64	; 0x40
 800774e:	f7ff ff21 	bl	8007594 <_malloc_r>
 8007752:	6028      	str	r0, [r5, #0]
 8007754:	6128      	str	r0, [r5, #16]
 8007756:	b920      	cbnz	r0, 8007762 <_svfiprintf_r+0x2e>
 8007758:	230c      	movs	r3, #12
 800775a:	603b      	str	r3, [r7, #0]
 800775c:	f04f 30ff 	mov.w	r0, #4294967295
 8007760:	e0d1      	b.n	8007906 <_svfiprintf_r+0x1d2>
 8007762:	2340      	movs	r3, #64	; 0x40
 8007764:	616b      	str	r3, [r5, #20]
 8007766:	2300      	movs	r3, #0
 8007768:	9309      	str	r3, [sp, #36]	; 0x24
 800776a:	2320      	movs	r3, #32
 800776c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007770:	f8cd 800c 	str.w	r8, [sp, #12]
 8007774:	2330      	movs	r3, #48	; 0x30
 8007776:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007920 <_svfiprintf_r+0x1ec>
 800777a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800777e:	f04f 0901 	mov.w	r9, #1
 8007782:	4623      	mov	r3, r4
 8007784:	469a      	mov	sl, r3
 8007786:	f813 2b01 	ldrb.w	r2, [r3], #1
 800778a:	b10a      	cbz	r2, 8007790 <_svfiprintf_r+0x5c>
 800778c:	2a25      	cmp	r2, #37	; 0x25
 800778e:	d1f9      	bne.n	8007784 <_svfiprintf_r+0x50>
 8007790:	ebba 0b04 	subs.w	fp, sl, r4
 8007794:	d00b      	beq.n	80077ae <_svfiprintf_r+0x7a>
 8007796:	465b      	mov	r3, fp
 8007798:	4622      	mov	r2, r4
 800779a:	4629      	mov	r1, r5
 800779c:	4638      	mov	r0, r7
 800779e:	f7ff ff6d 	bl	800767c <__ssputs_r>
 80077a2:	3001      	adds	r0, #1
 80077a4:	f000 80aa 	beq.w	80078fc <_svfiprintf_r+0x1c8>
 80077a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077aa:	445a      	add	r2, fp
 80077ac:	9209      	str	r2, [sp, #36]	; 0x24
 80077ae:	f89a 3000 	ldrb.w	r3, [sl]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	f000 80a2 	beq.w	80078fc <_svfiprintf_r+0x1c8>
 80077b8:	2300      	movs	r3, #0
 80077ba:	f04f 32ff 	mov.w	r2, #4294967295
 80077be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80077c2:	f10a 0a01 	add.w	sl, sl, #1
 80077c6:	9304      	str	r3, [sp, #16]
 80077c8:	9307      	str	r3, [sp, #28]
 80077ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80077ce:	931a      	str	r3, [sp, #104]	; 0x68
 80077d0:	4654      	mov	r4, sl
 80077d2:	2205      	movs	r2, #5
 80077d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077d8:	4851      	ldr	r0, [pc, #324]	; (8007920 <_svfiprintf_r+0x1ec>)
 80077da:	f7f8 fd01 	bl	80001e0 <memchr>
 80077de:	9a04      	ldr	r2, [sp, #16]
 80077e0:	b9d8      	cbnz	r0, 800781a <_svfiprintf_r+0xe6>
 80077e2:	06d0      	lsls	r0, r2, #27
 80077e4:	bf44      	itt	mi
 80077e6:	2320      	movmi	r3, #32
 80077e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077ec:	0711      	lsls	r1, r2, #28
 80077ee:	bf44      	itt	mi
 80077f0:	232b      	movmi	r3, #43	; 0x2b
 80077f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077f6:	f89a 3000 	ldrb.w	r3, [sl]
 80077fa:	2b2a      	cmp	r3, #42	; 0x2a
 80077fc:	d015      	beq.n	800782a <_svfiprintf_r+0xf6>
 80077fe:	9a07      	ldr	r2, [sp, #28]
 8007800:	4654      	mov	r4, sl
 8007802:	2000      	movs	r0, #0
 8007804:	f04f 0c0a 	mov.w	ip, #10
 8007808:	4621      	mov	r1, r4
 800780a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800780e:	3b30      	subs	r3, #48	; 0x30
 8007810:	2b09      	cmp	r3, #9
 8007812:	d94e      	bls.n	80078b2 <_svfiprintf_r+0x17e>
 8007814:	b1b0      	cbz	r0, 8007844 <_svfiprintf_r+0x110>
 8007816:	9207      	str	r2, [sp, #28]
 8007818:	e014      	b.n	8007844 <_svfiprintf_r+0x110>
 800781a:	eba0 0308 	sub.w	r3, r0, r8
 800781e:	fa09 f303 	lsl.w	r3, r9, r3
 8007822:	4313      	orrs	r3, r2
 8007824:	9304      	str	r3, [sp, #16]
 8007826:	46a2      	mov	sl, r4
 8007828:	e7d2      	b.n	80077d0 <_svfiprintf_r+0x9c>
 800782a:	9b03      	ldr	r3, [sp, #12]
 800782c:	1d19      	adds	r1, r3, #4
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	9103      	str	r1, [sp, #12]
 8007832:	2b00      	cmp	r3, #0
 8007834:	bfbb      	ittet	lt
 8007836:	425b      	neglt	r3, r3
 8007838:	f042 0202 	orrlt.w	r2, r2, #2
 800783c:	9307      	strge	r3, [sp, #28]
 800783e:	9307      	strlt	r3, [sp, #28]
 8007840:	bfb8      	it	lt
 8007842:	9204      	strlt	r2, [sp, #16]
 8007844:	7823      	ldrb	r3, [r4, #0]
 8007846:	2b2e      	cmp	r3, #46	; 0x2e
 8007848:	d10c      	bne.n	8007864 <_svfiprintf_r+0x130>
 800784a:	7863      	ldrb	r3, [r4, #1]
 800784c:	2b2a      	cmp	r3, #42	; 0x2a
 800784e:	d135      	bne.n	80078bc <_svfiprintf_r+0x188>
 8007850:	9b03      	ldr	r3, [sp, #12]
 8007852:	1d1a      	adds	r2, r3, #4
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	9203      	str	r2, [sp, #12]
 8007858:	2b00      	cmp	r3, #0
 800785a:	bfb8      	it	lt
 800785c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007860:	3402      	adds	r4, #2
 8007862:	9305      	str	r3, [sp, #20]
 8007864:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007930 <_svfiprintf_r+0x1fc>
 8007868:	7821      	ldrb	r1, [r4, #0]
 800786a:	2203      	movs	r2, #3
 800786c:	4650      	mov	r0, sl
 800786e:	f7f8 fcb7 	bl	80001e0 <memchr>
 8007872:	b140      	cbz	r0, 8007886 <_svfiprintf_r+0x152>
 8007874:	2340      	movs	r3, #64	; 0x40
 8007876:	eba0 000a 	sub.w	r0, r0, sl
 800787a:	fa03 f000 	lsl.w	r0, r3, r0
 800787e:	9b04      	ldr	r3, [sp, #16]
 8007880:	4303      	orrs	r3, r0
 8007882:	3401      	adds	r4, #1
 8007884:	9304      	str	r3, [sp, #16]
 8007886:	f814 1b01 	ldrb.w	r1, [r4], #1
 800788a:	4826      	ldr	r0, [pc, #152]	; (8007924 <_svfiprintf_r+0x1f0>)
 800788c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007890:	2206      	movs	r2, #6
 8007892:	f7f8 fca5 	bl	80001e0 <memchr>
 8007896:	2800      	cmp	r0, #0
 8007898:	d038      	beq.n	800790c <_svfiprintf_r+0x1d8>
 800789a:	4b23      	ldr	r3, [pc, #140]	; (8007928 <_svfiprintf_r+0x1f4>)
 800789c:	bb1b      	cbnz	r3, 80078e6 <_svfiprintf_r+0x1b2>
 800789e:	9b03      	ldr	r3, [sp, #12]
 80078a0:	3307      	adds	r3, #7
 80078a2:	f023 0307 	bic.w	r3, r3, #7
 80078a6:	3308      	adds	r3, #8
 80078a8:	9303      	str	r3, [sp, #12]
 80078aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078ac:	4433      	add	r3, r6
 80078ae:	9309      	str	r3, [sp, #36]	; 0x24
 80078b0:	e767      	b.n	8007782 <_svfiprintf_r+0x4e>
 80078b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80078b6:	460c      	mov	r4, r1
 80078b8:	2001      	movs	r0, #1
 80078ba:	e7a5      	b.n	8007808 <_svfiprintf_r+0xd4>
 80078bc:	2300      	movs	r3, #0
 80078be:	3401      	adds	r4, #1
 80078c0:	9305      	str	r3, [sp, #20]
 80078c2:	4619      	mov	r1, r3
 80078c4:	f04f 0c0a 	mov.w	ip, #10
 80078c8:	4620      	mov	r0, r4
 80078ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078ce:	3a30      	subs	r2, #48	; 0x30
 80078d0:	2a09      	cmp	r2, #9
 80078d2:	d903      	bls.n	80078dc <_svfiprintf_r+0x1a8>
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d0c5      	beq.n	8007864 <_svfiprintf_r+0x130>
 80078d8:	9105      	str	r1, [sp, #20]
 80078da:	e7c3      	b.n	8007864 <_svfiprintf_r+0x130>
 80078dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80078e0:	4604      	mov	r4, r0
 80078e2:	2301      	movs	r3, #1
 80078e4:	e7f0      	b.n	80078c8 <_svfiprintf_r+0x194>
 80078e6:	ab03      	add	r3, sp, #12
 80078e8:	9300      	str	r3, [sp, #0]
 80078ea:	462a      	mov	r2, r5
 80078ec:	4b0f      	ldr	r3, [pc, #60]	; (800792c <_svfiprintf_r+0x1f8>)
 80078ee:	a904      	add	r1, sp, #16
 80078f0:	4638      	mov	r0, r7
 80078f2:	f3af 8000 	nop.w
 80078f6:	1c42      	adds	r2, r0, #1
 80078f8:	4606      	mov	r6, r0
 80078fa:	d1d6      	bne.n	80078aa <_svfiprintf_r+0x176>
 80078fc:	89ab      	ldrh	r3, [r5, #12]
 80078fe:	065b      	lsls	r3, r3, #25
 8007900:	f53f af2c 	bmi.w	800775c <_svfiprintf_r+0x28>
 8007904:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007906:	b01d      	add	sp, #116	; 0x74
 8007908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800790c:	ab03      	add	r3, sp, #12
 800790e:	9300      	str	r3, [sp, #0]
 8007910:	462a      	mov	r2, r5
 8007912:	4b06      	ldr	r3, [pc, #24]	; (800792c <_svfiprintf_r+0x1f8>)
 8007914:	a904      	add	r1, sp, #16
 8007916:	4638      	mov	r0, r7
 8007918:	f000 f9d4 	bl	8007cc4 <_printf_i>
 800791c:	e7eb      	b.n	80078f6 <_svfiprintf_r+0x1c2>
 800791e:	bf00      	nop
 8007920:	08008d98 	.word	0x08008d98
 8007924:	08008da2 	.word	0x08008da2
 8007928:	00000000 	.word	0x00000000
 800792c:	0800767d 	.word	0x0800767d
 8007930:	08008d9e 	.word	0x08008d9e

08007934 <__sfputc_r>:
 8007934:	6893      	ldr	r3, [r2, #8]
 8007936:	3b01      	subs	r3, #1
 8007938:	2b00      	cmp	r3, #0
 800793a:	b410      	push	{r4}
 800793c:	6093      	str	r3, [r2, #8]
 800793e:	da08      	bge.n	8007952 <__sfputc_r+0x1e>
 8007940:	6994      	ldr	r4, [r2, #24]
 8007942:	42a3      	cmp	r3, r4
 8007944:	db01      	blt.n	800794a <__sfputc_r+0x16>
 8007946:	290a      	cmp	r1, #10
 8007948:	d103      	bne.n	8007952 <__sfputc_r+0x1e>
 800794a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800794e:	f7ff bad5 	b.w	8006efc <__swbuf_r>
 8007952:	6813      	ldr	r3, [r2, #0]
 8007954:	1c58      	adds	r0, r3, #1
 8007956:	6010      	str	r0, [r2, #0]
 8007958:	7019      	strb	r1, [r3, #0]
 800795a:	4608      	mov	r0, r1
 800795c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007960:	4770      	bx	lr

08007962 <__sfputs_r>:
 8007962:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007964:	4606      	mov	r6, r0
 8007966:	460f      	mov	r7, r1
 8007968:	4614      	mov	r4, r2
 800796a:	18d5      	adds	r5, r2, r3
 800796c:	42ac      	cmp	r4, r5
 800796e:	d101      	bne.n	8007974 <__sfputs_r+0x12>
 8007970:	2000      	movs	r0, #0
 8007972:	e007      	b.n	8007984 <__sfputs_r+0x22>
 8007974:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007978:	463a      	mov	r2, r7
 800797a:	4630      	mov	r0, r6
 800797c:	f7ff ffda 	bl	8007934 <__sfputc_r>
 8007980:	1c43      	adds	r3, r0, #1
 8007982:	d1f3      	bne.n	800796c <__sfputs_r+0xa>
 8007984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007988 <_vfiprintf_r>:
 8007988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800798c:	460d      	mov	r5, r1
 800798e:	b09d      	sub	sp, #116	; 0x74
 8007990:	4614      	mov	r4, r2
 8007992:	4698      	mov	r8, r3
 8007994:	4606      	mov	r6, r0
 8007996:	b118      	cbz	r0, 80079a0 <_vfiprintf_r+0x18>
 8007998:	6983      	ldr	r3, [r0, #24]
 800799a:	b90b      	cbnz	r3, 80079a0 <_vfiprintf_r+0x18>
 800799c:	f7ff fc88 	bl	80072b0 <__sinit>
 80079a0:	4b89      	ldr	r3, [pc, #548]	; (8007bc8 <_vfiprintf_r+0x240>)
 80079a2:	429d      	cmp	r5, r3
 80079a4:	d11b      	bne.n	80079de <_vfiprintf_r+0x56>
 80079a6:	6875      	ldr	r5, [r6, #4]
 80079a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80079aa:	07d9      	lsls	r1, r3, #31
 80079ac:	d405      	bmi.n	80079ba <_vfiprintf_r+0x32>
 80079ae:	89ab      	ldrh	r3, [r5, #12]
 80079b0:	059a      	lsls	r2, r3, #22
 80079b2:	d402      	bmi.n	80079ba <_vfiprintf_r+0x32>
 80079b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80079b6:	f7ff fd19 	bl	80073ec <__retarget_lock_acquire_recursive>
 80079ba:	89ab      	ldrh	r3, [r5, #12]
 80079bc:	071b      	lsls	r3, r3, #28
 80079be:	d501      	bpl.n	80079c4 <_vfiprintf_r+0x3c>
 80079c0:	692b      	ldr	r3, [r5, #16]
 80079c2:	b9eb      	cbnz	r3, 8007a00 <_vfiprintf_r+0x78>
 80079c4:	4629      	mov	r1, r5
 80079c6:	4630      	mov	r0, r6
 80079c8:	f7ff faea 	bl	8006fa0 <__swsetup_r>
 80079cc:	b1c0      	cbz	r0, 8007a00 <_vfiprintf_r+0x78>
 80079ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80079d0:	07dc      	lsls	r4, r3, #31
 80079d2:	d50e      	bpl.n	80079f2 <_vfiprintf_r+0x6a>
 80079d4:	f04f 30ff 	mov.w	r0, #4294967295
 80079d8:	b01d      	add	sp, #116	; 0x74
 80079da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079de:	4b7b      	ldr	r3, [pc, #492]	; (8007bcc <_vfiprintf_r+0x244>)
 80079e0:	429d      	cmp	r5, r3
 80079e2:	d101      	bne.n	80079e8 <_vfiprintf_r+0x60>
 80079e4:	68b5      	ldr	r5, [r6, #8]
 80079e6:	e7df      	b.n	80079a8 <_vfiprintf_r+0x20>
 80079e8:	4b79      	ldr	r3, [pc, #484]	; (8007bd0 <_vfiprintf_r+0x248>)
 80079ea:	429d      	cmp	r5, r3
 80079ec:	bf08      	it	eq
 80079ee:	68f5      	ldreq	r5, [r6, #12]
 80079f0:	e7da      	b.n	80079a8 <_vfiprintf_r+0x20>
 80079f2:	89ab      	ldrh	r3, [r5, #12]
 80079f4:	0598      	lsls	r0, r3, #22
 80079f6:	d4ed      	bmi.n	80079d4 <_vfiprintf_r+0x4c>
 80079f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80079fa:	f7ff fcf8 	bl	80073ee <__retarget_lock_release_recursive>
 80079fe:	e7e9      	b.n	80079d4 <_vfiprintf_r+0x4c>
 8007a00:	2300      	movs	r3, #0
 8007a02:	9309      	str	r3, [sp, #36]	; 0x24
 8007a04:	2320      	movs	r3, #32
 8007a06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a0a:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a0e:	2330      	movs	r3, #48	; 0x30
 8007a10:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007bd4 <_vfiprintf_r+0x24c>
 8007a14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a18:	f04f 0901 	mov.w	r9, #1
 8007a1c:	4623      	mov	r3, r4
 8007a1e:	469a      	mov	sl, r3
 8007a20:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a24:	b10a      	cbz	r2, 8007a2a <_vfiprintf_r+0xa2>
 8007a26:	2a25      	cmp	r2, #37	; 0x25
 8007a28:	d1f9      	bne.n	8007a1e <_vfiprintf_r+0x96>
 8007a2a:	ebba 0b04 	subs.w	fp, sl, r4
 8007a2e:	d00b      	beq.n	8007a48 <_vfiprintf_r+0xc0>
 8007a30:	465b      	mov	r3, fp
 8007a32:	4622      	mov	r2, r4
 8007a34:	4629      	mov	r1, r5
 8007a36:	4630      	mov	r0, r6
 8007a38:	f7ff ff93 	bl	8007962 <__sfputs_r>
 8007a3c:	3001      	adds	r0, #1
 8007a3e:	f000 80aa 	beq.w	8007b96 <_vfiprintf_r+0x20e>
 8007a42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a44:	445a      	add	r2, fp
 8007a46:	9209      	str	r2, [sp, #36]	; 0x24
 8007a48:	f89a 3000 	ldrb.w	r3, [sl]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	f000 80a2 	beq.w	8007b96 <_vfiprintf_r+0x20e>
 8007a52:	2300      	movs	r3, #0
 8007a54:	f04f 32ff 	mov.w	r2, #4294967295
 8007a58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a5c:	f10a 0a01 	add.w	sl, sl, #1
 8007a60:	9304      	str	r3, [sp, #16]
 8007a62:	9307      	str	r3, [sp, #28]
 8007a64:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a68:	931a      	str	r3, [sp, #104]	; 0x68
 8007a6a:	4654      	mov	r4, sl
 8007a6c:	2205      	movs	r2, #5
 8007a6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a72:	4858      	ldr	r0, [pc, #352]	; (8007bd4 <_vfiprintf_r+0x24c>)
 8007a74:	f7f8 fbb4 	bl	80001e0 <memchr>
 8007a78:	9a04      	ldr	r2, [sp, #16]
 8007a7a:	b9d8      	cbnz	r0, 8007ab4 <_vfiprintf_r+0x12c>
 8007a7c:	06d1      	lsls	r1, r2, #27
 8007a7e:	bf44      	itt	mi
 8007a80:	2320      	movmi	r3, #32
 8007a82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a86:	0713      	lsls	r3, r2, #28
 8007a88:	bf44      	itt	mi
 8007a8a:	232b      	movmi	r3, #43	; 0x2b
 8007a8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a90:	f89a 3000 	ldrb.w	r3, [sl]
 8007a94:	2b2a      	cmp	r3, #42	; 0x2a
 8007a96:	d015      	beq.n	8007ac4 <_vfiprintf_r+0x13c>
 8007a98:	9a07      	ldr	r2, [sp, #28]
 8007a9a:	4654      	mov	r4, sl
 8007a9c:	2000      	movs	r0, #0
 8007a9e:	f04f 0c0a 	mov.w	ip, #10
 8007aa2:	4621      	mov	r1, r4
 8007aa4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007aa8:	3b30      	subs	r3, #48	; 0x30
 8007aaa:	2b09      	cmp	r3, #9
 8007aac:	d94e      	bls.n	8007b4c <_vfiprintf_r+0x1c4>
 8007aae:	b1b0      	cbz	r0, 8007ade <_vfiprintf_r+0x156>
 8007ab0:	9207      	str	r2, [sp, #28]
 8007ab2:	e014      	b.n	8007ade <_vfiprintf_r+0x156>
 8007ab4:	eba0 0308 	sub.w	r3, r0, r8
 8007ab8:	fa09 f303 	lsl.w	r3, r9, r3
 8007abc:	4313      	orrs	r3, r2
 8007abe:	9304      	str	r3, [sp, #16]
 8007ac0:	46a2      	mov	sl, r4
 8007ac2:	e7d2      	b.n	8007a6a <_vfiprintf_r+0xe2>
 8007ac4:	9b03      	ldr	r3, [sp, #12]
 8007ac6:	1d19      	adds	r1, r3, #4
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	9103      	str	r1, [sp, #12]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	bfbb      	ittet	lt
 8007ad0:	425b      	neglt	r3, r3
 8007ad2:	f042 0202 	orrlt.w	r2, r2, #2
 8007ad6:	9307      	strge	r3, [sp, #28]
 8007ad8:	9307      	strlt	r3, [sp, #28]
 8007ada:	bfb8      	it	lt
 8007adc:	9204      	strlt	r2, [sp, #16]
 8007ade:	7823      	ldrb	r3, [r4, #0]
 8007ae0:	2b2e      	cmp	r3, #46	; 0x2e
 8007ae2:	d10c      	bne.n	8007afe <_vfiprintf_r+0x176>
 8007ae4:	7863      	ldrb	r3, [r4, #1]
 8007ae6:	2b2a      	cmp	r3, #42	; 0x2a
 8007ae8:	d135      	bne.n	8007b56 <_vfiprintf_r+0x1ce>
 8007aea:	9b03      	ldr	r3, [sp, #12]
 8007aec:	1d1a      	adds	r2, r3, #4
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	9203      	str	r2, [sp, #12]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	bfb8      	it	lt
 8007af6:	f04f 33ff 	movlt.w	r3, #4294967295
 8007afa:	3402      	adds	r4, #2
 8007afc:	9305      	str	r3, [sp, #20]
 8007afe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007be4 <_vfiprintf_r+0x25c>
 8007b02:	7821      	ldrb	r1, [r4, #0]
 8007b04:	2203      	movs	r2, #3
 8007b06:	4650      	mov	r0, sl
 8007b08:	f7f8 fb6a 	bl	80001e0 <memchr>
 8007b0c:	b140      	cbz	r0, 8007b20 <_vfiprintf_r+0x198>
 8007b0e:	2340      	movs	r3, #64	; 0x40
 8007b10:	eba0 000a 	sub.w	r0, r0, sl
 8007b14:	fa03 f000 	lsl.w	r0, r3, r0
 8007b18:	9b04      	ldr	r3, [sp, #16]
 8007b1a:	4303      	orrs	r3, r0
 8007b1c:	3401      	adds	r4, #1
 8007b1e:	9304      	str	r3, [sp, #16]
 8007b20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b24:	482c      	ldr	r0, [pc, #176]	; (8007bd8 <_vfiprintf_r+0x250>)
 8007b26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b2a:	2206      	movs	r2, #6
 8007b2c:	f7f8 fb58 	bl	80001e0 <memchr>
 8007b30:	2800      	cmp	r0, #0
 8007b32:	d03f      	beq.n	8007bb4 <_vfiprintf_r+0x22c>
 8007b34:	4b29      	ldr	r3, [pc, #164]	; (8007bdc <_vfiprintf_r+0x254>)
 8007b36:	bb1b      	cbnz	r3, 8007b80 <_vfiprintf_r+0x1f8>
 8007b38:	9b03      	ldr	r3, [sp, #12]
 8007b3a:	3307      	adds	r3, #7
 8007b3c:	f023 0307 	bic.w	r3, r3, #7
 8007b40:	3308      	adds	r3, #8
 8007b42:	9303      	str	r3, [sp, #12]
 8007b44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b46:	443b      	add	r3, r7
 8007b48:	9309      	str	r3, [sp, #36]	; 0x24
 8007b4a:	e767      	b.n	8007a1c <_vfiprintf_r+0x94>
 8007b4c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b50:	460c      	mov	r4, r1
 8007b52:	2001      	movs	r0, #1
 8007b54:	e7a5      	b.n	8007aa2 <_vfiprintf_r+0x11a>
 8007b56:	2300      	movs	r3, #0
 8007b58:	3401      	adds	r4, #1
 8007b5a:	9305      	str	r3, [sp, #20]
 8007b5c:	4619      	mov	r1, r3
 8007b5e:	f04f 0c0a 	mov.w	ip, #10
 8007b62:	4620      	mov	r0, r4
 8007b64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b68:	3a30      	subs	r2, #48	; 0x30
 8007b6a:	2a09      	cmp	r2, #9
 8007b6c:	d903      	bls.n	8007b76 <_vfiprintf_r+0x1ee>
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d0c5      	beq.n	8007afe <_vfiprintf_r+0x176>
 8007b72:	9105      	str	r1, [sp, #20]
 8007b74:	e7c3      	b.n	8007afe <_vfiprintf_r+0x176>
 8007b76:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b7a:	4604      	mov	r4, r0
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	e7f0      	b.n	8007b62 <_vfiprintf_r+0x1da>
 8007b80:	ab03      	add	r3, sp, #12
 8007b82:	9300      	str	r3, [sp, #0]
 8007b84:	462a      	mov	r2, r5
 8007b86:	4b16      	ldr	r3, [pc, #88]	; (8007be0 <_vfiprintf_r+0x258>)
 8007b88:	a904      	add	r1, sp, #16
 8007b8a:	4630      	mov	r0, r6
 8007b8c:	f3af 8000 	nop.w
 8007b90:	4607      	mov	r7, r0
 8007b92:	1c78      	adds	r0, r7, #1
 8007b94:	d1d6      	bne.n	8007b44 <_vfiprintf_r+0x1bc>
 8007b96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b98:	07d9      	lsls	r1, r3, #31
 8007b9a:	d405      	bmi.n	8007ba8 <_vfiprintf_r+0x220>
 8007b9c:	89ab      	ldrh	r3, [r5, #12]
 8007b9e:	059a      	lsls	r2, r3, #22
 8007ba0:	d402      	bmi.n	8007ba8 <_vfiprintf_r+0x220>
 8007ba2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ba4:	f7ff fc23 	bl	80073ee <__retarget_lock_release_recursive>
 8007ba8:	89ab      	ldrh	r3, [r5, #12]
 8007baa:	065b      	lsls	r3, r3, #25
 8007bac:	f53f af12 	bmi.w	80079d4 <_vfiprintf_r+0x4c>
 8007bb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007bb2:	e711      	b.n	80079d8 <_vfiprintf_r+0x50>
 8007bb4:	ab03      	add	r3, sp, #12
 8007bb6:	9300      	str	r3, [sp, #0]
 8007bb8:	462a      	mov	r2, r5
 8007bba:	4b09      	ldr	r3, [pc, #36]	; (8007be0 <_vfiprintf_r+0x258>)
 8007bbc:	a904      	add	r1, sp, #16
 8007bbe:	4630      	mov	r0, r6
 8007bc0:	f000 f880 	bl	8007cc4 <_printf_i>
 8007bc4:	e7e4      	b.n	8007b90 <_vfiprintf_r+0x208>
 8007bc6:	bf00      	nop
 8007bc8:	08008d58 	.word	0x08008d58
 8007bcc:	08008d78 	.word	0x08008d78
 8007bd0:	08008d38 	.word	0x08008d38
 8007bd4:	08008d98 	.word	0x08008d98
 8007bd8:	08008da2 	.word	0x08008da2
 8007bdc:	00000000 	.word	0x00000000
 8007be0:	08007963 	.word	0x08007963
 8007be4:	08008d9e 	.word	0x08008d9e

08007be8 <_printf_common>:
 8007be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bec:	4616      	mov	r6, r2
 8007bee:	4699      	mov	r9, r3
 8007bf0:	688a      	ldr	r2, [r1, #8]
 8007bf2:	690b      	ldr	r3, [r1, #16]
 8007bf4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	bfb8      	it	lt
 8007bfc:	4613      	movlt	r3, r2
 8007bfe:	6033      	str	r3, [r6, #0]
 8007c00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007c04:	4607      	mov	r7, r0
 8007c06:	460c      	mov	r4, r1
 8007c08:	b10a      	cbz	r2, 8007c0e <_printf_common+0x26>
 8007c0a:	3301      	adds	r3, #1
 8007c0c:	6033      	str	r3, [r6, #0]
 8007c0e:	6823      	ldr	r3, [r4, #0]
 8007c10:	0699      	lsls	r1, r3, #26
 8007c12:	bf42      	ittt	mi
 8007c14:	6833      	ldrmi	r3, [r6, #0]
 8007c16:	3302      	addmi	r3, #2
 8007c18:	6033      	strmi	r3, [r6, #0]
 8007c1a:	6825      	ldr	r5, [r4, #0]
 8007c1c:	f015 0506 	ands.w	r5, r5, #6
 8007c20:	d106      	bne.n	8007c30 <_printf_common+0x48>
 8007c22:	f104 0a19 	add.w	sl, r4, #25
 8007c26:	68e3      	ldr	r3, [r4, #12]
 8007c28:	6832      	ldr	r2, [r6, #0]
 8007c2a:	1a9b      	subs	r3, r3, r2
 8007c2c:	42ab      	cmp	r3, r5
 8007c2e:	dc26      	bgt.n	8007c7e <_printf_common+0x96>
 8007c30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007c34:	1e13      	subs	r3, r2, #0
 8007c36:	6822      	ldr	r2, [r4, #0]
 8007c38:	bf18      	it	ne
 8007c3a:	2301      	movne	r3, #1
 8007c3c:	0692      	lsls	r2, r2, #26
 8007c3e:	d42b      	bmi.n	8007c98 <_printf_common+0xb0>
 8007c40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007c44:	4649      	mov	r1, r9
 8007c46:	4638      	mov	r0, r7
 8007c48:	47c0      	blx	r8
 8007c4a:	3001      	adds	r0, #1
 8007c4c:	d01e      	beq.n	8007c8c <_printf_common+0xa4>
 8007c4e:	6823      	ldr	r3, [r4, #0]
 8007c50:	68e5      	ldr	r5, [r4, #12]
 8007c52:	6832      	ldr	r2, [r6, #0]
 8007c54:	f003 0306 	and.w	r3, r3, #6
 8007c58:	2b04      	cmp	r3, #4
 8007c5a:	bf08      	it	eq
 8007c5c:	1aad      	subeq	r5, r5, r2
 8007c5e:	68a3      	ldr	r3, [r4, #8]
 8007c60:	6922      	ldr	r2, [r4, #16]
 8007c62:	bf0c      	ite	eq
 8007c64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c68:	2500      	movne	r5, #0
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	bfc4      	itt	gt
 8007c6e:	1a9b      	subgt	r3, r3, r2
 8007c70:	18ed      	addgt	r5, r5, r3
 8007c72:	2600      	movs	r6, #0
 8007c74:	341a      	adds	r4, #26
 8007c76:	42b5      	cmp	r5, r6
 8007c78:	d11a      	bne.n	8007cb0 <_printf_common+0xc8>
 8007c7a:	2000      	movs	r0, #0
 8007c7c:	e008      	b.n	8007c90 <_printf_common+0xa8>
 8007c7e:	2301      	movs	r3, #1
 8007c80:	4652      	mov	r2, sl
 8007c82:	4649      	mov	r1, r9
 8007c84:	4638      	mov	r0, r7
 8007c86:	47c0      	blx	r8
 8007c88:	3001      	adds	r0, #1
 8007c8a:	d103      	bne.n	8007c94 <_printf_common+0xac>
 8007c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c94:	3501      	adds	r5, #1
 8007c96:	e7c6      	b.n	8007c26 <_printf_common+0x3e>
 8007c98:	18e1      	adds	r1, r4, r3
 8007c9a:	1c5a      	adds	r2, r3, #1
 8007c9c:	2030      	movs	r0, #48	; 0x30
 8007c9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007ca2:	4422      	add	r2, r4
 8007ca4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007ca8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007cac:	3302      	adds	r3, #2
 8007cae:	e7c7      	b.n	8007c40 <_printf_common+0x58>
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	4622      	mov	r2, r4
 8007cb4:	4649      	mov	r1, r9
 8007cb6:	4638      	mov	r0, r7
 8007cb8:	47c0      	blx	r8
 8007cba:	3001      	adds	r0, #1
 8007cbc:	d0e6      	beq.n	8007c8c <_printf_common+0xa4>
 8007cbe:	3601      	adds	r6, #1
 8007cc0:	e7d9      	b.n	8007c76 <_printf_common+0x8e>
	...

08007cc4 <_printf_i>:
 8007cc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007cc8:	7e0f      	ldrb	r7, [r1, #24]
 8007cca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007ccc:	2f78      	cmp	r7, #120	; 0x78
 8007cce:	4691      	mov	r9, r2
 8007cd0:	4680      	mov	r8, r0
 8007cd2:	460c      	mov	r4, r1
 8007cd4:	469a      	mov	sl, r3
 8007cd6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007cda:	d807      	bhi.n	8007cec <_printf_i+0x28>
 8007cdc:	2f62      	cmp	r7, #98	; 0x62
 8007cde:	d80a      	bhi.n	8007cf6 <_printf_i+0x32>
 8007ce0:	2f00      	cmp	r7, #0
 8007ce2:	f000 80d8 	beq.w	8007e96 <_printf_i+0x1d2>
 8007ce6:	2f58      	cmp	r7, #88	; 0x58
 8007ce8:	f000 80a3 	beq.w	8007e32 <_printf_i+0x16e>
 8007cec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007cf0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007cf4:	e03a      	b.n	8007d6c <_printf_i+0xa8>
 8007cf6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007cfa:	2b15      	cmp	r3, #21
 8007cfc:	d8f6      	bhi.n	8007cec <_printf_i+0x28>
 8007cfe:	a101      	add	r1, pc, #4	; (adr r1, 8007d04 <_printf_i+0x40>)
 8007d00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007d04:	08007d5d 	.word	0x08007d5d
 8007d08:	08007d71 	.word	0x08007d71
 8007d0c:	08007ced 	.word	0x08007ced
 8007d10:	08007ced 	.word	0x08007ced
 8007d14:	08007ced 	.word	0x08007ced
 8007d18:	08007ced 	.word	0x08007ced
 8007d1c:	08007d71 	.word	0x08007d71
 8007d20:	08007ced 	.word	0x08007ced
 8007d24:	08007ced 	.word	0x08007ced
 8007d28:	08007ced 	.word	0x08007ced
 8007d2c:	08007ced 	.word	0x08007ced
 8007d30:	08007e7d 	.word	0x08007e7d
 8007d34:	08007da1 	.word	0x08007da1
 8007d38:	08007e5f 	.word	0x08007e5f
 8007d3c:	08007ced 	.word	0x08007ced
 8007d40:	08007ced 	.word	0x08007ced
 8007d44:	08007e9f 	.word	0x08007e9f
 8007d48:	08007ced 	.word	0x08007ced
 8007d4c:	08007da1 	.word	0x08007da1
 8007d50:	08007ced 	.word	0x08007ced
 8007d54:	08007ced 	.word	0x08007ced
 8007d58:	08007e67 	.word	0x08007e67
 8007d5c:	682b      	ldr	r3, [r5, #0]
 8007d5e:	1d1a      	adds	r2, r3, #4
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	602a      	str	r2, [r5, #0]
 8007d64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	e0a3      	b.n	8007eb8 <_printf_i+0x1f4>
 8007d70:	6820      	ldr	r0, [r4, #0]
 8007d72:	6829      	ldr	r1, [r5, #0]
 8007d74:	0606      	lsls	r6, r0, #24
 8007d76:	f101 0304 	add.w	r3, r1, #4
 8007d7a:	d50a      	bpl.n	8007d92 <_printf_i+0xce>
 8007d7c:	680e      	ldr	r6, [r1, #0]
 8007d7e:	602b      	str	r3, [r5, #0]
 8007d80:	2e00      	cmp	r6, #0
 8007d82:	da03      	bge.n	8007d8c <_printf_i+0xc8>
 8007d84:	232d      	movs	r3, #45	; 0x2d
 8007d86:	4276      	negs	r6, r6
 8007d88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d8c:	485e      	ldr	r0, [pc, #376]	; (8007f08 <_printf_i+0x244>)
 8007d8e:	230a      	movs	r3, #10
 8007d90:	e019      	b.n	8007dc6 <_printf_i+0x102>
 8007d92:	680e      	ldr	r6, [r1, #0]
 8007d94:	602b      	str	r3, [r5, #0]
 8007d96:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007d9a:	bf18      	it	ne
 8007d9c:	b236      	sxthne	r6, r6
 8007d9e:	e7ef      	b.n	8007d80 <_printf_i+0xbc>
 8007da0:	682b      	ldr	r3, [r5, #0]
 8007da2:	6820      	ldr	r0, [r4, #0]
 8007da4:	1d19      	adds	r1, r3, #4
 8007da6:	6029      	str	r1, [r5, #0]
 8007da8:	0601      	lsls	r1, r0, #24
 8007daa:	d501      	bpl.n	8007db0 <_printf_i+0xec>
 8007dac:	681e      	ldr	r6, [r3, #0]
 8007dae:	e002      	b.n	8007db6 <_printf_i+0xf2>
 8007db0:	0646      	lsls	r6, r0, #25
 8007db2:	d5fb      	bpl.n	8007dac <_printf_i+0xe8>
 8007db4:	881e      	ldrh	r6, [r3, #0]
 8007db6:	4854      	ldr	r0, [pc, #336]	; (8007f08 <_printf_i+0x244>)
 8007db8:	2f6f      	cmp	r7, #111	; 0x6f
 8007dba:	bf0c      	ite	eq
 8007dbc:	2308      	moveq	r3, #8
 8007dbe:	230a      	movne	r3, #10
 8007dc0:	2100      	movs	r1, #0
 8007dc2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007dc6:	6865      	ldr	r5, [r4, #4]
 8007dc8:	60a5      	str	r5, [r4, #8]
 8007dca:	2d00      	cmp	r5, #0
 8007dcc:	bfa2      	ittt	ge
 8007dce:	6821      	ldrge	r1, [r4, #0]
 8007dd0:	f021 0104 	bicge.w	r1, r1, #4
 8007dd4:	6021      	strge	r1, [r4, #0]
 8007dd6:	b90e      	cbnz	r6, 8007ddc <_printf_i+0x118>
 8007dd8:	2d00      	cmp	r5, #0
 8007dda:	d04d      	beq.n	8007e78 <_printf_i+0x1b4>
 8007ddc:	4615      	mov	r5, r2
 8007dde:	fbb6 f1f3 	udiv	r1, r6, r3
 8007de2:	fb03 6711 	mls	r7, r3, r1, r6
 8007de6:	5dc7      	ldrb	r7, [r0, r7]
 8007de8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007dec:	4637      	mov	r7, r6
 8007dee:	42bb      	cmp	r3, r7
 8007df0:	460e      	mov	r6, r1
 8007df2:	d9f4      	bls.n	8007dde <_printf_i+0x11a>
 8007df4:	2b08      	cmp	r3, #8
 8007df6:	d10b      	bne.n	8007e10 <_printf_i+0x14c>
 8007df8:	6823      	ldr	r3, [r4, #0]
 8007dfa:	07de      	lsls	r6, r3, #31
 8007dfc:	d508      	bpl.n	8007e10 <_printf_i+0x14c>
 8007dfe:	6923      	ldr	r3, [r4, #16]
 8007e00:	6861      	ldr	r1, [r4, #4]
 8007e02:	4299      	cmp	r1, r3
 8007e04:	bfde      	ittt	le
 8007e06:	2330      	movle	r3, #48	; 0x30
 8007e08:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007e0c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007e10:	1b52      	subs	r2, r2, r5
 8007e12:	6122      	str	r2, [r4, #16]
 8007e14:	f8cd a000 	str.w	sl, [sp]
 8007e18:	464b      	mov	r3, r9
 8007e1a:	aa03      	add	r2, sp, #12
 8007e1c:	4621      	mov	r1, r4
 8007e1e:	4640      	mov	r0, r8
 8007e20:	f7ff fee2 	bl	8007be8 <_printf_common>
 8007e24:	3001      	adds	r0, #1
 8007e26:	d14c      	bne.n	8007ec2 <_printf_i+0x1fe>
 8007e28:	f04f 30ff 	mov.w	r0, #4294967295
 8007e2c:	b004      	add	sp, #16
 8007e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e32:	4835      	ldr	r0, [pc, #212]	; (8007f08 <_printf_i+0x244>)
 8007e34:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007e38:	6829      	ldr	r1, [r5, #0]
 8007e3a:	6823      	ldr	r3, [r4, #0]
 8007e3c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007e40:	6029      	str	r1, [r5, #0]
 8007e42:	061d      	lsls	r5, r3, #24
 8007e44:	d514      	bpl.n	8007e70 <_printf_i+0x1ac>
 8007e46:	07df      	lsls	r7, r3, #31
 8007e48:	bf44      	itt	mi
 8007e4a:	f043 0320 	orrmi.w	r3, r3, #32
 8007e4e:	6023      	strmi	r3, [r4, #0]
 8007e50:	b91e      	cbnz	r6, 8007e5a <_printf_i+0x196>
 8007e52:	6823      	ldr	r3, [r4, #0]
 8007e54:	f023 0320 	bic.w	r3, r3, #32
 8007e58:	6023      	str	r3, [r4, #0]
 8007e5a:	2310      	movs	r3, #16
 8007e5c:	e7b0      	b.n	8007dc0 <_printf_i+0xfc>
 8007e5e:	6823      	ldr	r3, [r4, #0]
 8007e60:	f043 0320 	orr.w	r3, r3, #32
 8007e64:	6023      	str	r3, [r4, #0]
 8007e66:	2378      	movs	r3, #120	; 0x78
 8007e68:	4828      	ldr	r0, [pc, #160]	; (8007f0c <_printf_i+0x248>)
 8007e6a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007e6e:	e7e3      	b.n	8007e38 <_printf_i+0x174>
 8007e70:	0659      	lsls	r1, r3, #25
 8007e72:	bf48      	it	mi
 8007e74:	b2b6      	uxthmi	r6, r6
 8007e76:	e7e6      	b.n	8007e46 <_printf_i+0x182>
 8007e78:	4615      	mov	r5, r2
 8007e7a:	e7bb      	b.n	8007df4 <_printf_i+0x130>
 8007e7c:	682b      	ldr	r3, [r5, #0]
 8007e7e:	6826      	ldr	r6, [r4, #0]
 8007e80:	6961      	ldr	r1, [r4, #20]
 8007e82:	1d18      	adds	r0, r3, #4
 8007e84:	6028      	str	r0, [r5, #0]
 8007e86:	0635      	lsls	r5, r6, #24
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	d501      	bpl.n	8007e90 <_printf_i+0x1cc>
 8007e8c:	6019      	str	r1, [r3, #0]
 8007e8e:	e002      	b.n	8007e96 <_printf_i+0x1d2>
 8007e90:	0670      	lsls	r0, r6, #25
 8007e92:	d5fb      	bpl.n	8007e8c <_printf_i+0x1c8>
 8007e94:	8019      	strh	r1, [r3, #0]
 8007e96:	2300      	movs	r3, #0
 8007e98:	6123      	str	r3, [r4, #16]
 8007e9a:	4615      	mov	r5, r2
 8007e9c:	e7ba      	b.n	8007e14 <_printf_i+0x150>
 8007e9e:	682b      	ldr	r3, [r5, #0]
 8007ea0:	1d1a      	adds	r2, r3, #4
 8007ea2:	602a      	str	r2, [r5, #0]
 8007ea4:	681d      	ldr	r5, [r3, #0]
 8007ea6:	6862      	ldr	r2, [r4, #4]
 8007ea8:	2100      	movs	r1, #0
 8007eaa:	4628      	mov	r0, r5
 8007eac:	f7f8 f998 	bl	80001e0 <memchr>
 8007eb0:	b108      	cbz	r0, 8007eb6 <_printf_i+0x1f2>
 8007eb2:	1b40      	subs	r0, r0, r5
 8007eb4:	6060      	str	r0, [r4, #4]
 8007eb6:	6863      	ldr	r3, [r4, #4]
 8007eb8:	6123      	str	r3, [r4, #16]
 8007eba:	2300      	movs	r3, #0
 8007ebc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ec0:	e7a8      	b.n	8007e14 <_printf_i+0x150>
 8007ec2:	6923      	ldr	r3, [r4, #16]
 8007ec4:	462a      	mov	r2, r5
 8007ec6:	4649      	mov	r1, r9
 8007ec8:	4640      	mov	r0, r8
 8007eca:	47d0      	blx	sl
 8007ecc:	3001      	adds	r0, #1
 8007ece:	d0ab      	beq.n	8007e28 <_printf_i+0x164>
 8007ed0:	6823      	ldr	r3, [r4, #0]
 8007ed2:	079b      	lsls	r3, r3, #30
 8007ed4:	d413      	bmi.n	8007efe <_printf_i+0x23a>
 8007ed6:	68e0      	ldr	r0, [r4, #12]
 8007ed8:	9b03      	ldr	r3, [sp, #12]
 8007eda:	4298      	cmp	r0, r3
 8007edc:	bfb8      	it	lt
 8007ede:	4618      	movlt	r0, r3
 8007ee0:	e7a4      	b.n	8007e2c <_printf_i+0x168>
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	4632      	mov	r2, r6
 8007ee6:	4649      	mov	r1, r9
 8007ee8:	4640      	mov	r0, r8
 8007eea:	47d0      	blx	sl
 8007eec:	3001      	adds	r0, #1
 8007eee:	d09b      	beq.n	8007e28 <_printf_i+0x164>
 8007ef0:	3501      	adds	r5, #1
 8007ef2:	68e3      	ldr	r3, [r4, #12]
 8007ef4:	9903      	ldr	r1, [sp, #12]
 8007ef6:	1a5b      	subs	r3, r3, r1
 8007ef8:	42ab      	cmp	r3, r5
 8007efa:	dcf2      	bgt.n	8007ee2 <_printf_i+0x21e>
 8007efc:	e7eb      	b.n	8007ed6 <_printf_i+0x212>
 8007efe:	2500      	movs	r5, #0
 8007f00:	f104 0619 	add.w	r6, r4, #25
 8007f04:	e7f5      	b.n	8007ef2 <_printf_i+0x22e>
 8007f06:	bf00      	nop
 8007f08:	08008da9 	.word	0x08008da9
 8007f0c:	08008dba 	.word	0x08008dba

08007f10 <_sbrk_r>:
 8007f10:	b538      	push	{r3, r4, r5, lr}
 8007f12:	4d06      	ldr	r5, [pc, #24]	; (8007f2c <_sbrk_r+0x1c>)
 8007f14:	2300      	movs	r3, #0
 8007f16:	4604      	mov	r4, r0
 8007f18:	4608      	mov	r0, r1
 8007f1a:	602b      	str	r3, [r5, #0]
 8007f1c:	f7f9 fd14 	bl	8001948 <_sbrk>
 8007f20:	1c43      	adds	r3, r0, #1
 8007f22:	d102      	bne.n	8007f2a <_sbrk_r+0x1a>
 8007f24:	682b      	ldr	r3, [r5, #0]
 8007f26:	b103      	cbz	r3, 8007f2a <_sbrk_r+0x1a>
 8007f28:	6023      	str	r3, [r4, #0]
 8007f2a:	bd38      	pop	{r3, r4, r5, pc}
 8007f2c:	2000046c 	.word	0x2000046c

08007f30 <__sread>:
 8007f30:	b510      	push	{r4, lr}
 8007f32:	460c      	mov	r4, r1
 8007f34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f38:	f000 f8f8 	bl	800812c <_read_r>
 8007f3c:	2800      	cmp	r0, #0
 8007f3e:	bfab      	itete	ge
 8007f40:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007f42:	89a3      	ldrhlt	r3, [r4, #12]
 8007f44:	181b      	addge	r3, r3, r0
 8007f46:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007f4a:	bfac      	ite	ge
 8007f4c:	6563      	strge	r3, [r4, #84]	; 0x54
 8007f4e:	81a3      	strhlt	r3, [r4, #12]
 8007f50:	bd10      	pop	{r4, pc}

08007f52 <__swrite>:
 8007f52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f56:	461f      	mov	r7, r3
 8007f58:	898b      	ldrh	r3, [r1, #12]
 8007f5a:	05db      	lsls	r3, r3, #23
 8007f5c:	4605      	mov	r5, r0
 8007f5e:	460c      	mov	r4, r1
 8007f60:	4616      	mov	r6, r2
 8007f62:	d505      	bpl.n	8007f70 <__swrite+0x1e>
 8007f64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f68:	2302      	movs	r3, #2
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	f000 f868 	bl	8008040 <_lseek_r>
 8007f70:	89a3      	ldrh	r3, [r4, #12]
 8007f72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f7a:	81a3      	strh	r3, [r4, #12]
 8007f7c:	4632      	mov	r2, r6
 8007f7e:	463b      	mov	r3, r7
 8007f80:	4628      	mov	r0, r5
 8007f82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f86:	f000 b817 	b.w	8007fb8 <_write_r>

08007f8a <__sseek>:
 8007f8a:	b510      	push	{r4, lr}
 8007f8c:	460c      	mov	r4, r1
 8007f8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f92:	f000 f855 	bl	8008040 <_lseek_r>
 8007f96:	1c43      	adds	r3, r0, #1
 8007f98:	89a3      	ldrh	r3, [r4, #12]
 8007f9a:	bf15      	itete	ne
 8007f9c:	6560      	strne	r0, [r4, #84]	; 0x54
 8007f9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007fa2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007fa6:	81a3      	strheq	r3, [r4, #12]
 8007fa8:	bf18      	it	ne
 8007faa:	81a3      	strhne	r3, [r4, #12]
 8007fac:	bd10      	pop	{r4, pc}

08007fae <__sclose>:
 8007fae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fb2:	f000 b813 	b.w	8007fdc <_close_r>
	...

08007fb8 <_write_r>:
 8007fb8:	b538      	push	{r3, r4, r5, lr}
 8007fba:	4d07      	ldr	r5, [pc, #28]	; (8007fd8 <_write_r+0x20>)
 8007fbc:	4604      	mov	r4, r0
 8007fbe:	4608      	mov	r0, r1
 8007fc0:	4611      	mov	r1, r2
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	602a      	str	r2, [r5, #0]
 8007fc6:	461a      	mov	r2, r3
 8007fc8:	f7f9 fc6d 	bl	80018a6 <_write>
 8007fcc:	1c43      	adds	r3, r0, #1
 8007fce:	d102      	bne.n	8007fd6 <_write_r+0x1e>
 8007fd0:	682b      	ldr	r3, [r5, #0]
 8007fd2:	b103      	cbz	r3, 8007fd6 <_write_r+0x1e>
 8007fd4:	6023      	str	r3, [r4, #0]
 8007fd6:	bd38      	pop	{r3, r4, r5, pc}
 8007fd8:	2000046c 	.word	0x2000046c

08007fdc <_close_r>:
 8007fdc:	b538      	push	{r3, r4, r5, lr}
 8007fde:	4d06      	ldr	r5, [pc, #24]	; (8007ff8 <_close_r+0x1c>)
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	4604      	mov	r4, r0
 8007fe4:	4608      	mov	r0, r1
 8007fe6:	602b      	str	r3, [r5, #0]
 8007fe8:	f7f9 fc79 	bl	80018de <_close>
 8007fec:	1c43      	adds	r3, r0, #1
 8007fee:	d102      	bne.n	8007ff6 <_close_r+0x1a>
 8007ff0:	682b      	ldr	r3, [r5, #0]
 8007ff2:	b103      	cbz	r3, 8007ff6 <_close_r+0x1a>
 8007ff4:	6023      	str	r3, [r4, #0]
 8007ff6:	bd38      	pop	{r3, r4, r5, pc}
 8007ff8:	2000046c 	.word	0x2000046c

08007ffc <_fstat_r>:
 8007ffc:	b538      	push	{r3, r4, r5, lr}
 8007ffe:	4d07      	ldr	r5, [pc, #28]	; (800801c <_fstat_r+0x20>)
 8008000:	2300      	movs	r3, #0
 8008002:	4604      	mov	r4, r0
 8008004:	4608      	mov	r0, r1
 8008006:	4611      	mov	r1, r2
 8008008:	602b      	str	r3, [r5, #0]
 800800a:	f7f9 fc74 	bl	80018f6 <_fstat>
 800800e:	1c43      	adds	r3, r0, #1
 8008010:	d102      	bne.n	8008018 <_fstat_r+0x1c>
 8008012:	682b      	ldr	r3, [r5, #0]
 8008014:	b103      	cbz	r3, 8008018 <_fstat_r+0x1c>
 8008016:	6023      	str	r3, [r4, #0]
 8008018:	bd38      	pop	{r3, r4, r5, pc}
 800801a:	bf00      	nop
 800801c:	2000046c 	.word	0x2000046c

08008020 <_isatty_r>:
 8008020:	b538      	push	{r3, r4, r5, lr}
 8008022:	4d06      	ldr	r5, [pc, #24]	; (800803c <_isatty_r+0x1c>)
 8008024:	2300      	movs	r3, #0
 8008026:	4604      	mov	r4, r0
 8008028:	4608      	mov	r0, r1
 800802a:	602b      	str	r3, [r5, #0]
 800802c:	f7f9 fc73 	bl	8001916 <_isatty>
 8008030:	1c43      	adds	r3, r0, #1
 8008032:	d102      	bne.n	800803a <_isatty_r+0x1a>
 8008034:	682b      	ldr	r3, [r5, #0]
 8008036:	b103      	cbz	r3, 800803a <_isatty_r+0x1a>
 8008038:	6023      	str	r3, [r4, #0]
 800803a:	bd38      	pop	{r3, r4, r5, pc}
 800803c:	2000046c 	.word	0x2000046c

08008040 <_lseek_r>:
 8008040:	b538      	push	{r3, r4, r5, lr}
 8008042:	4d07      	ldr	r5, [pc, #28]	; (8008060 <_lseek_r+0x20>)
 8008044:	4604      	mov	r4, r0
 8008046:	4608      	mov	r0, r1
 8008048:	4611      	mov	r1, r2
 800804a:	2200      	movs	r2, #0
 800804c:	602a      	str	r2, [r5, #0]
 800804e:	461a      	mov	r2, r3
 8008050:	f7f9 fc6c 	bl	800192c <_lseek>
 8008054:	1c43      	adds	r3, r0, #1
 8008056:	d102      	bne.n	800805e <_lseek_r+0x1e>
 8008058:	682b      	ldr	r3, [r5, #0]
 800805a:	b103      	cbz	r3, 800805e <_lseek_r+0x1e>
 800805c:	6023      	str	r3, [r4, #0]
 800805e:	bd38      	pop	{r3, r4, r5, pc}
 8008060:	2000046c 	.word	0x2000046c

08008064 <memcpy>:
 8008064:	440a      	add	r2, r1
 8008066:	4291      	cmp	r1, r2
 8008068:	f100 33ff 	add.w	r3, r0, #4294967295
 800806c:	d100      	bne.n	8008070 <memcpy+0xc>
 800806e:	4770      	bx	lr
 8008070:	b510      	push	{r4, lr}
 8008072:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008076:	f803 4f01 	strb.w	r4, [r3, #1]!
 800807a:	4291      	cmp	r1, r2
 800807c:	d1f9      	bne.n	8008072 <memcpy+0xe>
 800807e:	bd10      	pop	{r4, pc}

08008080 <memmove>:
 8008080:	4288      	cmp	r0, r1
 8008082:	b510      	push	{r4, lr}
 8008084:	eb01 0402 	add.w	r4, r1, r2
 8008088:	d902      	bls.n	8008090 <memmove+0x10>
 800808a:	4284      	cmp	r4, r0
 800808c:	4623      	mov	r3, r4
 800808e:	d807      	bhi.n	80080a0 <memmove+0x20>
 8008090:	1e43      	subs	r3, r0, #1
 8008092:	42a1      	cmp	r1, r4
 8008094:	d008      	beq.n	80080a8 <memmove+0x28>
 8008096:	f811 2b01 	ldrb.w	r2, [r1], #1
 800809a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800809e:	e7f8      	b.n	8008092 <memmove+0x12>
 80080a0:	4402      	add	r2, r0
 80080a2:	4601      	mov	r1, r0
 80080a4:	428a      	cmp	r2, r1
 80080a6:	d100      	bne.n	80080aa <memmove+0x2a>
 80080a8:	bd10      	pop	{r4, pc}
 80080aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80080ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80080b2:	e7f7      	b.n	80080a4 <memmove+0x24>

080080b4 <__malloc_lock>:
 80080b4:	4801      	ldr	r0, [pc, #4]	; (80080bc <__malloc_lock+0x8>)
 80080b6:	f7ff b999 	b.w	80073ec <__retarget_lock_acquire_recursive>
 80080ba:	bf00      	nop
 80080bc:	20000460 	.word	0x20000460

080080c0 <__malloc_unlock>:
 80080c0:	4801      	ldr	r0, [pc, #4]	; (80080c8 <__malloc_unlock+0x8>)
 80080c2:	f7ff b994 	b.w	80073ee <__retarget_lock_release_recursive>
 80080c6:	bf00      	nop
 80080c8:	20000460 	.word	0x20000460

080080cc <_realloc_r>:
 80080cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080d0:	4680      	mov	r8, r0
 80080d2:	4614      	mov	r4, r2
 80080d4:	460e      	mov	r6, r1
 80080d6:	b921      	cbnz	r1, 80080e2 <_realloc_r+0x16>
 80080d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080dc:	4611      	mov	r1, r2
 80080de:	f7ff ba59 	b.w	8007594 <_malloc_r>
 80080e2:	b92a      	cbnz	r2, 80080f0 <_realloc_r+0x24>
 80080e4:	f7ff f9ea 	bl	80074bc <_free_r>
 80080e8:	4625      	mov	r5, r4
 80080ea:	4628      	mov	r0, r5
 80080ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080f0:	f000 f82e 	bl	8008150 <_malloc_usable_size_r>
 80080f4:	4284      	cmp	r4, r0
 80080f6:	4607      	mov	r7, r0
 80080f8:	d802      	bhi.n	8008100 <_realloc_r+0x34>
 80080fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80080fe:	d812      	bhi.n	8008126 <_realloc_r+0x5a>
 8008100:	4621      	mov	r1, r4
 8008102:	4640      	mov	r0, r8
 8008104:	f7ff fa46 	bl	8007594 <_malloc_r>
 8008108:	4605      	mov	r5, r0
 800810a:	2800      	cmp	r0, #0
 800810c:	d0ed      	beq.n	80080ea <_realloc_r+0x1e>
 800810e:	42bc      	cmp	r4, r7
 8008110:	4622      	mov	r2, r4
 8008112:	4631      	mov	r1, r6
 8008114:	bf28      	it	cs
 8008116:	463a      	movcs	r2, r7
 8008118:	f7ff ffa4 	bl	8008064 <memcpy>
 800811c:	4631      	mov	r1, r6
 800811e:	4640      	mov	r0, r8
 8008120:	f7ff f9cc 	bl	80074bc <_free_r>
 8008124:	e7e1      	b.n	80080ea <_realloc_r+0x1e>
 8008126:	4635      	mov	r5, r6
 8008128:	e7df      	b.n	80080ea <_realloc_r+0x1e>
	...

0800812c <_read_r>:
 800812c:	b538      	push	{r3, r4, r5, lr}
 800812e:	4d07      	ldr	r5, [pc, #28]	; (800814c <_read_r+0x20>)
 8008130:	4604      	mov	r4, r0
 8008132:	4608      	mov	r0, r1
 8008134:	4611      	mov	r1, r2
 8008136:	2200      	movs	r2, #0
 8008138:	602a      	str	r2, [r5, #0]
 800813a:	461a      	mov	r2, r3
 800813c:	f7f9 fb96 	bl	800186c <_read>
 8008140:	1c43      	adds	r3, r0, #1
 8008142:	d102      	bne.n	800814a <_read_r+0x1e>
 8008144:	682b      	ldr	r3, [r5, #0]
 8008146:	b103      	cbz	r3, 800814a <_read_r+0x1e>
 8008148:	6023      	str	r3, [r4, #0]
 800814a:	bd38      	pop	{r3, r4, r5, pc}
 800814c:	2000046c 	.word	0x2000046c

08008150 <_malloc_usable_size_r>:
 8008150:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008154:	1f18      	subs	r0, r3, #4
 8008156:	2b00      	cmp	r3, #0
 8008158:	bfbc      	itt	lt
 800815a:	580b      	ldrlt	r3, [r1, r0]
 800815c:	18c0      	addlt	r0, r0, r3
 800815e:	4770      	bx	lr

08008160 <_init>:
 8008160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008162:	bf00      	nop
 8008164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008166:	bc08      	pop	{r3}
 8008168:	469e      	mov	lr, r3
 800816a:	4770      	bx	lr

0800816c <_fini>:
 800816c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800816e:	bf00      	nop
 8008170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008172:	bc08      	pop	{r3}
 8008174:	469e      	mov	lr, r3
 8008176:	4770      	bx	lr
