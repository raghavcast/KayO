
debounce.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b84  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08001c40  08001c40  00011c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001c70  08001c70  0002003c  2**0
                  CONTENTS
  4 .ARM          00000000  08001c70  08001c70  0002003c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001c70  08001c70  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001c70  08001c70  00011c70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001c74  08001c74  00011c74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  08001c78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  2000003c  08001cb4  0002003c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000d4  08001cb4  000200d4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007182  00000000  00000000  000200a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000013d9  00000000  00000000  00027229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008b8  00000000  00000000  00028608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006c2  00000000  00000000  00028ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019cba  00000000  00000000  00029582  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009e6a  00000000  00000000  0004323c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009fb18  00000000  00000000  0004d0a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001f14  00000000  00000000  000ecbc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000eead4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000003c 	.word	0x2000003c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08001c28 	.word	0x08001c28

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000040 	.word	0x20000040
 8000100:	08001c28 	.word	0x08001c28

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000220:	f000 fa74 	bl	800070c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000224:	f000 f80c 	bl	8000240 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000228:	f000 f886 	bl	8000338 <MX_GPIO_Init>
  MX_TIM6_Init();
 800022c:	f000 f848 	bl	80002c0 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6); //start timer
 8000230:	4b02      	ldr	r3, [pc, #8]	; (800023c <main+0x20>)
 8000232:	0018      	movs	r0, r3
 8000234:	f001 fa56 	bl	80016e4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000238:	e7fe      	b.n	8000238 <main+0x1c>
 800023a:	46c0      	nop			; (mov r8, r8)
 800023c:	20000058 	.word	0x20000058

08000240 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000240:	b590      	push	{r4, r7, lr}
 8000242:	b093      	sub	sp, #76	; 0x4c
 8000244:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000246:	2414      	movs	r4, #20
 8000248:	193b      	adds	r3, r7, r4
 800024a:	0018      	movs	r0, r3
 800024c:	2334      	movs	r3, #52	; 0x34
 800024e:	001a      	movs	r2, r3
 8000250:	2100      	movs	r1, #0
 8000252:	f001 fcbd 	bl	8001bd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000256:	1d3b      	adds	r3, r7, #4
 8000258:	0018      	movs	r0, r3
 800025a:	2310      	movs	r3, #16
 800025c:	001a      	movs	r2, r3
 800025e:	2100      	movs	r1, #0
 8000260:	f001 fcb6 	bl	8001bd0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000264:	0021      	movs	r1, r4
 8000266:	187b      	adds	r3, r7, r1
 8000268:	2202      	movs	r2, #2
 800026a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800026c:	187b      	adds	r3, r7, r1
 800026e:	2201      	movs	r2, #1
 8000270:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000272:	187b      	adds	r3, r7, r1
 8000274:	2210      	movs	r2, #16
 8000276:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000278:	187b      	adds	r3, r7, r1
 800027a:	2200      	movs	r2, #0
 800027c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800027e:	187b      	adds	r3, r7, r1
 8000280:	0018      	movs	r0, r3
 8000282:	f000 fd0d 	bl	8000ca0 <HAL_RCC_OscConfig>
 8000286:	1e03      	subs	r3, r0, #0
 8000288:	d001      	beq.n	800028e <SystemClock_Config+0x4e>
  {
    Error_Handler();
 800028a:	f000 f9b1 	bl	80005f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800028e:	1d3b      	adds	r3, r7, #4
 8000290:	2207      	movs	r2, #7
 8000292:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000294:	1d3b      	adds	r3, r7, #4
 8000296:	2200      	movs	r2, #0
 8000298:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800029a:	1d3b      	adds	r3, r7, #4
 800029c:	2200      	movs	r2, #0
 800029e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002a0:	1d3b      	adds	r3, r7, #4
 80002a2:	2200      	movs	r2, #0
 80002a4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002a6:	1d3b      	adds	r3, r7, #4
 80002a8:	2100      	movs	r1, #0
 80002aa:	0018      	movs	r0, r3
 80002ac:	f001 f87e 	bl	80013ac <HAL_RCC_ClockConfig>
 80002b0:	1e03      	subs	r3, r0, #0
 80002b2:	d001      	beq.n	80002b8 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80002b4:	f000 f99c 	bl	80005f0 <Error_Handler>
  }
}
 80002b8:	46c0      	nop			; (mov r8, r8)
 80002ba:	46bd      	mov	sp, r7
 80002bc:	b013      	add	sp, #76	; 0x4c
 80002be:	bd90      	pop	{r4, r7, pc}

080002c0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002c6:	003b      	movs	r3, r7
 80002c8:	0018      	movs	r0, r3
 80002ca:	2308      	movs	r3, #8
 80002cc:	001a      	movs	r2, r3
 80002ce:	2100      	movs	r1, #0
 80002d0:	f001 fc7e 	bl	8001bd0 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80002d4:	4b15      	ldr	r3, [pc, #84]	; (800032c <MX_TIM6_Init+0x6c>)
 80002d6:	4a16      	ldr	r2, [pc, #88]	; (8000330 <MX_TIM6_Init+0x70>)
 80002d8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 48-1;
 80002da:	4b14      	ldr	r3, [pc, #80]	; (800032c <MX_TIM6_Init+0x6c>)
 80002dc:	222f      	movs	r2, #47	; 0x2f
 80002de:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002e0:	4b12      	ldr	r3, [pc, #72]	; (800032c <MX_TIM6_Init+0x6c>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 80002e6:	4b11      	ldr	r3, [pc, #68]	; (800032c <MX_TIM6_Init+0x6c>)
 80002e8:	4a12      	ldr	r2, [pc, #72]	; (8000334 <MX_TIM6_Init+0x74>)
 80002ea:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80002ec:	4b0f      	ldr	r3, [pc, #60]	; (800032c <MX_TIM6_Init+0x6c>)
 80002ee:	2280      	movs	r2, #128	; 0x80
 80002f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80002f2:	4b0e      	ldr	r3, [pc, #56]	; (800032c <MX_TIM6_Init+0x6c>)
 80002f4:	0018      	movs	r0, r3
 80002f6:	f001 f9a5 	bl	8001644 <HAL_TIM_Base_Init>
 80002fa:	1e03      	subs	r3, r0, #0
 80002fc:	d001      	beq.n	8000302 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80002fe:	f000 f977 	bl	80005f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000302:	003b      	movs	r3, r7
 8000304:	2200      	movs	r2, #0
 8000306:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000308:	003b      	movs	r3, r7
 800030a:	2200      	movs	r2, #0
 800030c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800030e:	003a      	movs	r2, r7
 8000310:	4b06      	ldr	r3, [pc, #24]	; (800032c <MX_TIM6_Init+0x6c>)
 8000312:	0011      	movs	r1, r2
 8000314:	0018      	movs	r0, r3
 8000316:	f001 fbed 	bl	8001af4 <HAL_TIMEx_MasterConfigSynchronization>
 800031a:	1e03      	subs	r3, r0, #0
 800031c:	d001      	beq.n	8000322 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 800031e:	f000 f967 	bl	80005f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000322:	46c0      	nop			; (mov r8, r8)
 8000324:	46bd      	mov	sp, r7
 8000326:	b002      	add	sp, #8
 8000328:	bd80      	pop	{r7, pc}
 800032a:	46c0      	nop			; (mov r8, r8)
 800032c:	20000058 	.word	0x20000058
 8000330:	40001000 	.word	0x40001000
 8000334:	000003e7 	.word	0x000003e7

08000338 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000338:	b590      	push	{r4, r7, lr}
 800033a:	b089      	sub	sp, #36	; 0x24
 800033c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800033e:	240c      	movs	r4, #12
 8000340:	193b      	adds	r3, r7, r4
 8000342:	0018      	movs	r0, r3
 8000344:	2314      	movs	r3, #20
 8000346:	001a      	movs	r2, r3
 8000348:	2100      	movs	r1, #0
 800034a:	f001 fc41 	bl	8001bd0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
  GPIO_InitStruct.Pin = LED_PIN;
 800034e:	0021      	movs	r1, r4
 8000350:	187b      	adds	r3, r7, r1
 8000352:	2280      	movs	r2, #128	; 0x80
 8000354:	0212      	lsls	r2, r2, #8
 8000356:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000358:	000c      	movs	r4, r1
 800035a:	193b      	adds	r3, r7, r4
 800035c:	2201      	movs	r2, #1
 800035e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000360:	193b      	adds	r3, r7, r4
 8000362:	2200      	movs	r2, #0
 8000364:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000366:	193b      	adds	r3, r7, r4
 8000368:	2200      	movs	r2, #0
 800036a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_PORT, &GPIO_InitStruct);
 800036c:	193b      	adds	r3, r7, r4
 800036e:	4a2b      	ldr	r2, [pc, #172]	; (800041c <MX_GPIO_Init+0xe4>)
 8000370:	0019      	movs	r1, r3
 8000372:	0010      	movs	r0, r2
 8000374:	f000 fae2 	bl	800093c <HAL_GPIO_Init>

  HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_RESET);
 8000378:	2380      	movs	r3, #128	; 0x80
 800037a:	021b      	lsls	r3, r3, #8
 800037c:	4827      	ldr	r0, [pc, #156]	; (800041c <MX_GPIO_Init+0xe4>)
 800037e:	2200      	movs	r2, #0
 8000380:	0019      	movs	r1, r3
 8000382:	f000 fc70 	bl	8000c66 <HAL_GPIO_WritePin>
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000386:	4b26      	ldr	r3, [pc, #152]	; (8000420 <MX_GPIO_Init+0xe8>)
 8000388:	695a      	ldr	r2, [r3, #20]
 800038a:	4b25      	ldr	r3, [pc, #148]	; (8000420 <MX_GPIO_Init+0xe8>)
 800038c:	2180      	movs	r1, #128	; 0x80
 800038e:	0309      	lsls	r1, r1, #12
 8000390:	430a      	orrs	r2, r1
 8000392:	615a      	str	r2, [r3, #20]
 8000394:	4b22      	ldr	r3, [pc, #136]	; (8000420 <MX_GPIO_Init+0xe8>)
 8000396:	695a      	ldr	r2, [r3, #20]
 8000398:	2380      	movs	r3, #128	; 0x80
 800039a:	031b      	lsls	r3, r3, #12
 800039c:	4013      	ands	r3, r2
 800039e:	60bb      	str	r3, [r7, #8]
 80003a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003a2:	4b1f      	ldr	r3, [pc, #124]	; (8000420 <MX_GPIO_Init+0xe8>)
 80003a4:	695a      	ldr	r2, [r3, #20]
 80003a6:	4b1e      	ldr	r3, [pc, #120]	; (8000420 <MX_GPIO_Init+0xe8>)
 80003a8:	2180      	movs	r1, #128	; 0x80
 80003aa:	0289      	lsls	r1, r1, #10
 80003ac:	430a      	orrs	r2, r1
 80003ae:	615a      	str	r2, [r3, #20]
 80003b0:	4b1b      	ldr	r3, [pc, #108]	; (8000420 <MX_GPIO_Init+0xe8>)
 80003b2:	695a      	ldr	r2, [r3, #20]
 80003b4:	2380      	movs	r3, #128	; 0x80
 80003b6:	029b      	lsls	r3, r3, #10
 80003b8:	4013      	ands	r3, r2
 80003ba:	607b      	str	r3, [r7, #4]
 80003bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 80003be:	23f8      	movs	r3, #248	; 0xf8
 80003c0:	005b      	lsls	r3, r3, #1
 80003c2:	4816      	ldr	r0, [pc, #88]	; (800041c <MX_GPIO_Init+0xe4>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	0019      	movs	r1, r3
 80003c8:	f000 fc4d 	bl	8000c66 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80003cc:	193b      	adds	r3, r7, r4
 80003ce:	220f      	movs	r2, #15
 80003d0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003d2:	193b      	adds	r3, r7, r4
 80003d4:	2200      	movs	r2, #0
 80003d6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80003d8:	193b      	adds	r3, r7, r4
 80003da:	2202      	movs	r2, #2
 80003dc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003de:	193b      	adds	r3, r7, r4
 80003e0:	4a0e      	ldr	r2, [pc, #56]	; (800041c <MX_GPIO_Init+0xe4>)
 80003e2:	0019      	movs	r1, r3
 80003e4:	0010      	movs	r0, r2
 80003e6:	f000 faa9 	bl	800093c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 PC6 PC7
                           PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 80003ea:	0021      	movs	r1, r4
 80003ec:	187b      	adds	r3, r7, r1
 80003ee:	22f8      	movs	r2, #248	; 0xf8
 80003f0:	0052      	lsls	r2, r2, #1
 80003f2:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003f4:	187b      	adds	r3, r7, r1
 80003f6:	2201      	movs	r2, #1
 80003f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003fa:	187b      	adds	r3, r7, r1
 80003fc:	2200      	movs	r2, #0
 80003fe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000400:	187b      	adds	r3, r7, r1
 8000402:	2200      	movs	r2, #0
 8000404:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000406:	187b      	adds	r3, r7, r1
 8000408:	4a04      	ldr	r2, [pc, #16]	; (800041c <MX_GPIO_Init+0xe4>)
 800040a:	0019      	movs	r1, r3
 800040c:	0010      	movs	r0, r2
 800040e:	f000 fa95 	bl	800093c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	46bd      	mov	sp, r7
 8000416:	b009      	add	sp, #36	; 0x24
 8000418:	bd90      	pop	{r4, r7, pc}
 800041a:	46c0      	nop			; (mov r8, r8)
 800041c:	48000800 	.word	0x48000800
 8000420:	40021000 	.word	0x40021000

08000424 <TIM6_DAC_IRQHandler>:

/* USER CODE BEGIN 4 */
//interrupt handler
void TIM6_DAC_IRQHandler(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim6);
 8000428:	4b03      	ldr	r3, [pc, #12]	; (8000438 <TIM6_DAC_IRQHandler+0x14>)
 800042a:	0018      	movs	r0, r3
 800042c:	f001 f9ac 	bl	8001788 <HAL_TIM_IRQHandler>
}
 8000430:	46c0      	nop			; (mov r8, r8)
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	20000058 	.word	0x20000058

0800043c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM6) {
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	4a04      	ldr	r2, [pc, #16]	; (800045c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800044a:	4293      	cmp	r3, r2
 800044c:	d101      	bne.n	8000452 <HAL_TIM_PeriodElapsedCallback+0x16>
    scan_keypad_debounced();
 800044e:	f000 f807 	bl	8000460 <scan_keypad_debounced>
  }
}
 8000452:	46c0      	nop			; (mov r8, r8)
 8000454:	46bd      	mov	sp, r7
 8000456:	b002      	add	sp, #8
 8000458:	bd80      	pop	{r7, pc}
 800045a:	46c0      	nop			; (mov r8, r8)
 800045c:	40001000 	.word	0x40001000

08000460 <scan_keypad_debounced>:


void scan_keypad_debounced(void){
 8000460:	b590      	push	{r4, r7, lr}
 8000462:	b083      	sub	sp, #12
 8000464:	af00      	add	r7, sp, #0
    static uint8_t previous_state[ROWS][COLS] = {0};
    static uint8_t press_counter[ROWS][COLS] = {0};
    const uint8_t debounce_threshold = 10;
 8000466:	1d7b      	adds	r3, r7, #5
 8000468:	220a      	movs	r2, #10
 800046a:	701a      	strb	r2, [r3, #0]

    for (uint8_t col = 0; col < COLS; col++) {
 800046c:	1dfb      	adds	r3, r7, #7
 800046e:	2200      	movs	r2, #0
 8000470:	701a      	strb	r2, [r3, #0]
 8000472:	e0a2      	b.n	80005ba <scan_keypad_debounced+0x15a>
        HAL_GPIO_WritePin(COL_PORT[col], COL_PIN[col], GPIO_PIN_RESET);
 8000474:	1dfb      	adds	r3, r7, #7
 8000476:	781a      	ldrb	r2, [r3, #0]
 8000478:	4b55      	ldr	r3, [pc, #340]	; (80005d0 <scan_keypad_debounced+0x170>)
 800047a:	0092      	lsls	r2, r2, #2
 800047c:	58d0      	ldr	r0, [r2, r3]
 800047e:	1dfb      	adds	r3, r7, #7
 8000480:	781a      	ldrb	r2, [r3, #0]
 8000482:	4b54      	ldr	r3, [pc, #336]	; (80005d4 <scan_keypad_debounced+0x174>)
 8000484:	0052      	lsls	r2, r2, #1
 8000486:	5ad3      	ldrh	r3, [r2, r3]
 8000488:	2200      	movs	r2, #0
 800048a:	0019      	movs	r1, r3
 800048c:	f000 fbeb 	bl	8000c66 <HAL_GPIO_WritePin>
        for (uint8_t row = 0; row < ROWS; row++) {
 8000490:	1dbb      	adds	r3, r7, #6
 8000492:	2200      	movs	r2, #0
 8000494:	701a      	strb	r2, [r3, #0]
 8000496:	e079      	b.n	800058c <scan_keypad_debounced+0x12c>
            uint8_t current_state = HAL_GPIO_ReadPin(ROW_PORT[row], ROW_PIN[row]);
 8000498:	1dbb      	adds	r3, r7, #6
 800049a:	781a      	ldrb	r2, [r3, #0]
 800049c:	4b4e      	ldr	r3, [pc, #312]	; (80005d8 <scan_keypad_debounced+0x178>)
 800049e:	0092      	lsls	r2, r2, #2
 80004a0:	58d0      	ldr	r0, [r2, r3]
 80004a2:	1dbb      	adds	r3, r7, #6
 80004a4:	781a      	ldrb	r2, [r3, #0]
 80004a6:	4b4d      	ldr	r3, [pc, #308]	; (80005dc <scan_keypad_debounced+0x17c>)
 80004a8:	0052      	lsls	r2, r2, #1
 80004aa:	5ad3      	ldrh	r3, [r2, r3]
 80004ac:	1d3c      	adds	r4, r7, #4
 80004ae:	0019      	movs	r1, r3
 80004b0:	f000 fbbc 	bl	8000c2c <HAL_GPIO_ReadPin>
 80004b4:	0003      	movs	r3, r0
 80004b6:	7023      	strb	r3, [r4, #0]
            if (current_state != previous_state[row][col]) {
 80004b8:	1dbb      	adds	r3, r7, #6
 80004ba:	781a      	ldrb	r2, [r3, #0]
 80004bc:	1dfb      	adds	r3, r7, #7
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	4947      	ldr	r1, [pc, #284]	; (80005e0 <scan_keypad_debounced+0x180>)
 80004c2:	0092      	lsls	r2, r2, #2
 80004c4:	188a      	adds	r2, r1, r2
 80004c6:	5cd3      	ldrb	r3, [r2, r3]
 80004c8:	1d3a      	adds	r2, r7, #4
 80004ca:	7812      	ldrb	r2, [r2, #0]
 80004cc:	429a      	cmp	r2, r3
 80004ce:	d009      	beq.n	80004e4 <scan_keypad_debounced+0x84>
                press_counter[row][col] = 0; // reset counter if state changed
 80004d0:	1dbb      	adds	r3, r7, #6
 80004d2:	781a      	ldrb	r2, [r3, #0]
 80004d4:	1dfb      	adds	r3, r7, #7
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	4942      	ldr	r1, [pc, #264]	; (80005e4 <scan_keypad_debounced+0x184>)
 80004da:	0092      	lsls	r2, r2, #2
 80004dc:	188a      	adds	r2, r1, r2
 80004de:	2100      	movs	r1, #0
 80004e0:	54d1      	strb	r1, [r2, r3]
 80004e2:	e044      	b.n	800056e <scan_keypad_debounced+0x10e>
            } else {
                if (press_counter[row][col] < debounce_threshold) {
 80004e4:	1dbb      	adds	r3, r7, #6
 80004e6:	781a      	ldrb	r2, [r3, #0]
 80004e8:	1dfb      	adds	r3, r7, #7
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	493d      	ldr	r1, [pc, #244]	; (80005e4 <scan_keypad_debounced+0x184>)
 80004ee:	0092      	lsls	r2, r2, #2
 80004f0:	188a      	adds	r2, r1, r2
 80004f2:	5cd3      	ldrb	r3, [r2, r3]
 80004f4:	1d7a      	adds	r2, r7, #5
 80004f6:	7812      	ldrb	r2, [r2, #0]
 80004f8:	429a      	cmp	r2, r3
 80004fa:	d90f      	bls.n	800051c <scan_keypad_debounced+0xbc>
                    press_counter[row][col]++; // increment counter
 80004fc:	1dbb      	adds	r3, r7, #6
 80004fe:	781a      	ldrb	r2, [r3, #0]
 8000500:	1dfb      	adds	r3, r7, #7
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	4837      	ldr	r0, [pc, #220]	; (80005e4 <scan_keypad_debounced+0x184>)
 8000506:	0091      	lsls	r1, r2, #2
 8000508:	1841      	adds	r1, r0, r1
 800050a:	5cc9      	ldrb	r1, [r1, r3]
 800050c:	3101      	adds	r1, #1
 800050e:	b2c8      	uxtb	r0, r1
 8000510:	4934      	ldr	r1, [pc, #208]	; (80005e4 <scan_keypad_debounced+0x184>)
 8000512:	0092      	lsls	r2, r2, #2
 8000514:	188a      	adds	r2, r1, r2
 8000516:	1c01      	adds	r1, r0, #0
 8000518:	54d1      	strb	r1, [r2, r3]
 800051a:	e028      	b.n	800056e <scan_keypad_debounced+0x10e>
                } else if (debounce_status[row][col] != current_state) {
 800051c:	1dbb      	adds	r3, r7, #6
 800051e:	781a      	ldrb	r2, [r3, #0]
 8000520:	1dfb      	adds	r3, r7, #7
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	4930      	ldr	r1, [pc, #192]	; (80005e8 <scan_keypad_debounced+0x188>)
 8000526:	0092      	lsls	r2, r2, #2
 8000528:	188a      	adds	r2, r1, r2
 800052a:	5cd3      	ldrb	r3, [r2, r3]
 800052c:	1d3a      	adds	r2, r7, #4
 800052e:	7812      	ldrb	r2, [r2, #0]
 8000530:	429a      	cmp	r2, r3
 8000532:	d01c      	beq.n	800056e <scan_keypad_debounced+0x10e>
                    debounce_status[row][col] = current_state; // update debounced state
 8000534:	1dbb      	adds	r3, r7, #6
 8000536:	781a      	ldrb	r2, [r3, #0]
 8000538:	1dfb      	adds	r3, r7, #7
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	492a      	ldr	r1, [pc, #168]	; (80005e8 <scan_keypad_debounced+0x188>)
 800053e:	0092      	lsls	r2, r2, #2
 8000540:	188a      	adds	r2, r1, r2
 8000542:	1d39      	adds	r1, r7, #4
 8000544:	7809      	ldrb	r1, [r1, #0]
 8000546:	54d1      	strb	r1, [r2, r3]
                    if (current_state == GPIO_PIN_RESET) {
 8000548:	1d3b      	adds	r3, r7, #4
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	2b00      	cmp	r3, #0
 800054e:	d107      	bne.n	8000560 <scan_keypad_debounced+0x100>
                        // turn on after key preessed
                        HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_SET);
 8000550:	2380      	movs	r3, #128	; 0x80
 8000552:	021b      	lsls	r3, r3, #8
 8000554:	4825      	ldr	r0, [pc, #148]	; (80005ec <scan_keypad_debounced+0x18c>)
 8000556:	2201      	movs	r2, #1
 8000558:	0019      	movs	r1, r3
 800055a:	f000 fb84 	bl	8000c66 <HAL_GPIO_WritePin>
 800055e:	e006      	b.n	800056e <scan_keypad_debounced+0x10e>
                    } else {
                        // turn off after key released
                        HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_RESET);
 8000560:	2380      	movs	r3, #128	; 0x80
 8000562:	021b      	lsls	r3, r3, #8
 8000564:	4821      	ldr	r0, [pc, #132]	; (80005ec <scan_keypad_debounced+0x18c>)
 8000566:	2200      	movs	r2, #0
 8000568:	0019      	movs	r1, r3
 800056a:	f000 fb7c 	bl	8000c66 <HAL_GPIO_WritePin>
                    }
                }
            }
            previous_state[row][col] = current_state;
 800056e:	1dbb      	adds	r3, r7, #6
 8000570:	781a      	ldrb	r2, [r3, #0]
 8000572:	1dfb      	adds	r3, r7, #7
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	491a      	ldr	r1, [pc, #104]	; (80005e0 <scan_keypad_debounced+0x180>)
 8000578:	0092      	lsls	r2, r2, #2
 800057a:	188a      	adds	r2, r1, r2
 800057c:	1d39      	adds	r1, r7, #4
 800057e:	7809      	ldrb	r1, [r1, #0]
 8000580:	54d1      	strb	r1, [r2, r3]
        for (uint8_t row = 0; row < ROWS; row++) {
 8000582:	1dbb      	adds	r3, r7, #6
 8000584:	781a      	ldrb	r2, [r3, #0]
 8000586:	1dbb      	adds	r3, r7, #6
 8000588:	3201      	adds	r2, #1
 800058a:	701a      	strb	r2, [r3, #0]
 800058c:	1dbb      	adds	r3, r7, #6
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	2b03      	cmp	r3, #3
 8000592:	d981      	bls.n	8000498 <scan_keypad_debounced+0x38>
        }
        HAL_GPIO_WritePin(COL_PORT[col], COL_PIN[col], GPIO_PIN_SET);
 8000594:	1dfb      	adds	r3, r7, #7
 8000596:	781a      	ldrb	r2, [r3, #0]
 8000598:	4b0d      	ldr	r3, [pc, #52]	; (80005d0 <scan_keypad_debounced+0x170>)
 800059a:	0092      	lsls	r2, r2, #2
 800059c:	58d0      	ldr	r0, [r2, r3]
 800059e:	1dfb      	adds	r3, r7, #7
 80005a0:	781a      	ldrb	r2, [r3, #0]
 80005a2:	4b0c      	ldr	r3, [pc, #48]	; (80005d4 <scan_keypad_debounced+0x174>)
 80005a4:	0052      	lsls	r2, r2, #1
 80005a6:	5ad3      	ldrh	r3, [r2, r3]
 80005a8:	2201      	movs	r2, #1
 80005aa:	0019      	movs	r1, r3
 80005ac:	f000 fb5b 	bl	8000c66 <HAL_GPIO_WritePin>
    for (uint8_t col = 0; col < COLS; col++) {
 80005b0:	1dfb      	adds	r3, r7, #7
 80005b2:	781a      	ldrb	r2, [r3, #0]
 80005b4:	1dfb      	adds	r3, r7, #7
 80005b6:	3201      	adds	r2, #1
 80005b8:	701a      	strb	r2, [r3, #0]
 80005ba:	1dfb      	adds	r3, r7, #7
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	2b03      	cmp	r3, #3
 80005c0:	d800      	bhi.n	80005c4 <scan_keypad_debounced+0x164>
 80005c2:	e757      	b.n	8000474 <scan_keypad_debounced+0x14>
    }
}
 80005c4:	46c0      	nop			; (mov r8, r8)
 80005c6:	46c0      	nop			; (mov r8, r8)
 80005c8:	46bd      	mov	sp, r7
 80005ca:	b003      	add	sp, #12
 80005cc:	bd90      	pop	{r4, r7, pc}
 80005ce:	46c0      	nop			; (mov r8, r8)
 80005d0:	20000018 	.word	0x20000018
 80005d4:	20000028 	.word	0x20000028
 80005d8:	20000000 	.word	0x20000000
 80005dc:	20000010 	.word	0x20000010
 80005e0:	200000b0 	.word	0x200000b0
 80005e4:	200000c0 	.word	0x200000c0
 80005e8:	200000a0 	.word	0x200000a0
 80005ec:	48000800 	.word	0x48000800

080005f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005f4:	b672      	cpsid	i
}
 80005f6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005f8:	e7fe      	b.n	80005f8 <Error_Handler+0x8>
	...

080005fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000602:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <HAL_MspInit+0x44>)
 8000604:	699a      	ldr	r2, [r3, #24]
 8000606:	4b0e      	ldr	r3, [pc, #56]	; (8000640 <HAL_MspInit+0x44>)
 8000608:	2101      	movs	r1, #1
 800060a:	430a      	orrs	r2, r1
 800060c:	619a      	str	r2, [r3, #24]
 800060e:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <HAL_MspInit+0x44>)
 8000610:	699b      	ldr	r3, [r3, #24]
 8000612:	2201      	movs	r2, #1
 8000614:	4013      	ands	r3, r2
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800061a:	4b09      	ldr	r3, [pc, #36]	; (8000640 <HAL_MspInit+0x44>)
 800061c:	69da      	ldr	r2, [r3, #28]
 800061e:	4b08      	ldr	r3, [pc, #32]	; (8000640 <HAL_MspInit+0x44>)
 8000620:	2180      	movs	r1, #128	; 0x80
 8000622:	0549      	lsls	r1, r1, #21
 8000624:	430a      	orrs	r2, r1
 8000626:	61da      	str	r2, [r3, #28]
 8000628:	4b05      	ldr	r3, [pc, #20]	; (8000640 <HAL_MspInit+0x44>)
 800062a:	69da      	ldr	r2, [r3, #28]
 800062c:	2380      	movs	r3, #128	; 0x80
 800062e:	055b      	lsls	r3, r3, #21
 8000630:	4013      	ands	r3, r2
 8000632:	603b      	str	r3, [r7, #0]
 8000634:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000636:	46c0      	nop			; (mov r8, r8)
 8000638:	46bd      	mov	sp, r7
 800063a:	b002      	add	sp, #8
 800063c:	bd80      	pop	{r7, pc}
 800063e:	46c0      	nop			; (mov r8, r8)
 8000640:	40021000 	.word	0x40021000

08000644 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a09      	ldr	r2, [pc, #36]	; (8000678 <HAL_TIM_Base_MspInit+0x34>)
 8000652:	4293      	cmp	r3, r2
 8000654:	d10b      	bne.n	800066e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000656:	4b09      	ldr	r3, [pc, #36]	; (800067c <HAL_TIM_Base_MspInit+0x38>)
 8000658:	69da      	ldr	r2, [r3, #28]
 800065a:	4b08      	ldr	r3, [pc, #32]	; (800067c <HAL_TIM_Base_MspInit+0x38>)
 800065c:	2110      	movs	r1, #16
 800065e:	430a      	orrs	r2, r1
 8000660:	61da      	str	r2, [r3, #28]
 8000662:	4b06      	ldr	r3, [pc, #24]	; (800067c <HAL_TIM_Base_MspInit+0x38>)
 8000664:	69db      	ldr	r3, [r3, #28]
 8000666:	2210      	movs	r2, #16
 8000668:	4013      	ands	r3, r2
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800066e:	46c0      	nop			; (mov r8, r8)
 8000670:	46bd      	mov	sp, r7
 8000672:	b004      	add	sp, #16
 8000674:	bd80      	pop	{r7, pc}
 8000676:	46c0      	nop			; (mov r8, r8)
 8000678:	40001000 	.word	0x40001000
 800067c:	40021000 	.word	0x40021000

08000680 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000684:	e7fe      	b.n	8000684 <NMI_Handler+0x4>

08000686 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000686:	b580      	push	{r7, lr}
 8000688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800068a:	e7fe      	b.n	800068a <HardFault_Handler+0x4>

0800068c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000690:	46c0      	nop			; (mov r8, r8)
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}

08000696 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000696:	b580      	push	{r7, lr}
 8000698:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800069a:	46c0      	nop			; (mov r8, r8)
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}

080006a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006a4:	f000 f87a 	bl	800079c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006a8:	46c0      	nop			; (mov r8, r8)
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}

080006ae <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006ae:	b580      	push	{r7, lr}
 80006b0:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80006b2:	46c0      	nop			; (mov r8, r8)
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006b8:	480d      	ldr	r0, [pc, #52]	; (80006f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006ba:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006bc:	f7ff fff7 	bl	80006ae <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006c0:	480c      	ldr	r0, [pc, #48]	; (80006f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80006c2:	490d      	ldr	r1, [pc, #52]	; (80006f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006c4:	4a0d      	ldr	r2, [pc, #52]	; (80006fc <LoopForever+0xe>)
  movs r3, #0
 80006c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006c8:	e002      	b.n	80006d0 <LoopCopyDataInit>

080006ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006ce:	3304      	adds	r3, #4

080006d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006d4:	d3f9      	bcc.n	80006ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006d6:	4a0a      	ldr	r2, [pc, #40]	; (8000700 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006d8:	4c0a      	ldr	r4, [pc, #40]	; (8000704 <LoopForever+0x16>)
  movs r3, #0
 80006da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006dc:	e001      	b.n	80006e2 <LoopFillZerobss>

080006de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006e0:	3204      	adds	r2, #4

080006e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006e4:	d3fb      	bcc.n	80006de <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006e6:	f001 fa7b 	bl	8001be0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006ea:	f7ff fd97 	bl	800021c <main>

080006ee <LoopForever>:

LoopForever:
    b LoopForever
 80006ee:	e7fe      	b.n	80006ee <LoopForever>
  ldr   r0, =_estack
 80006f0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80006f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006f8:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 80006fc:	08001c78 	.word	0x08001c78
  ldr r2, =_sbss
 8000700:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 8000704:	200000d4 	.word	0x200000d4

08000708 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000708:	e7fe      	b.n	8000708 <ADC1_COMP_IRQHandler>
	...

0800070c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000710:	4b07      	ldr	r3, [pc, #28]	; (8000730 <HAL_Init+0x24>)
 8000712:	681a      	ldr	r2, [r3, #0]
 8000714:	4b06      	ldr	r3, [pc, #24]	; (8000730 <HAL_Init+0x24>)
 8000716:	2110      	movs	r1, #16
 8000718:	430a      	orrs	r2, r1
 800071a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800071c:	2003      	movs	r0, #3
 800071e:	f000 f809 	bl	8000734 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000722:	f7ff ff6b 	bl	80005fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000726:	2300      	movs	r3, #0
}
 8000728:	0018      	movs	r0, r3
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	46c0      	nop			; (mov r8, r8)
 8000730:	40022000 	.word	0x40022000

08000734 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000734:	b590      	push	{r4, r7, lr}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800073c:	4b14      	ldr	r3, [pc, #80]	; (8000790 <HAL_InitTick+0x5c>)
 800073e:	681c      	ldr	r4, [r3, #0]
 8000740:	4b14      	ldr	r3, [pc, #80]	; (8000794 <HAL_InitTick+0x60>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	0019      	movs	r1, r3
 8000746:	23fa      	movs	r3, #250	; 0xfa
 8000748:	0098      	lsls	r0, r3, #2
 800074a:	f7ff fcdb 	bl	8000104 <__udivsi3>
 800074e:	0003      	movs	r3, r0
 8000750:	0019      	movs	r1, r3
 8000752:	0020      	movs	r0, r4
 8000754:	f7ff fcd6 	bl	8000104 <__udivsi3>
 8000758:	0003      	movs	r3, r0
 800075a:	0018      	movs	r0, r3
 800075c:	f000 f8e1 	bl	8000922 <HAL_SYSTICK_Config>
 8000760:	1e03      	subs	r3, r0, #0
 8000762:	d001      	beq.n	8000768 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000764:	2301      	movs	r3, #1
 8000766:	e00f      	b.n	8000788 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	2b03      	cmp	r3, #3
 800076c:	d80b      	bhi.n	8000786 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800076e:	6879      	ldr	r1, [r7, #4]
 8000770:	2301      	movs	r3, #1
 8000772:	425b      	negs	r3, r3
 8000774:	2200      	movs	r2, #0
 8000776:	0018      	movs	r0, r3
 8000778:	f000 f8be 	bl	80008f8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800077c:	4b06      	ldr	r3, [pc, #24]	; (8000798 <HAL_InitTick+0x64>)
 800077e:	687a      	ldr	r2, [r7, #4]
 8000780:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000782:	2300      	movs	r3, #0
 8000784:	e000      	b.n	8000788 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000786:	2301      	movs	r3, #1
}
 8000788:	0018      	movs	r0, r3
 800078a:	46bd      	mov	sp, r7
 800078c:	b003      	add	sp, #12
 800078e:	bd90      	pop	{r4, r7, pc}
 8000790:	20000030 	.word	0x20000030
 8000794:	20000038 	.word	0x20000038
 8000798:	20000034 	.word	0x20000034

0800079c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007a0:	4b05      	ldr	r3, [pc, #20]	; (80007b8 <HAL_IncTick+0x1c>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	001a      	movs	r2, r3
 80007a6:	4b05      	ldr	r3, [pc, #20]	; (80007bc <HAL_IncTick+0x20>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	18d2      	adds	r2, r2, r3
 80007ac:	4b03      	ldr	r3, [pc, #12]	; (80007bc <HAL_IncTick+0x20>)
 80007ae:	601a      	str	r2, [r3, #0]
}
 80007b0:	46c0      	nop			; (mov r8, r8)
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	46c0      	nop			; (mov r8, r8)
 80007b8:	20000038 	.word	0x20000038
 80007bc:	200000d0 	.word	0x200000d0

080007c0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  return uwTick;
 80007c4:	4b02      	ldr	r3, [pc, #8]	; (80007d0 <HAL_GetTick+0x10>)
 80007c6:	681b      	ldr	r3, [r3, #0]
}
 80007c8:	0018      	movs	r0, r3
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	46c0      	nop			; (mov r8, r8)
 80007d0:	200000d0 	.word	0x200000d0

080007d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007d4:	b590      	push	{r4, r7, lr}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	0002      	movs	r2, r0
 80007dc:	6039      	str	r1, [r7, #0]
 80007de:	1dfb      	adds	r3, r7, #7
 80007e0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80007e2:	1dfb      	adds	r3, r7, #7
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	2b7f      	cmp	r3, #127	; 0x7f
 80007e8:	d828      	bhi.n	800083c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007ea:	4a2f      	ldr	r2, [pc, #188]	; (80008a8 <__NVIC_SetPriority+0xd4>)
 80007ec:	1dfb      	adds	r3, r7, #7
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	b25b      	sxtb	r3, r3
 80007f2:	089b      	lsrs	r3, r3, #2
 80007f4:	33c0      	adds	r3, #192	; 0xc0
 80007f6:	009b      	lsls	r3, r3, #2
 80007f8:	589b      	ldr	r3, [r3, r2]
 80007fa:	1dfa      	adds	r2, r7, #7
 80007fc:	7812      	ldrb	r2, [r2, #0]
 80007fe:	0011      	movs	r1, r2
 8000800:	2203      	movs	r2, #3
 8000802:	400a      	ands	r2, r1
 8000804:	00d2      	lsls	r2, r2, #3
 8000806:	21ff      	movs	r1, #255	; 0xff
 8000808:	4091      	lsls	r1, r2
 800080a:	000a      	movs	r2, r1
 800080c:	43d2      	mvns	r2, r2
 800080e:	401a      	ands	r2, r3
 8000810:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	019b      	lsls	r3, r3, #6
 8000816:	22ff      	movs	r2, #255	; 0xff
 8000818:	401a      	ands	r2, r3
 800081a:	1dfb      	adds	r3, r7, #7
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	0018      	movs	r0, r3
 8000820:	2303      	movs	r3, #3
 8000822:	4003      	ands	r3, r0
 8000824:	00db      	lsls	r3, r3, #3
 8000826:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000828:	481f      	ldr	r0, [pc, #124]	; (80008a8 <__NVIC_SetPriority+0xd4>)
 800082a:	1dfb      	adds	r3, r7, #7
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	b25b      	sxtb	r3, r3
 8000830:	089b      	lsrs	r3, r3, #2
 8000832:	430a      	orrs	r2, r1
 8000834:	33c0      	adds	r3, #192	; 0xc0
 8000836:	009b      	lsls	r3, r3, #2
 8000838:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800083a:	e031      	b.n	80008a0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800083c:	4a1b      	ldr	r2, [pc, #108]	; (80008ac <__NVIC_SetPriority+0xd8>)
 800083e:	1dfb      	adds	r3, r7, #7
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	0019      	movs	r1, r3
 8000844:	230f      	movs	r3, #15
 8000846:	400b      	ands	r3, r1
 8000848:	3b08      	subs	r3, #8
 800084a:	089b      	lsrs	r3, r3, #2
 800084c:	3306      	adds	r3, #6
 800084e:	009b      	lsls	r3, r3, #2
 8000850:	18d3      	adds	r3, r2, r3
 8000852:	3304      	adds	r3, #4
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	1dfa      	adds	r2, r7, #7
 8000858:	7812      	ldrb	r2, [r2, #0]
 800085a:	0011      	movs	r1, r2
 800085c:	2203      	movs	r2, #3
 800085e:	400a      	ands	r2, r1
 8000860:	00d2      	lsls	r2, r2, #3
 8000862:	21ff      	movs	r1, #255	; 0xff
 8000864:	4091      	lsls	r1, r2
 8000866:	000a      	movs	r2, r1
 8000868:	43d2      	mvns	r2, r2
 800086a:	401a      	ands	r2, r3
 800086c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	019b      	lsls	r3, r3, #6
 8000872:	22ff      	movs	r2, #255	; 0xff
 8000874:	401a      	ands	r2, r3
 8000876:	1dfb      	adds	r3, r7, #7
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	0018      	movs	r0, r3
 800087c:	2303      	movs	r3, #3
 800087e:	4003      	ands	r3, r0
 8000880:	00db      	lsls	r3, r3, #3
 8000882:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000884:	4809      	ldr	r0, [pc, #36]	; (80008ac <__NVIC_SetPriority+0xd8>)
 8000886:	1dfb      	adds	r3, r7, #7
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	001c      	movs	r4, r3
 800088c:	230f      	movs	r3, #15
 800088e:	4023      	ands	r3, r4
 8000890:	3b08      	subs	r3, #8
 8000892:	089b      	lsrs	r3, r3, #2
 8000894:	430a      	orrs	r2, r1
 8000896:	3306      	adds	r3, #6
 8000898:	009b      	lsls	r3, r3, #2
 800089a:	18c3      	adds	r3, r0, r3
 800089c:	3304      	adds	r3, #4
 800089e:	601a      	str	r2, [r3, #0]
}
 80008a0:	46c0      	nop			; (mov r8, r8)
 80008a2:	46bd      	mov	sp, r7
 80008a4:	b003      	add	sp, #12
 80008a6:	bd90      	pop	{r4, r7, pc}
 80008a8:	e000e100 	.word	0xe000e100
 80008ac:	e000ed00 	.word	0xe000ed00

080008b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	1e5a      	subs	r2, r3, #1
 80008bc:	2380      	movs	r3, #128	; 0x80
 80008be:	045b      	lsls	r3, r3, #17
 80008c0:	429a      	cmp	r2, r3
 80008c2:	d301      	bcc.n	80008c8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008c4:	2301      	movs	r3, #1
 80008c6:	e010      	b.n	80008ea <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008c8:	4b0a      	ldr	r3, [pc, #40]	; (80008f4 <SysTick_Config+0x44>)
 80008ca:	687a      	ldr	r2, [r7, #4]
 80008cc:	3a01      	subs	r2, #1
 80008ce:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008d0:	2301      	movs	r3, #1
 80008d2:	425b      	negs	r3, r3
 80008d4:	2103      	movs	r1, #3
 80008d6:	0018      	movs	r0, r3
 80008d8:	f7ff ff7c 	bl	80007d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008dc:	4b05      	ldr	r3, [pc, #20]	; (80008f4 <SysTick_Config+0x44>)
 80008de:	2200      	movs	r2, #0
 80008e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008e2:	4b04      	ldr	r3, [pc, #16]	; (80008f4 <SysTick_Config+0x44>)
 80008e4:	2207      	movs	r2, #7
 80008e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008e8:	2300      	movs	r3, #0
}
 80008ea:	0018      	movs	r0, r3
 80008ec:	46bd      	mov	sp, r7
 80008ee:	b002      	add	sp, #8
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	46c0      	nop			; (mov r8, r8)
 80008f4:	e000e010 	.word	0xe000e010

080008f8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	60b9      	str	r1, [r7, #8]
 8000900:	607a      	str	r2, [r7, #4]
 8000902:	210f      	movs	r1, #15
 8000904:	187b      	adds	r3, r7, r1
 8000906:	1c02      	adds	r2, r0, #0
 8000908:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800090a:	68ba      	ldr	r2, [r7, #8]
 800090c:	187b      	adds	r3, r7, r1
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	b25b      	sxtb	r3, r3
 8000912:	0011      	movs	r1, r2
 8000914:	0018      	movs	r0, r3
 8000916:	f7ff ff5d 	bl	80007d4 <__NVIC_SetPriority>
}
 800091a:	46c0      	nop			; (mov r8, r8)
 800091c:	46bd      	mov	sp, r7
 800091e:	b004      	add	sp, #16
 8000920:	bd80      	pop	{r7, pc}

08000922 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000922:	b580      	push	{r7, lr}
 8000924:	b082      	sub	sp, #8
 8000926:	af00      	add	r7, sp, #0
 8000928:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	0018      	movs	r0, r3
 800092e:	f7ff ffbf 	bl	80008b0 <SysTick_Config>
 8000932:	0003      	movs	r3, r0
}
 8000934:	0018      	movs	r0, r3
 8000936:	46bd      	mov	sp, r7
 8000938:	b002      	add	sp, #8
 800093a:	bd80      	pop	{r7, pc}

0800093c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b086      	sub	sp, #24
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000946:	2300      	movs	r3, #0
 8000948:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800094a:	e155      	b.n	8000bf8 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	2101      	movs	r1, #1
 8000952:	697a      	ldr	r2, [r7, #20]
 8000954:	4091      	lsls	r1, r2
 8000956:	000a      	movs	r2, r1
 8000958:	4013      	ands	r3, r2
 800095a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d100      	bne.n	8000964 <HAL_GPIO_Init+0x28>
 8000962:	e146      	b.n	8000bf2 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	685b      	ldr	r3, [r3, #4]
 8000968:	2203      	movs	r2, #3
 800096a:	4013      	ands	r3, r2
 800096c:	2b01      	cmp	r3, #1
 800096e:	d005      	beq.n	800097c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	685b      	ldr	r3, [r3, #4]
 8000974:	2203      	movs	r2, #3
 8000976:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000978:	2b02      	cmp	r3, #2
 800097a:	d130      	bne.n	80009de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	689b      	ldr	r3, [r3, #8]
 8000980:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	005b      	lsls	r3, r3, #1
 8000986:	2203      	movs	r2, #3
 8000988:	409a      	lsls	r2, r3
 800098a:	0013      	movs	r3, r2
 800098c:	43da      	mvns	r2, r3
 800098e:	693b      	ldr	r3, [r7, #16]
 8000990:	4013      	ands	r3, r2
 8000992:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	68da      	ldr	r2, [r3, #12]
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	005b      	lsls	r3, r3, #1
 800099c:	409a      	lsls	r2, r3
 800099e:	0013      	movs	r3, r2
 80009a0:	693a      	ldr	r2, [r7, #16]
 80009a2:	4313      	orrs	r3, r2
 80009a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	693a      	ldr	r2, [r7, #16]
 80009aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	685b      	ldr	r3, [r3, #4]
 80009b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009b2:	2201      	movs	r2, #1
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	409a      	lsls	r2, r3
 80009b8:	0013      	movs	r3, r2
 80009ba:	43da      	mvns	r2, r3
 80009bc:	693b      	ldr	r3, [r7, #16]
 80009be:	4013      	ands	r3, r2
 80009c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	685b      	ldr	r3, [r3, #4]
 80009c6:	091b      	lsrs	r3, r3, #4
 80009c8:	2201      	movs	r2, #1
 80009ca:	401a      	ands	r2, r3
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	409a      	lsls	r2, r3
 80009d0:	0013      	movs	r3, r2
 80009d2:	693a      	ldr	r2, [r7, #16]
 80009d4:	4313      	orrs	r3, r2
 80009d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	693a      	ldr	r2, [r7, #16]
 80009dc:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	685b      	ldr	r3, [r3, #4]
 80009e2:	2203      	movs	r2, #3
 80009e4:	4013      	ands	r3, r2
 80009e6:	2b03      	cmp	r3, #3
 80009e8:	d017      	beq.n	8000a1a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	68db      	ldr	r3, [r3, #12]
 80009ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	005b      	lsls	r3, r3, #1
 80009f4:	2203      	movs	r2, #3
 80009f6:	409a      	lsls	r2, r3
 80009f8:	0013      	movs	r3, r2
 80009fa:	43da      	mvns	r2, r3
 80009fc:	693b      	ldr	r3, [r7, #16]
 80009fe:	4013      	ands	r3, r2
 8000a00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	689a      	ldr	r2, [r3, #8]
 8000a06:	697b      	ldr	r3, [r7, #20]
 8000a08:	005b      	lsls	r3, r3, #1
 8000a0a:	409a      	lsls	r2, r3
 8000a0c:	0013      	movs	r3, r2
 8000a0e:	693a      	ldr	r2, [r7, #16]
 8000a10:	4313      	orrs	r3, r2
 8000a12:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	693a      	ldr	r2, [r7, #16]
 8000a18:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	685b      	ldr	r3, [r3, #4]
 8000a1e:	2203      	movs	r2, #3
 8000a20:	4013      	ands	r3, r2
 8000a22:	2b02      	cmp	r3, #2
 8000a24:	d123      	bne.n	8000a6e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	08da      	lsrs	r2, r3, #3
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	3208      	adds	r2, #8
 8000a2e:	0092      	lsls	r2, r2, #2
 8000a30:	58d3      	ldr	r3, [r2, r3]
 8000a32:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	2207      	movs	r2, #7
 8000a38:	4013      	ands	r3, r2
 8000a3a:	009b      	lsls	r3, r3, #2
 8000a3c:	220f      	movs	r2, #15
 8000a3e:	409a      	lsls	r2, r3
 8000a40:	0013      	movs	r3, r2
 8000a42:	43da      	mvns	r2, r3
 8000a44:	693b      	ldr	r3, [r7, #16]
 8000a46:	4013      	ands	r3, r2
 8000a48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	691a      	ldr	r2, [r3, #16]
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	2107      	movs	r1, #7
 8000a52:	400b      	ands	r3, r1
 8000a54:	009b      	lsls	r3, r3, #2
 8000a56:	409a      	lsls	r2, r3
 8000a58:	0013      	movs	r3, r2
 8000a5a:	693a      	ldr	r2, [r7, #16]
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	08da      	lsrs	r2, r3, #3
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	3208      	adds	r2, #8
 8000a68:	0092      	lsls	r2, r2, #2
 8000a6a:	6939      	ldr	r1, [r7, #16]
 8000a6c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	005b      	lsls	r3, r3, #1
 8000a78:	2203      	movs	r2, #3
 8000a7a:	409a      	lsls	r2, r3
 8000a7c:	0013      	movs	r3, r2
 8000a7e:	43da      	mvns	r2, r3
 8000a80:	693b      	ldr	r3, [r7, #16]
 8000a82:	4013      	ands	r3, r2
 8000a84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	2203      	movs	r2, #3
 8000a8c:	401a      	ands	r2, r3
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	005b      	lsls	r3, r3, #1
 8000a92:	409a      	lsls	r2, r3
 8000a94:	0013      	movs	r3, r2
 8000a96:	693a      	ldr	r2, [r7, #16]
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	693a      	ldr	r2, [r7, #16]
 8000aa0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	685a      	ldr	r2, [r3, #4]
 8000aa6:	23c0      	movs	r3, #192	; 0xc0
 8000aa8:	029b      	lsls	r3, r3, #10
 8000aaa:	4013      	ands	r3, r2
 8000aac:	d100      	bne.n	8000ab0 <HAL_GPIO_Init+0x174>
 8000aae:	e0a0      	b.n	8000bf2 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab0:	4b57      	ldr	r3, [pc, #348]	; (8000c10 <HAL_GPIO_Init+0x2d4>)
 8000ab2:	699a      	ldr	r2, [r3, #24]
 8000ab4:	4b56      	ldr	r3, [pc, #344]	; (8000c10 <HAL_GPIO_Init+0x2d4>)
 8000ab6:	2101      	movs	r1, #1
 8000ab8:	430a      	orrs	r2, r1
 8000aba:	619a      	str	r2, [r3, #24]
 8000abc:	4b54      	ldr	r3, [pc, #336]	; (8000c10 <HAL_GPIO_Init+0x2d4>)
 8000abe:	699b      	ldr	r3, [r3, #24]
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	4013      	ands	r3, r2
 8000ac4:	60bb      	str	r3, [r7, #8]
 8000ac6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ac8:	4a52      	ldr	r2, [pc, #328]	; (8000c14 <HAL_GPIO_Init+0x2d8>)
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	089b      	lsrs	r3, r3, #2
 8000ace:	3302      	adds	r3, #2
 8000ad0:	009b      	lsls	r3, r3, #2
 8000ad2:	589b      	ldr	r3, [r3, r2]
 8000ad4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	2203      	movs	r2, #3
 8000ada:	4013      	ands	r3, r2
 8000adc:	009b      	lsls	r3, r3, #2
 8000ade:	220f      	movs	r2, #15
 8000ae0:	409a      	lsls	r2, r3
 8000ae2:	0013      	movs	r3, r2
 8000ae4:	43da      	mvns	r2, r3
 8000ae6:	693b      	ldr	r3, [r7, #16]
 8000ae8:	4013      	ands	r3, r2
 8000aea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000aec:	687a      	ldr	r2, [r7, #4]
 8000aee:	2390      	movs	r3, #144	; 0x90
 8000af0:	05db      	lsls	r3, r3, #23
 8000af2:	429a      	cmp	r2, r3
 8000af4:	d019      	beq.n	8000b2a <HAL_GPIO_Init+0x1ee>
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4a47      	ldr	r2, [pc, #284]	; (8000c18 <HAL_GPIO_Init+0x2dc>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d013      	beq.n	8000b26 <HAL_GPIO_Init+0x1ea>
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	4a46      	ldr	r2, [pc, #280]	; (8000c1c <HAL_GPIO_Init+0x2e0>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d00d      	beq.n	8000b22 <HAL_GPIO_Init+0x1e6>
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	4a45      	ldr	r2, [pc, #276]	; (8000c20 <HAL_GPIO_Init+0x2e4>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d007      	beq.n	8000b1e <HAL_GPIO_Init+0x1e2>
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4a44      	ldr	r2, [pc, #272]	; (8000c24 <HAL_GPIO_Init+0x2e8>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d101      	bne.n	8000b1a <HAL_GPIO_Init+0x1de>
 8000b16:	2304      	movs	r3, #4
 8000b18:	e008      	b.n	8000b2c <HAL_GPIO_Init+0x1f0>
 8000b1a:	2305      	movs	r3, #5
 8000b1c:	e006      	b.n	8000b2c <HAL_GPIO_Init+0x1f0>
 8000b1e:	2303      	movs	r3, #3
 8000b20:	e004      	b.n	8000b2c <HAL_GPIO_Init+0x1f0>
 8000b22:	2302      	movs	r3, #2
 8000b24:	e002      	b.n	8000b2c <HAL_GPIO_Init+0x1f0>
 8000b26:	2301      	movs	r3, #1
 8000b28:	e000      	b.n	8000b2c <HAL_GPIO_Init+0x1f0>
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	697a      	ldr	r2, [r7, #20]
 8000b2e:	2103      	movs	r1, #3
 8000b30:	400a      	ands	r2, r1
 8000b32:	0092      	lsls	r2, r2, #2
 8000b34:	4093      	lsls	r3, r2
 8000b36:	693a      	ldr	r2, [r7, #16]
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b3c:	4935      	ldr	r1, [pc, #212]	; (8000c14 <HAL_GPIO_Init+0x2d8>)
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	089b      	lsrs	r3, r3, #2
 8000b42:	3302      	adds	r3, #2
 8000b44:	009b      	lsls	r3, r3, #2
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b4a:	4b37      	ldr	r3, [pc, #220]	; (8000c28 <HAL_GPIO_Init+0x2ec>)
 8000b4c:	689b      	ldr	r3, [r3, #8]
 8000b4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	43da      	mvns	r2, r3
 8000b54:	693b      	ldr	r3, [r7, #16]
 8000b56:	4013      	ands	r3, r2
 8000b58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	685a      	ldr	r2, [r3, #4]
 8000b5e:	2380      	movs	r3, #128	; 0x80
 8000b60:	035b      	lsls	r3, r3, #13
 8000b62:	4013      	ands	r3, r2
 8000b64:	d003      	beq.n	8000b6e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	4313      	orrs	r3, r2
 8000b6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000b6e:	4b2e      	ldr	r3, [pc, #184]	; (8000c28 <HAL_GPIO_Init+0x2ec>)
 8000b70:	693a      	ldr	r2, [r7, #16]
 8000b72:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000b74:	4b2c      	ldr	r3, [pc, #176]	; (8000c28 <HAL_GPIO_Init+0x2ec>)
 8000b76:	68db      	ldr	r3, [r3, #12]
 8000b78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	43da      	mvns	r2, r3
 8000b7e:	693b      	ldr	r3, [r7, #16]
 8000b80:	4013      	ands	r3, r2
 8000b82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	685a      	ldr	r2, [r3, #4]
 8000b88:	2380      	movs	r3, #128	; 0x80
 8000b8a:	039b      	lsls	r3, r3, #14
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	d003      	beq.n	8000b98 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000b90:	693a      	ldr	r2, [r7, #16]
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	4313      	orrs	r3, r2
 8000b96:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000b98:	4b23      	ldr	r3, [pc, #140]	; (8000c28 <HAL_GPIO_Init+0x2ec>)
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000b9e:	4b22      	ldr	r3, [pc, #136]	; (8000c28 <HAL_GPIO_Init+0x2ec>)
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	43da      	mvns	r2, r3
 8000ba8:	693b      	ldr	r3, [r7, #16]
 8000baa:	4013      	ands	r3, r2
 8000bac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	685a      	ldr	r2, [r3, #4]
 8000bb2:	2380      	movs	r3, #128	; 0x80
 8000bb4:	029b      	lsls	r3, r3, #10
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	d003      	beq.n	8000bc2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	4313      	orrs	r3, r2
 8000bc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000bc2:	4b19      	ldr	r3, [pc, #100]	; (8000c28 <HAL_GPIO_Init+0x2ec>)
 8000bc4:	693a      	ldr	r2, [r7, #16]
 8000bc6:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000bc8:	4b17      	ldr	r3, [pc, #92]	; (8000c28 <HAL_GPIO_Init+0x2ec>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	43da      	mvns	r2, r3
 8000bd2:	693b      	ldr	r3, [r7, #16]
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	685a      	ldr	r2, [r3, #4]
 8000bdc:	2380      	movs	r3, #128	; 0x80
 8000bde:	025b      	lsls	r3, r3, #9
 8000be0:	4013      	ands	r3, r2
 8000be2:	d003      	beq.n	8000bec <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000be4:	693a      	ldr	r2, [r7, #16]
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	4313      	orrs	r3, r2
 8000bea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000bec:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <HAL_GPIO_Init+0x2ec>)
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	40da      	lsrs	r2, r3
 8000c00:	1e13      	subs	r3, r2, #0
 8000c02:	d000      	beq.n	8000c06 <HAL_GPIO_Init+0x2ca>
 8000c04:	e6a2      	b.n	800094c <HAL_GPIO_Init+0x10>
  } 
}
 8000c06:	46c0      	nop			; (mov r8, r8)
 8000c08:	46c0      	nop			; (mov r8, r8)
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	b006      	add	sp, #24
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	40021000 	.word	0x40021000
 8000c14:	40010000 	.word	0x40010000
 8000c18:	48000400 	.word	0x48000400
 8000c1c:	48000800 	.word	0x48000800
 8000c20:	48000c00 	.word	0x48000c00
 8000c24:	48001000 	.word	0x48001000
 8000c28:	40010400 	.word	0x40010400

08000c2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	000a      	movs	r2, r1
 8000c36:	1cbb      	adds	r3, r7, #2
 8000c38:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	691b      	ldr	r3, [r3, #16]
 8000c3e:	1cba      	adds	r2, r7, #2
 8000c40:	8812      	ldrh	r2, [r2, #0]
 8000c42:	4013      	ands	r3, r2
 8000c44:	d004      	beq.n	8000c50 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8000c46:	230f      	movs	r3, #15
 8000c48:	18fb      	adds	r3, r7, r3
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	701a      	strb	r2, [r3, #0]
 8000c4e:	e003      	b.n	8000c58 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000c50:	230f      	movs	r3, #15
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	2200      	movs	r2, #0
 8000c56:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000c58:	230f      	movs	r3, #15
 8000c5a:	18fb      	adds	r3, r7, r3
 8000c5c:	781b      	ldrb	r3, [r3, #0]
  }
 8000c5e:	0018      	movs	r0, r3
 8000c60:	46bd      	mov	sp, r7
 8000c62:	b004      	add	sp, #16
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c66:	b580      	push	{r7, lr}
 8000c68:	b082      	sub	sp, #8
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	6078      	str	r0, [r7, #4]
 8000c6e:	0008      	movs	r0, r1
 8000c70:	0011      	movs	r1, r2
 8000c72:	1cbb      	adds	r3, r7, #2
 8000c74:	1c02      	adds	r2, r0, #0
 8000c76:	801a      	strh	r2, [r3, #0]
 8000c78:	1c7b      	adds	r3, r7, #1
 8000c7a:	1c0a      	adds	r2, r1, #0
 8000c7c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c7e:	1c7b      	adds	r3, r7, #1
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d004      	beq.n	8000c90 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c86:	1cbb      	adds	r3, r7, #2
 8000c88:	881a      	ldrh	r2, [r3, #0]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c8e:	e003      	b.n	8000c98 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c90:	1cbb      	adds	r3, r7, #2
 8000c92:	881a      	ldrh	r2, [r3, #0]
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c98:	46c0      	nop			; (mov r8, r8)
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	b002      	add	sp, #8
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b088      	sub	sp, #32
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d102      	bne.n	8000cb4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	f000 fb76 	bl	80013a0 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	2201      	movs	r2, #1
 8000cba:	4013      	ands	r3, r2
 8000cbc:	d100      	bne.n	8000cc0 <HAL_RCC_OscConfig+0x20>
 8000cbe:	e08e      	b.n	8000dde <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000cc0:	4bc5      	ldr	r3, [pc, #788]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	220c      	movs	r2, #12
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	2b04      	cmp	r3, #4
 8000cca:	d00e      	beq.n	8000cea <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ccc:	4bc2      	ldr	r3, [pc, #776]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	220c      	movs	r2, #12
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	2b08      	cmp	r3, #8
 8000cd6:	d117      	bne.n	8000d08 <HAL_RCC_OscConfig+0x68>
 8000cd8:	4bbf      	ldr	r3, [pc, #764]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000cda:	685a      	ldr	r2, [r3, #4]
 8000cdc:	23c0      	movs	r3, #192	; 0xc0
 8000cde:	025b      	lsls	r3, r3, #9
 8000ce0:	401a      	ands	r2, r3
 8000ce2:	2380      	movs	r3, #128	; 0x80
 8000ce4:	025b      	lsls	r3, r3, #9
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	d10e      	bne.n	8000d08 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cea:	4bbb      	ldr	r3, [pc, #748]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	2380      	movs	r3, #128	; 0x80
 8000cf0:	029b      	lsls	r3, r3, #10
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	d100      	bne.n	8000cf8 <HAL_RCC_OscConfig+0x58>
 8000cf6:	e071      	b.n	8000ddc <HAL_RCC_OscConfig+0x13c>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d000      	beq.n	8000d02 <HAL_RCC_OscConfig+0x62>
 8000d00:	e06c      	b.n	8000ddc <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
 8000d04:	f000 fb4c 	bl	80013a0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d107      	bne.n	8000d20 <HAL_RCC_OscConfig+0x80>
 8000d10:	4bb1      	ldr	r3, [pc, #708]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	4bb0      	ldr	r3, [pc, #704]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000d16:	2180      	movs	r1, #128	; 0x80
 8000d18:	0249      	lsls	r1, r1, #9
 8000d1a:	430a      	orrs	r2, r1
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	e02f      	b.n	8000d80 <HAL_RCC_OscConfig+0xe0>
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d10c      	bne.n	8000d42 <HAL_RCC_OscConfig+0xa2>
 8000d28:	4bab      	ldr	r3, [pc, #684]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	4baa      	ldr	r3, [pc, #680]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000d2e:	49ab      	ldr	r1, [pc, #684]	; (8000fdc <HAL_RCC_OscConfig+0x33c>)
 8000d30:	400a      	ands	r2, r1
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	4ba8      	ldr	r3, [pc, #672]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	4ba7      	ldr	r3, [pc, #668]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000d3a:	49a9      	ldr	r1, [pc, #676]	; (8000fe0 <HAL_RCC_OscConfig+0x340>)
 8000d3c:	400a      	ands	r2, r1
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	e01e      	b.n	8000d80 <HAL_RCC_OscConfig+0xe0>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	2b05      	cmp	r3, #5
 8000d48:	d10e      	bne.n	8000d68 <HAL_RCC_OscConfig+0xc8>
 8000d4a:	4ba3      	ldr	r3, [pc, #652]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	4ba2      	ldr	r3, [pc, #648]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000d50:	2180      	movs	r1, #128	; 0x80
 8000d52:	02c9      	lsls	r1, r1, #11
 8000d54:	430a      	orrs	r2, r1
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	4b9f      	ldr	r3, [pc, #636]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	4b9e      	ldr	r3, [pc, #632]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000d5e:	2180      	movs	r1, #128	; 0x80
 8000d60:	0249      	lsls	r1, r1, #9
 8000d62:	430a      	orrs	r2, r1
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	e00b      	b.n	8000d80 <HAL_RCC_OscConfig+0xe0>
 8000d68:	4b9b      	ldr	r3, [pc, #620]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	4b9a      	ldr	r3, [pc, #616]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000d6e:	499b      	ldr	r1, [pc, #620]	; (8000fdc <HAL_RCC_OscConfig+0x33c>)
 8000d70:	400a      	ands	r2, r1
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	4b98      	ldr	r3, [pc, #608]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	4b97      	ldr	r3, [pc, #604]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000d7a:	4999      	ldr	r1, [pc, #612]	; (8000fe0 <HAL_RCC_OscConfig+0x340>)
 8000d7c:	400a      	ands	r2, r1
 8000d7e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d014      	beq.n	8000db2 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d88:	f7ff fd1a 	bl	80007c0 <HAL_GetTick>
 8000d8c:	0003      	movs	r3, r0
 8000d8e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d90:	e008      	b.n	8000da4 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d92:	f7ff fd15 	bl	80007c0 <HAL_GetTick>
 8000d96:	0002      	movs	r2, r0
 8000d98:	69bb      	ldr	r3, [r7, #24]
 8000d9a:	1ad3      	subs	r3, r2, r3
 8000d9c:	2b64      	cmp	r3, #100	; 0x64
 8000d9e:	d901      	bls.n	8000da4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8000da0:	2303      	movs	r3, #3
 8000da2:	e2fd      	b.n	80013a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000da4:	4b8c      	ldr	r3, [pc, #560]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	2380      	movs	r3, #128	; 0x80
 8000daa:	029b      	lsls	r3, r3, #10
 8000dac:	4013      	ands	r3, r2
 8000dae:	d0f0      	beq.n	8000d92 <HAL_RCC_OscConfig+0xf2>
 8000db0:	e015      	b.n	8000dde <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000db2:	f7ff fd05 	bl	80007c0 <HAL_GetTick>
 8000db6:	0003      	movs	r3, r0
 8000db8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dba:	e008      	b.n	8000dce <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000dbc:	f7ff fd00 	bl	80007c0 <HAL_GetTick>
 8000dc0:	0002      	movs	r2, r0
 8000dc2:	69bb      	ldr	r3, [r7, #24]
 8000dc4:	1ad3      	subs	r3, r2, r3
 8000dc6:	2b64      	cmp	r3, #100	; 0x64
 8000dc8:	d901      	bls.n	8000dce <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8000dca:	2303      	movs	r3, #3
 8000dcc:	e2e8      	b.n	80013a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dce:	4b82      	ldr	r3, [pc, #520]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	2380      	movs	r3, #128	; 0x80
 8000dd4:	029b      	lsls	r3, r3, #10
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	d1f0      	bne.n	8000dbc <HAL_RCC_OscConfig+0x11c>
 8000dda:	e000      	b.n	8000dde <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ddc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	2202      	movs	r2, #2
 8000de4:	4013      	ands	r3, r2
 8000de6:	d100      	bne.n	8000dea <HAL_RCC_OscConfig+0x14a>
 8000de8:	e06c      	b.n	8000ec4 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000dea:	4b7b      	ldr	r3, [pc, #492]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	220c      	movs	r2, #12
 8000df0:	4013      	ands	r3, r2
 8000df2:	d00e      	beq.n	8000e12 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000df4:	4b78      	ldr	r3, [pc, #480]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	220c      	movs	r2, #12
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	2b08      	cmp	r3, #8
 8000dfe:	d11f      	bne.n	8000e40 <HAL_RCC_OscConfig+0x1a0>
 8000e00:	4b75      	ldr	r3, [pc, #468]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000e02:	685a      	ldr	r2, [r3, #4]
 8000e04:	23c0      	movs	r3, #192	; 0xc0
 8000e06:	025b      	lsls	r3, r3, #9
 8000e08:	401a      	ands	r2, r3
 8000e0a:	2380      	movs	r3, #128	; 0x80
 8000e0c:	021b      	lsls	r3, r3, #8
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	d116      	bne.n	8000e40 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e12:	4b71      	ldr	r3, [pc, #452]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	2202      	movs	r2, #2
 8000e18:	4013      	ands	r3, r2
 8000e1a:	d005      	beq.n	8000e28 <HAL_RCC_OscConfig+0x188>
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d001      	beq.n	8000e28 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8000e24:	2301      	movs	r3, #1
 8000e26:	e2bb      	b.n	80013a0 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e28:	4b6b      	ldr	r3, [pc, #428]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	22f8      	movs	r2, #248	; 0xf8
 8000e2e:	4393      	bics	r3, r2
 8000e30:	0019      	movs	r1, r3
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	691b      	ldr	r3, [r3, #16]
 8000e36:	00da      	lsls	r2, r3, #3
 8000e38:	4b67      	ldr	r3, [pc, #412]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000e3a:	430a      	orrs	r2, r1
 8000e3c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e3e:	e041      	b.n	8000ec4 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d024      	beq.n	8000e92 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e48:	4b63      	ldr	r3, [pc, #396]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	4b62      	ldr	r3, [pc, #392]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000e4e:	2101      	movs	r1, #1
 8000e50:	430a      	orrs	r2, r1
 8000e52:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e54:	f7ff fcb4 	bl	80007c0 <HAL_GetTick>
 8000e58:	0003      	movs	r3, r0
 8000e5a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e5c:	e008      	b.n	8000e70 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e5e:	f7ff fcaf 	bl	80007c0 <HAL_GetTick>
 8000e62:	0002      	movs	r2, r0
 8000e64:	69bb      	ldr	r3, [r7, #24]
 8000e66:	1ad3      	subs	r3, r2, r3
 8000e68:	2b02      	cmp	r3, #2
 8000e6a:	d901      	bls.n	8000e70 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	e297      	b.n	80013a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e70:	4b59      	ldr	r3, [pc, #356]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2202      	movs	r2, #2
 8000e76:	4013      	ands	r3, r2
 8000e78:	d0f1      	beq.n	8000e5e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e7a:	4b57      	ldr	r3, [pc, #348]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	22f8      	movs	r2, #248	; 0xf8
 8000e80:	4393      	bics	r3, r2
 8000e82:	0019      	movs	r1, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	691b      	ldr	r3, [r3, #16]
 8000e88:	00da      	lsls	r2, r3, #3
 8000e8a:	4b53      	ldr	r3, [pc, #332]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000e8c:	430a      	orrs	r2, r1
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	e018      	b.n	8000ec4 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e92:	4b51      	ldr	r3, [pc, #324]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	4b50      	ldr	r3, [pc, #320]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000e98:	2101      	movs	r1, #1
 8000e9a:	438a      	bics	r2, r1
 8000e9c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e9e:	f7ff fc8f 	bl	80007c0 <HAL_GetTick>
 8000ea2:	0003      	movs	r3, r0
 8000ea4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ea6:	e008      	b.n	8000eba <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ea8:	f7ff fc8a 	bl	80007c0 <HAL_GetTick>
 8000eac:	0002      	movs	r2, r0
 8000eae:	69bb      	ldr	r3, [r7, #24]
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	2b02      	cmp	r3, #2
 8000eb4:	d901      	bls.n	8000eba <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	e272      	b.n	80013a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eba:	4b47      	ldr	r3, [pc, #284]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	2202      	movs	r2, #2
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	d1f1      	bne.n	8000ea8 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	2208      	movs	r2, #8
 8000eca:	4013      	ands	r3, r2
 8000ecc:	d036      	beq.n	8000f3c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	69db      	ldr	r3, [r3, #28]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d019      	beq.n	8000f0a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ed6:	4b40      	ldr	r3, [pc, #256]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000ed8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000eda:	4b3f      	ldr	r3, [pc, #252]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000edc:	2101      	movs	r1, #1
 8000ede:	430a      	orrs	r2, r1
 8000ee0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ee2:	f7ff fc6d 	bl	80007c0 <HAL_GetTick>
 8000ee6:	0003      	movs	r3, r0
 8000ee8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000eea:	e008      	b.n	8000efe <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000eec:	f7ff fc68 	bl	80007c0 <HAL_GetTick>
 8000ef0:	0002      	movs	r2, r0
 8000ef2:	69bb      	ldr	r3, [r7, #24]
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	2b02      	cmp	r3, #2
 8000ef8:	d901      	bls.n	8000efe <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8000efa:	2303      	movs	r3, #3
 8000efc:	e250      	b.n	80013a0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000efe:	4b36      	ldr	r3, [pc, #216]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f02:	2202      	movs	r2, #2
 8000f04:	4013      	ands	r3, r2
 8000f06:	d0f1      	beq.n	8000eec <HAL_RCC_OscConfig+0x24c>
 8000f08:	e018      	b.n	8000f3c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f0a:	4b33      	ldr	r3, [pc, #204]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000f0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f0e:	4b32      	ldr	r3, [pc, #200]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000f10:	2101      	movs	r1, #1
 8000f12:	438a      	bics	r2, r1
 8000f14:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f16:	f7ff fc53 	bl	80007c0 <HAL_GetTick>
 8000f1a:	0003      	movs	r3, r0
 8000f1c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f1e:	e008      	b.n	8000f32 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f20:	f7ff fc4e 	bl	80007c0 <HAL_GetTick>
 8000f24:	0002      	movs	r2, r0
 8000f26:	69bb      	ldr	r3, [r7, #24]
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	2b02      	cmp	r3, #2
 8000f2c:	d901      	bls.n	8000f32 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	e236      	b.n	80013a0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f32:	4b29      	ldr	r3, [pc, #164]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f36:	2202      	movs	r2, #2
 8000f38:	4013      	ands	r3, r2
 8000f3a:	d1f1      	bne.n	8000f20 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2204      	movs	r2, #4
 8000f42:	4013      	ands	r3, r2
 8000f44:	d100      	bne.n	8000f48 <HAL_RCC_OscConfig+0x2a8>
 8000f46:	e0b5      	b.n	80010b4 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f48:	201f      	movs	r0, #31
 8000f4a:	183b      	adds	r3, r7, r0
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f50:	4b21      	ldr	r3, [pc, #132]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000f52:	69da      	ldr	r2, [r3, #28]
 8000f54:	2380      	movs	r3, #128	; 0x80
 8000f56:	055b      	lsls	r3, r3, #21
 8000f58:	4013      	ands	r3, r2
 8000f5a:	d110      	bne.n	8000f7e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f5c:	4b1e      	ldr	r3, [pc, #120]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000f5e:	69da      	ldr	r2, [r3, #28]
 8000f60:	4b1d      	ldr	r3, [pc, #116]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000f62:	2180      	movs	r1, #128	; 0x80
 8000f64:	0549      	lsls	r1, r1, #21
 8000f66:	430a      	orrs	r2, r1
 8000f68:	61da      	str	r2, [r3, #28]
 8000f6a:	4b1b      	ldr	r3, [pc, #108]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000f6c:	69da      	ldr	r2, [r3, #28]
 8000f6e:	2380      	movs	r3, #128	; 0x80
 8000f70:	055b      	lsls	r3, r3, #21
 8000f72:	4013      	ands	r3, r2
 8000f74:	60fb      	str	r3, [r7, #12]
 8000f76:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000f78:	183b      	adds	r3, r7, r0
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f7e:	4b19      	ldr	r3, [pc, #100]	; (8000fe4 <HAL_RCC_OscConfig+0x344>)
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	2380      	movs	r3, #128	; 0x80
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	4013      	ands	r3, r2
 8000f88:	d11a      	bne.n	8000fc0 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f8a:	4b16      	ldr	r3, [pc, #88]	; (8000fe4 <HAL_RCC_OscConfig+0x344>)
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	4b15      	ldr	r3, [pc, #84]	; (8000fe4 <HAL_RCC_OscConfig+0x344>)
 8000f90:	2180      	movs	r1, #128	; 0x80
 8000f92:	0049      	lsls	r1, r1, #1
 8000f94:	430a      	orrs	r2, r1
 8000f96:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f98:	f7ff fc12 	bl	80007c0 <HAL_GetTick>
 8000f9c:	0003      	movs	r3, r0
 8000f9e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fa0:	e008      	b.n	8000fb4 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fa2:	f7ff fc0d 	bl	80007c0 <HAL_GetTick>
 8000fa6:	0002      	movs	r2, r0
 8000fa8:	69bb      	ldr	r3, [r7, #24]
 8000faa:	1ad3      	subs	r3, r2, r3
 8000fac:	2b64      	cmp	r3, #100	; 0x64
 8000fae:	d901      	bls.n	8000fb4 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	e1f5      	b.n	80013a0 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fb4:	4b0b      	ldr	r3, [pc, #44]	; (8000fe4 <HAL_RCC_OscConfig+0x344>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	2380      	movs	r3, #128	; 0x80
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	d0f0      	beq.n	8000fa2 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	689b      	ldr	r3, [r3, #8]
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d10f      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x348>
 8000fc8:	4b03      	ldr	r3, [pc, #12]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000fca:	6a1a      	ldr	r2, [r3, #32]
 8000fcc:	4b02      	ldr	r3, [pc, #8]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000fce:	2101      	movs	r1, #1
 8000fd0:	430a      	orrs	r2, r1
 8000fd2:	621a      	str	r2, [r3, #32]
 8000fd4:	e036      	b.n	8001044 <HAL_RCC_OscConfig+0x3a4>
 8000fd6:	46c0      	nop			; (mov r8, r8)
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	fffeffff 	.word	0xfffeffff
 8000fe0:	fffbffff 	.word	0xfffbffff
 8000fe4:	40007000 	.word	0x40007000
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d10c      	bne.n	800100a <HAL_RCC_OscConfig+0x36a>
 8000ff0:	4bca      	ldr	r3, [pc, #808]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 8000ff2:	6a1a      	ldr	r2, [r3, #32]
 8000ff4:	4bc9      	ldr	r3, [pc, #804]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 8000ff6:	2101      	movs	r1, #1
 8000ff8:	438a      	bics	r2, r1
 8000ffa:	621a      	str	r2, [r3, #32]
 8000ffc:	4bc7      	ldr	r3, [pc, #796]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 8000ffe:	6a1a      	ldr	r2, [r3, #32]
 8001000:	4bc6      	ldr	r3, [pc, #792]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 8001002:	2104      	movs	r1, #4
 8001004:	438a      	bics	r2, r1
 8001006:	621a      	str	r2, [r3, #32]
 8001008:	e01c      	b.n	8001044 <HAL_RCC_OscConfig+0x3a4>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	2b05      	cmp	r3, #5
 8001010:	d10c      	bne.n	800102c <HAL_RCC_OscConfig+0x38c>
 8001012:	4bc2      	ldr	r3, [pc, #776]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 8001014:	6a1a      	ldr	r2, [r3, #32]
 8001016:	4bc1      	ldr	r3, [pc, #772]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 8001018:	2104      	movs	r1, #4
 800101a:	430a      	orrs	r2, r1
 800101c:	621a      	str	r2, [r3, #32]
 800101e:	4bbf      	ldr	r3, [pc, #764]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 8001020:	6a1a      	ldr	r2, [r3, #32]
 8001022:	4bbe      	ldr	r3, [pc, #760]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 8001024:	2101      	movs	r1, #1
 8001026:	430a      	orrs	r2, r1
 8001028:	621a      	str	r2, [r3, #32]
 800102a:	e00b      	b.n	8001044 <HAL_RCC_OscConfig+0x3a4>
 800102c:	4bbb      	ldr	r3, [pc, #748]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 800102e:	6a1a      	ldr	r2, [r3, #32]
 8001030:	4bba      	ldr	r3, [pc, #744]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 8001032:	2101      	movs	r1, #1
 8001034:	438a      	bics	r2, r1
 8001036:	621a      	str	r2, [r3, #32]
 8001038:	4bb8      	ldr	r3, [pc, #736]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 800103a:	6a1a      	ldr	r2, [r3, #32]
 800103c:	4bb7      	ldr	r3, [pc, #732]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 800103e:	2104      	movs	r1, #4
 8001040:	438a      	bics	r2, r1
 8001042:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d014      	beq.n	8001076 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800104c:	f7ff fbb8 	bl	80007c0 <HAL_GetTick>
 8001050:	0003      	movs	r3, r0
 8001052:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001054:	e009      	b.n	800106a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001056:	f7ff fbb3 	bl	80007c0 <HAL_GetTick>
 800105a:	0002      	movs	r2, r0
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	1ad3      	subs	r3, r2, r3
 8001060:	4aaf      	ldr	r2, [pc, #700]	; (8001320 <HAL_RCC_OscConfig+0x680>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d901      	bls.n	800106a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001066:	2303      	movs	r3, #3
 8001068:	e19a      	b.n	80013a0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800106a:	4bac      	ldr	r3, [pc, #688]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 800106c:	6a1b      	ldr	r3, [r3, #32]
 800106e:	2202      	movs	r2, #2
 8001070:	4013      	ands	r3, r2
 8001072:	d0f0      	beq.n	8001056 <HAL_RCC_OscConfig+0x3b6>
 8001074:	e013      	b.n	800109e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001076:	f7ff fba3 	bl	80007c0 <HAL_GetTick>
 800107a:	0003      	movs	r3, r0
 800107c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800107e:	e009      	b.n	8001094 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001080:	f7ff fb9e 	bl	80007c0 <HAL_GetTick>
 8001084:	0002      	movs	r2, r0
 8001086:	69bb      	ldr	r3, [r7, #24]
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	4aa5      	ldr	r2, [pc, #660]	; (8001320 <HAL_RCC_OscConfig+0x680>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d901      	bls.n	8001094 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001090:	2303      	movs	r3, #3
 8001092:	e185      	b.n	80013a0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001094:	4ba1      	ldr	r3, [pc, #644]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 8001096:	6a1b      	ldr	r3, [r3, #32]
 8001098:	2202      	movs	r2, #2
 800109a:	4013      	ands	r3, r2
 800109c:	d1f0      	bne.n	8001080 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800109e:	231f      	movs	r3, #31
 80010a0:	18fb      	adds	r3, r7, r3
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d105      	bne.n	80010b4 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010a8:	4b9c      	ldr	r3, [pc, #624]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 80010aa:	69da      	ldr	r2, [r3, #28]
 80010ac:	4b9b      	ldr	r3, [pc, #620]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 80010ae:	499d      	ldr	r1, [pc, #628]	; (8001324 <HAL_RCC_OscConfig+0x684>)
 80010b0:	400a      	ands	r2, r1
 80010b2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2210      	movs	r2, #16
 80010ba:	4013      	ands	r3, r2
 80010bc:	d063      	beq.n	8001186 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	695b      	ldr	r3, [r3, #20]
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d12a      	bne.n	800111c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80010c6:	4b95      	ldr	r3, [pc, #596]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 80010c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010ca:	4b94      	ldr	r3, [pc, #592]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 80010cc:	2104      	movs	r1, #4
 80010ce:	430a      	orrs	r2, r1
 80010d0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80010d2:	4b92      	ldr	r3, [pc, #584]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 80010d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010d6:	4b91      	ldr	r3, [pc, #580]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 80010d8:	2101      	movs	r1, #1
 80010da:	430a      	orrs	r2, r1
 80010dc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010de:	f7ff fb6f 	bl	80007c0 <HAL_GetTick>
 80010e2:	0003      	movs	r3, r0
 80010e4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80010e6:	e008      	b.n	80010fa <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80010e8:	f7ff fb6a 	bl	80007c0 <HAL_GetTick>
 80010ec:	0002      	movs	r2, r0
 80010ee:	69bb      	ldr	r3, [r7, #24]
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	d901      	bls.n	80010fa <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80010f6:	2303      	movs	r3, #3
 80010f8:	e152      	b.n	80013a0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80010fa:	4b88      	ldr	r3, [pc, #544]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 80010fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010fe:	2202      	movs	r2, #2
 8001100:	4013      	ands	r3, r2
 8001102:	d0f1      	beq.n	80010e8 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001104:	4b85      	ldr	r3, [pc, #532]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 8001106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001108:	22f8      	movs	r2, #248	; 0xf8
 800110a:	4393      	bics	r3, r2
 800110c:	0019      	movs	r1, r3
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	699b      	ldr	r3, [r3, #24]
 8001112:	00da      	lsls	r2, r3, #3
 8001114:	4b81      	ldr	r3, [pc, #516]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 8001116:	430a      	orrs	r2, r1
 8001118:	635a      	str	r2, [r3, #52]	; 0x34
 800111a:	e034      	b.n	8001186 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	695b      	ldr	r3, [r3, #20]
 8001120:	3305      	adds	r3, #5
 8001122:	d111      	bne.n	8001148 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001124:	4b7d      	ldr	r3, [pc, #500]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 8001126:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001128:	4b7c      	ldr	r3, [pc, #496]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 800112a:	2104      	movs	r1, #4
 800112c:	438a      	bics	r2, r1
 800112e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001130:	4b7a      	ldr	r3, [pc, #488]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 8001132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001134:	22f8      	movs	r2, #248	; 0xf8
 8001136:	4393      	bics	r3, r2
 8001138:	0019      	movs	r1, r3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	699b      	ldr	r3, [r3, #24]
 800113e:	00da      	lsls	r2, r3, #3
 8001140:	4b76      	ldr	r3, [pc, #472]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 8001142:	430a      	orrs	r2, r1
 8001144:	635a      	str	r2, [r3, #52]	; 0x34
 8001146:	e01e      	b.n	8001186 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001148:	4b74      	ldr	r3, [pc, #464]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 800114a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800114c:	4b73      	ldr	r3, [pc, #460]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 800114e:	2104      	movs	r1, #4
 8001150:	430a      	orrs	r2, r1
 8001152:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001154:	4b71      	ldr	r3, [pc, #452]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 8001156:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001158:	4b70      	ldr	r3, [pc, #448]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 800115a:	2101      	movs	r1, #1
 800115c:	438a      	bics	r2, r1
 800115e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001160:	f7ff fb2e 	bl	80007c0 <HAL_GetTick>
 8001164:	0003      	movs	r3, r0
 8001166:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001168:	e008      	b.n	800117c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800116a:	f7ff fb29 	bl	80007c0 <HAL_GetTick>
 800116e:	0002      	movs	r2, r0
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	1ad3      	subs	r3, r2, r3
 8001174:	2b02      	cmp	r3, #2
 8001176:	d901      	bls.n	800117c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001178:	2303      	movs	r3, #3
 800117a:	e111      	b.n	80013a0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800117c:	4b67      	ldr	r3, [pc, #412]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 800117e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001180:	2202      	movs	r2, #2
 8001182:	4013      	ands	r3, r2
 8001184:	d1f1      	bne.n	800116a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2220      	movs	r2, #32
 800118c:	4013      	ands	r3, r2
 800118e:	d05c      	beq.n	800124a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001190:	4b62      	ldr	r3, [pc, #392]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	220c      	movs	r2, #12
 8001196:	4013      	ands	r3, r2
 8001198:	2b0c      	cmp	r3, #12
 800119a:	d00e      	beq.n	80011ba <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800119c:	4b5f      	ldr	r3, [pc, #380]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	220c      	movs	r2, #12
 80011a2:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80011a4:	2b08      	cmp	r3, #8
 80011a6:	d114      	bne.n	80011d2 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80011a8:	4b5c      	ldr	r3, [pc, #368]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 80011aa:	685a      	ldr	r2, [r3, #4]
 80011ac:	23c0      	movs	r3, #192	; 0xc0
 80011ae:	025b      	lsls	r3, r3, #9
 80011b0:	401a      	ands	r2, r3
 80011b2:	23c0      	movs	r3, #192	; 0xc0
 80011b4:	025b      	lsls	r3, r3, #9
 80011b6:	429a      	cmp	r2, r3
 80011b8:	d10b      	bne.n	80011d2 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80011ba:	4b58      	ldr	r3, [pc, #352]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 80011bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011be:	2380      	movs	r3, #128	; 0x80
 80011c0:	029b      	lsls	r3, r3, #10
 80011c2:	4013      	ands	r3, r2
 80011c4:	d040      	beq.n	8001248 <HAL_RCC_OscConfig+0x5a8>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6a1b      	ldr	r3, [r3, #32]
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d03c      	beq.n	8001248 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e0e6      	b.n	80013a0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6a1b      	ldr	r3, [r3, #32]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d01b      	beq.n	8001212 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80011da:	4b50      	ldr	r3, [pc, #320]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 80011dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011de:	4b4f      	ldr	r3, [pc, #316]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 80011e0:	2180      	movs	r1, #128	; 0x80
 80011e2:	0249      	lsls	r1, r1, #9
 80011e4:	430a      	orrs	r2, r1
 80011e6:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e8:	f7ff faea 	bl	80007c0 <HAL_GetTick>
 80011ec:	0003      	movs	r3, r0
 80011ee:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80011f0:	e008      	b.n	8001204 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80011f2:	f7ff fae5 	bl	80007c0 <HAL_GetTick>
 80011f6:	0002      	movs	r2, r0
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d901      	bls.n	8001204 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001200:	2303      	movs	r3, #3
 8001202:	e0cd      	b.n	80013a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001204:	4b45      	ldr	r3, [pc, #276]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 8001206:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001208:	2380      	movs	r3, #128	; 0x80
 800120a:	029b      	lsls	r3, r3, #10
 800120c:	4013      	ands	r3, r2
 800120e:	d0f0      	beq.n	80011f2 <HAL_RCC_OscConfig+0x552>
 8001210:	e01b      	b.n	800124a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001212:	4b42      	ldr	r3, [pc, #264]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 8001214:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001216:	4b41      	ldr	r3, [pc, #260]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 8001218:	4943      	ldr	r1, [pc, #268]	; (8001328 <HAL_RCC_OscConfig+0x688>)
 800121a:	400a      	ands	r2, r1
 800121c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800121e:	f7ff facf 	bl	80007c0 <HAL_GetTick>
 8001222:	0003      	movs	r3, r0
 8001224:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001226:	e008      	b.n	800123a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001228:	f7ff faca 	bl	80007c0 <HAL_GetTick>
 800122c:	0002      	movs	r2, r0
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	2b02      	cmp	r3, #2
 8001234:	d901      	bls.n	800123a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001236:	2303      	movs	r3, #3
 8001238:	e0b2      	b.n	80013a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800123a:	4b38      	ldr	r3, [pc, #224]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 800123c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800123e:	2380      	movs	r3, #128	; 0x80
 8001240:	029b      	lsls	r3, r3, #10
 8001242:	4013      	ands	r3, r2
 8001244:	d1f0      	bne.n	8001228 <HAL_RCC_OscConfig+0x588>
 8001246:	e000      	b.n	800124a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001248:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800124e:	2b00      	cmp	r3, #0
 8001250:	d100      	bne.n	8001254 <HAL_RCC_OscConfig+0x5b4>
 8001252:	e0a4      	b.n	800139e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001254:	4b31      	ldr	r3, [pc, #196]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	220c      	movs	r2, #12
 800125a:	4013      	ands	r3, r2
 800125c:	2b08      	cmp	r3, #8
 800125e:	d100      	bne.n	8001262 <HAL_RCC_OscConfig+0x5c2>
 8001260:	e078      	b.n	8001354 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001266:	2b02      	cmp	r3, #2
 8001268:	d14c      	bne.n	8001304 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800126a:	4b2c      	ldr	r3, [pc, #176]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	4b2b      	ldr	r3, [pc, #172]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 8001270:	492e      	ldr	r1, [pc, #184]	; (800132c <HAL_RCC_OscConfig+0x68c>)
 8001272:	400a      	ands	r2, r1
 8001274:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001276:	f7ff faa3 	bl	80007c0 <HAL_GetTick>
 800127a:	0003      	movs	r3, r0
 800127c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800127e:	e008      	b.n	8001292 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001280:	f7ff fa9e 	bl	80007c0 <HAL_GetTick>
 8001284:	0002      	movs	r2, r0
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	2b02      	cmp	r3, #2
 800128c:	d901      	bls.n	8001292 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800128e:	2303      	movs	r3, #3
 8001290:	e086      	b.n	80013a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001292:	4b22      	ldr	r3, [pc, #136]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	2380      	movs	r3, #128	; 0x80
 8001298:	049b      	lsls	r3, r3, #18
 800129a:	4013      	ands	r3, r2
 800129c:	d1f0      	bne.n	8001280 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800129e:	4b1f      	ldr	r3, [pc, #124]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 80012a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012a2:	220f      	movs	r2, #15
 80012a4:	4393      	bics	r3, r2
 80012a6:	0019      	movs	r1, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012ac:	4b1b      	ldr	r3, [pc, #108]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 80012ae:	430a      	orrs	r2, r1
 80012b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80012b2:	4b1a      	ldr	r3, [pc, #104]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	4a1e      	ldr	r2, [pc, #120]	; (8001330 <HAL_RCC_OscConfig+0x690>)
 80012b8:	4013      	ands	r3, r2
 80012ba:	0019      	movs	r1, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012c4:	431a      	orrs	r2, r3
 80012c6:	4b15      	ldr	r3, [pc, #84]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 80012c8:	430a      	orrs	r2, r1
 80012ca:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012cc:	4b13      	ldr	r3, [pc, #76]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	4b12      	ldr	r3, [pc, #72]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 80012d2:	2180      	movs	r1, #128	; 0x80
 80012d4:	0449      	lsls	r1, r1, #17
 80012d6:	430a      	orrs	r2, r1
 80012d8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012da:	f7ff fa71 	bl	80007c0 <HAL_GetTick>
 80012de:	0003      	movs	r3, r0
 80012e0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012e2:	e008      	b.n	80012f6 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012e4:	f7ff fa6c 	bl	80007c0 <HAL_GetTick>
 80012e8:	0002      	movs	r2, r0
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	2b02      	cmp	r3, #2
 80012f0:	d901      	bls.n	80012f6 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80012f2:	2303      	movs	r3, #3
 80012f4:	e054      	b.n	80013a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012f6:	4b09      	ldr	r3, [pc, #36]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	2380      	movs	r3, #128	; 0x80
 80012fc:	049b      	lsls	r3, r3, #18
 80012fe:	4013      	ands	r3, r2
 8001300:	d0f0      	beq.n	80012e4 <HAL_RCC_OscConfig+0x644>
 8001302:	e04c      	b.n	800139e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001304:	4b05      	ldr	r3, [pc, #20]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	4b04      	ldr	r3, [pc, #16]	; (800131c <HAL_RCC_OscConfig+0x67c>)
 800130a:	4908      	ldr	r1, [pc, #32]	; (800132c <HAL_RCC_OscConfig+0x68c>)
 800130c:	400a      	ands	r2, r1
 800130e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001310:	f7ff fa56 	bl	80007c0 <HAL_GetTick>
 8001314:	0003      	movs	r3, r0
 8001316:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001318:	e015      	b.n	8001346 <HAL_RCC_OscConfig+0x6a6>
 800131a:	46c0      	nop			; (mov r8, r8)
 800131c:	40021000 	.word	0x40021000
 8001320:	00001388 	.word	0x00001388
 8001324:	efffffff 	.word	0xefffffff
 8001328:	fffeffff 	.word	0xfffeffff
 800132c:	feffffff 	.word	0xfeffffff
 8001330:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001334:	f7ff fa44 	bl	80007c0 <HAL_GetTick>
 8001338:	0002      	movs	r2, r0
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	2b02      	cmp	r3, #2
 8001340:	d901      	bls.n	8001346 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e02c      	b.n	80013a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001346:	4b18      	ldr	r3, [pc, #96]	; (80013a8 <HAL_RCC_OscConfig+0x708>)
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	2380      	movs	r3, #128	; 0x80
 800134c:	049b      	lsls	r3, r3, #18
 800134e:	4013      	ands	r3, r2
 8001350:	d1f0      	bne.n	8001334 <HAL_RCC_OscConfig+0x694>
 8001352:	e024      	b.n	800139e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001358:	2b01      	cmp	r3, #1
 800135a:	d101      	bne.n	8001360 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 800135c:	2301      	movs	r3, #1
 800135e:	e01f      	b.n	80013a0 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001360:	4b11      	ldr	r3, [pc, #68]	; (80013a8 <HAL_RCC_OscConfig+0x708>)
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001366:	4b10      	ldr	r3, [pc, #64]	; (80013a8 <HAL_RCC_OscConfig+0x708>)
 8001368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800136a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800136c:	697a      	ldr	r2, [r7, #20]
 800136e:	23c0      	movs	r3, #192	; 0xc0
 8001370:	025b      	lsls	r3, r3, #9
 8001372:	401a      	ands	r2, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001378:	429a      	cmp	r2, r3
 800137a:	d10e      	bne.n	800139a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	220f      	movs	r2, #15
 8001380:	401a      	ands	r2, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001386:	429a      	cmp	r2, r3
 8001388:	d107      	bne.n	800139a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800138a:	697a      	ldr	r2, [r7, #20]
 800138c:	23f0      	movs	r3, #240	; 0xf0
 800138e:	039b      	lsls	r3, r3, #14
 8001390:	401a      	ands	r2, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001396:	429a      	cmp	r2, r3
 8001398:	d001      	beq.n	800139e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e000      	b.n	80013a0 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800139e:	2300      	movs	r3, #0
}
 80013a0:	0018      	movs	r0, r3
 80013a2:	46bd      	mov	sp, r7
 80013a4:	b008      	add	sp, #32
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40021000 	.word	0x40021000

080013ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d101      	bne.n	80013c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	e0bf      	b.n	8001540 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013c0:	4b61      	ldr	r3, [pc, #388]	; (8001548 <HAL_RCC_ClockConfig+0x19c>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2201      	movs	r2, #1
 80013c6:	4013      	ands	r3, r2
 80013c8:	683a      	ldr	r2, [r7, #0]
 80013ca:	429a      	cmp	r2, r3
 80013cc:	d911      	bls.n	80013f2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ce:	4b5e      	ldr	r3, [pc, #376]	; (8001548 <HAL_RCC_ClockConfig+0x19c>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2201      	movs	r2, #1
 80013d4:	4393      	bics	r3, r2
 80013d6:	0019      	movs	r1, r3
 80013d8:	4b5b      	ldr	r3, [pc, #364]	; (8001548 <HAL_RCC_ClockConfig+0x19c>)
 80013da:	683a      	ldr	r2, [r7, #0]
 80013dc:	430a      	orrs	r2, r1
 80013de:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013e0:	4b59      	ldr	r3, [pc, #356]	; (8001548 <HAL_RCC_ClockConfig+0x19c>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2201      	movs	r2, #1
 80013e6:	4013      	ands	r3, r2
 80013e8:	683a      	ldr	r2, [r7, #0]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d001      	beq.n	80013f2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e0a6      	b.n	8001540 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2202      	movs	r2, #2
 80013f8:	4013      	ands	r3, r2
 80013fa:	d015      	beq.n	8001428 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2204      	movs	r2, #4
 8001402:	4013      	ands	r3, r2
 8001404:	d006      	beq.n	8001414 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001406:	4b51      	ldr	r3, [pc, #324]	; (800154c <HAL_RCC_ClockConfig+0x1a0>)
 8001408:	685a      	ldr	r2, [r3, #4]
 800140a:	4b50      	ldr	r3, [pc, #320]	; (800154c <HAL_RCC_ClockConfig+0x1a0>)
 800140c:	21e0      	movs	r1, #224	; 0xe0
 800140e:	00c9      	lsls	r1, r1, #3
 8001410:	430a      	orrs	r2, r1
 8001412:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001414:	4b4d      	ldr	r3, [pc, #308]	; (800154c <HAL_RCC_ClockConfig+0x1a0>)
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	22f0      	movs	r2, #240	; 0xf0
 800141a:	4393      	bics	r3, r2
 800141c:	0019      	movs	r1, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	689a      	ldr	r2, [r3, #8]
 8001422:	4b4a      	ldr	r3, [pc, #296]	; (800154c <HAL_RCC_ClockConfig+0x1a0>)
 8001424:	430a      	orrs	r2, r1
 8001426:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2201      	movs	r2, #1
 800142e:	4013      	ands	r3, r2
 8001430:	d04c      	beq.n	80014cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	2b01      	cmp	r3, #1
 8001438:	d107      	bne.n	800144a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800143a:	4b44      	ldr	r3, [pc, #272]	; (800154c <HAL_RCC_ClockConfig+0x1a0>)
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	2380      	movs	r3, #128	; 0x80
 8001440:	029b      	lsls	r3, r3, #10
 8001442:	4013      	ands	r3, r2
 8001444:	d120      	bne.n	8001488 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e07a      	b.n	8001540 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	2b02      	cmp	r3, #2
 8001450:	d107      	bne.n	8001462 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001452:	4b3e      	ldr	r3, [pc, #248]	; (800154c <HAL_RCC_ClockConfig+0x1a0>)
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	2380      	movs	r3, #128	; 0x80
 8001458:	049b      	lsls	r3, r3, #18
 800145a:	4013      	ands	r3, r2
 800145c:	d114      	bne.n	8001488 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e06e      	b.n	8001540 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	2b03      	cmp	r3, #3
 8001468:	d107      	bne.n	800147a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800146a:	4b38      	ldr	r3, [pc, #224]	; (800154c <HAL_RCC_ClockConfig+0x1a0>)
 800146c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800146e:	2380      	movs	r3, #128	; 0x80
 8001470:	029b      	lsls	r3, r3, #10
 8001472:	4013      	ands	r3, r2
 8001474:	d108      	bne.n	8001488 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e062      	b.n	8001540 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800147a:	4b34      	ldr	r3, [pc, #208]	; (800154c <HAL_RCC_ClockConfig+0x1a0>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2202      	movs	r2, #2
 8001480:	4013      	ands	r3, r2
 8001482:	d101      	bne.n	8001488 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e05b      	b.n	8001540 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001488:	4b30      	ldr	r3, [pc, #192]	; (800154c <HAL_RCC_ClockConfig+0x1a0>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	2203      	movs	r2, #3
 800148e:	4393      	bics	r3, r2
 8001490:	0019      	movs	r1, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685a      	ldr	r2, [r3, #4]
 8001496:	4b2d      	ldr	r3, [pc, #180]	; (800154c <HAL_RCC_ClockConfig+0x1a0>)
 8001498:	430a      	orrs	r2, r1
 800149a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800149c:	f7ff f990 	bl	80007c0 <HAL_GetTick>
 80014a0:	0003      	movs	r3, r0
 80014a2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014a4:	e009      	b.n	80014ba <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014a6:	f7ff f98b 	bl	80007c0 <HAL_GetTick>
 80014aa:	0002      	movs	r2, r0
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	4a27      	ldr	r2, [pc, #156]	; (8001550 <HAL_RCC_ClockConfig+0x1a4>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d901      	bls.n	80014ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e042      	b.n	8001540 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014ba:	4b24      	ldr	r3, [pc, #144]	; (800154c <HAL_RCC_ClockConfig+0x1a0>)
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	220c      	movs	r2, #12
 80014c0:	401a      	ands	r2, r3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d1ec      	bne.n	80014a6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014cc:	4b1e      	ldr	r3, [pc, #120]	; (8001548 <HAL_RCC_ClockConfig+0x19c>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2201      	movs	r2, #1
 80014d2:	4013      	ands	r3, r2
 80014d4:	683a      	ldr	r2, [r7, #0]
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d211      	bcs.n	80014fe <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014da:	4b1b      	ldr	r3, [pc, #108]	; (8001548 <HAL_RCC_ClockConfig+0x19c>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2201      	movs	r2, #1
 80014e0:	4393      	bics	r3, r2
 80014e2:	0019      	movs	r1, r3
 80014e4:	4b18      	ldr	r3, [pc, #96]	; (8001548 <HAL_RCC_ClockConfig+0x19c>)
 80014e6:	683a      	ldr	r2, [r7, #0]
 80014e8:	430a      	orrs	r2, r1
 80014ea:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ec:	4b16      	ldr	r3, [pc, #88]	; (8001548 <HAL_RCC_ClockConfig+0x19c>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2201      	movs	r2, #1
 80014f2:	4013      	ands	r3, r2
 80014f4:	683a      	ldr	r2, [r7, #0]
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d001      	beq.n	80014fe <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e020      	b.n	8001540 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2204      	movs	r2, #4
 8001504:	4013      	ands	r3, r2
 8001506:	d009      	beq.n	800151c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001508:	4b10      	ldr	r3, [pc, #64]	; (800154c <HAL_RCC_ClockConfig+0x1a0>)
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	4a11      	ldr	r2, [pc, #68]	; (8001554 <HAL_RCC_ClockConfig+0x1a8>)
 800150e:	4013      	ands	r3, r2
 8001510:	0019      	movs	r1, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	68da      	ldr	r2, [r3, #12]
 8001516:	4b0d      	ldr	r3, [pc, #52]	; (800154c <HAL_RCC_ClockConfig+0x1a0>)
 8001518:	430a      	orrs	r2, r1
 800151a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800151c:	f000 f820 	bl	8001560 <HAL_RCC_GetSysClockFreq>
 8001520:	0001      	movs	r1, r0
 8001522:	4b0a      	ldr	r3, [pc, #40]	; (800154c <HAL_RCC_ClockConfig+0x1a0>)
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	091b      	lsrs	r3, r3, #4
 8001528:	220f      	movs	r2, #15
 800152a:	4013      	ands	r3, r2
 800152c:	4a0a      	ldr	r2, [pc, #40]	; (8001558 <HAL_RCC_ClockConfig+0x1ac>)
 800152e:	5cd3      	ldrb	r3, [r2, r3]
 8001530:	000a      	movs	r2, r1
 8001532:	40da      	lsrs	r2, r3
 8001534:	4b09      	ldr	r3, [pc, #36]	; (800155c <HAL_RCC_ClockConfig+0x1b0>)
 8001536:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001538:	2003      	movs	r0, #3
 800153a:	f7ff f8fb 	bl	8000734 <HAL_InitTick>
  
  return HAL_OK;
 800153e:	2300      	movs	r3, #0
}
 8001540:	0018      	movs	r0, r3
 8001542:	46bd      	mov	sp, r7
 8001544:	b004      	add	sp, #16
 8001546:	bd80      	pop	{r7, pc}
 8001548:	40022000 	.word	0x40022000
 800154c:	40021000 	.word	0x40021000
 8001550:	00001388 	.word	0x00001388
 8001554:	fffff8ff 	.word	0xfffff8ff
 8001558:	08001c40 	.word	0x08001c40
 800155c:	20000030 	.word	0x20000030

08001560 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001566:	2300      	movs	r3, #0
 8001568:	60fb      	str	r3, [r7, #12]
 800156a:	2300      	movs	r3, #0
 800156c:	60bb      	str	r3, [r7, #8]
 800156e:	2300      	movs	r3, #0
 8001570:	617b      	str	r3, [r7, #20]
 8001572:	2300      	movs	r3, #0
 8001574:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001576:	2300      	movs	r3, #0
 8001578:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800157a:	4b2d      	ldr	r3, [pc, #180]	; (8001630 <HAL_RCC_GetSysClockFreq+0xd0>)
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	220c      	movs	r2, #12
 8001584:	4013      	ands	r3, r2
 8001586:	2b0c      	cmp	r3, #12
 8001588:	d046      	beq.n	8001618 <HAL_RCC_GetSysClockFreq+0xb8>
 800158a:	d848      	bhi.n	800161e <HAL_RCC_GetSysClockFreq+0xbe>
 800158c:	2b04      	cmp	r3, #4
 800158e:	d002      	beq.n	8001596 <HAL_RCC_GetSysClockFreq+0x36>
 8001590:	2b08      	cmp	r3, #8
 8001592:	d003      	beq.n	800159c <HAL_RCC_GetSysClockFreq+0x3c>
 8001594:	e043      	b.n	800161e <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001596:	4b27      	ldr	r3, [pc, #156]	; (8001634 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001598:	613b      	str	r3, [r7, #16]
      break;
 800159a:	e043      	b.n	8001624 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	0c9b      	lsrs	r3, r3, #18
 80015a0:	220f      	movs	r2, #15
 80015a2:	4013      	ands	r3, r2
 80015a4:	4a24      	ldr	r2, [pc, #144]	; (8001638 <HAL_RCC_GetSysClockFreq+0xd8>)
 80015a6:	5cd3      	ldrb	r3, [r2, r3]
 80015a8:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80015aa:	4b21      	ldr	r3, [pc, #132]	; (8001630 <HAL_RCC_GetSysClockFreq+0xd0>)
 80015ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ae:	220f      	movs	r2, #15
 80015b0:	4013      	ands	r3, r2
 80015b2:	4a22      	ldr	r2, [pc, #136]	; (800163c <HAL_RCC_GetSysClockFreq+0xdc>)
 80015b4:	5cd3      	ldrb	r3, [r2, r3]
 80015b6:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80015b8:	68fa      	ldr	r2, [r7, #12]
 80015ba:	23c0      	movs	r3, #192	; 0xc0
 80015bc:	025b      	lsls	r3, r3, #9
 80015be:	401a      	ands	r2, r3
 80015c0:	2380      	movs	r3, #128	; 0x80
 80015c2:	025b      	lsls	r3, r3, #9
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d109      	bne.n	80015dc <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80015c8:	68b9      	ldr	r1, [r7, #8]
 80015ca:	481a      	ldr	r0, [pc, #104]	; (8001634 <HAL_RCC_GetSysClockFreq+0xd4>)
 80015cc:	f7fe fd9a 	bl	8000104 <__udivsi3>
 80015d0:	0003      	movs	r3, r0
 80015d2:	001a      	movs	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	4353      	muls	r3, r2
 80015d8:	617b      	str	r3, [r7, #20]
 80015da:	e01a      	b.n	8001612 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80015dc:	68fa      	ldr	r2, [r7, #12]
 80015de:	23c0      	movs	r3, #192	; 0xc0
 80015e0:	025b      	lsls	r3, r3, #9
 80015e2:	401a      	ands	r2, r3
 80015e4:	23c0      	movs	r3, #192	; 0xc0
 80015e6:	025b      	lsls	r3, r3, #9
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d109      	bne.n	8001600 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80015ec:	68b9      	ldr	r1, [r7, #8]
 80015ee:	4814      	ldr	r0, [pc, #80]	; (8001640 <HAL_RCC_GetSysClockFreq+0xe0>)
 80015f0:	f7fe fd88 	bl	8000104 <__udivsi3>
 80015f4:	0003      	movs	r3, r0
 80015f6:	001a      	movs	r2, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	4353      	muls	r3, r2
 80015fc:	617b      	str	r3, [r7, #20]
 80015fe:	e008      	b.n	8001612 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001600:	68b9      	ldr	r1, [r7, #8]
 8001602:	480c      	ldr	r0, [pc, #48]	; (8001634 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001604:	f7fe fd7e 	bl	8000104 <__udivsi3>
 8001608:	0003      	movs	r3, r0
 800160a:	001a      	movs	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4353      	muls	r3, r2
 8001610:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	613b      	str	r3, [r7, #16]
      break;
 8001616:	e005      	b.n	8001624 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001618:	4b09      	ldr	r3, [pc, #36]	; (8001640 <HAL_RCC_GetSysClockFreq+0xe0>)
 800161a:	613b      	str	r3, [r7, #16]
      break;
 800161c:	e002      	b.n	8001624 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800161e:	4b05      	ldr	r3, [pc, #20]	; (8001634 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001620:	613b      	str	r3, [r7, #16]
      break;
 8001622:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001624:	693b      	ldr	r3, [r7, #16]
}
 8001626:	0018      	movs	r0, r3
 8001628:	46bd      	mov	sp, r7
 800162a:	b006      	add	sp, #24
 800162c:	bd80      	pop	{r7, pc}
 800162e:	46c0      	nop			; (mov r8, r8)
 8001630:	40021000 	.word	0x40021000
 8001634:	007a1200 	.word	0x007a1200
 8001638:	08001c50 	.word	0x08001c50
 800163c:	08001c60 	.word	0x08001c60
 8001640:	02dc6c00 	.word	0x02dc6c00

08001644 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d101      	bne.n	8001656 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e042      	b.n	80016dc <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	223d      	movs	r2, #61	; 0x3d
 800165a:	5c9b      	ldrb	r3, [r3, r2]
 800165c:	b2db      	uxtb	r3, r3
 800165e:	2b00      	cmp	r3, #0
 8001660:	d107      	bne.n	8001672 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	223c      	movs	r2, #60	; 0x3c
 8001666:	2100      	movs	r1, #0
 8001668:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	0018      	movs	r0, r3
 800166e:	f7fe ffe9 	bl	8000644 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	223d      	movs	r2, #61	; 0x3d
 8001676:	2102      	movs	r1, #2
 8001678:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	3304      	adds	r3, #4
 8001682:	0019      	movs	r1, r3
 8001684:	0010      	movs	r0, r2
 8001686:	f000 f9b5 	bl	80019f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2246      	movs	r2, #70	; 0x46
 800168e:	2101      	movs	r1, #1
 8001690:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	223e      	movs	r2, #62	; 0x3e
 8001696:	2101      	movs	r1, #1
 8001698:	5499      	strb	r1, [r3, r2]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	223f      	movs	r2, #63	; 0x3f
 800169e:	2101      	movs	r1, #1
 80016a0:	5499      	strb	r1, [r3, r2]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2240      	movs	r2, #64	; 0x40
 80016a6:	2101      	movs	r1, #1
 80016a8:	5499      	strb	r1, [r3, r2]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2241      	movs	r2, #65	; 0x41
 80016ae:	2101      	movs	r1, #1
 80016b0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2242      	movs	r2, #66	; 0x42
 80016b6:	2101      	movs	r1, #1
 80016b8:	5499      	strb	r1, [r3, r2]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2243      	movs	r2, #67	; 0x43
 80016be:	2101      	movs	r1, #1
 80016c0:	5499      	strb	r1, [r3, r2]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2244      	movs	r2, #68	; 0x44
 80016c6:	2101      	movs	r1, #1
 80016c8:	5499      	strb	r1, [r3, r2]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2245      	movs	r2, #69	; 0x45
 80016ce:	2101      	movs	r1, #1
 80016d0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	223d      	movs	r2, #61	; 0x3d
 80016d6:	2101      	movs	r1, #1
 80016d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80016da:	2300      	movs	r3, #0
}
 80016dc:	0018      	movs	r0, r3
 80016de:	46bd      	mov	sp, r7
 80016e0:	b002      	add	sp, #8
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	223d      	movs	r2, #61	; 0x3d
 80016f0:	5c9b      	ldrb	r3, [r3, r2]
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d001      	beq.n	80016fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e03b      	b.n	8001774 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	223d      	movs	r2, #61	; 0x3d
 8001700:	2102      	movs	r1, #2
 8001702:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	68da      	ldr	r2, [r3, #12]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2101      	movs	r1, #1
 8001710:	430a      	orrs	r2, r1
 8001712:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a18      	ldr	r2, [pc, #96]	; (800177c <HAL_TIM_Base_Start_IT+0x98>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d00f      	beq.n	800173e <HAL_TIM_Base_Start_IT+0x5a>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	2380      	movs	r3, #128	; 0x80
 8001724:	05db      	lsls	r3, r3, #23
 8001726:	429a      	cmp	r2, r3
 8001728:	d009      	beq.n	800173e <HAL_TIM_Base_Start_IT+0x5a>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a14      	ldr	r2, [pc, #80]	; (8001780 <HAL_TIM_Base_Start_IT+0x9c>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d004      	beq.n	800173e <HAL_TIM_Base_Start_IT+0x5a>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a12      	ldr	r2, [pc, #72]	; (8001784 <HAL_TIM_Base_Start_IT+0xa0>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d111      	bne.n	8001762 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	2207      	movs	r2, #7
 8001746:	4013      	ands	r3, r2
 8001748:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	2b06      	cmp	r3, #6
 800174e:	d010      	beq.n	8001772 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2101      	movs	r1, #1
 800175c:	430a      	orrs	r2, r1
 800175e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001760:	e007      	b.n	8001772 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2101      	movs	r1, #1
 800176e:	430a      	orrs	r2, r1
 8001770:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001772:	2300      	movs	r3, #0
}
 8001774:	0018      	movs	r0, r3
 8001776:	46bd      	mov	sp, r7
 8001778:	b004      	add	sp, #16
 800177a:	bd80      	pop	{r7, pc}
 800177c:	40012c00 	.word	0x40012c00
 8001780:	40000400 	.word	0x40000400
 8001784:	40014000 	.word	0x40014000

08001788 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	691b      	ldr	r3, [r3, #16]
 8001796:	2202      	movs	r2, #2
 8001798:	4013      	ands	r3, r2
 800179a:	2b02      	cmp	r3, #2
 800179c:	d124      	bne.n	80017e8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	2202      	movs	r2, #2
 80017a6:	4013      	ands	r3, r2
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d11d      	bne.n	80017e8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2203      	movs	r2, #3
 80017b2:	4252      	negs	r2, r2
 80017b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2201      	movs	r2, #1
 80017ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	699b      	ldr	r3, [r3, #24]
 80017c2:	2203      	movs	r2, #3
 80017c4:	4013      	ands	r3, r2
 80017c6:	d004      	beq.n	80017d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	0018      	movs	r0, r3
 80017cc:	f000 f8fa 	bl	80019c4 <HAL_TIM_IC_CaptureCallback>
 80017d0:	e007      	b.n	80017e2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	0018      	movs	r0, r3
 80017d6:	f000 f8ed 	bl	80019b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	0018      	movs	r0, r3
 80017de:	f000 f8f9 	bl	80019d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2200      	movs	r2, #0
 80017e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	691b      	ldr	r3, [r3, #16]
 80017ee:	2204      	movs	r2, #4
 80017f0:	4013      	ands	r3, r2
 80017f2:	2b04      	cmp	r3, #4
 80017f4:	d125      	bne.n	8001842 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	2204      	movs	r2, #4
 80017fe:	4013      	ands	r3, r2
 8001800:	2b04      	cmp	r3, #4
 8001802:	d11e      	bne.n	8001842 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2205      	movs	r2, #5
 800180a:	4252      	negs	r2, r2
 800180c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2202      	movs	r2, #2
 8001812:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	699a      	ldr	r2, [r3, #24]
 800181a:	23c0      	movs	r3, #192	; 0xc0
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	4013      	ands	r3, r2
 8001820:	d004      	beq.n	800182c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	0018      	movs	r0, r3
 8001826:	f000 f8cd 	bl	80019c4 <HAL_TIM_IC_CaptureCallback>
 800182a:	e007      	b.n	800183c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	0018      	movs	r0, r3
 8001830:	f000 f8c0 	bl	80019b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	0018      	movs	r0, r3
 8001838:	f000 f8cc 	bl	80019d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	691b      	ldr	r3, [r3, #16]
 8001848:	2208      	movs	r2, #8
 800184a:	4013      	ands	r3, r2
 800184c:	2b08      	cmp	r3, #8
 800184e:	d124      	bne.n	800189a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	68db      	ldr	r3, [r3, #12]
 8001856:	2208      	movs	r2, #8
 8001858:	4013      	ands	r3, r2
 800185a:	2b08      	cmp	r3, #8
 800185c:	d11d      	bne.n	800189a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	2209      	movs	r2, #9
 8001864:	4252      	negs	r2, r2
 8001866:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2204      	movs	r2, #4
 800186c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	69db      	ldr	r3, [r3, #28]
 8001874:	2203      	movs	r2, #3
 8001876:	4013      	ands	r3, r2
 8001878:	d004      	beq.n	8001884 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	0018      	movs	r0, r3
 800187e:	f000 f8a1 	bl	80019c4 <HAL_TIM_IC_CaptureCallback>
 8001882:	e007      	b.n	8001894 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	0018      	movs	r0, r3
 8001888:	f000 f894 	bl	80019b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	0018      	movs	r0, r3
 8001890:	f000 f8a0 	bl	80019d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2200      	movs	r2, #0
 8001898:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	691b      	ldr	r3, [r3, #16]
 80018a0:	2210      	movs	r2, #16
 80018a2:	4013      	ands	r3, r2
 80018a4:	2b10      	cmp	r3, #16
 80018a6:	d125      	bne.n	80018f4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	2210      	movs	r2, #16
 80018b0:	4013      	ands	r3, r2
 80018b2:	2b10      	cmp	r3, #16
 80018b4:	d11e      	bne.n	80018f4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2211      	movs	r2, #17
 80018bc:	4252      	negs	r2, r2
 80018be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2208      	movs	r2, #8
 80018c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	69da      	ldr	r2, [r3, #28]
 80018cc:	23c0      	movs	r3, #192	; 0xc0
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	4013      	ands	r3, r2
 80018d2:	d004      	beq.n	80018de <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	0018      	movs	r0, r3
 80018d8:	f000 f874 	bl	80019c4 <HAL_TIM_IC_CaptureCallback>
 80018dc:	e007      	b.n	80018ee <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	0018      	movs	r0, r3
 80018e2:	f000 f867 	bl	80019b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	0018      	movs	r0, r3
 80018ea:	f000 f873 	bl	80019d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2200      	movs	r2, #0
 80018f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	691b      	ldr	r3, [r3, #16]
 80018fa:	2201      	movs	r2, #1
 80018fc:	4013      	ands	r3, r2
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d10f      	bne.n	8001922 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	2201      	movs	r2, #1
 800190a:	4013      	ands	r3, r2
 800190c:	2b01      	cmp	r3, #1
 800190e:	d108      	bne.n	8001922 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2202      	movs	r2, #2
 8001916:	4252      	negs	r2, r2
 8001918:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	0018      	movs	r0, r3
 800191e:	f7fe fd8d 	bl	800043c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	691b      	ldr	r3, [r3, #16]
 8001928:	2280      	movs	r2, #128	; 0x80
 800192a:	4013      	ands	r3, r2
 800192c:	2b80      	cmp	r3, #128	; 0x80
 800192e:	d10f      	bne.n	8001950 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	2280      	movs	r2, #128	; 0x80
 8001938:	4013      	ands	r3, r2
 800193a:	2b80      	cmp	r3, #128	; 0x80
 800193c:	d108      	bne.n	8001950 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2281      	movs	r2, #129	; 0x81
 8001944:	4252      	negs	r2, r2
 8001946:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	0018      	movs	r0, r3
 800194c:	f000 f938 	bl	8001bc0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	691b      	ldr	r3, [r3, #16]
 8001956:	2240      	movs	r2, #64	; 0x40
 8001958:	4013      	ands	r3, r2
 800195a:	2b40      	cmp	r3, #64	; 0x40
 800195c:	d10f      	bne.n	800197e <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	2240      	movs	r2, #64	; 0x40
 8001966:	4013      	ands	r3, r2
 8001968:	2b40      	cmp	r3, #64	; 0x40
 800196a:	d108      	bne.n	800197e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2241      	movs	r2, #65	; 0x41
 8001972:	4252      	negs	r2, r2
 8001974:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	0018      	movs	r0, r3
 800197a:	f000 f833 	bl	80019e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	691b      	ldr	r3, [r3, #16]
 8001984:	2220      	movs	r2, #32
 8001986:	4013      	ands	r3, r2
 8001988:	2b20      	cmp	r3, #32
 800198a:	d10f      	bne.n	80019ac <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	68db      	ldr	r3, [r3, #12]
 8001992:	2220      	movs	r2, #32
 8001994:	4013      	ands	r3, r2
 8001996:	2b20      	cmp	r3, #32
 8001998:	d108      	bne.n	80019ac <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2221      	movs	r2, #33	; 0x21
 80019a0:	4252      	negs	r2, r2
 80019a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	0018      	movs	r0, r3
 80019a8:	f000 f902 	bl	8001bb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80019ac:	46c0      	nop			; (mov r8, r8)
 80019ae:	46bd      	mov	sp, r7
 80019b0:	b002      	add	sp, #8
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80019bc:	46c0      	nop			; (mov r8, r8)
 80019be:	46bd      	mov	sp, r7
 80019c0:	b002      	add	sp, #8
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80019cc:	46c0      	nop			; (mov r8, r8)
 80019ce:	46bd      	mov	sp, r7
 80019d0:	b002      	add	sp, #8
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80019dc:	46c0      	nop			; (mov r8, r8)
 80019de:	46bd      	mov	sp, r7
 80019e0:	b002      	add	sp, #8
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80019ec:	46c0      	nop			; (mov r8, r8)
 80019ee:	46bd      	mov	sp, r7
 80019f0:	b002      	add	sp, #8
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	4a34      	ldr	r2, [pc, #208]	; (8001ad8 <TIM_Base_SetConfig+0xe4>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d008      	beq.n	8001a1e <TIM_Base_SetConfig+0x2a>
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	2380      	movs	r3, #128	; 0x80
 8001a10:	05db      	lsls	r3, r3, #23
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d003      	beq.n	8001a1e <TIM_Base_SetConfig+0x2a>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a30      	ldr	r2, [pc, #192]	; (8001adc <TIM_Base_SetConfig+0xe8>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d108      	bne.n	8001a30 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2270      	movs	r2, #112	; 0x70
 8001a22:	4393      	bics	r3, r2
 8001a24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	68fa      	ldr	r2, [r7, #12]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	4a29      	ldr	r2, [pc, #164]	; (8001ad8 <TIM_Base_SetConfig+0xe4>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d018      	beq.n	8001a6a <TIM_Base_SetConfig+0x76>
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	2380      	movs	r3, #128	; 0x80
 8001a3c:	05db      	lsls	r3, r3, #23
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d013      	beq.n	8001a6a <TIM_Base_SetConfig+0x76>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a25      	ldr	r2, [pc, #148]	; (8001adc <TIM_Base_SetConfig+0xe8>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d00f      	beq.n	8001a6a <TIM_Base_SetConfig+0x76>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a24      	ldr	r2, [pc, #144]	; (8001ae0 <TIM_Base_SetConfig+0xec>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d00b      	beq.n	8001a6a <TIM_Base_SetConfig+0x76>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a23      	ldr	r2, [pc, #140]	; (8001ae4 <TIM_Base_SetConfig+0xf0>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d007      	beq.n	8001a6a <TIM_Base_SetConfig+0x76>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a22      	ldr	r2, [pc, #136]	; (8001ae8 <TIM_Base_SetConfig+0xf4>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d003      	beq.n	8001a6a <TIM_Base_SetConfig+0x76>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a21      	ldr	r2, [pc, #132]	; (8001aec <TIM_Base_SetConfig+0xf8>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d108      	bne.n	8001a7c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	4a20      	ldr	r2, [pc, #128]	; (8001af0 <TIM_Base_SetConfig+0xfc>)
 8001a6e:	4013      	ands	r3, r2
 8001a70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	68fa      	ldr	r2, [r7, #12]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	2280      	movs	r2, #128	; 0x80
 8001a80:	4393      	bics	r3, r2
 8001a82:	001a      	movs	r2, r3
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	695b      	ldr	r3, [r3, #20]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	68fa      	ldr	r2, [r7, #12]
 8001a90:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	689a      	ldr	r2, [r3, #8]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a0c      	ldr	r2, [pc, #48]	; (8001ad8 <TIM_Base_SetConfig+0xe4>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d00b      	beq.n	8001ac2 <TIM_Base_SetConfig+0xce>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a0d      	ldr	r2, [pc, #52]	; (8001ae4 <TIM_Base_SetConfig+0xf0>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d007      	beq.n	8001ac2 <TIM_Base_SetConfig+0xce>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a0c      	ldr	r2, [pc, #48]	; (8001ae8 <TIM_Base_SetConfig+0xf4>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d003      	beq.n	8001ac2 <TIM_Base_SetConfig+0xce>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a0b      	ldr	r2, [pc, #44]	; (8001aec <TIM_Base_SetConfig+0xf8>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d103      	bne.n	8001aca <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	691a      	ldr	r2, [r3, #16]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2201      	movs	r2, #1
 8001ace:	615a      	str	r2, [r3, #20]
}
 8001ad0:	46c0      	nop			; (mov r8, r8)
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	b004      	add	sp, #16
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40012c00 	.word	0x40012c00
 8001adc:	40000400 	.word	0x40000400
 8001ae0:	40002000 	.word	0x40002000
 8001ae4:	40014000 	.word	0x40014000
 8001ae8:	40014400 	.word	0x40014400
 8001aec:	40014800 	.word	0x40014800
 8001af0:	fffffcff 	.word	0xfffffcff

08001af4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	223c      	movs	r2, #60	; 0x3c
 8001b02:	5c9b      	ldrb	r3, [r3, r2]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d101      	bne.n	8001b0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001b08:	2302      	movs	r3, #2
 8001b0a:	e047      	b.n	8001b9c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	223c      	movs	r2, #60	; 0x3c
 8001b10:	2101      	movs	r1, #1
 8001b12:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	223d      	movs	r2, #61	; 0x3d
 8001b18:	2102      	movs	r1, #2
 8001b1a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2270      	movs	r2, #112	; 0x70
 8001b30:	4393      	bics	r3, r2
 8001b32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	68fa      	ldr	r2, [r7, #12]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	68fa      	ldr	r2, [r7, #12]
 8001b44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a16      	ldr	r2, [pc, #88]	; (8001ba4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d00f      	beq.n	8001b70 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	2380      	movs	r3, #128	; 0x80
 8001b56:	05db      	lsls	r3, r3, #23
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d009      	beq.n	8001b70 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a11      	ldr	r2, [pc, #68]	; (8001ba8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d004      	beq.n	8001b70 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a10      	ldr	r2, [pc, #64]	; (8001bac <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d10c      	bne.n	8001b8a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	2280      	movs	r2, #128	; 0x80
 8001b74:	4393      	bics	r3, r2
 8001b76:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	68ba      	ldr	r2, [r7, #8]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	68ba      	ldr	r2, [r7, #8]
 8001b88:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	223d      	movs	r2, #61	; 0x3d
 8001b8e:	2101      	movs	r1, #1
 8001b90:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	223c      	movs	r2, #60	; 0x3c
 8001b96:	2100      	movs	r1, #0
 8001b98:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001b9a:	2300      	movs	r3, #0
}
 8001b9c:	0018      	movs	r0, r3
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	b004      	add	sp, #16
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	40012c00 	.word	0x40012c00
 8001ba8:	40000400 	.word	0x40000400
 8001bac:	40014000 	.word	0x40014000

08001bb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001bb8:	46c0      	nop			; (mov r8, r8)
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	b002      	add	sp, #8
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001bc8:	46c0      	nop			; (mov r8, r8)
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	b002      	add	sp, #8
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <memset>:
 8001bd0:	0003      	movs	r3, r0
 8001bd2:	1882      	adds	r2, r0, r2
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d100      	bne.n	8001bda <memset+0xa>
 8001bd8:	4770      	bx	lr
 8001bda:	7019      	strb	r1, [r3, #0]
 8001bdc:	3301      	adds	r3, #1
 8001bde:	e7f9      	b.n	8001bd4 <memset+0x4>

08001be0 <__libc_init_array>:
 8001be0:	b570      	push	{r4, r5, r6, lr}
 8001be2:	2600      	movs	r6, #0
 8001be4:	4c0c      	ldr	r4, [pc, #48]	; (8001c18 <__libc_init_array+0x38>)
 8001be6:	4d0d      	ldr	r5, [pc, #52]	; (8001c1c <__libc_init_array+0x3c>)
 8001be8:	1b64      	subs	r4, r4, r5
 8001bea:	10a4      	asrs	r4, r4, #2
 8001bec:	42a6      	cmp	r6, r4
 8001bee:	d109      	bne.n	8001c04 <__libc_init_array+0x24>
 8001bf0:	2600      	movs	r6, #0
 8001bf2:	f000 f819 	bl	8001c28 <_init>
 8001bf6:	4c0a      	ldr	r4, [pc, #40]	; (8001c20 <__libc_init_array+0x40>)
 8001bf8:	4d0a      	ldr	r5, [pc, #40]	; (8001c24 <__libc_init_array+0x44>)
 8001bfa:	1b64      	subs	r4, r4, r5
 8001bfc:	10a4      	asrs	r4, r4, #2
 8001bfe:	42a6      	cmp	r6, r4
 8001c00:	d105      	bne.n	8001c0e <__libc_init_array+0x2e>
 8001c02:	bd70      	pop	{r4, r5, r6, pc}
 8001c04:	00b3      	lsls	r3, r6, #2
 8001c06:	58eb      	ldr	r3, [r5, r3]
 8001c08:	4798      	blx	r3
 8001c0a:	3601      	adds	r6, #1
 8001c0c:	e7ee      	b.n	8001bec <__libc_init_array+0xc>
 8001c0e:	00b3      	lsls	r3, r6, #2
 8001c10:	58eb      	ldr	r3, [r5, r3]
 8001c12:	4798      	blx	r3
 8001c14:	3601      	adds	r6, #1
 8001c16:	e7f2      	b.n	8001bfe <__libc_init_array+0x1e>
 8001c18:	08001c70 	.word	0x08001c70
 8001c1c:	08001c70 	.word	0x08001c70
 8001c20:	08001c74 	.word	0x08001c74
 8001c24:	08001c70 	.word	0x08001c70

08001c28 <_init>:
 8001c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c2a:	46c0      	nop			; (mov r8, r8)
 8001c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c2e:	bc08      	pop	{r3}
 8001c30:	469e      	mov	lr, r3
 8001c32:	4770      	bx	lr

08001c34 <_fini>:
 8001c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c36:	46c0      	nop			; (mov r8, r8)
 8001c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c3a:	bc08      	pop	{r3}
 8001c3c:	469e      	mov	lr, r3
 8001c3e:	4770      	bx	lr
